/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 *
 * $XORP$
 */


#ifndef __XRL_INTERFACES_TEST_FEA_IFMGR_MIRROR_BASE_HH__
#define __XRL_INTERFACES_TEST_FEA_IFMGR_MIRROR_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlTestFeaIfmgrMirrorTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_cmd_map.hh"

class XrlTestFeaIfmgrMirrorTargetBase {
protected:
    XrlCmdMap* _cmds;

public:
    XrlTestFeaIfmgrMirrorTargetBase(XrlCmdMap* cmds) : _cmds(cmds) { add_handlers(); }
    virtual ~XrlTestFeaIfmgrMirrorTargetBase() { remove_handlers(); }

    inline const string& name() const { return _cmds->name(); }
    inline const char* version() const { return "test_fea_ifmgr_mirror/0.0"; }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Register remote mirror of interface state.
     */
    virtual XrlCmdError ifmgr_replicator_0_1_register_ifmgr_mirror(
	// Input values, 
	const string&	clientname) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Register remote mirror of interface state.
     */
    virtual XrlCmdError ifmgr_replicator_0_1_unregister_ifmgr_mirror(
	// Input values, 
	const string&	clientname) = 0;

private:
    const XrlCmdError handle_ifmgr_replicator_0_1_register_ifmgr_mirror(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ifmgr_replicator_0_1_unregister_ifmgr_mirror(const XrlArgs& in, XrlArgs* out);

    void add_handlers()
    {
	if (_cmds->add_handler("ifmgr_replicator/0.1/register_ifmgr_mirror", 
	    callback(this, &XrlTestFeaIfmgrMirrorTargetBase::handle_ifmgr_replicator_0_1_register_ifmgr_mirror)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://test_fea_ifmgr_mirror/ifmgr_replicator/0.1/register_ifmgr_mirror");
	}
	if (_cmds->add_handler("ifmgr_replicator/0.1/unregister_ifmgr_mirror", 
	    callback(this, &XrlTestFeaIfmgrMirrorTargetBase::handle_ifmgr_replicator_0_1_unregister_ifmgr_mirror)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://test_fea_ifmgr_mirror/ifmgr_replicator/0.1/unregister_ifmgr_mirror");
	}
	_cmds->finalize();
    }

    void remove_handlers()
    {
	_cmds->remove_handler("ifmgr_replicator/0.1/register_ifmgr_mirror");
	_cmds->remove_handler("ifmgr_replicator/0.1/unregister_ifmgr_mirror");
    }
};

#endif /* __XRL_INTERFACES_TEST_FEA_IFMGR_MIRROR_BASE_HH__ */
