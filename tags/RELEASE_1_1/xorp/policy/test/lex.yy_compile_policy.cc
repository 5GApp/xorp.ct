#define yy_create_buffer yy_compile_policy_create_buffer
#define yy_delete_buffer yy_compile_policy_delete_buffer
#define yy_scan_buffer yy_compile_policy_scan_buffer
#define yy_scan_string yy_compile_policy_scan_string
#define yy_scan_bytes yy_compile_policy_scan_bytes
#define yy_flex_debug yy_compile_policy_flex_debug
#define yy_init_buffer yy_compile_policy_init_buffer
#define yy_flush_buffer yy_compile_policy_flush_buffer
#define yy_load_buffer_state yy_compile_policy_load_buffer_state
#define yy_switch_to_buffer yy_compile_policy_switch_to_buffer
#define yyin yy_compile_policyin
#define yyleng yy_compile_policyleng
#define yylex yy_compile_policylex
#define yyout yy_compile_policyout
#define yyrestart yy_compile_policyrestart
#define yytext yy_compile_policytext

#line 19 "lex.yy_compile_policy.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 * $FreeBSD: src/usr.bin/lex/flex.skl,v 1.8 2004/01/06 19:03:44 nectar Exp $
 */

#if defined(__FreeBSD__)
#include <sys/cdefs.h>
#else
#define __unused
#endif

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) __unused;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 29
#define YY_END_OF_BUFFER 30
static yyconst short int yy_accept[709] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       30,   28,   27,   26,    1,   28,   28,   28,   28,   25,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
        2,    3,   14,   13,    5,    6,    8,    9,   11,   12,
       27,    0,    0,    0,    0,    0,    0,    0,   17,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   14,
        5,    8,   11,    0,    0,    0,    0,    0,    0,   17,
        0,    0,   17,   17,   17,   17,   24,   21,   24,   24,
       24,   24,   24,   24,   24,    0,    0,    0,    0,    0,
        0,    0,    0,   17,   17,   17,   17,   18,   18,    0,

       17,    0,   17,   17,   17,   17,   24,   24,   24,   24,
       24,   24,   24,   19,    0,    0,    0,    0,    0,    0,
       17,   17,    0,   17,   17,   17,   17,   18,   18,   18,
        0,    0,    0,   17,   17,   17,   17,   17,   17,   17,
       24,    0,   24,   24,   24,   24,    0,    0,    0,    0,
        0,    0,    0,    0,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   18,    0,    0,    0,    0,
        0,   17,    0,   17,    0,   17,   17,   17,   17,   24,
        7,   23,   22,   24,   24,   15,   15,   15,    0,    0,
        0,   17,   17,    0,   17,   17,   17,   17,   17,   17,

        0,   17,   17,   17,   17,    0,    0,    0,    0,    0,
        0,    0,   17,   17,   17,   17,   17,   17,   17,    0,
        0,    0,    0,   15,   15,   15,   15,    0,    0,    0,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   17,    0,
       17,    0,   17,   17,   17,   17,   10,    0,    4,   16,
       16,   16,   15,    0,    0,   17,   17,    0,   17,   17,
       17,   17,   17,   17,    0,   17,   17,   17,   17,   17,
       17,    0,   17,   17,   17,   17,   17,   17,   17,    0,

        0,    0,    0,    0,    0,    0,    0,   17,   17,   17,
       17,   17,   17,   17,    0,    0,    0,    0,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   17,    0,   17,
        0,   17,   17,   17,   17,    0,    0,    0,   17,   17,
        0,   17,   17,   17,   17,   17,   17,    0,   17,   17,
       17,   17,   17,   17,    0,   17,   17,   17,   17,   17,
       17,    0,   17,   17,   17,   17,   17,   17,   17,   17,

        0,    0,    0,    0,    0,    0,    0,    0,   17,   17,
       17,   17,   17,   17,   17,    0,    0,    0,    0,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   17,    0,   17,    0,   17,
       17,   17,   17,    0,    0,    0,    0,    0,   17,    0,
       17,    0,   17,   17,   17,   17,   17,   17,    0,   17,
       17,   17,   17,   17,   17,    0,   17,   17,   17,   17,

       17,   17,    0,   17,   17,   17,   17,   17,   17,    0,
       17,   17,   17,   17,   17,   17,   17,   17,    0,    0,
        0,    0,    0,    0,    0,    0,   17,   17,   17,   17,
       17,   17,   17,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   17,    0,   17,
        0,   17,   17,   17,   17,    0,    0,    0,    0,    0,
        0,   17,   17,    0,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,    0,
        0,    0,    0,    0,    0,    0,    0,   17,   17,   17,
       17,    0,    0,    0,    0,    0,    0,    0,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   17,
       17,   20,    0,    0,    0,    0,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,    0,    0,    0,
        0,    0,   17,    0,    0,    0,    0,    0,   17,   17,
       17,   17,    0,    0,    0,    0,    0,   17,   17,   17,
       17,    0,   17,   17,   17,   17,    0,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   15,   15,   16,   17,   18,    1,
        1,    1,    1,    1,   19,   19,   19,   19,   20,   19,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   22,   23,   21,   21,   21,   21,   21,   21,
        1,    1,    1,    1,   24,    1,   25,   19,   26,   27,

       28,   19,   21,   21,   29,   21,   21,   30,   31,   32,
       33,   34,   21,   35,   36,   37,   38,   21,   21,   39,
       40,   21,   41,    1,   42,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[43] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    6,    1,    7,    7,
        1,    1,    1,    1,    7,    7,    7,    7,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    8
    } ;

static yyconst short int yy_base[936] =
    {   0,
        0,    0, 2216, 2215, 2158, 2157, 2156, 2155, 2152, 2139,
     2179, 3736,   41, 3736, 3736,   39,   59,   67, 2160, 3736,
       73,  105, 2155, 2148, 2126, 2114, 2121, 2118, 2115, 2107,
     3736, 3736,    0, 3736,    0, 3736,    0, 3736,    0, 3736,
       58,  117,  127, 2116, 2114,  147,  133,   40,  156,  176,
        0, 2107, 2092, 2092, 2076, 2075, 2078, 2069, 2069,    0,
        0,    0,    0, 2081,  198, 2080,  128,  199, 2069,  209,
      223, 2075,  234,  254,  262,  269,  278,    0, 2053, 2034,
     2036, 2035, 2038, 2031, 2034,  168, 2057, 2041,  292, 2040,
     2029, 2028, 2025,  302,  322,  269,  331,    0,  188,  222,

      342,  362,  375,  384,  135,  394, 2012, 1994, 2022, 1990,
     1989, 1997, 1996,    0, 1980,  405, 1979, 1978, 1967, 1966,
      414,  436,  456,  396,  476,  158,  486, 3736,    0, 1966,
     1974,  497, 1973,  488,  507,  518,  538,  331,  547,  549,
     1936, 1922, 1925, 1924, 1917, 1928,  246, 1936, 1935,  552,
     1934, 1923, 1920, 1906,  562,  582,  396,  591,  593,  595,
      606,  626,  488,  635,  637, 3736,  291, 1897, 1892,  640,
     1891,  640,  314,  651,  671,  684,  693,  178,  703, 1893,
     3736,    0,    0, 1887, 1888, 1871,  713, 1870, 1870, 1859,
     1856,  722,  744,  764,  777,  786,  211,  796,  797,  808,

      828,  841,  850,  223,  860, 1852,  871, 1833, 1828, 1827,
      881, 1826,  862,  891,  902,  922,  507,  931,  933, 1788,
     1792, 1774,  942, 1806, 1805,  951, 1804, 1792, 1778, 1759,
      961,  981,  703,  990,  992,  994, 1005, 1025,  797, 1034,
     1036, 1038, 1040, 1051, 1071,  862, 1080, 1082,  354, 1764,
     1763, 1085, 1762,  375, 1758, 1757, 1087, 1744, 1087,  426,
     1098, 1118, 1131, 1140,  269, 1150, 3736, 1713, 3736,  448,
      468, 3736, 1741, 1731, 1728, 1160, 1182, 1202, 1215, 1224,
      280, 1234, 1235, 1246, 1266, 1279, 1288,  331, 1298, 1299,
     1310, 1330, 1343, 1352,  364, 1362, 1721, 1372, 1720, 1720,

     1719, 1382, 1716, 1715, 1704, 1392, 1703, 1402, 1404, 1415,
     1435,  891, 1444, 1446, 1667, 1670, 1669, 1668, 1457, 1477,
      933, 1486, 1488, 1490, 1501, 1521,  951, 1530, 1532, 1534,
     1536, 1547, 1567, 1150, 1576, 1578, 1580, 1582, 1593, 1613,
     1235, 1622, 1624, 1673, 1672, 1627, 1659,  530, 1659, 1658,
     1629, 1657,  551, 1654, 1641, 1631, 1630, 1632,  574, 1643,
     1663, 1676, 1685,  416, 1695, 1597, 1616, 1600, 1705, 1727,
     1747, 1760, 1769,  458, 1779, 1780, 1791, 1811, 1824, 1833,
      507, 1843, 1844, 1855, 1875, 1888, 1897,  589, 1907, 1908,
     1919, 1939, 1952, 1961,  591, 1971, 1608, 1607, 1981, 1606,

     1604, 1591, 1991, 1589, 1587, 1585, 2001, 1584, 2011, 2013,
     2024, 2044, 1299, 2053, 2055, 1543, 1553, 1552, 2064, 2086,
     2106, 1362, 2115, 2117, 2119, 2130, 2150, 1404, 2159, 2161,
     2163, 2165, 2176, 2196, 1446, 2205, 2207, 2209, 2211, 2222,
     2242, 1695, 2251, 2253, 2255, 2257, 2268, 2288, 1780, 2297,
     2299, 1560, 1557, 2302, 1544,  618, 1543, 1541, 2304, 1539,
      640, 1538, 1518, 2306, 1517, 2307,  663, 2318, 2338, 2351,
     2360,  673, 2370, 1492, 1505, 2381, 2401, 1844, 1511, 1489,
     2411,    0, 2372, 2431,  678, 2441, 2442, 2453,    0, 2466,
     2475,  703, 2485, 2486, 2497,    0, 2510, 2519,  724, 2529,

     2530, 2541,    0, 2554, 2563,  728, 2573, 2574, 2585,    0,
     2598, 2607,  730, 2617, 1496, 1494, 2627, 1493, 1493, 1492,
     2637, 1474, 1473, 1472, 2647, 1471, 2657, 2659, 2670, 2690,
     1908, 2699, 2701, 1447, 1445,  756, 2712, 1422, 1421, 2732,
      766, 1383, 1429, 2703, 2742, 1428, 2744, 2746, 2748, 1425,
     2750, 2761, 2763, 1412, 2765, 2767, 2769, 1370, 2780, 2782,
     2784, 1369, 2786, 1351, 1346, 2790, 1345,  777, 1345, 1341,
     2793, 1340,  820, 1327, 1326, 2795, 1325, 2787,  841, 2805,
        0, 2818, 2827,  830, 2837, 1299, 1321, 2848, 1307, 1992,
     2638, 1287, 1282, 2839, 1281, 2857, 1280, 2858, 1276, 2859,

     1275, 2860, 1262, 2861, 1261, 1260, 1259, 2871, 1256, 1243,
     1224, 2881, 1219, 1218, 1217, 2891, 1213, 2901, 2903, 1211,
     2905, 1169,  914, 1198, 1197, 2908, 1196, 1183, 1176, 1175,
     1174, 1173, 1170, 1169, 1158, 1157, 1139, 2911, 1134,  973,
     1134, 1133, 2914, 1129,  994, 1128, 1115, 2918, 1114, 2920,
     1112, 3736, 1112, 2931, 1109, 1091, 1088, 1085, 1083, 1067,
     1061, 1048, 1046, 1044, 1042, 2940, 1041, 1022, 1016, 2950,
     1003, 1001,  998, 1017,  978,  972, 2960,  942,  918,  912,
     2962,  899, 1063,  899,  882, 2964,  850,  824,  818, 2973,
      804,  786,  760,  754, 2982,  692,  688,  667,  661, 2991,

      645,  638,  622, 2993,  616,  603,  601, 3736, 3009, 3017,
     3025, 3033, 3041, 3049, 3056, 3063,  581, 3066, 3069, 3074,
     3077, 3080, 3083,  575, 3087,  560, 3092, 3093, 3096, 3100,
      558,  553, 3104, 3109, 3112, 3113, 3116, 3120,  537, 3125,
     3128, 3131, 3135,  531, 3140, 3141, 3144, 3148, 3153, 3157,
      475, 3162,  449, 3164, 3168, 3170, 3171, 3174, 3178, 3182,
     3187, 3190, 3193, 3196, 3199, 3203, 3207, 3208, 3211, 3215,
     3220, 3224, 3229, 3233,  433, 3238,  398, 3241,  386, 3243,
     3246, 3249, 3253, 3257, 3261, 3265, 3267, 3270, 3273, 3276,
     3279, 3282, 3286, 3289, 3292, 3296, 3301, 3305, 3310, 3314,

     3319, 3323, 3327,  361, 3330,  355, 3333,  321, 3335, 3338,
     3341, 3345, 3349, 3353, 3357, 3361, 3363, 3366, 3369, 3372,
     3375, 3378, 3382, 3385, 3389, 3394, 3398, 3403, 3407, 3412,
     3416, 3421, 3425, 3429,  315, 3432,  253, 3435,  247, 3437,
     3440, 3444, 3447, 3450, 3454, 3457, 3461, 3464, 3468, 3471,
     3475, 3478, 3482, 3486, 3488, 3491, 3494, 3497, 3500, 3503,
     3507,  210, 3510, 3513, 3517, 3522, 3526, 3531, 3535, 3540,
     3544, 3549, 3553, 3558, 3562, 3566,  195, 3569,  175, 3572,
      124, 3573, 3577, 3582, 3585, 3588, 3592, 3596, 3600, 3604,
     3608, 3612, 3616, 3620, 3622, 3625, 3628, 3631, 3634, 3637,

     3641,  118, 3646, 3648, 3652, 3656, 3660, 3664, 3668, 3672,
     3676,   86, 3679,   58, 3682, 3684, 3689, 3692, 3694, 3698,
     3700, 3703, 3706, 3708,   56, 3713, 3715,   39, 3718, 3720,
     3722, 3724, 3726, 3728, 3730
    } ;

static yyconst short int yy_def[936] =
    {   0,
      708,    1,  709,  709,  710,  710,  711,  711,  712,  712,
      708,  708,  708,  708,  708,  708,   16,   17,  708,  708,
      708,   21,   22,   21,   21,   21,   22,   22,   22,   22,
      708,  708,  713,  708,  714,  708,  715,  708,  716,  708,
      708,  717,  708,  718,  719,   43,   46,  719,  708,   21,
       22,   22,   50,   50,   22,   22,   22,   22,   22,  713,
      714,  715,  716,  720,  708,  721,  722,  722,  723,  708,
      722,  724,  708,   73,   74,  725,   50,   22,   22,   22,
       22,   22,   22,   22,   22,  726,  721,  727,  727,  708,
      708,  728,  729,  708,   94,   95,  730,  731,  731,  732,

      708,  708,  733,  101,  104,  733,   22,   22,   22,   22,
       22,   22,   22,   22,  734,  708,  735,  708,  736,  737,
      708,  708,  708,  738,  122,  125,  738,  708,  739,  739,
      740,  708,  741,  742,  742,  708,  136,  137,  743,  742,
       22,  708,   22,   22,   22,   22,  744,  735,  745,  745,
      708,  708,  746,  747,  708,  155,  156,  748,  749,  749,
      708,  161,  162,  750,  749,  708,  751,  741,  752,  752,
      708,  708,  753,  708,  708,  754,  174,  177,  754,   22,
      708,   22,   22,   22,   22,  755,  708,  756,  708,  757,
      758,  708,  708,  708,  759,  193,  196,  759,  708,  708,

      708,  760,  200,  203,  760,  761,  708,  762,  708,  763,
      708,  764,  765,  765,  708,  215,  216,  766,  765,  708,
      708,  708,  708,  756,  767,  767,  708,  708,  768,  769,
      708,  231,  232,  770,  771,  771,  708,  237,  238,  772,
      771,  773,  773,  708,  244,  245,  774,  773,  775,  762,
      776,  776,  708,  777,  764,  778,  778,  708,  708,  779,
      708,  708,  780,  261,  264,  780,  708,  708,  708,  223,
      708,  708,  708,  781,  782,  708,  708,  708,  783,  277,
      280,  783,  708,  708,  708,  784,  284,  287,  784,  708,
      708,  708,  785,  291,  294,  785,  786,  708,  787,  708,

      788,  708,  789,  708,  790,  708,  791,  792,  792,  708,
      310,  311,  793,  792,  708,  708,  794,  795,  708,  319,
      320,  796,  797,  797,  708,  325,  326,  798,  797,  799,
      799,  708,  332,  333,  800,  799,  801,  801,  708,  339,
      340,  802,  801,  787,  803,  803,  708,  804,  789,  805,
      805,  708,  806,  791,  807,  807,  708,  708,  808,  708,
      708,  809,  360,  363,  809,  708,  810,  811,  708,  708,
      708,  812,  370,  373,  812,  708,  708,  708,  813,  377,
      380,  813,  708,  708,  708,  814,  384,  387,  814,  708,
      708,  708,  815,  391,  394,  815,  708,  816,  708,  817,

      708,  818,  708,  819,  708,  820,  708,  821,  822,  822,
      708,  411,  412,  823,  822,  708,  708,  824,  708,  708,
      420,  421,  825,  826,  826,  708,  426,  427,  827,  826,
      828,  828,  708,  433,  434,  829,  828,  830,  830,  708,
      440,  441,  831,  830,  832,  832,  708,  447,  448,  833,
      832,  817,  834,  834,  708,  835,  819,  836,  836,  708,
      837,  821,  838,  838,  708,  708,  839,  708,  708,  840,
      468,  471,  840,  708,  841,  708,  476,  477,  842,  843,
      708,  844,  845,  481,  484,  845,  708,  708,  846,  847,
      488,  491,  847,  708,  708,  848,  849,  495,  498,  849,

      708,  708,  850,  851,  502,  505,  851,  708,  708,  852,
      853,  509,  512,  853,  708,  854,  708,  855,  708,  856,
      708,  857,  708,  858,  708,  859,  860,  860,  708,  529,
      530,  861,  860,  708,  708,  862,  708,  863,  864,  537,
      540,  864,  865,  866,  866,  867,  866,  868,  868,  869,
      868,  870,  870,  871,  870,  872,  872,  873,  872,  874,
      874,  875,  874,  855,  876,  876,  708,  877,  857,  878,
      878,  708,  879,  859,  880,  880,  708,  708,  881,  708,
      882,  883,  580,  583,  883,  708,  884,  708,  885,  886,
      886,  887,  708,  886,  888,  708,  889,  708,  890,  708,

      891,  708,  892,  708,  893,  708,  894,  708,  895,  708,
      896,  708,  897,  708,  898,  708,  899,  900,  900,  901,
      900,  708,  902,  885,  903,  903,  708,  708,  904,  905,
      906,  907,  908,  909,  910,  895,  911,  911,  708,  912,
      897,  913,  913,  708,  914,  899,  915,  915,  708,  708,
      916,  708,  917,  708,  918,  708,  919,  708,  708,  708,
      708,  708,  708,  708,  920,  708,  921,  708,  922,  708,
      923,  708,  924,  925,  918,  926,  926,  708,  921,  927,
      927,  708,  928,  923,  929,  929,  708,  708,  930,  708,
      931,  708,  708,  932,  708,  933,  708,  931,  934,  934,

      708,  933,  935,  935,  708,  708,  708,    0,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,

      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,

      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708
    } ;

static yyconst short int yy_nxt[3779] =
    {   0,
       12,   13,   14,   13,   15,   12,   12,   12,   16,   16,
       17,   18,   18,   18,   18,   18,   19,   20,   21,   21,
       22,   23,   22,   12,   24,   21,   25,   26,   27,   22,
       22,   22,   22,   28,   22,   29,   30,   22,   22,   22,
       31,   32,   41,  696,   41,   42,   42,   43,   43,   43,
       43,   43,   43,   43,   43,   44,   44,   45,   45,   41,
      691,   41,  671,   45,   45,   45,   45,   46,   46,   46,
       46,   46,   47,   48,   48,   48,   48,   48,   48,   48,
       48,   50,   50,   50,   50,   50,   50,   50,   50,   44,
      667,   50,   50,   51,   51,   51,   51,   50,   50,   50,

       50,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,  708,  655,   51,   51,   64,   64,   65,  617,   51,
       51,   51,   51,   42,   42,   67,   67,   67,   67,   67,
       67,   67,   67,   44,   44,   68,   68,   68,   68,  135,
      135,   68,   68,   68,   68,   71,   71,   71,   71,   71,
       71,   71,   71,   72,   73,   73,   74,   75,   75,   75,
       75,   75,  160,  160,   76,   76,  115,  115,  116,  613,
       76,   76,   76,   76,   77,   77,   77,   77,   77,   77,
       77,   77,  214,  214,   77,   77,  129,  129,  130,  609,

       77,   77,   77,   77,   86,  708,   88,   88,   88,   88,
       88,   89,   90,   90,  589,   44,   72,   94,   94,   95,
       96,   96,   96,   96,   96,  236,  236,   97,   97,   42,
      131,  131,  132,   97,   97,   97,   97,  243,  243,   44,
      100,   72,  101,  101,  101,  101,  101,  101,  101,  101,
      102,  526,  103,  103,  186,  186,  187,  522,  103,  103,
      103,  103,  104,  104,  104,  104,  104,  105,  106,  106,
      106,  106,  106,  106,  106,  106,   72,  127,  127,  127,
      127,  127,  127,  309,  309,  102,  107,  107,  107,  107,
      107,  107,  107,  107,  324,  324,  107,  107,   86,  206,

      206,  207,  107,  107,  107,  107,  708,  708,  100,   72,
      122,  122,  122,  122,  122,  122,  122,  122,  123,  518,
      124,  124,  210,  210,  211,  408,  124,  124,  124,  124,
      125,  125,  125,  125,  125,  126,  127,  127,   72,  179,
      179,  179,  179,  179,  179,  331,  331,  123,  100,   72,
      134,  134,  134,  134,  134,  134,  134,  134,  102,  404,
      135,  135,  297,  297,  298,  400,  135,  135,  135,  135,
      136,  136,  137,  138,  138,  138,  138,  138,  338,  338,
      139,  139,   72,  301,  301,  302,  139,  139,  139,  139,
      307,  102,  140,  140,  140,  140,  140,  140,  140,  140,

      100,   72,  303,   72,  198,  198,  198,  198,  198,  198,
      102,  147,  123,  149,  149,  149,  149,  149,  150,  151,
      151,   72,  155,  155,  156,  157,  157,  157,  157,  157,
      410,  410,  158,  158,  305,  305,  306,  299,  158,  158,
      158,  158,  100,   72,  159,  159,  159,  159,  159,  159,
      159,  159,  123,  212,  160,  160,  272,  272,  272,  272,
      160,  160,  160,  160,  161,  161,  162,  163,  163,  163,
      163,  163,  425,  425,  164,  164,  272,  272,  272,  208,
      164,  164,  164,  164,  165,  165,  165,  165,  165,  165,
      165,  165,  100,   72,  100,   72,  205,  205,  205,  205,

      205,  205,  123,  167,  102,  169,  169,  169,  169,  169,
      170,  171,  171,  708,   72,  266,  266,  266,  266,  266,
      266,  432,  432,  102,  173,   72,  174,  174,  174,  174,
      174,  174,  174,  174,  175,  188,  176,  176,  398,  398,
      399,  166,  176,  176,  176,  176,  177,  177,  177,  177,
      177,  178,  179,  179,   72,  100,   72,  133,  147,  402,
      402,  403,  128,  175,  117,  102,  708,  708,  100,   72,
      193,  193,  193,  193,  193,  193,  193,  193,  194,   98,
      195,  195,  406,  406,  407,   66,  195,  195,  195,  195,
      196,  196,  196,  196,  196,  197,  198,  198,   72,  100,

       72,  708,   72,  439,  439,  446,  446,  194,   72,  123,
       72,  123,  173,   72,  200,  200,  200,  200,  200,  200,
      200,  200,  201,   72,  202,  202,  516,  516,  517,   72,
      202,  202,  202,  202,  203,  203,  203,  203,  203,  204,
      205,  205,   72,  100,   72,   72,  167,   72,  520,  520,
      521,  201,   72,  123,  708,  708,  102,  173,   72,  213,
      213,  213,  213,  213,  213,  213,  213,  175,   72,  214,
      214,  524,  524,  525,   72,  214,  214,  214,  214,  215,
      215,  216,  217,  217,  217,  217,  217,  528,  528,  218,
      218,   72,  545,  545,  683,  218,  218,  218,  218,   72,

      175,  219,  219,  219,  219,  219,  219,  219,  219,  173,
       72,  282,  282,  282,  282,  282,  282,  549,  549,  175,
      223,  225,  225,  225,  225,  225,  226,  227,  227,   72,
      231,  231,  232,  233,  233,  233,  233,  233,  553,  553,
      234,  234,  557,  557,  561,  561,  234,  234,  234,  234,
      100,   72,  235,  235,  235,  235,  235,  235,  235,  235,
      194,   72,  236,  236,  587,  587,  588,   72,  236,  236,
      236,  236,  237,  237,  238,  239,  239,  239,  239,  239,
      591,  591,  240,  240,   72,  607,  607,  608,  240,  240,
      240,  240,  674,  194,  241,  241,  241,  241,  241,  241,

      241,  241,  100,   72,   72,  289,  289,  289,  289,  289,
      289,   72,  194,  123,  173,   72,  242,  242,  242,  242,
      242,  242,  242,  242,  201,   72,  243,  243,  611,  611,
      612,   72,  243,  243,  243,  243,  244,  244,  245,  246,
      246,  246,  246,  246,  619,  619,  247,  247,   72,  615,
      615,  616,  247,  247,  247,  247,  683,  201,  248,  248,
      248,  248,  248,  248,  248,  248,  173,   72,  173,   72,
      296,  296,  296,  296,  296,  296,  201,  249,  175,  251,
      251,  251,  251,  251,  252,  253,  253,  254,  683,  256,
      256,  256,  256,  256,  257,  258,  258,  708,   72,  365,

      365,  365,  365,  365,  365,  683,   72,  175,  260,   72,
      261,  261,  261,  261,  261,  261,  261,  261,  262,   72,
      263,  263,  653,  653,  654,   72,  263,  263,  263,  263,
      264,  264,  264,  264,  264,  265,  266,  266,   72,  173,
       72,  375,  375,  375,  375,  375,  375,  262,  674,  175,
      270,  270,  270,  271,  272,  272,  272,  272,  223,  382,
      382,  382,  382,  382,  382,  708,  708,  100,   72,  277,
      277,  277,  277,  277,  277,  277,  277,  278,  674,  279,
      279,  665,  665,  666,  674,  279,  279,  279,  279,  280,
      280,  280,  280,  280,  281,  282,  282,   72,  100,   72,

      708,   72,  669,  669,  670,   72,  278,  645,  194,  683,
      194,  173,   72,  284,  284,  284,  284,  284,  284,  284,
      284,  285,  683,  286,  286,  689,  689,  690,  640,  286,
      286,  286,  286,  287,  287,  287,  287,  287,  288,  289,
      289,   72,  100,   72,  173,   72,  708,   72,   72,   72,
      285,   72,  194,   72,  201,   72,  201,  260,   72,  291,
      291,  291,  291,  291,  291,  291,  291,  292,   72,  293,
      293,  694,  694,  695,   72,  293,  293,  293,  293,  294,
      294,  294,  294,  294,  295,  296,  296,   72,  173,   72,
       72,  249,   72,  254,   72,   72,  292,  623,  201,  708,

      708,  708,  708,  175,  260,   72,  308,  308,  308,  308,
      308,  308,  308,  308,  262,  674,  309,  309,  674,   72,
      645,  645,  309,  309,  309,  309,  310,  310,  311,  312,
      312,  312,  312,  312,  645,  640,  313,  313,   72,  640,
      640,   72,  313,  313,  313,  313,   72,  262,  314,  314,
      314,  314,  314,  314,  314,  314,  260,   72,  389,  389,
      389,  389,  389,  389,   72,   72,  262,   72,  319,  319,
      320,  321,  321,  321,  321,  321,   72,   72,  322,  322,
       72,   72,   72,   72,  322,  322,  322,  322,  100,   72,
      323,  323,  323,  323,  323,  323,  323,  323,  278,  538,

      324,  324,  623,  623,  623,  652,  324,  324,  324,  324,
      325,  325,  326,  327,  327,  327,  327,  327,   72,  645,
      328,  328,   72,  645,  573,  640,  328,  328,  328,  328,
      640,  278,  329,  329,  329,  329,  329,  329,  329,  329,
      100,   72,   72,  396,  396,  396,  396,  396,  396,  568,
      278,  194,  173,   72,  330,  330,  330,  330,  330,  330,
      330,  330,  285,   72,  331,  331,   72,   72,   72,   72,
      331,  331,  331,  331,  332,  332,  333,  334,  334,  334,
      334,  334,   72,   72,  335,  335,   72,   72,   72,   72,
      335,  335,  335,  335,   72,  285,  336,  336,  336,  336,

      336,  336,  336,  336,  173,   72,   72,  473,  473,  473,
      473,  473,  473,  623,  285,  201,  260,   72,  337,  337,
      337,  337,  337,  337,  337,  337,  292,  623,  338,  338,
      622,  573,  573,  573,  338,  338,  338,  338,  339,  339,
      340,  341,  341,  341,  341,  341,  568,  568,  342,  342,
       72,  568,   72,   72,  342,  342,  342,  342,   72,  292,
      343,  343,  343,  343,  343,  343,  343,  343,  260,   72,
      486,  486,  486,  486,  486,  486,   72,   72,  292,   72,
      345,  345,  345,  345,  345,  346,  347,  347,  348,  536,
      350,  350,  350,  350,  350,  351,  352,  352,  353,  538,

      355,  355,  355,  355,  355,  356,  357,  357,  260,   72,
      708,   72,  493,  493,  493,  493,  493,  493,  262,   72,
      262,  359,   72,  360,  360,  360,  360,  360,  360,  360,
      360,  361,   72,  362,  362,   72,   72,  538,  593,  362,
      362,  362,  362,  363,  363,  363,  363,  363,  364,  365,
      365,   72,  260,   72,  500,  500,  500,  500,  500,  500,
      361,  419,  262,  100,   72,  370,  370,  370,  370,  370,
      370,  370,  370,  371,  586,  372,  372,  573,  573,  461,
      568,  372,  372,  372,  372,  373,  373,  373,  373,  373,
      374,  375,  375,   72,  100,   72,  708,   72,  568,  456,

       72,   72,  371,   72,  278,  538,  278,  173,   72,  377,
      377,  377,  377,  377,  377,  377,  377,  378,   72,  379,
      379,  419,  534,  461,  461,  379,  379,  379,  379,  380,
      380,  380,  380,  380,  381,  382,  382,   72,  100,   72,
      173,   72,  708,   72,  461,  456,  378,  456,  278,  456,
      285,   72,  285,  260,   72,  384,  384,  384,  384,  384,
      384,  384,  384,  385,   72,  386,  386,   72,  419,  318,
      474,  386,  386,  386,  386,  387,  387,  387,  387,  387,
      388,  389,  389,   72,  173,   72,  260,   72,  708,   72,
      461,  461,  385,  353,  285,  456,  292,  456,  292,  359,

       72,  391,  391,  391,  391,  391,  391,  391,  391,  392,
      348,  393,  393,   72,   72,   72,  419,  393,  393,  393,
      393,  394,  394,  394,  394,  394,  395,  396,  396,   72,
      260,   72,  318,  416,   72,  348,  353,  353,  392,   72,
      292,  708,  708,  708,  708,  708,  708,  353,  262,  359,
       72,  409,  409,  409,  409,  409,  409,  409,  409,  361,
      353,  410,  410,  348,  348,  348,   72,  410,  410,  410,
      410,  411,  411,  412,  413,  413,  413,  413,  413,   72,
       72,  414,  414,   72,  369,  318,  230,  414,  414,  414,
      414,  366,  361,  415,  415,  415,  415,  415,  415,  415,

      415,  359,   72,  507,  507,  507,  507,  507,  507,  353,
      353,  361,   72,  420,  420,  421,  422,  422,  422,  422,
      422,  254,  348,  423,  423,  348,  249,   72,   72,  423,
      423,  423,  423,  100,   72,  424,  424,  424,  424,  424,
      424,  424,  424,  371,  318,  425,  425,  230,  223,  315,
      254,  425,  425,  425,  425,  426,  426,  427,  428,  428,
      428,  428,  428,  254,  254,  429,  429,   72,  249,  249,
      249,  429,  429,  429,  429,  276,  371,  430,  430,  430,
      430,  430,  430,  430,  430,  100,   72,   72,  514,  514,
      514,  514,  514,  514,  230,  371,  278,  173,   72,  431,

      431,  431,  431,  431,  431,  431,  431,  378,  154,  432,
      432,  223,  223,  223,  269,  432,  432,  432,  432,  433,
      433,  434,  435,  435,  435,  435,  435,  268,  267,  436,
      436,   72,  254,  254,  167,  436,  436,  436,  436,  249,
      378,  437,  437,  437,  437,  437,  437,  437,  437,  173,
       72,   72,  542,  542,  542,  542,  542,  542,  249,  378,
      285,  260,   72,  438,  438,  438,  438,  438,  438,  438,
      438,  385,  230,  439,  439,  154,  147,  223,  223,  439,
      439,  439,  439,  440,  440,  441,  442,  442,  442,  442,
      442,  222,  221,  443,  443,   72,  220,  167,  167,  443,

      443,  443,  443,  167,  385,  444,  444,  444,  444,  444,
      444,  444,  444,  260,   72,   72,  585,  585,  585,  585,
      585,  585,  192,  385,  292,  359,   72,  445,  445,  445,
      445,  445,  445,  445,  445,  392,  154,  446,  446,   93,
      147,  147,  147,  446,  446,  446,  446,  447,  447,  448,
      449,  449,  449,  449,  449,  185,  184,  450,  450,   72,
      183,  182,  181,  450,  450,  450,  450,  180,  392,  451,
      451,  451,  451,  451,  451,  451,  451,  359,   72,  167,
      167,  708,  154,   93,   86,  147,  147,  392,   72,  453,
      453,  453,  453,  453,  454,  455,  455,  456,  536,  458,

      458,  458,  458,  458,  459,  460,  460,  461,  538,  463,
      463,  463,  463,  463,  464,  465,  465,  359,   72,  708,
       72,  146,  145,  144,  143,  142,  141,  361,   44,  361,
      467,   72,  468,  468,  468,  468,  468,  468,  468,  468,
      469,  121,  470,  470,   93,   44,   86,   86,  470,  470,
      470,  470,  471,  471,  471,  471,  471,  472,  473,  473,
       72,  359,   72,   86,  114,  113,  112,  111,  110,  469,
      109,  361,  476,  476,  477,  478,  478,  478,  478,  478,
      479,  108,  480,  480,   99,   93,   86,   86,  480,  480,
      480,  480,  100,   72,  481,  481,  481,  481,  481,  481,

      481,  481,  482,   85,  483,  483,   84,   83,   82,   81,
      483,  483,  483,  483,  484,  484,  484,  484,  484,  485,
      486,  486,   72,  100,   72,  708,   72,   80,   79,   78,
       44,  482,   70,  371,   59,  371,  173,   72,  488,  488,
      488,  488,  488,  488,  488,  488,  489,   58,  490,  490,
       57,   56,   55,   54,  490,  490,  490,  490,  491,  491,
      491,  491,  491,  492,  493,  493,   72,  100,   72,  173,
       72,  708,   72,   53,   52,  489,   49,  371,  708,  378,
       40,  378,  260,   72,  495,  495,  495,  495,  495,  495,
      495,  495,  496,   40,  497,  497,   38,   38,   36,   36,

      497,  497,  497,  497,  498,  498,  498,  498,  498,  499,
      500,  500,   72,  173,   72,  260,   72,  708,   72,   34,
       34,  496,  708,  378,  708,  385,  708,  385,  359,   72,
      502,  502,  502,  502,  502,  502,  502,  502,  503,  708,
      504,  504,  708,  708,  708,  708,  504,  504,  504,  504,
      505,  505,  505,  505,  505,  506,  507,  507,   72,  260,
       72,  359,   72,  708,   72,  708,  708,  503,  708,  385,
      708,  392,  708,  392,  467,   72,  509,  509,  509,  509,
      509,  509,  509,  509,  510,  708,  511,  511,  708,  708,
      708,  708,  511,  511,  511,  511,  512,  512,  512,  512,

      512,  513,  514,  514,   72,  359,   72,  708,  708,   72,
      456,  708,  461,  510,   72,  392,  708,  708,  708,  708,
      708,  708,  708,  361,  467,   72,  527,  527,  527,  527,
      527,  527,  527,  527,  469,  708,  528,  528,  708,  708,
      708,  708,  528,  528,  528,  528,  529,  529,  530,  531,
      531,  531,  531,  531,  708,  708,  532,  532,   72,  708,
      708,  708,  532,  532,  532,  532,  708,  469,  533,  533,
      533,  533,  533,  533,  533,  533,  467,   72,  708,   72,
      708,  708,  708,  708,  708,  708,  469,  536,  482,  537,
      537,  537,  537,  537,  537,  537,  537,  538,  708,  539,

      539,  708,  708,  708,  708,  539,  539,  539,  539,  540,
      540,  540,  540,  540,  541,  542,  542,  100,   72,  544,
      544,  544,  544,  544,  544,  544,  544,  482,  708,  545,
      545,  708,  708,  708,  708,  545,  545,  545,  545,  547,
      547,  547,  547,  547,  547,  547,  547,  100,   72,   72,
      708,  708,  708,  708,  708,  708,  708,  482,  371,  173,
       72,  548,  548,  548,  548,  548,  548,  548,  548,  489,
      708,  549,  549,   72,  708,  708,  708,  549,  549,  549,
      549,  708,  489,  551,  551,  551,  551,  551,  551,  551,
      551,  173,   72,   72,  708,  708,  708,  708,  708,  708,

      708,  489,  378,  260,   72,  552,  552,  552,  552,  552,
      552,  552,  552,  496,  708,  553,  553,   72,  708,  708,
      708,  553,  553,  553,  553,  708,  496,  555,  555,  555,
      555,  555,  555,  555,  555,  260,   72,   72,  708,  708,
      708,  708,  708,  708,  708,  496,  385,  359,   72,  556,
      556,  556,  556,  556,  556,  556,  556,  503,  708,  557,
      557,   72,  708,  708,  708,  557,  557,  557,  557,  708,
      503,  559,  559,  559,  559,  559,  559,  559,  559,  359,
       72,   72,  708,  708,  708,  708,  708,  708,  708,  503,
      392,  467,   72,  560,  560,  560,  560,  560,  560,  560,

      560,  510,  708,  561,  561,   72,  708,  708,  708,  561,
      561,  561,  561,  708,  510,  563,  563,  563,  563,  563,
      563,  563,  563,  467,   72,  708,  708,  708,  708,  708,
      708,  708,  708,  510,   72,  565,  565,  565,  565,  565,
      566,  567,  567,  568,  708,  570,  570,  570,  570,  570,
      571,  572,  572,  573,  538,  575,  575,  575,  575,  575,
      576,  577,  577,  467,   72,  708,   72,  708,  708,  708,
      708,  708,  708,  469,  708,  469,  579,   72,  580,  580,
      580,  580,  580,  580,  580,  580,  581,  708,  582,  582,
      708,  708,  708,  708,  582,  582,  582,  582,  583,  583,

      583,  583,  583,  584,  585,  585,   72,  467,   72,  100,
       72,  708,  708,  708,  708,  581,  708,  469,  536,  482,
      590,  590,  590,  590,  590,  590,  590,  590,  538,  708,
      591,  591,  708,  708,  708,  708,  591,  591,  591,  591,
      594,  594,  594,  594,  594,  594,  594,  594,  708,   72,
      100,   72,  173,   72,  708,   72,  173,   72,  482,  708,
      482,  708,  489,  708,  489,  708,  489,  260,   72,  708,
       72,  260,   72,  359,   72,  708,   72,  496,  708,  496,
      708,  496,  708,  503,  708,  503,  359,   72,  467,   72,
      708,   72,  467,   72,   72,  708,  503,   72,  510,  568,

      510,  573,  510,  469,  708,  708,  708,  708,  708,  708,
      708,  579,   72,  618,  618,  618,  618,  618,  618,  618,
      618,  581,  708,  619,  619,   72,  708,  708,  708,  619,
      619,  619,  619,  708,  581,  621,  621,  621,  621,  621,
      621,  621,  621,  579,   72,  536,  708,  708,  708,  708,
      708,  708,  708,  581,  623,  538,  625,  625,  625,  625,
      625,  626,  627,  627,   72,   72,   72,   72,   72,  708,
      708,  708,  708,  482,  489,  496,  503,  510,   72,  637,
      637,  637,  637,  637,  638,  639,  639,  640,  708,  642,
      642,  642,  642,  642,  643,  644,  644,  645,  708,  647,

      647,  647,  647,  647,  648,  649,  649,  579,   72,  708,
       72,  579,   72,  708,  623,  708,  708,  581,   72,  581,
      640,  581,  708,  708,  645,  708,  708,   72,  708,  708,
      708,  708,  708,  708,  708,  708,  581,  674,  708,  676,
      676,  676,  676,  676,  677,  678,  678,   72,  680,  680,
      680,  680,  680,  681,  682,  682,  683,  708,  685,  685,
      685,  685,  685,  686,  687,  687,  674,  708,  708,   72,
      683,  708,  708,  708,  708,  708,  708,  708,  708,  708,
       72,  699,  699,  699,  699,  699,  700,  701,  701,   72,
      703,  703,  703,  703,  703,  704,  705,  705,   72,  708,

       72,  708,  708,  708,  708,  708,  708,  708,  708,   33,
       33,   33,   33,   33,   33,   33,   33,   35,   35,   35,
       35,   35,   35,   35,   35,   37,   37,   37,   37,   37,
       37,   37,   37,   39,   39,   39,   39,   39,   39,   39,
       39,   60,  708,   60,   60,   60,   60,   60,   60,   61,
       61,   61,   61,   61,   61,   61,   62,   62,   62,   62,
       62,   62,   62,   63,   63,   63,   63,   63,   63,   63,
       69,   69,   69,   68,   68,   68,   87,  708,   87,   90,
      708,   90,   91,  708,   91,   91,   91,   92,   92,   92,
      103,  103,  103,  103,  118,  708,  118,  119,  119,  119,

      120,  120,  120,  124,  124,  124,  124,  135,  135,  135,
      135,  148,  708,  148,  151,  708,  151,  152,  152,  152,
      153,  153,  153,  160,  160,  160,  160,  168,  708,  168,
      171,  708,  171,  172,  172,  172,  172,  172,  176,  176,
      176,  176,  189,  708,  189,  190,  190,  190,  191,  191,
      191,  195,  195,  195,  195,  199,  199,  199,  199,  199,
      202,  202,  202,  202,  209,  708,  209,  214,  214,  214,
      214,  224,  224,  227,  227,  228,  228,  228,  229,  229,
      229,  236,  236,  236,  236,  243,  243,  243,  243,  250,
      708,  250,  253,  708,  253,  255,  708,  255,  258,  708,

      258,  259,  259,  259,  259,  259,  263,  263,  263,  263,
      273,  273,  274,  274,  274,  275,  275,  275,  279,  279,
      279,  279,  283,  283,  283,  283,  283,  286,  286,  286,
      286,  290,  290,  290,  290,  290,  293,  293,  293,  293,
      300,  708,  300,  304,  708,  304,  309,  309,  309,  309,
      316,  316,  316,  317,  317,  317,  324,  324,  324,  324,
      331,  331,  331,  331,  338,  338,  338,  338,  344,  344,
      347,  347,  349,  708,  349,  352,  708,  352,  354,  708,
      354,  357,  708,  357,  358,  358,  358,  358,  358,  362,
      362,  362,  362,  367,  367,  367,  368,  368,  368,  372,

      372,  372,  372,  376,  376,  376,  376,  376,  379,  379,
      379,  379,  383,  383,  383,  383,  383,  386,  386,  386,
      386,  390,  390,  390,  390,  390,  393,  393,  393,  393,
      397,  397,  401,  708,  401,  405,  708,  405,  410,  410,
      410,  410,  417,  417,  417,  418,  418,  418,  425,  425,
      425,  425,  432,  432,  432,  432,  439,  439,  439,  439,
      446,  446,  446,  446,  452,  452,  455,  455,  457,  708,
      457,  460,  708,  460,  462,  708,  462,  465,  708,  465,
      466,  466,  466,  466,  466,  470,  470,  470,  470,  475,
      475,  475,  483,  483,  483,  483,  487,  487,  487,  487,

      487,  490,  490,  490,  490,  494,  494,  494,  494,  494,
      497,  497,  497,  497,  501,  501,  501,  501,  501,  504,
      504,  504,  504,  508,  508,  508,  508,  508,  511,  511,
      511,  511,  515,  515,  519,  708,  519,  523,  708,  523,
      528,  528,  528,  528,  535,  535,  535,  543,  543,  708,
      543,  539,  539,  539,  546,  708,  546,  545,  545,  545,
      545,  550,  708,  550,  549,  549,  549,  549,  554,  708,
      554,  553,  553,  553,  553,  558,  708,  558,  557,  557,
      557,  557,  562,  708,  562,  561,  561,  561,  561,  564,
      564,  567,  567,  569,  708,  569,  572,  708,  572,  574,

      708,  574,  577,  708,  577,  578,  578,  578,  578,  578,
      582,  582,  582,  582,  592,  592,  592,  591,  591,  591,
      595,  595,  708,  595,  596,  596,  596,  596,  596,  597,
      597,  708,  597,  598,  598,  598,  598,  598,  599,  599,
      708,  599,  600,  600,  600,  600,  600,  601,  601,  708,
      601,  602,  602,  602,  602,  602,  603,  603,  708,  603,
      604,  604,  604,  604,  604,  605,  605,  708,  605,  606,
      606,  610,  708,  610,  614,  708,  614,  620,  708,  620,
      619,  619,  619,  619,  624,  708,  624,  627,  708,  627,
      628,  708,  628,  628,  628,  629,  629,  708,  629,  630,

      630,  708,  630,  631,  631,  708,  631,  632,  632,  708,
      632,  633,  633,  708,  633,  634,  634,  708,  634,  635,
      635,  708,  635,  636,  636,  639,  639,  641,  708,  641,
      644,  708,  644,  646,  708,  646,  649,  708,  649,  650,
      650,  650,  650,  650,  651,  651,  708,  651,  656,  708,
      656,  657,  657,  708,  657,  658,  658,  708,  658,  659,
      659,  708,  659,  660,  660,  708,  660,  661,  661,  708,
      661,  662,  662,  708,  662,  663,  663,  708,  663,  664,
      664,  668,  708,  668,  672,  708,  672,  673,  673,  708,
      673,  675,  708,  675,  678,  708,  678,  593,  593,  708,

      593,  679,  679,  682,  682,  684,  708,  684,  687,  708,
      687,  688,  688,  708,  688,  692,  708,  692,  693,  693,
      697,  708,  697,  698,  698,  701,  701,  702,  702,  705,
      705,  706,  706,  707,  707,   11,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708
    } ;

static yyconst short int yy_chk[3779] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   13,  928,   13,   16,   48,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   48,   16,   16,   41,
      925,   41,  914,   16,   16,   16,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   18,   18,   18,
       18,   21,   21,   21,   21,   21,   21,   21,   21,   21,
      912,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   22,   22,   22,   22,   22,   22,   22,
       22,   22,  902,   22,   22,   42,   42,   42,  881,   22,
       22,   22,   22,   43,   67,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   67,   43,   43,   47,   47,  105,
      105,   43,   43,   43,   43,   46,   46,   46,   46,   46,
       46,   46,   46,   49,   49,   49,   49,   49,   49,   49,
       49,   49,  126,  126,   49,   49,   86,   86,   86,  879,
       49,   49,   49,   49,   50,   50,   50,   50,   50,   50,
       50,   50,  178,  178,   50,   50,   99,   99,   99,  877,

       50,   50,   50,   50,   65,   68,   65,   65,   65,   65,
       65,   65,   65,   65,  862,   68,   70,   70,   70,   70,
       70,   70,   70,   70,   70,  197,  197,   70,   70,   71,
      100,  100,  100,   70,   70,   70,   70,  204,  204,   71,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,  839,   73,   73,  147,  147,  147,  837,   73,   73,
       73,   73,   74,   74,   74,   74,   74,   74,   74,   74,
       75,   75,   75,   75,   75,   75,   76,   96,   96,   96,
       96,   96,   96,  265,  265,   76,   77,   77,   77,   77,
       77,   77,   77,   77,  281,  281,   77,   77,   89,  167,

      167,  167,   77,   77,   77,   77,   89,   89,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,  835,
       94,   94,  173,  173,  173,  808,   94,   94,   94,   94,
       95,   95,   95,   95,   95,   95,   95,   95,   97,  138,
      138,  138,  138,  138,  138,  288,  288,   97,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  806,
      101,  101,  249,  249,  249,  804,  101,  101,  101,  101,
      102,  102,  102,  102,  102,  102,  102,  102,  295,  295,
      102,  102,  103,  254,  254,  254,  102,  102,  102,  102,
      779,  103,  104,  104,  104,  104,  104,  104,  104,  104,

      106,  106,  777,  124,  157,  157,  157,  157,  157,  157,
      106,  116,  124,  116,  116,  116,  116,  116,  116,  116,
      116,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      364,  364,  121,  121,  260,  260,  260,  775,  121,  121,
      121,  121,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  753,  122,  122,  270,  270,  270,  270,
      122,  122,  122,  122,  123,  123,  123,  123,  123,  123,
      123,  123,  374,  374,  123,  123,  271,  271,  271,  751,
      123,  123,  123,  123,  125,  125,  125,  125,  125,  125,
      125,  125,  127,  127,  134,  134,  163,  163,  163,  163,

      163,  163,  127,  132,  134,  132,  132,  132,  132,  132,
      132,  132,  132,  135,  135,  217,  217,  217,  217,  217,
      217,  381,  381,  135,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  744,  136,  136,  348,  348,
      348,  739,  136,  136,  136,  136,  137,  137,  137,  137,
      137,  137,  137,  137,  139,  140,  140,  732,  150,  353,
      353,  353,  731,  139,  726,  140,  150,  150,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  724,
      155,  155,  359,  359,  359,  717,  155,  155,  155,  155,
      156,  156,  156,  156,  156,  156,  156,  156,  158,  159,

      159,  160,  160,  388,  388,  395,  395,  158,  707,  159,
      706,  160,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  705,  161,  161,  456,  456,  456,  703,
      161,  161,  161,  161,  162,  162,  162,  162,  162,  162,
      162,  162,  164,  165,  165,  702,  170,  172,  461,  461,
      461,  164,  701,  165,  170,  170,  172,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  699,  174,
      174,  467,  467,  467,  698,  174,  174,  174,  174,  175,
      175,  175,  175,  175,  175,  175,  175,  472,  472,  175,
      175,  176,  485,  485,  697,  175,  175,  175,  175,  696,

      176,  177,  177,  177,  177,  177,  177,  177,  177,  179,
      179,  233,  233,  233,  233,  233,  233,  492,  492,  179,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  499,  499,
      192,  192,  506,  506,  513,  513,  192,  192,  192,  192,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  694,  193,  193,  536,  536,  536,  693,  193,  193,
      193,  193,  194,  194,  194,  194,  194,  194,  194,  194,
      541,  541,  194,  194,  195,  568,  568,  568,  194,  194,
      194,  194,  692,  195,  196,  196,  196,  196,  196,  196,

      196,  196,  198,  198,  199,  239,  239,  239,  239,  239,
      239,  691,  198,  199,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  200,  689,  200,  200,  573,  573,
      573,  688,  200,  200,  200,  200,  201,  201,  201,  201,
      201,  201,  201,  201,  584,  584,  201,  201,  202,  579,
      579,  579,  201,  201,  201,  201,  687,  202,  203,  203,
      203,  203,  203,  203,  203,  203,  205,  205,  213,  213,
      246,  246,  246,  246,  246,  246,  205,  207,  213,  207,
      207,  207,  207,  207,  207,  207,  207,  211,  685,  211,
      211,  211,  211,  211,  211,  211,  211,  214,  214,  312,

      312,  312,  312,  312,  312,  684,  682,  214,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  680,
      215,  215,  623,  623,  623,  679,  215,  215,  215,  215,
      216,  216,  216,  216,  216,  216,  216,  216,  218,  219,
      219,  321,  321,  321,  321,  321,  321,  218,  678,  219,
      223,  223,  223,  223,  223,  223,  223,  223,  226,  327,
      327,  327,  327,  327,  327,  226,  226,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  676,  231,
      231,  640,  640,  640,  675,  231,  231,  231,  231,  232,
      232,  232,  232,  232,  232,  232,  232,  234,  235,  235,

      236,  236,  645,  645,  645,  673,  234,  672,  235,  671,
      236,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  669,  237,  237,  674,  674,  674,  668,  237,
      237,  237,  237,  238,  238,  238,  238,  238,  238,  238,
      238,  240,  241,  241,  242,  242,  243,  243,  667,  665,
      240,  664,  241,  663,  242,  662,  243,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  661,  244,
      244,  683,  683,  683,  660,  244,  244,  244,  244,  245,
      245,  245,  245,  245,  245,  245,  245,  247,  248,  248,
      659,  252,  658,  257,  259,  657,  247,  656,  248,  252,

      252,  257,  257,  259,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  655,  261,  261,  653,  651,
      649,  647,  261,  261,  261,  261,  262,  262,  262,  262,
      262,  262,  262,  262,  646,  644,  262,  262,  263,  642,
      641,  639,  262,  262,  262,  262,  637,  263,  264,  264,
      264,  264,  264,  264,  264,  264,  266,  266,  334,  334,
      334,  334,  334,  334,  636,  635,  266,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  634,  633,  276,  276,
      632,  631,  630,  629,  276,  276,  276,  276,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  628,

      277,  277,  627,  625,  624,  622,  277,  277,  277,  277,
      278,  278,  278,  278,  278,  278,  278,  278,  620,  617,
      278,  278,  279,  615,  614,  613,  278,  278,  278,  278,
      611,  279,  280,  280,  280,  280,  280,  280,  280,  280,
      282,  282,  283,  341,  341,  341,  341,  341,  341,  610,
      282,  283,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  609,  284,  284,  607,  606,  605,  603,
      284,  284,  284,  284,  285,  285,  285,  285,  285,  285,
      285,  285,  601,  599,  285,  285,  286,  597,  595,  593,
      285,  285,  285,  285,  592,  286,  287,  287,  287,  287,

      287,  287,  287,  287,  289,  289,  290,  413,  413,  413,
      413,  413,  413,  589,  289,  290,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  587,  291,  291,
      586,  577,  575,  574,  291,  291,  291,  291,  292,  292,
      292,  292,  292,  292,  292,  292,  572,  570,  292,  292,
      293,  569,  567,  565,  292,  292,  292,  292,  564,  293,
      294,  294,  294,  294,  294,  294,  294,  294,  296,  296,
      422,  422,  422,  422,  422,  422,  562,  558,  296,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  302,  542,
      302,  302,  302,  302,  302,  302,  302,  302,  306,  542,

      306,  306,  306,  306,  306,  306,  306,  306,  308,  308,
      309,  309,  428,  428,  428,  428,  428,  428,  308,  554,
      309,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  550,  310,  310,  546,  543,  539,  538,  310,
      310,  310,  310,  311,  311,  311,  311,  311,  311,  311,
      311,  313,  314,  314,  435,  435,  435,  435,  435,  435,
      313,  535,  314,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  534,  319,  319,  526,  524,  523,
      522,  319,  319,  319,  319,  320,  320,  320,  320,  320,
      320,  320,  320,  322,  323,  323,  324,  324,  520,  519,

      518,  516,  322,  515,  323,  480,  324,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  479,  325,
      325,  475,  474,  465,  463,  325,  325,  325,  325,  326,
      326,  326,  326,  326,  326,  326,  326,  328,  329,  329,
      330,  330,  331,  331,  462,  460,  328,  458,  329,  457,
      330,  455,  331,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  453,  332,  332,  452,  418,  417,
      416,  332,  332,  332,  332,  333,  333,  333,  333,  333,
      333,  333,  333,  335,  336,  336,  337,  337,  338,  338,
      408,  406,  335,  405,  336,  404,  337,  402,  338,  339,

      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      401,  339,  339,  400,  398,  397,  368,  339,  339,  339,
      339,  340,  340,  340,  340,  340,  340,  340,  340,  342,
      343,  343,  367,  366,  346,  351,  357,  356,  342,  358,
      343,  346,  346,  351,  351,  356,  356,  355,  358,  360,
      360,  360,  360,  360,  360,  360,  360,  360,  360,  360,
      354,  360,  360,  352,  350,  349,  347,  360,  360,  360,
      360,  361,  361,  361,  361,  361,  361,  361,  361,  345,
      344,  361,  361,  362,  318,  317,  316,  361,  361,  361,
      361,  315,  362,  363,  363,  363,  363,  363,  363,  363,

      363,  365,  365,  442,  442,  442,  442,  442,  442,  307,
      305,  365,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  304,  303,  369,  369,  301,  300,  299,  297,  369,
      369,  369,  369,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  275,  370,  370,  274,  273,  268,
      258,  370,  370,  370,  370,  371,  371,  371,  371,  371,
      371,  371,  371,  256,  255,  371,  371,  372,  253,  251,
      250,  371,  371,  371,  371,  230,  372,  373,  373,  373,
      373,  373,  373,  373,  373,  375,  375,  376,  449,  449,
      449,  449,  449,  449,  229,  375,  376,  377,  377,  377,

      377,  377,  377,  377,  377,  377,  377,  377,  228,  377,
      377,  227,  225,  224,  222,  377,  377,  377,  377,  378,
      378,  378,  378,  378,  378,  378,  378,  221,  220,  378,
      378,  379,  212,  210,  209,  378,  378,  378,  378,  208,
      379,  380,  380,  380,  380,  380,  380,  380,  380,  382,
      382,  383,  478,  478,  478,  478,  478,  478,  206,  382,
      383,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  191,  384,  384,  190,  189,  188,  186,  384,
      384,  384,  384,  385,  385,  385,  385,  385,  385,  385,
      385,  185,  184,  385,  385,  386,  180,  171,  169,  385,

      385,  385,  385,  168,  386,  387,  387,  387,  387,  387,
      387,  387,  387,  389,  389,  390,  531,  531,  531,  531,
      531,  531,  154,  389,  390,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  153,  391,  391,  152,
      151,  149,  148,  391,  391,  391,  391,  392,  392,  392,
      392,  392,  392,  392,  392,  146,  145,  392,  392,  393,
      144,  143,  142,  392,  392,  392,  392,  141,  393,  394,
      394,  394,  394,  394,  394,  394,  394,  396,  396,  133,
      131,  130,  120,  119,  118,  117,  115,  396,  399,  399,
      399,  399,  399,  399,  399,  399,  399,  403,  590,  403,

      403,  403,  403,  403,  403,  403,  403,  407,  590,  407,
      407,  407,  407,  407,  407,  407,  407,  409,  409,  410,
      410,  113,  112,  111,  110,  109,  108,  409,  107,  410,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  411,
      411,   93,  411,  411,   92,   91,   90,   88,  411,  411,
      411,  411,  412,  412,  412,  412,  412,  412,  412,  412,
      414,  415,  415,   87,   85,   84,   83,   82,   81,  414,
       80,  415,  419,  419,  419,  419,  419,  419,  419,  419,
      419,   79,  419,  419,   72,   69,   66,   64,  419,  419,
      419,  419,  420,  420,  420,  420,  420,  420,  420,  420,

      420,  420,  420,   59,  420,  420,   58,   57,   56,   55,
      420,  420,  420,  420,  421,  421,  421,  421,  421,  421,
      421,  421,  423,  424,  424,  425,  425,   54,   53,   52,
       45,  423,   44,  424,   30,  425,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,   29,  426,  426,
       28,   27,   26,   25,  426,  426,  426,  426,  427,  427,
      427,  427,  427,  427,  427,  427,  429,  430,  430,  431,
      431,  432,  432,   24,   23,  429,   19,  430,   11,  431,
       10,  432,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,    9,  433,  433,    8,    7,    6,    5,

      433,  433,  433,  433,  434,  434,  434,  434,  434,  434,
      434,  434,  436,  437,  437,  438,  438,  439,  439,    4,
        3,  436,    0,  437,    0,  438,    0,  439,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,    0,
      440,  440,    0,    0,    0,    0,  440,  440,  440,  440,
      441,  441,  441,  441,  441,  441,  441,  441,  443,  444,
      444,  445,  445,  446,  446,    0,    0,  443,    0,  444,
        0,  445,    0,  446,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,    0,  447,  447,    0,    0,
        0,    0,  447,  447,  447,  447,  448,  448,  448,  448,

      448,  448,  448,  448,  450,  451,  451,    0,    0,  454,
      459,    0,  464,  450,  466,  451,  454,  454,  459,  459,
      464,  464,    0,  466,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,    0,  468,  468,    0,    0,
        0,    0,  468,  468,  468,  468,  469,  469,  469,  469,
      469,  469,  469,  469,    0,    0,  469,  469,  470,    0,
        0,    0,  469,  469,  469,  469,    0,  470,  471,  471,
      471,  471,  471,  471,  471,  471,  473,  473,    0,  483,
        0,    0,    0,    0,    0,    0,  473,  476,  483,  476,
      476,  476,  476,  476,  476,  476,  476,  476,    0,  476,

      476,    0,    0,    0,    0,  476,  476,  476,  476,  477,
      477,  477,  477,  477,  477,  477,  477,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,    0,  481,
      481,    0,    0,    0,    0,  481,  481,  481,  481,  484,
      484,  484,  484,  484,  484,  484,  484,  486,  486,  487,
        0,    0,    0,    0,    0,    0,    0,  486,  487,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  488,
        0,  488,  488,  490,    0,    0,    0,  488,  488,  488,
      488,    0,  490,  491,  491,  491,  491,  491,  491,  491,
      491,  493,  493,  494,    0,    0,    0,    0,    0,    0,

        0,  493,  494,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,    0,  495,  495,  497,    0,    0,
        0,  495,  495,  495,  495,    0,  497,  498,  498,  498,
      498,  498,  498,  498,  498,  500,  500,  501,    0,    0,
        0,    0,    0,    0,    0,  500,  501,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,    0,  502,
      502,  504,    0,    0,    0,  502,  502,  502,  502,    0,
      504,  505,  505,  505,  505,  505,  505,  505,  505,  507,
      507,  508,    0,    0,    0,    0,    0,    0,    0,  507,
      508,  509,  509,  509,  509,  509,  509,  509,  509,  509,

      509,  509,    0,  509,  509,  511,    0,    0,    0,  509,
      509,  509,  509,    0,  511,  512,  512,  512,  512,  512,
      512,  512,  512,  514,  514,    0,    0,    0,    0,    0,
        0,    0,    0,  514,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  521,  591,  521,  521,  521,  521,  521,
      521,  521,  521,  525,  591,  525,  525,  525,  525,  525,
      525,  525,  525,  527,  527,  528,  528,    0,    0,    0,
        0,    0,    0,  527,    0,  528,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,    0,  529,  529,
        0,    0,    0,    0,  529,  529,  529,  529,  530,  530,

      530,  530,  530,  530,  530,  530,  532,  533,  533,  544,
      544,    0,    0,    0,    0,  532,    0,  533,  537,  544,
      537,  537,  537,  537,  537,  537,  537,  537,  537,    0,
      537,  537,    0,    0,    0,    0,  537,  537,  537,  537,
      540,  540,  540,  540,  540,  540,  540,  540,  545,  545,
      547,  547,  548,  548,  549,  549,  551,  551,  545,    0,
      547,    0,  548,    0,  549,    0,  551,  552,  552,  553,
      553,  555,  555,  556,  556,  557,  557,  552,    0,  553,
        0,  555,    0,  556,    0,  557,  559,  559,  560,  560,
      561,  561,  563,  563,  578,    0,  559,  566,  560,  571,

      561,  576,  563,  578,  566,  566,    0,  571,  571,  576,
      576,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,    0,  580,  580,  582,    0,    0,    0,  580,
      580,  580,  580,    0,  582,  583,  583,  583,  583,  583,
      583,  583,  583,  585,  585,  594,    0,    0,    0,    0,
        0,    0,    0,  585,  588,  594,  588,  588,  588,  588,
      588,  588,  588,  588,  596,  598,  600,  602,  604,    0,
        0,    0,    0,  596,  598,  600,  602,  604,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  612,    0,  612,
      612,  612,  612,  612,  612,  612,  612,  616,    0,  616,

      616,  616,  616,  616,  616,  616,  616,  618,  618,  619,
      619,  621,  621,    0,  626,    0,    0,  618,  638,  619,
      643,  621,  626,  626,  648,  638,  638,  650,  643,  643,
        0,    0,  648,  648,    0,    0,  650,  654,    0,  654,
      654,  654,  654,  654,  654,  654,  654,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  670,    0,  670,  670,
      670,  670,  670,  670,  670,  670,  677,    0,    0,  681,
      686,    0,    0,    0,  677,  677,  681,  681,  686,  686,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  700,    0,

      704,    0,    0,    0,    0,  700,  700,  704,  704,  709,
      709,  709,  709,  709,  709,  709,  709,  710,  710,  710,
      710,  710,  710,  710,  710,  711,  711,  711,  711,  711,
      711,  711,  711,  712,  712,  712,  712,  712,  712,  712,
      712,  713,    0,  713,  713,  713,  713,  713,  713,  714,
      714,  714,  714,  714,  714,  714,  715,  715,  715,  715,
      715,  715,  715,  716,  716,  716,  716,  716,  716,  716,
      718,  718,  718,  719,  719,  719,  720,    0,  720,  721,
        0,  721,  722,    0,  722,  722,  722,  723,  723,  723,
      725,  725,  725,  725,  727,    0,  727,  728,  728,  728,

      729,  729,  729,  730,  730,  730,  730,  733,  733,  733,
      733,  734,    0,  734,  735,    0,  735,  736,  736,  736,
      737,  737,  737,  738,  738,  738,  738,  740,    0,  740,
      741,    0,  741,  742,  742,  742,  742,  742,  743,  743,
      743,  743,  745,    0,  745,  746,  746,  746,  747,  747,
      747,  748,  748,  748,  748,  749,  749,  749,  749,  749,
      750,  750,  750,  750,  752,    0,  752,  754,  754,  754,
      754,  755,  755,  756,  756,  757,  757,  757,  758,  758,
      758,  759,  759,  759,  759,  760,  760,  760,  760,  761,
        0,  761,  762,    0,  762,  763,    0,  763,  764,    0,

      764,  765,  765,  765,  765,  765,  766,  766,  766,  766,
      767,  767,  768,  768,  768,  769,  769,  769,  770,  770,
      770,  770,  771,  771,  771,  771,  771,  772,  772,  772,
      772,  773,  773,  773,  773,  773,  774,  774,  774,  774,
      776,    0,  776,  778,    0,  778,  780,  780,  780,  780,
      781,  781,  781,  782,  782,  782,  783,  783,  783,  783,
      784,  784,  784,  784,  785,  785,  785,  785,  786,  786,
      787,  787,  788,    0,  788,  789,    0,  789,  790,    0,
      790,  791,    0,  791,  792,  792,  792,  792,  792,  793,
      793,  793,  793,  794,  794,  794,  795,  795,  795,  796,

      796,  796,  796,  797,  797,  797,  797,  797,  798,  798,
      798,  798,  799,  799,  799,  799,  799,  800,  800,  800,
      800,  801,  801,  801,  801,  801,  802,  802,  802,  802,
      803,  803,  805,    0,  805,  807,    0,  807,  809,  809,
      809,  809,  810,  810,  810,  811,  811,  811,  812,  812,
      812,  812,  813,  813,  813,  813,  814,  814,  814,  814,
      815,  815,  815,  815,  816,  816,  817,  817,  818,    0,
      818,  819,    0,  819,  820,    0,  820,  821,    0,  821,
      822,  822,  822,  822,  822,  823,  823,  823,  823,  824,
      824,  824,  825,  825,  825,  825,  826,  826,  826,  826,

      826,  827,  827,  827,  827,  828,  828,  828,  828,  828,
      829,  829,  829,  829,  830,  830,  830,  830,  830,  831,
      831,  831,  831,  832,  832,  832,  832,  832,  833,  833,
      833,  833,  834,  834,  836,    0,  836,  838,    0,  838,
      840,  840,  840,  840,  841,  841,  841,  842,  842,    0,
      842,  843,  843,  843,  844,    0,  844,  845,  845,  845,
      845,  846,    0,  846,  847,  847,  847,  847,  848,    0,
      848,  849,  849,  849,  849,  850,    0,  850,  851,  851,
      851,  851,  852,    0,  852,  853,  853,  853,  853,  854,
      854,  855,  855,  856,    0,  856,  857,    0,  857,  858,

        0,  858,  859,    0,  859,  860,  860,  860,  860,  860,
      861,  861,  861,  861,  863,  863,  863,  864,  864,  864,
      865,  865,    0,  865,  866,  866,  866,  866,  866,  867,
      867,    0,  867,  868,  868,  868,  868,  868,  869,  869,
        0,  869,  870,  870,  870,  870,  870,  871,  871,    0,
      871,  872,  872,  872,  872,  872,  873,  873,    0,  873,
      874,  874,  874,  874,  874,  875,  875,    0,  875,  876,
      876,  878,    0,  878,  880,    0,  880,  882,    0,  882,
      883,  883,  883,  883,  884,    0,  884,  885,    0,  885,
      886,    0,  886,  886,  886,  887,  887,    0,  887,  888,

      888,    0,  888,  889,  889,    0,  889,  890,  890,    0,
      890,  891,  891,    0,  891,  892,  892,    0,  892,  893,
      893,    0,  893,  894,  894,  895,  895,  896,    0,  896,
      897,    0,  897,  898,    0,  898,  899,    0,  899,  900,
      900,  900,  900,  900,  901,  901,    0,  901,  903,    0,
      903,  904,  904,    0,  904,  905,  905,    0,  905,  906,
      906,    0,  906,  907,  907,    0,  907,  908,  908,    0,
      908,  909,  909,    0,  909,  910,  910,    0,  910,  911,
      911,  913,    0,  913,  915,    0,  915,  916,  916,    0,
      916,  917,    0,  917,  918,    0,  918,  919,  919,    0,

      919,  920,  920,  921,  921,  922,    0,  922,  923,    0,
      923,  924,  924,    0,  924,  926,    0,  926,  927,  927,
      929,    0,  929,  930,  930,  931,  931,  932,  932,  933,
      933,  934,  934,  935,  935,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "compilepolicy.l"
#define INITIAL 0
#line 2 "compilepolicy.l"
#include "config.h"

#include "yacc.yy_compile_policy.cc.h"
#include "policy/common/policy_utils.hh"

#include <sstream>


#define yylval yy_compile_policylval
#define yyparse yy_compile_policyparse
#define yyerror yy_compile_policyerror


void yyerror(const char *);
int yyparse(void);

namespace {
	unsigned _yy_lineno;
	string _yy_last_err;
}

#define YY_NO_UNPUT 1
#define STR 1

#define SOURCE_BLOCK 2

#define DEST_BLOCK 3

#define ACTION_BLOCK 4

#line 1535 "lex.yy_compile_policy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 59 "compilepolicy.l"


#line 1689 "lex.yy_compile_policy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 709 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3736 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 61 "compilepolicy.l"
BEGIN(STR);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 63 "compilepolicy.l"
return YY_LBRACE;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 65 "compilepolicy.l"
return YY_RBRACE;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 68 "compilepolicy.l"
BEGIN(SOURCE_BLOCK);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 69 "compilepolicy.l"
{
	  		  yylval.c_str = strdup(yytext);

			  _yy_lineno += policy_utils::count_nl(yytext);
	  		  return YY_SOURCEBLOCK;
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 75 "compilepolicy.l"
BEGIN(INITIAL);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 79 "compilepolicy.l"
BEGIN(DEST_BLOCK);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 80 "compilepolicy.l"
{
			  yylval.c_str = strdup(yytext);
			  _yy_lineno += policy_utils::count_nl(yytext);
			  return YY_DESTBLOCK;
			}  
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 85 "compilepolicy.l"
BEGIN(INITIAL);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 88 "compilepolicy.l"
BEGIN(ACTION_BLOCK);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 89 "compilepolicy.l"
{
			  yylval.c_str = strdup(yytext);
			  _yy_lineno += policy_utils::count_nl(yytext);
			  return YY_ACTIONBLOCK;
			}  
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 94 "compilepolicy.l"
BEGIN(INITIAL);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 98 "compilepolicy.l"
BEGIN(INITIAL);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 99 "compilepolicy.l"
{ yylval.c_str = strdup(yytext); 
		  _yy_lineno += policy_utils::count_nl(yytext);
		  return YY_STR;
		}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 104 "compilepolicy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV4;
		}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 109 "compilepolicy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV4NET;
		}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 115 "compilepolicy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV6;
		}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 120 "compilepolicy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV6NET;
		}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 126 "compilepolicy.l"
return YY_TERM;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 129 "compilepolicy.l"
return YY_POLICY_STATEMENT;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 132 "compilepolicy.l"
return YY_SET;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 134 "compilepolicy.l"
return YY_IMPORT;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 135 "compilepolicy.l"
return YY_EXPORT;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 137 "compilepolicy.l"
{ yylval.c_str = strdup(yytext);
				  return YY_ID;
				}  
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 141 "compilepolicy.l"
return YY_SEMICOLON;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 144 "compilepolicy.l"
_yy_lineno++;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 146 "compilepolicy.l"
/* eat blanks */
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 149 "compilepolicy.l"
{ yyerror("Unknown character"); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 151 "compilepolicy.l"
ECHO;
	YY_BREAK
#line 1947 "lex.yy_compile_policy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STR):
case YY_STATE_EOF(SOURCE_BLOCK):
case YY_STATE_EOF(DEST_BLOCK):
case YY_STATE_EOF(ACTION_BLOCK):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 709 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 709 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 708);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 151 "compilepolicy.l"


void yyerror(const char *m) {
        ostringstream oss;

        oss << "Error on line " <<  _yy_lineno << ": " << m;

        _yy_last_err = oss.str();
}


// XXX: no memory management [a lot of leaks... for simplicy]
int
do_parsing(const string& conf, string& outerr) {
        YY_BUFFER_STATE yybuffstate = yy_scan_string(conf.c_str());

        _yy_last_err = "No error";
        _yy_lineno =1;

        int res = yyparse();

	yy_delete_buffer(yybuffstate);
        outerr = _yy_last_err;

        return res;
}
