#define yy_create_buffer yy_policy_parser_create_buffer
#define yy_delete_buffer yy_policy_parser_delete_buffer
#define yy_scan_buffer yy_policy_parser_scan_buffer
#define yy_scan_string yy_policy_parser_scan_string
#define yy_scan_bytes yy_policy_parser_scan_bytes
#define yy_flex_debug yy_policy_parser_flex_debug
#define yy_init_buffer yy_policy_parser_init_buffer
#define yy_flush_buffer yy_policy_parser_flush_buffer
#define yy_load_buffer_state yy_policy_parser_load_buffer_state
#define yy_switch_to_buffer yy_policy_parser_switch_to_buffer
#define yyin yy_policy_parserin
#define yyleng yy_policy_parserleng
#define yylex yy_policy_parserlex
#define yyout yy_policy_parserout
#define yyrestart yy_policy_parserrestart
#define yytext yy_policy_parsertext

#line 19 "lex.yy_policy_parser.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 * $FreeBSD: src/usr.bin/lex/flex.skl,v 1.8 2004/01/06 19:03:44 nectar Exp $
 */

#if defined(__FreeBSD__)
#include <sys/cdefs.h>
#else
#define __unused
#endif

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) __unused;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 37
#define YY_END_OF_BUFFER 38
static yyconst short int yy_accept[696] =
    {   0,
        0,    0,    0,    0,   38,   36,   34,   35,   36,    3,
       10,   11,   24,   22,   23,    1,    1,    1,   36,   33,
       16,   26,   17,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,    5,    4,   34,   13,    2,    0,
        1,    0,    0,    1,    1,    1,    8,   14,   12,   15,
       32,   32,   32,   32,   32,   32,   32,   32,   19,   32,
       32,   32,    5,    0,    0,    0,    1,    0,    0,    8,
        1,    1,    0,    8,    8,    8,    8,   32,   32,   29,
       32,   18,   32,   21,   32,   32,   20,    0,    0,    0,
        0,    0,    1,    0,    0,    0,    8,    8,    8,    8,

        9,    9,    0,    8,    0,    8,    8,    8,    8,   32,
       32,   32,   32,   32,   32,    0,    0,    0,    0,    1,
        0,    0,    8,    8,    0,    8,    8,    8,    8,    9,
        9,    9,    0,    0,    0,    8,    8,    8,    8,    8,
        8,    8,   30,   32,   32,   32,   32,    0,    0,    0,
        0,    0,    0,    0,    0,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    9,    0,    0,    0,
        0,    0,    8,    0,    8,    0,    8,    8,    8,    8,
       27,   25,   32,   28,    6,    6,    6,    0,    0,    0,
        8,    8,    0,    8,    8,    8,    8,    8,    8,    0,

        8,    8,    8,    8,    0,    0,    0,    0,    0,    0,
        0,    8,    8,    8,    8,    8,    8,    8,   32,    0,
        6,    6,    6,    6,    0,    0,    0,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    8,    0,    8,    0,    8,
        8,    8,    8,   31,    7,    7,    7,    6,    0,    0,
        8,    8,    0,    8,    8,    8,    8,    8,    8,    0,
        8,    8,    8,    8,    8,    8,    0,    8,    8,    8,
        8,    8,    8,    8,    0,    0,    0,    0,    0,    0,

        0,    0,    8,    8,    8,    8,    8,    8,    8,    0,
        0,    0,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    8,    0,    8,    0,    8,    8,    8,    8,    0,
        0,    8,    8,    0,    8,    8,    8,    8,    8,    8,
        0,    8,    8,    8,    8,    8,    8,    0,    8,    8,
        8,    8,    8,    8,    0,    8,    8,    8,    8,    8,
        8,    8,    8,    0,    0,    0,    0,    0,    0,    0,

        0,    8,    8,    8,    8,    8,    8,    8,    0,    0,
        0,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    8,    0,    8,
        0,    8,    8,    8,    8,    0,    0,    0,    0,    8,
        0,    8,    0,    8,    8,    8,    8,    8,    8,    0,
        8,    8,    8,    8,    8,    8,    0,    8,    8,    8,
        8,    8,    8,    0,    8,    8,    8,    8,    8,    8,

        0,    8,    8,    8,    8,    8,    8,    8,    8,    0,
        0,    0,    0,    0,    0,    0,    0,    8,    8,    8,
        8,    8,    8,    8,    0,    0,    0,    0,    0,    0,
        0,    0,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    8,    0,    8,
        0,    8,    8,    8,    8,    0,    0,    0,    0,    0,
        8,    8,    0,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    0,    0,

        0,    0,    0,    0,    0,    0,    8,    8,    8,    8,
        0,    0,    0,    0,    0,    0,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    8,    8,    0,
        0,    0,    0,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    0,    0,    0,    0,    0,    8,
        0,    0,    0,    0,    0,    8,    8,    8,    8,    0,
        0,    0,    0,    0,    8,    8,    8,    8,    0,    8,
        8,    8,    8,    0,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    1,    1,    6,
        7,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   19,   19,   20,   21,   22,   23,
       24,   25,    1,    1,   26,   26,   26,   26,   27,   26,
       28,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   30,   31,   32,   29,   29,   29,   33,   29,   29,
        1,    1,    1,    1,   34,    1,   35,   26,   36,   37,

       38,   39,   29,   29,   40,   41,   29,   42,   43,   44,
       45,   46,   29,   47,   29,   48,   29,   29,   29,   49,
       50,   29,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[51] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
        3,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        6,    1,    1,    1,    1,    7,    7,    1,    1,    1,
        1,    1,    1,    1,    7,    7,    7,    7,    7,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[919] =
    {   0,
        0,    0, 3622, 3621, 3625, 3628, 3622, 3628, 3599, 3628,
     3628, 3628, 3628, 3628,    0,   40,   67,   55, 3601, 3628,
     3597, 3596, 3595,   75,  113, 3591, 3590,   99, 3571, 3570,
     3567, 3553, 3557, 3547,    0, 3628, 3586, 3628,    0,   49,
      142, 3564, 3557,  169,   78,  177,  186, 3628, 3628, 3628,
      213,    0, 3546, 3539, 3532, 3527, 3524, 3508,    0, 3507,
     3507, 3497,    0, 3529,  242, 3525,  252, 3511, 3507,  280,
        0, 3514, 3502,  309,  336,  157,   53,  344, 3486,    0,
     3472,    0, 3467,    0, 3452, 3458,    0,  123, 3481, 3477,
      373, 3473, 3459, 3455, 3449, 3446,  381,  408,  201,  133,

        0,  151,  194,  418,  445,  155,  472,   80,  199, 3443,
     3424,  255, 3415, 3406, 3410, 3426,  482, 3417, 3408, 3389,
     3380, 3361,  491,  520,  547,  222,  574,  122,  224, 3628,
        0,  267, 3368,  584, 3365,  226,  291,  594,  621,  324,
      292,  322,    0, 3325, 3312, 3319, 3300,  295, 3330, 3323,
      631, 3317, 3296, 3293, 3236,  639,  666,  359,  293,  357,
      392,  676,  703,  433,  393,  431, 3628,  352, 3243, 3240,
      713, 3237,  394,  396,  721,  748,  454,  775,  127,  456,
        0,    0, 3170,    0, 3200,  784, 3149, 3147, 3134, 3131,
      793,  822,  849,  457,  876,  222,  501,  458,  886,  913,

      502,  940,  255,  504, 3112,  950, 3109, 3067, 3064,  960,
     3061,  531,  533,  970,  997,  562,  560,  605, 3027, 1005,
     3032, 3010,  655, 2998, 2986, 2973, 2970, 1015, 1042,  691,
      606,  689,  732, 1052, 1079,  763,  607,  734,  761,  803,
     1089, 1116,  837,  804,  806,  506, 2961, 2948, 1126, 2945,
      535, 2932, 2885, 1134, 2870,  835,  555, 1142, 1169,  858,
     1196,  312,  860,    0,  609,  648, 3628, 2859, 2831, 2828,
     1205, 1234, 1261,  861, 1288,  421,  897,  862, 1298, 1325,
      898, 1352,  454,  923,  899, 1362, 1389,  924, 1416,  679,
      926, 2836, 1425, 2821, 2812, 2810, 1435, 2808, 2807, 2806,

     1445, 2805,  981,  983, 1455, 1482, 1030, 1028, 1063, 2780,
     2770, 2752, 1492, 1519, 1104, 1064, 1102, 1153, 1529, 1556,
     1184, 1065, 1155, 1182, 1215, 1566, 1593, 1249, 1216, 1218,
     1247, 1271, 1603, 1630, 1313, 1272, 1274, 2731, 2730, 1341,
     2729,  736, 2729, 2705, 1640, 2695,  756, 2688, 2664, 1648,
     2663, 1311,  808, 1656, 1683, 1372, 1710,  825, 1374, 2652,
     2651, 1719, 1748, 1775, 1375, 1802,  858, 1399, 1400, 1812,
     1839, 1401, 1866,  895, 1466, 1402, 1876, 1903, 1467, 1930,
      897, 1503, 1468, 1940, 1967, 1504, 1994,  922, 1540, 2650,
     2632, 2003, 2631, 2631, 2630, 2013, 2604, 2594, 2569, 2023,

     2567, 1542, 1577, 2033, 2060, 1618, 1505, 1579, 2556, 2555,
     2068, 2097, 2124, 1671, 1616, 1669, 1693, 2134, 2161, 1734,
     1694, 1696, 1732, 1759, 2171, 2198, 1790, 1760, 1788, 1823,
     1825, 2208, 2235, 1854, 1761, 1852, 1887, 1889, 2245, 2272,
     1918, 1916, 1951, 2563, 2531, 1983, 2529,  985, 2529, 2528,
     2282, 2527, 1024, 2495, 2493, 2290, 2492, 1952, 1067, 2298,
     2325, 1953, 2352, 1092, 2044, 2481, 2362, 2389, 2083, 2489,
     2448, 2399,    0, 2045, 2426, 1151, 2081, 2046, 2436,    0,
     2107, 2463, 1153, 2109, 2110, 2473,    0, 2144, 2500, 1171,
     2146, 2147, 2510,    0, 2181, 2537, 1214, 2183, 2184, 2547,

        0, 2218, 2574, 1237, 2220, 2455, 2454, 2583, 2453, 2453,
     2421, 2593, 2419, 2418, 2417, 2603, 2416, 2256, 2258, 2613,
     2640, 2313, 2221, 2311, 2374, 1276, 2650, 2372, 2371, 2677,
     2687,  233, 2379, 2335, 2337, 2378, 2373, 2375, 2410, 2362,
     2412, 2447, 2449, 2345, 2484, 2486, 2521, 2343, 2523, 2558,
     2560, 2342, 2624, 2341, 2309, 2666, 2308, 1307, 2291, 2283,
     2696, 2267, 1333, 2265, 2264, 2704, 2263, 2338, 1377, 2712,
        0, 2625, 2739, 1330, 2723, 2262, 2749, 2229,  951, 1436,
     2226, 2225, 2014, 2224, 2626, 2191, 2724, 2189, 2725, 2188,
     2749, 2187, 2759, 2154, 2152, 2151, 2769, 2150, 2118, 2116,

     2779, 2115, 2114, 2080, 2789, 2079, 2799, 2801, 2052, 2803,
     1404, 2052, 2051, 2761, 2050, 1971, 1979, 1978, 1977, 1976,
     1959, 1958, 1957, 1956, 1915, 2813, 1914, 1470, 1914, 1913,
     2821, 1898, 1507, 1896, 1895, 2829, 1894, 2829, 1892, 1851,
     2840, 1850, 1849, 1833, 1831, 1830, 1829, 1828, 1786, 1785,
     1784, 1767, 2849, 1766, 1766, 1765, 2859, 1731, 1730, 1728,
     1544, 1705, 1702, 2869, 1701, 1699, 1667, 2876, 1666, 1581,
     1649, 1641, 2884, 1616, 1614, 1613, 2891, 1587, 1586, 1550,
     1548, 2900, 1511, 1475, 1382, 1282, 2909, 1226, 1223, 1180,
     2916, 1163, 1134, 1126, 3628, 2934, 1078, 2941,  998, 2944,

     2947, 2952, 2955, 2956, 2959,  996, 2963,  941, 2968, 2969,
     2971, 2974, 2978,  938,  875, 2982, 2987, 2990, 2991, 2994,
     2998,  841, 3003, 3006, 3009, 3013,  821, 3018, 3019, 3022,
     3026, 3031, 3035,  749, 3040,  747, 3042, 3046, 3048, 3049,
     3052, 3056, 3060, 3065, 3068, 3071, 3074, 3077, 3081, 3085,
     3086, 3089, 3093, 3098, 3102, 3107, 3111,  720, 3116,  659,
     3119,  638, 3121, 3124, 3127, 3131, 3135, 3139, 3143, 3145,
     3148, 3151, 3154, 3157, 3160, 3164, 3167, 3170, 3174, 3179,
     3183, 3188, 3192, 3197, 3201, 3205,  591, 3208,  566, 3211,
      548, 3213, 3216, 3219, 3223, 3227, 3231, 3235, 3239, 3241,

     3244, 3247, 3250, 3253, 3256, 3260, 3263, 3267, 3272, 3276,
     3281, 3285, 3290, 3294, 3299, 3303, 3307,  546, 3310,  519,
     3313,  489, 3315, 3318, 3322, 3325, 3328, 3332, 3335, 3339,
     3342, 3346, 3349, 3353, 3356, 3360, 3364, 3366, 3369, 3372,
     3375, 3378, 3381, 3385,  471, 3388, 3391, 3395, 3400, 3404,
     3409, 3413, 3418, 3422, 3427, 3431, 3436, 3440, 3444,  407,
     3447,  380, 3450,  306, 3451, 3455, 3460, 3463, 3466, 3470,
     3474, 3478, 3482, 3486, 3490, 3494, 3498, 3500, 3503, 3506,
     3509, 3512, 3515, 3519,  272, 3524, 3526, 3530, 3534, 3538,
     3542, 3546, 3550, 3554,  259, 3557,  241, 3560, 3562, 3567,

     3570, 3572, 3576, 3578, 3581, 3584, 3586,  139, 3591, 3593,
       47, 3596, 3598, 3600, 3602, 3604, 3606, 3608
    } ;

static yyconst short int yy_def[919] =
    {   0,
      695,    1,  696,  696,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  697,  695,   16,   17,  695,  695,
      695,  695,  695,  695,   24,   25,   25,   24,   25,   25,
       25,   25,   25,   25,  698,  695,  695,  695,  697,  699,
      695,  700,  701,   41,   44,   44,  695,  695,  695,  695,
       24,   25,   25,   25,   51,   25,   25,   25,   25,   25,
       25,   25,  698,  702,  695,  703,  695,  704,  705,  695,
       67,   67,  706,  695,   74,   75,  707,   51,   25,   25,
       78,   25,   25,   25,   25,   25,   25,  708,  703,  709,
      695,  695,  710,  695,  711,  712,  695,   97,   98,  713,

      714,  714,  715,  695,  695,  716,  104,  107,  716,   25,
       25,   25,   25,   25,   25,  717,  695,  718,  695,  710,
      719,  720,  695,  695,  695,  721,  124,  127,  721,  695,
      722,  695,  723,  695,  724,  725,  725,  695,  138,  139,
      726,  725,   25,   25,   25,   25,   25,  727,  718,  728,
      695,  695,  695,  729,  730,  695,  156,  157,  731,  732,
      732,  695,  162,  163,  733,  732,  695,  734,  724,  735,
      695,  695,  695,  736,  695,  695,  737,  175,  178,  737,
       25,   25,   25,   25,  738,  695,  739,  695,  740,  741,
      695,  695,  695,  742,  192,  195,  742,  695,  695,  695,

      743,  199,  202,  743,  744,  695,  745,  695,  746,  695,
      747,  748,  748,  695,  214,  215,  749,  748,   25,  695,
      739,  750,  695,  695,  695,  751,  752,  695,  228,  229,
      753,  754,  754,  695,  234,  235,  755,  754,  756,  756,
      695,  241,  242,  757,  756,  758,  745,  759,  695,  695,
      760,  747,  761,  695,  695,  695,  762,  695,  695,  763,
      258,  261,  763,   25,  220,  695,  695,  695,  764,  765,
      695,  695,  695,  766,  272,  275,  766,  695,  695,  695,
      767,  279,  282,  767,  695,  695,  695,  768,  286,  289,
      768,  769,  695,  770,  695,  771,  695,  772,  695,  773,

      695,  774,  775,  775,  695,  305,  306,  776,  775,  695,
      777,  778,  695,  313,  314,  779,  780,  780,  695,  319,
      320,  781,  780,  782,  782,  695,  326,  327,  783,  782,
      784,  784,  695,  333,  334,  785,  784,  770,  786,  695,
      695,  787,  772,  788,  695,  695,  789,  774,  790,  695,
      695,  695,  791,  695,  695,  792,  354,  357,  792,  793,
      794,  695,  695,  695,  795,  363,  366,  795,  695,  695,
      695,  796,  370,  373,  796,  695,  695,  695,  797,  377,
      380,  797,  695,  695,  695,  798,  384,  387,  798,  695,
      799,  695,  800,  695,  801,  695,  802,  695,  803,  695,

      804,  805,  805,  695,  404,  405,  806,  805,  695,  807,
      695,  695,  412,  413,  808,  809,  809,  695,  418,  419,
      810,  809,  811,  811,  695,  425,  426,  812,  811,  813,
      813,  695,  432,  433,  814,  813,  815,  815,  695,  439,
      440,  816,  815,  800,  817,  695,  695,  818,  802,  819,
      695,  695,  820,  804,  821,  695,  695,  695,  822,  695,
      695,  823,  460,  463,  823,  824,  695,  467,  468,  825,
      826,  695,  827,  828,  472,  475,  828,  695,  695,  829,
      830,  479,  482,  830,  695,  695,  831,  832,  486,  489,
      832,  695,  695,  833,  834,  493,  496,  834,  695,  695,

      835,  836,  500,  503,  836,  695,  837,  695,  838,  695,
      839,  695,  840,  695,  841,  695,  842,  843,  843,  695,
      520,  521,  844,  843,  695,  845,  695,  846,  847,  527,
      847,  847,  848,  849,  849,  850,  849,  851,  851,  852,
      851,  853,  853,  854,  853,  855,  855,  856,  855,  857,
      857,  858,  857,  838,  859,  695,  695,  860,  840,  861,
      695,  695,  862,  842,  863,  695,  695,  695,  864,  695,
      865,  866,  570,  573,  866,  867,  695,  868,  869,  869,
      870,  695,  869,  871,  695,  872,  695,  873,  695,  874,
      695,  875,  695,  876,  695,  877,  695,  878,  695,  879,

      695,  880,  695,  881,  695,  882,  883,  883,  884,  883,
      885,  868,  886,  695,  695,  695,  887,  888,  889,  890,
      891,  892,  893,  878,  894,  695,  695,  895,  880,  896,
      695,  695,  897,  882,  898,  695,  695,  695,  899,  900,
      695,  901,  695,  902,  695,  695,  695,  695,  695,  695,
      695,  903,  695,  904,  695,  905,  695,  906,  695,  907,
      908,  901,  909,  695,  695,  904,  910,  695,  695,  911,
      906,  912,  695,  695,  695,  913,  695,  914,  695,  695,
      915,  695,  916,  695,  914,  917,  695,  695,  916,  918,
      695,  695,  695,  695,    0,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695
    } ;

static yyconst short int yy_nxt[3679] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
        6,    6,   16,   16,   17,   18,   18,   18,   18,   18,
       19,   20,   21,   22,   23,   24,   24,   25,   25,   26,
       27,   25,   25,    6,   28,   24,   24,   24,   24,   25,
       25,   25,   29,   30,   31,   32,   33,   25,   34,   25,
       40,  683,   41,   41,   41,   41,   41,   41,   41,   41,
       42,   64,   64,   65,   73,   43,   43,   46,   46,   46,
       46,   46,   46,  105,   43,   43,   43,   43,   43,   44,
       44,   44,   44,   44,   45,   46,   46,   51,   51,   51,
       51,   51,   51,   51,   51,   42,   72,   72,  137,  137,

       51,   51,   52,   52,   52,   52,   52,   52,   52,   51,
       51,   51,   51,   51,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  695,   55,  116,  116,  117,   52,   52,
      161,  161,   56,  678,   73,  213,  213,   52,   52,   52,
       52,   52,   40,  125,   67,   67,   67,   67,   67,   67,
       67,   67,   42,  131,  131,  132,   73,   68,   68,  109,
      109,  109,  109,  109,  109,  105,   68,   68,   68,   68,
       68,   71,   71,   71,   71,   71,   71,   71,   71,   72,
       72,   72,   72,   72,   72,   72,   72,   73,   74,   74,

       75,   76,   76,   76,   76,   76,  133,  133,  134,  103,
       73,   77,   77,  129,  129,  129,  129,  129,  129,  105,
       77,   77,   77,   77,   77,   78,   78,   78,   78,   78,
       78,   78,   78,   73,  103,   73,  103,   73,   78,   78,
      233,  233,  125,  526,  125,  658,  105,   78,   78,   78,
       78,   78,   88,  528,   90,   90,   90,   90,   90,   91,
       92,   92,   40,  654,   93,   93,   93,   93,   93,   93,
       93,   93,   42,  240,  240,   42,  642,   94,   94,  167,
      167,  167,  167,  167,  167,  167,   94,   94,   94,   94,
       94,   73,   97,   97,   98,   99,   99,   99,   99,   99,

      144,  695,   73,   73,   73,  100,  100,  185,  185,  186,
      606,  105,  176,  193,  100,  100,  100,  100,  100,  103,
       73,  104,  104,  104,  104,  104,  104,  104,  104,  105,
      304,  304,  103,   73,  106,  106,  180,  180,  180,  180,
      180,  180,  105,  106,  106,  106,  106,  106,  107,  107,
      107,  107,  107,  108,  109,  109,  110,  110,  110,  110,
      110,  110,  110,  110,  205,  205,  206,  103,   73,  110,
      110,  197,  197,  197,  197,  197,  197,  125,  110,  110,
      110,  110,  110,   88,  602,  119,  119,  119,  119,  119,
      119,  103,   73,  124,  124,  124,  124,  124,  124,  124,

      124,  125,  695,   73,   73,   73,  126,  126,  209,  209,
      210,  598,  125,  200,  105,  126,  126,  126,  126,  126,
      127,  127,  127,  127,  127,  128,  129,  129,  103,   73,
      136,  136,  136,  136,  136,  136,  136,  136,  105,  318,
      318,  103,   73,  137,  137,  204,  204,  204,  204,  204,
      204,  125,  137,  137,  137,  137,  137,  138,  138,  139,
      140,  140,  140,  140,  140,   73,  174,   73,   73,   73,
      141,  141,  325,  325,  176,  578,  176,  193,  125,  141,
      141,  141,  141,  141,  142,  142,  142,  142,  142,  142,
      142,  142,  148,  517,  150,  150,  150,  150,  150,  151,

      152,  152,   73,  156,  156,  157,  158,  158,  158,  158,
      158,  103,   73,   73,  174,   73,  159,  159,  292,  292,
      293,  193,  200,  513,  200,  159,  159,  159,  159,  159,
      103,   73,  160,  160,  160,  160,  160,  160,  160,  160,
      125,  174,   73,  695,   73,  161,  161,  296,  296,  297,
      509,  176,  401,  176,  161,  161,  161,  161,  161,  162,
      162,  163,  164,  164,  164,  164,  164,  300,  300,  301,
      397,   73,  165,  165,  263,  263,  263,  263,  263,  263,
      259,  165,  165,  165,  165,  165,  166,  166,  166,  166,
      166,  166,  166,  166,  168,  393,  170,  170,  170,  170,

      170,  171,  172,  172,  174,   73,  175,  175,  175,  175,
      175,  175,  175,  175,  176,  174,   73,   73,   73,  177,
      177,  267,  267,  267,  267,  176,  273,  280,  177,  177,
      177,  177,  177,  178,  178,  178,  178,  178,  179,  180,
      180,  148,  302,  188,  188,  188,  188,  188,  188,  103,
       73,  192,  192,  192,  192,  192,  192,  192,  192,  193,
      267,  267,  267,  298,  194,  194,  220,  268,  268,  268,
      268,  268,  268,  194,  194,  194,  194,  194,  195,  195,
      195,  195,  195,  196,  197,  197,  174,   73,  199,  199,
      199,  199,  199,  199,  199,  199,  200,  332,  332,  103,

       73,  201,  201,  277,  277,  277,  277,  277,  277,  193,
      201,  201,  201,  201,  201,  202,  202,  202,  202,  202,
      203,  204,  204,  168,  294,  208,  208,  208,  208,  208,
      208,  174,   73,  212,  212,  212,  212,  212,  212,  212,
      212,  176,  695,   73,  103,   73,  213,  213,  391,  391,
      392,  211,  193,  207,  193,  213,  213,  213,  213,  213,
      214,  214,  215,  216,  216,  216,  216,  216,  395,  395,
      396,  174,   73,  217,  217,  284,  284,  284,  284,  284,
      284,  200,  217,  217,  217,  217,  217,  218,  218,  218,
      218,  218,  218,  218,  218,  220,  222,  222,  222,  222,

      222,  223,  224,  224,   73,  228,  228,  229,  230,  230,
      230,  230,  230,  695,   73,   73,  174,   73,  231,  231,
      399,  399,  400,  200,  287,  187,  200,  231,  231,  231,
      231,  231,  103,   73,  232,  232,  232,  232,  232,  232,
      232,  232,  193,  403,  403,  167,   73,  233,  233,  291,
      291,  291,  291,  291,  291,  176,  233,  233,  233,  233,
      233,  234,  234,  235,  236,  236,  236,  236,  236,   73,
      257,   73,   73,   73,  237,  237,  417,  417,  259,  135,
      259,  273,  193,  237,  237,  237,  237,  237,  238,  238,
      238,  238,  238,  238,  238,  238,  174,   73,  239,  239,

      239,  239,  239,  239,  239,  239,  200,  103,   73,   73,
       73,  240,  240,  424,  424,  431,  431,  273,  280,  200,
      240,  240,  240,  240,  240,  241,  241,  242,  243,  243,
      243,  243,  243,  174,   73,   73,  257,   73,  244,  244,
      438,  438,  130,  280,  287,  118,  287,  244,  244,  244,
      244,  244,  245,  245,  245,  245,  245,  245,  245,  245,
      246,  526,  248,  248,  248,  248,  248,  249,  250,  250,
      251,  528,  253,  253,  253,  253,  253,  254,  255,  255,
      257,   73,  258,  258,  258,  258,  258,  258,  258,  258,
      259,  257,   73,  695,   73,  260,  260,  507,  507,  508,

      101,  259,   66,  259,  260,  260,  260,  260,  260,  261,
      261,  261,  261,  261,  262,  263,  263,  265,  265,  265,
      266,  267,  267,  267,  267,  103,   73,  272,  272,  272,
      272,  272,  272,  272,  272,  273,  511,  511,  512,   73,
      274,  274,  359,  359,  359,  359,  359,  359,  355,  274,
      274,  274,  274,  274,  275,  275,  275,  275,  275,  276,
      277,  277,  174,   73,  279,  279,  279,  279,  279,  279,
      279,  279,  280,  257,   73,   73,   73,  281,  281,  515,
      515,  516,   39,  259,  364,  371,  281,  281,  281,  281,
      281,  282,  282,  282,  282,  282,  283,  284,  284,  257,

       73,  286,  286,  286,  286,  286,  286,  286,  286,  287,
      519,  519,  103,   73,  288,  288,  368,  368,  368,  368,
      368,  368,  273,  288,  288,  288,  288,  288,  289,  289,
      289,  289,  289,  290,  291,  291,  246,   73,  295,  295,
      295,  295,  295,  295,  251,   73,  299,  299,  299,  299,
      299,  299,  257,   73,  303,  303,  303,  303,  303,  303,
      303,  303,  259,  695,   73,  103,   73,  304,  304,  535,
      535,  539,  539,  273,   73,  273,  304,  304,  304,  304,
      304,  305,  305,  306,  307,  307,  307,  307,  307,  543,
      543,   73,  174,   73,  308,  308,  375,  375,  375,  375,

      375,  375,  280,  308,  308,  308,  308,  308,  309,  309,
      309,  309,  309,  309,  309,  309,   73,  313,  313,  314,
      315,  315,  315,  315,  315,  695,   73,   73,  174,   73,
      316,  316,  547,  547,   73,  280,  378,   73,  280,  316,
      316,  316,  316,  316,  103,   73,  317,  317,  317,  317,
      317,  317,  317,  317,  273,  551,  551,  257,   73,  318,
      318,  382,  382,  382,  382,  382,  382,  287,  318,  318,
      318,  318,  318,  319,  319,  320,  321,  321,  321,  321,
      321,  695,   73,   73,  257,   73,  322,  322,  576,  576,
      577,  287,  385,   73,  287,  322,  322,  322,  322,  322,

      323,  323,  323,  323,  323,  323,  323,  323,  174,   73,
      324,  324,  324,  324,  324,  324,  324,  324,  280,  596,
      596,  597,   73,  325,  325,  389,  389,  389,  389,  389,
      389,  259,  325,  325,  325,  325,  325,  326,  326,  327,
      328,  328,  328,  328,  328,  600,  600,  601,  608,  608,
      329,  329,   73,  390,  390,  390,  390,  390,  390,  329,
      329,  329,  329,  329,  330,  330,  330,  330,  330,  330,
      330,  330,  257,   73,  331,  331,  331,  331,  331,  331,
      331,  331,  287,   73,  353,   73,   73,  332,  332,  604,
      604,  605,  355,   73,  355,  364,  332,  332,  332,  332,

      332,  333,  333,  334,  335,  335,  335,  335,  335,  103,
       73,   73,   73,   73,  336,  336,  640,  640,  641,  364,
      273,  371,  280,  336,  336,  336,  336,  336,  337,  337,
      337,  337,  337,  337,  337,  337,   73,  339,  339,  339,
      339,  339,  340,  341,  341,  342,  695,  344,  344,  344,
      344,  344,  345,  346,  346,  347,  528,  349,  349,  349,
      349,  349,  350,  351,  351,  353,   73,  354,  354,  354,
      354,  354,  354,  354,  354,  355,  174,   73,   73,   73,
      356,  356,  652,  652,  653,  670,  371,  378,  287,  356,
      356,  356,  356,  356,  357,  357,  357,  357,  357,  358,

      359,  359,  103,   73,  363,  363,  363,  363,  363,  363,
      363,  363,  364,  257,   73,   73,   73,  365,  365,  656,
      656,  657,   73,  378,  385,  461,  365,  365,  365,  365,
      365,  366,  366,  366,  366,  366,  367,  368,  368,  174,
       73,  370,  370,  370,  370,  370,  370,  370,  370,  371,
      353,   73,  353,   73,  372,  372,  676,  676,  677,   73,
      385,   73,  355,  372,  372,  372,  372,  372,  373,  373,
      373,  373,  373,  374,  375,  375,  257,   73,  377,  377,
      377,  377,  377,  377,  377,  377,  378,  695,   73,  353,
       73,  379,  379,  681,  681,  682,  661,  355,   73,  355,

      379,  379,  379,  379,  379,  380,  380,  380,  380,  380,
      381,  382,  382,  353,   73,  384,  384,  384,  384,  384,
      384,  384,  384,  385,   73,   73,  670,   73,  386,  386,
      465,  465,  465,  465,  465,  465,  473,  386,  386,  386,
      386,  386,  387,  387,  387,  387,  387,  388,  389,  389,
      342,  670,  394,  394,  394,  394,  394,  394,  347,  670,
      398,  398,  398,  398,  398,  398,  353,   73,  402,  402,
      402,  402,  402,  402,  402,  402,  355,   73,   73,  103,
       73,  403,  403,  477,  477,  477,  477,  477,  477,  364,
      403,  403,  403,  403,  403,  404,  404,  405,  406,  406,

      406,  406,  406,  695,   73,   73,  103,   73,  407,  407,
       73,  661,  661,  364,  480,  661,  364,  407,  407,  407,
      407,  407,  408,  408,  408,  408,  408,  408,  408,  408,
       73,  412,  412,  413,  414,  414,  414,  414,  414,   73,
      633,  670,  174,   73,  415,  415,  484,  484,  484,  484,
      484,  484,  371,  415,  415,  415,  415,  415,  103,   73,
      416,  416,  416,  416,  416,  416,  416,  416,  364,  695,
       73,   73,   73,  417,  417,  670,  628,   73,   73,  371,
      487,  494,  417,  417,  417,  417,  417,  418,  418,  419,
      420,  420,  420,  420,  420,   73,   73,   73,  174,   73,

      421,  421,  491,  491,  491,  491,  491,  491,  371,  421,
      421,  421,  421,  421,  422,  422,  422,  422,  422,  422,
      422,  422,  174,   73,  423,  423,  423,  423,  423,  423,
      423,  423,  371,  257,   73,  695,   73,  424,  424,   73,
       73,   73,   73,  378,   73,  378,  424,  424,  424,  424,
      424,  425,  425,  426,  427,  427,  427,  427,  427,  611,
      661,  661,  257,   73,  428,  428,  498,  498,  498,  498,
      498,  498,  378,  428,  428,  428,  428,  428,  429,  429,
      429,  429,  429,  429,  429,  429,  257,   73,  430,  430,
      430,  430,  430,  430,  430,  430,  378,  353,   73,  695,

       73,  431,  431,   73,  633,  633,  633,  385,  628,  385,
      431,  431,  431,  431,  431,  432,  432,  433,  434,  434,
      434,  434,  434,  628,  628,   73,   73,   73,  435,  435,
      505,  505,  505,  505,  505,  505,  501,  435,  435,  435,
      435,  435,  436,  436,  436,  436,  436,  436,  436,  436,
      353,   73,  437,  437,  437,  437,  437,  437,  437,  437,
      385,  353,   73,   73,   73,  438,  438,   73,   73,   73,
       73,  385,  355,  461,  438,  438,  438,  438,  438,  439,
      439,  440,  441,  441,  441,  441,  441,   73,   73,   73,
       73,  528,  442,  442,   73,  506,  506,  506,  506,  506,

      506,  442,  442,  442,  442,  442,  443,  443,  443,  443,
      443,  443,  443,  443,   73,  445,  445,  445,  445,  445,
      446,  447,  447,  448,  526,  450,  450,  450,  450,  450,
      451,  452,  452,  453,  528,  455,  455,  455,  455,  455,
      456,  457,  457,  459,   73,  460,  460,  460,  460,  460,
      460,  460,  460,  461,  459,   73,   73,   73,  462,  462,
      611,  611,  611,   73,  461,  473,  364,  462,  462,  462,
      462,  462,  463,  463,  463,  463,  463,  464,  465,  465,
      467,  467,  468,  469,  469,  469,  469,  469,  470,  633,
      633,  103,   73,  471,  471,  532,  532,  532,  532,  532,

      532,  473,  471,  471,  471,  471,  471,  103,   73,  472,
      472,  472,  472,  472,  472,  472,  472,  473,   73,  174,
       73,   73,  474,  474,  563,  628,  628,  480,  558,  480,
      371,  474,  474,  474,  474,  474,  475,  475,  475,  475,
      475,  476,  477,  477,  174,   73,  479,  479,  479,  479,
      479,  479,  479,  479,  480,   73,  257,   73,   73,  481,
      481,   73,   73,   73,  487,   73,  487,  378,  481,  481,
      481,  481,  481,  482,  482,  482,  482,  482,  483,  484,
      484,  257,   73,  486,  486,  486,  486,  486,  486,  486,
      486,  487,   73,  353,   73,   73,  488,  488,   73,   73,

       73,  494,   73,  494,  385,  488,  488,  488,  488,  488,
      489,  489,  489,  489,  489,  490,  491,  491,  353,   73,
      493,  493,  493,  493,  493,  493,  493,  493,  494,   73,
      459,   73,   73,  495,  495,   73,   73,   73,  501,  611,
      501,  571,  495,  495,  495,  495,  495,  496,  496,  496,
      496,  496,  497,  498,  498,  459,   73,  500,  500,  500,
      500,  500,  500,  500,  500,  501,  459,   73,  695,   73,
      502,  502,  611,  563,  563,  563,  461,  558,  461,  502,
      502,  502,  502,  502,  503,  503,  503,  503,  503,  504,
      505,  505,  448,  558,  510,  510,  510,  510,  510,  510,

      453,  558,  514,  514,  514,  514,  514,  514,  459,   73,
      518,  518,  518,  518,  518,  518,  518,  518,  461,   73,
       73,  459,   73,  519,  519,  575,  575,  575,  575,  575,
      575,  461,  519,  519,  519,  519,  519,  520,  520,  521,
      522,  522,  522,  522,  522,  103,   73,  695,   73,   73,
      523,  523,   73,   73,   73,  473,   73,  473,  461,  523,
      523,  523,  523,  523,  524,  524,  524,  524,  524,  524,
      524,  524,  526,   73,  527,  527,  527,  527,  527,  527,
      527,  527,  528,  103,   73,  174,   73,  529,  529,   73,
       73,  528,  582,  473,  411,  480,  529,  529,  529,  529,

      529,  530,  530,  530,  530,  530,  531,  532,  532,  103,
       73,  534,  534,  534,  534,  534,  534,  534,  534,  473,
      695,   73,  174,   73,  535,  535,  563,  563,  453,  558,
      480,  558,  480,  535,  535,  535,  535,  535,  537,  537,
      537,  537,  537,  537,  537,  537,  174,   73,  538,  538,
      538,  538,  538,  538,  538,  538,  480,  257,   73,  695,
       73,  539,  539,  448,   73,   73,   73,  487,  528,  487,
      539,  539,  539,  539,  539,  541,  541,  541,  541,  541,
      541,  541,  541,  257,   73,  542,  542,  542,  542,  542,
      542,  542,  542,  487,  257,   73,  353,   73,  543,  543,

       73,  411,  453,  453,  487,  453,  494,  543,  543,  543,
      543,  543,  545,  545,  545,  545,  545,  545,  545,  545,
      353,   73,  546,  546,  546,  546,  546,  546,  546,  546,
      494,  695,   73,  353,   73,  547,  547,  448,  448,  448,
       73,  494,   73,  494,  547,  547,  547,  547,  547,  549,
      549,  549,  549,  549,  549,  549,  549,  459,   73,  550,
      550,  550,  550,  550,  550,  550,  550,  501,  459,   73,
      695,   73,  551,  551,   73,  411,  312,  453,  501,  453,
      501,  551,  551,  551,  551,  551,  553,  553,  553,  553,
      553,  553,  553,  553,   73,  555,  555,  555,  555,  555,

      556,  557,  557,  558,  347,  560,  560,  560,  560,  560,
      561,  562,  562,  563,  448,  565,  565,  565,  565,  565,
      566,  567,  567,  569,   73,  570,  570,  570,  570,  570,
      570,  570,  570,  571,  459,   73,   73,   73,  572,  572,
      448,  342,   73,   73,  501,  571,  473,  572,  572,  572,
      572,  572,  573,  573,  573,  573,  573,  574,  575,  575,
      526,   73,  579,  579,  579,  579,  579,  579,  579,  579,
      528,  411,  312,  347,  347,  580,  580,   73,  595,  595,
      595,  595,  595,  595,  580,  580,  580,  580,  580,  583,
      583,  583,  583,  583,  583,  583,  583,  526,  347,  583,

      583,  583,  583,  583,  583,  342,  558,  528,  599,  599,
      599,  599,  599,  599,  563,  342,  603,  603,  603,  603,
      603,  603,  569,   73,  607,  607,  607,  607,  607,  607,
      607,  607,  571,  569,   73,   73,   73,  608,  608,  342,
       73,   73,   73,  571,  480,  487,  608,  608,  608,  608,
      608,  610,  610,  610,  610,  610,  610,  610,  610,  611,
       73,  613,  613,  613,  613,  613,  614,  615,  615,  494,
       73,  611,  362,  643,  643,  643,  643,  643,  643,  501,
       73,  625,  625,  625,  625,  625,  626,  627,  627,  628,
      312,  630,  630,  630,  630,  630,  631,  632,  632,  633,

      227,  635,  635,  635,  635,  635,  636,  637,  637,  569,
       73,  695,   73,  569,   73,  347,  347,  251,  342,  571,
      342,  571,  246,  571,   73,  651,  651,  651,  651,  651,
      651,  628,   73,  655,  655,  655,  655,  655,  655,  633,
       73,  659,  659,  659,  659,  659,  659,   73,  312,  571,
      661,  227,  663,  663,  663,  663,  663,  664,  665,  665,
       73,  667,  667,  667,  667,  667,  668,  669,  669,  670,
      220,  672,  672,  672,  672,  672,  673,  674,  674,  661,
      251,  679,  679,  679,  679,  679,  679,   73,  680,  680,
      680,  680,  680,  680,  670,  251,  684,  684,  684,  684,

      684,  684,   73,  686,  686,  686,  686,  686,  687,  688,
      688,   73,  690,  690,  690,  690,  690,  691,  692,  692,
       73,  693,  693,  693,  693,  693,  693,   73,  694,  694,
      694,  694,  694,  694,   35,   35,   35,   35,   35,   35,
       35,   63,  251,   63,   63,   63,   63,   63,   69,   69,
       69,   68,   68,   68,   89,  246,   89,   92,  246,   92,
       94,   94,   94,   95,   95,   95,  106,  106,  106,  106,
      119,  246,  119,  120,  120,  121,  121,  121,  122,  122,
      122,  126,  126,  126,  126,  137,  137,  137,  137,  149,
      271,  149,  152,  227,  152,  153,  153,  153,  154,  154,

      154,  161,  161,  161,  161,  169,  155,  169,  172,  220,
      172,  173,  173,  173,  173,  173,  177,  177,  177,  177,
      188,  220,  188,  189,  189,  189,  190,  190,  190,  194,
      194,  194,  194,  198,  198,  198,  198,  198,  201,  201,
      201,  201,  208,  220,  208,  213,  213,  213,  213,  221,
      221,  224,  224,  225,  225,  225,  226,  226,  226,  233,
      233,  233,  233,  240,  240,  240,  240,  247,  264,  247,
      250,  251,  250,  252,  251,  252,  255,  168,  255,  256,
      256,  256,  256,  256,  260,  260,  260,  260,  268,  268,
      269,  269,  269,  270,  270,  270,  274,  274,  274,  274,

      278,  278,  278,  278,  278,  281,  281,  281,  281,  285,
      285,  285,  285,  285,  288,  288,  288,  288,  295,  246,
      295,  299,  246,  299,  304,  304,  304,  304,  310,  310,
      310,  311,  311,  311,  318,  318,  318,  318,  325,  325,
      325,  325,  332,  332,  332,  332,  338,  338,  341,  341,
      343,  227,  343,  346,  155,  346,  348,  148,  348,  351,
      220,  351,  352,  352,  352,  352,  352,  356,  356,  356,
      356,  360,  360,  360,  361,  361,  361,  365,  365,  365,
      365,  369,  369,  369,  369,  369,  372,  372,  372,  372,
      376,  376,  376,  376,  376,  379,  379,  379,  379,  383,

      383,  383,  383,  383,  386,  386,  386,  386,  390,  390,
      394,  220,  394,  398,  219,  398,  403,  403,  403,  403,
      409,  409,  409,  410,  410,  410,  417,  417,  417,  417,
      424,  424,  424,  424,  431,  431,  431,  431,  438,  438,
      438,  438,  444,  444,  447,  447,  449,  168,  449,  452,
      168,  452,  454,  168,  454,  457,  191,  457,  458,  458,
      458,  458,  458,  462,  462,  462,  462,  466,  466,  466,
      474,  474,  474,  474,  478,  478,  478,  478,  478,  481,
      481,  481,  481,  485,  485,  485,  485,  485,  488,  488,
      488,  488,  492,  492,  492,  492,  492,  495,  495,  495,

      495,  499,  499,  499,  499,  499,  502,  502,  502,  502,
      506,  506,  510,  155,  510,  514,   96,  514,  519,  519,
      519,  519,  525,  525,  525,  533,  533,  148,  533,  529,
      529,  529,  536,  148,  536,  535,  535,  535,  535,  540,
      148,  540,  539,  539,  539,  539,  544,  184,  544,  543,
      543,  543,  543,  548,  183,  548,  547,  547,  547,  547,
      552,  182,  552,  551,  551,  551,  551,  554,  554,  557,
      557,  559,  181,  559,  562,  168,  562,  564,  168,  564,
      567,  155,  567,  568,  568,  568,  568,  568,  572,  572,
      572,  572,  581,  581,  581,  580,  580,  580,  584,  584,

       96,  584,  585,  585,  585,  585,  585,  586,  586,  695,
      586,  587,  587,  587,  587,  587,  588,  588,   88,  588,
      589,  589,  589,  589,  589,  590,  590,  148,  590,  591,
      591,  591,  591,  591,  592,  592,  148,  592,  593,  593,
      593,  593,  593,  594,  594,  147,  594,  595,  595,  599,
      146,  599,  603,  145,  603,  609,  143,  609,  608,  608,
      608,  608,  612,   42,  612,  615,  123,  615,  616,   96,
      616,  616,  616,  617,  617,   42,  617,  618,  618,   42,
      618,  619,  619,   88,  619,  620,  620,   88,  620,  621,
      621,   88,  621,  622,  622,  115,  622,  623,  623,  114,

      623,  624,  624,  627,  627,  629,  113,  629,  632,  112,
      632,  634,  111,  634,  637,  102,  637,  638,  638,  638,
      638,  638,  639,  639,  695,  639,  643,   96,  643,  644,
      644,   42,  644,  645,  645,   88,  645,  646,  646,   88,
      646,  647,  647,   87,  647,  648,  648,   86,  648,  649,
      649,   85,  649,  650,  650,   84,  650,  651,  651,  655,
       83,  655,  659,   82,  659,  660,  660,   81,  660,  662,
       80,  662,  665,   79,  665,  582,  582,   42,  582,  666,
      666,  669,  669,  671,   70,  671,  674,   37,  674,  675,
      675,   62,  675,  679,   61,  679,  680,  680,  684,   60,

      684,  685,  685,  688,  688,  689,  689,  692,  692,  693,
      693,  694,  694,   59,   58,   57,   54,   53,   50,   49,
       48,   47,   38,   37,  695,   36,   36,    5,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695
    } ;

static yyconst short int yy_chk[3679] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       16,  911,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   40,   40,   40,   77,   16,   16,   18,   18,   18,
       18,   18,   18,   77,   16,   16,   16,   16,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   45,   45,  108,  108,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   28,   88,   88,   88,   25,   25,
      128,  128,   28,  908,  100,  179,  179,   25,   25,   25,
       25,   25,   41,  100,   41,   41,   41,   41,   41,   41,
       41,   41,   41,  102,  102,  102,  106,   41,   41,   76,
       76,   76,   76,   76,   76,  106,   41,   41,   41,   41,
       41,   44,   44,   44,   44,   44,   44,   44,   44,   46,
       46,   46,   46,   46,   46,   46,   46,   47,   47,   47,

       47,   47,   47,   47,   47,   47,  103,  103,  103,  109,
      109,   47,   47,   99,   99,   99,   99,   99,   99,  109,
       47,   47,   47,   47,   47,   51,   51,   51,   51,   51,
       51,   51,   51,  126,  129,  129,  136,  136,   51,   51,
      196,  196,  126,  532,  129,  897,  136,   51,   51,   51,
       51,   51,   65,  532,   65,   65,   65,   65,   65,   65,
       65,   65,   67,  895,   67,   67,   67,   67,   67,   67,
       67,   67,   67,  203,  203,  112,  885,   67,   67,  132,
      132,  132,  132,  132,  132,  132,   67,   67,   67,   67,
       67,   70,   70,   70,   70,   70,   70,   70,   70,   70,

      112,  137,  137,  141,  159,   70,   70,  148,  148,  148,
      864,  137,  141,  159,   70,   70,   70,   70,   70,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
      262,  262,  142,  142,   74,   74,  140,  140,  140,  140,
      140,  140,  142,   74,   74,   74,   74,   74,   75,   75,
       75,   75,   75,   75,   75,   75,   78,   78,   78,   78,
       78,   78,   78,   78,  168,  168,  168,  160,  160,   78,
       78,  158,  158,  158,  158,  158,  158,  160,   78,   78,
       78,   78,   78,   91,  862,   91,   91,   91,   91,   91,
       91,   97,   97,   97,   97,   97,   97,   97,   97,   97,

       97,   97,  161,  161,  165,  173,   97,   97,  174,  174,
      174,  860,  161,  165,  173,   97,   97,   97,   97,   97,
       98,   98,   98,   98,   98,   98,   98,   98,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  276,
      276,  166,  166,  104,  104,  164,  164,  164,  164,  164,
      164,  166,  104,  104,  104,  104,  104,  105,  105,  105,
      105,  105,  105,  105,  105,  177,  180,  180,  194,  198,
      105,  105,  283,  283,  177,  845,  180,  194,  198,  105,
      105,  105,  105,  105,  107,  107,  107,  107,  107,  107,
      107,  107,  117,  822,  117,  117,  117,  117,  117,  117,

      117,  117,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  197,  197,  201,  204,  204,  123,  123,  246,  246,
      246,  197,  201,  820,  204,  123,  123,  123,  123,  123,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  212,  212,  213,  213,  124,  124,  251,  251,  251,
      818,  212,  791,  213,  124,  124,  124,  124,  124,  125,
      125,  125,  125,  125,  125,  125,  125,  257,  257,  257,
      789,  217,  125,  125,  216,  216,  216,  216,  216,  216,
      217,  125,  125,  125,  125,  125,  127,  127,  127,  127,
      127,  127,  127,  127,  134,  787,  134,  134,  134,  134,

      134,  134,  134,  134,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  218,  218,  231,  237,  138,
      138,  265,  265,  265,  265,  218,  231,  237,  138,  138,
      138,  138,  138,  139,  139,  139,  139,  139,  139,  139,
      139,  151,  762,  151,  151,  151,  151,  151,  151,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      266,  266,  266,  760,  156,  156,  223,  223,  223,  223,
      223,  223,  223,  156,  156,  156,  156,  156,  157,  157,
      157,  157,  157,  157,  157,  157,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  290,  290,  232,

      232,  162,  162,  230,  230,  230,  230,  230,  230,  232,
      162,  162,  162,  162,  162,  163,  163,  163,  163,  163,
      163,  163,  163,  171,  758,  171,  171,  171,  171,  171,
      171,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  233,  233,  238,  238,  175,  175,  342,  342,
      342,  736,  233,  734,  238,  175,  175,  175,  175,  175,
      176,  176,  176,  176,  176,  176,  176,  176,  347,  347,
      347,  239,  239,  176,  176,  236,  236,  236,  236,  236,
      236,  239,  176,  176,  176,  176,  176,  178,  178,  178,
      178,  178,  178,  178,  178,  186,  186,  186,  186,  186,

      186,  186,  186,  186,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  240,  240,  244,  245,  245,  191,  191,
      353,  353,  353,  240,  244,  727,  245,  191,  191,  191,
      191,  191,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  358,  358,  722,  256,  192,  192,  243,
      243,  243,  243,  243,  243,  256,  192,  192,  192,  192,
      192,  193,  193,  193,  193,  193,  193,  193,  193,  260,
      263,  263,  274,  278,  193,  193,  367,  367,  260,  715,
      263,  274,  278,  193,  193,  193,  193,  193,  195,  195,
      195,  195,  195,  195,  195,  195,  199,  199,  199,  199,

      199,  199,  199,  199,  199,  199,  199,  277,  277,  281,
      285,  199,  199,  374,  374,  381,  381,  277,  281,  285,
      199,  199,  199,  199,  199,  200,  200,  200,  200,  200,
      200,  200,  200,  284,  284,  288,  291,  291,  200,  200,
      388,  388,  714,  284,  288,  708,  291,  200,  200,  200,
      200,  200,  202,  202,  202,  202,  202,  202,  202,  202,
      206,  579,  206,  206,  206,  206,  206,  206,  206,  206,
      210,  579,  210,  210,  210,  210,  210,  210,  210,  210,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  303,  303,  304,  304,  214,  214,  448,  448,  448,

      706,  303,  699,  304,  214,  214,  214,  214,  214,  215,
      215,  215,  215,  215,  215,  215,  215,  220,  220,  220,
      220,  220,  220,  220,  220,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  453,  453,  453,  308,
      228,  228,  307,  307,  307,  307,  307,  307,  308,  228,
      228,  228,  228,  228,  229,  229,  229,  229,  229,  229,
      229,  229,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  309,  309,  316,  322,  234,  234,  459,
      459,  459,  697,  309,  316,  322,  234,  234,  234,  234,
      234,  235,  235,  235,  235,  235,  235,  235,  235,  241,

      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      464,  464,  317,  317,  241,  241,  315,  315,  315,  315,
      315,  315,  317,  241,  241,  241,  241,  241,  242,  242,
      242,  242,  242,  242,  242,  242,  249,  694,  249,  249,
      249,  249,  249,  249,  254,  693,  254,  254,  254,  254,
      254,  254,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  318,  318,  323,  323,  258,  258,  476,
      476,  483,  483,  318,  692,  323,  258,  258,  258,  258,
      258,  259,  259,  259,  259,  259,  259,  259,  259,  490,
      490,  690,  324,  324,  259,  259,  321,  321,  321,  321,

      321,  321,  324,  259,  259,  259,  259,  259,  261,  261,
      261,  261,  261,  261,  261,  261,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  325,  325,  329,  330,  330,
      271,  271,  497,  497,  689,  325,  329,  688,  330,  271,
      271,  271,  271,  271,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  504,  504,  331,  331,  272,
      272,  328,  328,  328,  328,  328,  328,  331,  272,  272,
      272,  272,  272,  273,  273,  273,  273,  273,  273,  273,
      273,  332,  332,  336,  337,  337,  273,  273,  526,  526,
      526,  332,  336,  686,  337,  273,  273,  273,  273,  273,

      275,  275,  275,  275,  275,  275,  275,  275,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  558,
      558,  558,  352,  279,  279,  335,  335,  335,  335,  335,
      335,  352,  279,  279,  279,  279,  279,  280,  280,  280,
      280,  280,  280,  280,  280,  563,  563,  563,  574,  574,
      280,  280,  340,  340,  340,  340,  340,  340,  340,  280,
      280,  280,  280,  280,  282,  282,  282,  282,  282,  282,
      282,  282,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  356,  359,  359,  365,  286,  286,  569,
      569,  569,  356,  685,  359,  365,  286,  286,  286,  286,

      286,  287,  287,  287,  287,  287,  287,  287,  287,  368,
      368,  369,  372,  376,  287,  287,  611,  611,  611,  368,
      369,  372,  376,  287,  287,  287,  287,  287,  289,  289,
      289,  289,  289,  289,  289,  289,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  297,  580,  297,  297,  297,
      297,  297,  297,  297,  297,  301,  580,  301,  301,  301,
      301,  301,  301,  301,  301,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  375,  375,  379,  383,
      305,  305,  628,  628,  628,  684,  375,  379,  383,  305,
      305,  305,  305,  305,  306,  306,  306,  306,  306,  306,

      306,  306,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  382,  382,  386,  407,  313,  313,  633,
      633,  633,  683,  382,  386,  407,  313,  313,  313,  313,
      313,  314,  314,  314,  314,  314,  314,  314,  314,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      389,  389,  402,  402,  319,  319,  661,  661,  661,  681,
      389,  680,  402,  319,  319,  319,  319,  319,  320,  320,
      320,  320,  320,  320,  320,  320,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  403,  403,  408,
      408,  326,  326,  670,  670,  670,  679,  403,  678,  408,

      326,  326,  326,  326,  326,  327,  327,  327,  327,  327,
      327,  327,  327,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  676,  675,  674,  415,  333,  333,
      406,  406,  406,  406,  406,  406,  415,  333,  333,  333,
      333,  333,  334,  334,  334,  334,  334,  334,  334,  334,
      345,  672,  345,  345,  345,  345,  345,  345,  350,  671,
      350,  350,  350,  350,  350,  350,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  669,  667,  416,
      416,  354,  354,  414,  414,  414,  414,  414,  414,  416,
      354,  354,  354,  354,  354,  355,  355,  355,  355,  355,

      355,  355,  355,  417,  417,  421,  422,  422,  355,  355,
      666,  665,  663,  417,  421,  662,  422,  355,  355,  355,
      355,  355,  357,  357,  357,  357,  357,  357,  357,  357,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  660,
      659,  658,  423,  423,  362,  362,  420,  420,  420,  420,
      420,  420,  423,  362,  362,  362,  362,  362,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  424,
      424,  428,  435,  363,  363,  656,  655,  654,  652,  424,
      428,  435,  363,  363,  363,  363,  363,  364,  364,  364,
      364,  364,  364,  364,  364,  651,  650,  649,  429,  429,

      364,  364,  427,  427,  427,  427,  427,  427,  429,  364,
      364,  364,  364,  364,  366,  366,  366,  366,  366,  366,
      366,  366,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  430,  430,  431,  431,  370,  370,  648,
      647,  646,  645,  430,  644,  431,  370,  370,  370,  370,
      370,  371,  371,  371,  371,  371,  371,  371,  371,  643,
      642,  640,  436,  436,  371,  371,  434,  434,  434,  434,
      434,  434,  436,  371,  371,  371,  371,  371,  373,  373,
      373,  373,  373,  373,  373,  373,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  437,  437,  438,

      438,  377,  377,  639,  637,  635,  634,  437,  632,  438,
      377,  377,  377,  377,  377,  378,  378,  378,  378,  378,
      378,  378,  378,  630,  629,  627,  625,  442,  378,  378,
      441,  441,  441,  441,  441,  441,  442,  378,  378,  378,
      378,  378,  380,  380,  380,  380,  380,  380,  380,  380,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  443,  443,  458,  462,  384,  384,  624,  623,  622,
      621,  443,  458,  462,  384,  384,  384,  384,  384,  385,
      385,  385,  385,  385,  385,  385,  385,  620,  619,  618,
      617,  616,  385,  385,  446,  446,  446,  446,  446,  446,

      446,  385,  385,  385,  385,  385,  387,  387,  387,  387,
      387,  387,  387,  387,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  396,  583,  396,  396,  396,  396,  396,
      396,  396,  396,  400,  583,  400,  400,  400,  400,  400,
      400,  400,  400,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  465,  465,  474,  478,  404,  404,
      615,  613,  612,  609,  465,  474,  478,  404,  404,  404,
      404,  404,  405,  405,  405,  405,  405,  405,  405,  405,
      411,  411,  411,  411,  411,  411,  411,  411,  411,  606,
      604,  477,  477,  411,  411,  469,  469,  469,  469,  469,

      469,  477,  411,  411,  411,  411,  411,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  412,  481,  484,
      484,  485,  412,  412,  603,  602,  600,  481,  599,  484,
      485,  412,  412,  412,  412,  412,  413,  413,  413,  413,
      413,  413,  413,  413,  418,  418,  418,  418,  418,  418,
      418,  418,  418,  418,  418,  488,  491,  491,  492,  418,
      418,  598,  596,  595,  488,  594,  491,  492,  418,  418,
      418,  418,  418,  419,  419,  419,  419,  419,  419,  419,
      419,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  495,  498,  498,  499,  425,  425,  592,  590,

      588,  495,  586,  498,  499,  425,  425,  425,  425,  425,
      426,  426,  426,  426,  426,  426,  426,  426,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  432,  432,  502,
      505,  505,  523,  432,  432,  584,  582,  581,  502,  578,
      505,  523,  432,  432,  432,  432,  432,  433,  433,  433,
      433,  433,  433,  433,  433,  439,  439,  439,  439,  439,
      439,  439,  439,  439,  439,  439,  518,  518,  519,  519,
      439,  439,  576,  567,  565,  564,  518,  562,  519,  439,
      439,  439,  439,  439,  440,  440,  440,  440,  440,  440,
      440,  440,  451,  560,  451,  451,  451,  451,  451,  451,

      456,  559,  456,  456,  456,  456,  456,  456,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  557,
      555,  524,  524,  460,  460,  522,  522,  522,  522,  522,
      522,  524,  460,  460,  460,  460,  460,  461,  461,  461,
      461,  461,  461,  461,  461,  534,  534,  535,  535,  568,
      461,  461,  554,  552,  548,  534,  544,  535,  568,  461,
      461,  461,  461,  461,  463,  463,  463,  463,  463,  463,
      463,  463,  467,  540,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  537,  537,  538,  538,  467,  467,  536,
      533,  529,  528,  537,  525,  538,  467,  467,  467,  467,

      467,  468,  468,  468,  468,  468,  468,  468,  468,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      539,  539,  541,  541,  472,  472,  517,  515,  514,  513,
      539,  511,  541,  472,  472,  472,  472,  472,  475,  475,
      475,  475,  475,  475,  475,  475,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  542,  542,  543,
      543,  479,  479,  510,  509,  507,  506,  542,  471,  543,
      479,  479,  479,  479,  479,  482,  482,  482,  482,  482,
      482,  482,  482,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  545,  545,  546,  546,  486,  486,

      470,  466,  457,  455,  545,  454,  546,  486,  486,  486,
      486,  486,  489,  489,  489,  489,  489,  489,  489,  489,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  547,  547,  549,  549,  493,  493,  452,  450,  449,
      447,  547,  445,  549,  493,  493,  493,  493,  493,  496,
      496,  496,  496,  496,  496,  496,  496,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  550,  550,
      551,  551,  500,  500,  444,  410,  409,  401,  550,  399,
      551,  500,  500,  500,  500,  500,  503,  503,  503,  503,
      503,  503,  503,  503,  508,  508,  508,  508,  508,  508,

      508,  508,  508,  512,  398,  512,  512,  512,  512,  512,
      512,  512,  512,  516,  397,  516,  516,  516,  516,  516,
      516,  516,  516,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  553,  553,  572,  585,  520,  520,
      395,  394,  393,  391,  553,  572,  585,  520,  520,  520,
      520,  520,  521,  521,  521,  521,  521,  521,  521,  521,
      527,  390,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  361,  360,  351,  349,  527,  527,  556,  556,  556,
      556,  556,  556,  556,  527,  527,  527,  527,  527,  530,
      530,  530,  530,  530,  530,  530,  530,  531,  348,  531,

      531,  531,  531,  531,  531,  346,  561,  531,  561,  561,
      561,  561,  561,  561,  566,  344,  566,  566,  566,  566,
      566,  566,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  575,  575,  587,  589,  570,  570,  343,
      341,  339,  338,  575,  587,  589,  570,  570,  570,  570,
      570,  573,  573,  573,  573,  573,  573,  573,  573,  577,
      591,  577,  577,  577,  577,  577,  577,  577,  577,  591,
      593,  614,  312,  614,  614,  614,  614,  614,  614,  593,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  601,
      311,  601,  601,  601,  601,  601,  601,  601,  601,  605,

      310,  605,  605,  605,  605,  605,  605,  605,  605,  607,
      607,  608,  608,  610,  610,  302,  300,  299,  298,  607,
      296,  608,  295,  610,  626,  626,  626,  626,  626,  626,
      626,  631,  294,  631,  631,  631,  631,  631,  631,  636,
      638,  636,  636,  636,  636,  636,  636,  292,  270,  638,
      641,  269,  641,  641,  641,  641,  641,  641,  641,  641,
      653,  653,  653,  653,  653,  653,  653,  653,  653,  657,
      268,  657,  657,  657,  657,  657,  657,  657,  657,  664,
      255,  664,  664,  664,  664,  664,  664,  668,  668,  668,
      668,  668,  668,  668,  673,  253,  673,  673,  673,  673,

      673,  673,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      687,  687,  687,  687,  687,  687,  687,  691,  691,  691,
      691,  691,  691,  691,  696,  696,  696,  696,  696,  696,
      696,  698,  252,  698,  698,  698,  698,  698,  700,  700,
      700,  701,  701,  701,  702,  250,  702,  703,  248,  703,
      704,  704,  704,  705,  705,  705,  707,  707,  707,  707,
      709,  247,  709,  710,  710,  711,  711,  711,  712,  712,
      712,  713,  713,  713,  713,  716,  716,  716,  716,  717,
      227,  717,  718,  226,  718,  719,  719,  719,  720,  720,

      720,  721,  721,  721,  721,  723,  225,  723,  724,  224,
      724,  725,  725,  725,  725,  725,  726,  726,  726,  726,
      728,  222,  728,  729,  729,  729,  730,  730,  730,  731,
      731,  731,  731,  732,  732,  732,  732,  732,  733,  733,
      733,  733,  735,  221,  735,  737,  737,  737,  737,  738,
      738,  739,  739,  740,  740,  740,  741,  741,  741,  742,
      742,  742,  742,  743,  743,  743,  743,  744,  219,  744,
      745,  211,  745,  746,  209,  746,  747,  208,  747,  748,
      748,  748,  748,  748,  749,  749,  749,  749,  750,  750,
      751,  751,  751,  752,  752,  752,  753,  753,  753,  753,

      754,  754,  754,  754,  754,  755,  755,  755,  755,  756,
      756,  756,  756,  756,  757,  757,  757,  757,  759,  207,
      759,  761,  205,  761,  763,  763,  763,  763,  764,  764,
      764,  765,  765,  765,  766,  766,  766,  766,  767,  767,
      767,  767,  768,  768,  768,  768,  769,  769,  770,  770,
      771,  190,  771,  772,  189,  772,  773,  188,  773,  774,
      187,  774,  775,  775,  775,  775,  775,  776,  776,  776,
      776,  777,  777,  777,  778,  778,  778,  779,  779,  779,
      779,  780,  780,  780,  780,  780,  781,  781,  781,  781,
      782,  782,  782,  782,  782,  783,  783,  783,  783,  784,

      784,  784,  784,  784,  785,  785,  785,  785,  786,  786,
      788,  185,  788,  790,  183,  790,  792,  792,  792,  792,
      793,  793,  793,  794,  794,  794,  795,  795,  795,  795,
      796,  796,  796,  796,  797,  797,  797,  797,  798,  798,
      798,  798,  799,  799,  800,  800,  801,  172,  801,  802,
      170,  802,  803,  169,  803,  804,  155,  804,  805,  805,
      805,  805,  805,  806,  806,  806,  806,  807,  807,  807,
      808,  808,  808,  808,  809,  809,  809,  809,  809,  810,
      810,  810,  810,  811,  811,  811,  811,  811,  812,  812,
      812,  812,  813,  813,  813,  813,  813,  814,  814,  814,

      814,  815,  815,  815,  815,  815,  816,  816,  816,  816,
      817,  817,  819,  154,  819,  821,  153,  821,  823,  823,
      823,  823,  824,  824,  824,  825,  825,  152,  825,  826,
      826,  826,  827,  150,  827,  828,  828,  828,  828,  829,
      149,  829,  830,  830,  830,  830,  831,  147,  831,  832,
      832,  832,  832,  833,  146,  833,  834,  834,  834,  834,
      835,  145,  835,  836,  836,  836,  836,  837,  837,  838,
      838,  839,  144,  839,  840,  135,  840,  841,  133,  841,
      842,  122,  842,  843,  843,  843,  843,  843,  844,  844,
      844,  844,  846,  846,  846,  847,  847,  847,  848,  848,

      121,  848,  849,  849,  849,  849,  849,  850,  850,  120,
      850,  851,  851,  851,  851,  851,  852,  852,  119,  852,
      853,  853,  853,  853,  853,  854,  854,  118,  854,  855,
      855,  855,  855,  855,  856,  856,  116,  856,  857,  857,
      857,  857,  857,  858,  858,  115,  858,  859,  859,  861,
      114,  861,  863,  113,  863,  865,  111,  865,  866,  866,
      866,  866,  867,  110,  867,  868,   96,  868,  869,   95,
      869,  869,  869,  870,  870,   94,  870,  871,  871,   93,
      871,  872,  872,   92,  872,  873,  873,   90,  873,  874,
      874,   89,  874,  875,  875,   86,  875,  876,  876,   85,

      876,  877,  877,  878,  878,  879,   83,  879,  880,   81,
      880,  881,   79,  881,  882,   73,  882,  883,  883,  883,
      883,  883,  884,  884,   72,  884,  886,   69,  886,  887,
      887,   68,  887,  888,  888,   66,  888,  889,  889,   64,
      889,  890,  890,   62,  890,  891,  891,   61,  891,  892,
      892,   60,  892,  893,  893,   58,  893,  894,  894,  896,
       57,  896,  898,   56,  898,  899,  899,   55,  899,  900,
       54,  900,  901,   53,  901,  902,  902,   43,  902,  903,
      903,  904,  904,  905,   42,  905,  906,   37,  906,  907,
      907,   34,  907,  909,   33,  909,  910,  910,  912,   32,

      912,  913,  913,  914,  914,  915,  915,  916,  916,  917,
      917,  918,  918,   31,   30,   29,   27,   26,   23,   22,
       21,   19,    9,    7,    5,    4,    3,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "policy.l"
#define INITIAL 0
#line 2 "policy.l"

#include "config.h"

#include "policy/common/policy_utils.hh"

#include <vector>
#include <string>
#include <sstream>

#include "policy_parser.hh"
#include "yacc.yy_policy_parser.cc.h"

#define yylval yy_policy_parserlval
#define yyerror yy_policy_parsererror
#define yyparse yy_policy_parserparse


void yyerror(const char *m);
extern int yyparse(void);


using namespace policy_parser;

// instantiate the globals here.
vector<Node*>* policy_parser::_parser_nodes;
unsigned policy_parser::_parser_lineno;


// try not to pollute
namespace  {
	string _last_error;
}

#define YY_NO_UNPUT 1
#define STR 1

#line 1514 "lex.yy_policy_parser.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 69 "policy.l"


#line 1668 "lex.yy_policy_parser.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 696 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3628 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "policy.l"
{ yylval.c_str = strdup(yytext);
		  return YY_UINT;
		}  
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 75 "policy.l"
{ yylval.c_str = strdup(yytext);
		  return YY_INT;
		}  
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 79 "policy.l"
BEGIN(STR);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 81 "policy.l"
BEGIN(INITIAL);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 83 "policy.l"
{ yylval.c_str = strdup(yytext); 
		  _parser_lineno += policy_utils::count_nl(yytext);
		  return YY_STR;
		}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 88 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV4;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 93 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV4NET;
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 99 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV6;
		}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 104 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV6NET;
		}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 110 "policy.l"
return YY_LPAR;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 111 "policy.l"
return YY_RPAR;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 113 "policy.l"
return YY_EQ; 
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 114 "policy.l"
return YY_NE;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 115 "policy.l"
return YY_LE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 116 "policy.l"
return YY_GE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 117 "policy.l"
return YY_LT;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 118 "policy.l"
return YY_GT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 120 "policy.l"
return YY_AND;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 121 "policy.l"
return YY_OR;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 122 "policy.l"
return YY_XOR;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 123 "policy.l"
return YY_NOT;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 125 "policy.l"
return YY_ADD;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 126 "policy.l"
return YY_SUB;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 127 "policy.l"
return YY_MUL;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 130 "policy.l"
return YY_MODIFY;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 131 "policy.l"
return YY_ASSIGN;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 133 "policy.l"
return YY_ACCEPT;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 134 "policy.l"
return YY_REJECT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 136 "policy.l"
return YY_SET;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 137 "policy.l"
return YY_REGEX;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 139 "policy.l"
return YY_PROTOCOL;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 141 "policy.l"
{ yylval.c_str = strdup(yytext);
				  return YY_ID;
				}  
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 145 "policy.l"
return YY_SEMICOLON;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 148 "policy.l"
/* eat blanks */
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 150 "policy.l"
_parser_lineno++;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 152 "policy.l"
{ yyerror("Unknown character"); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 154 "policy.l"
ECHO;
	YY_BREAK
#line 1957 "lex.yy_policy_parser.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 696 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 696 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 695);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 154 "policy.l"


void yyerror(const char *m) {
        ostringstream oss;

        oss << "Error on line " <<  _parser_lineno << ": " << m;

        _last_error = oss.str();
}

// Everything is put in the lexer because of YY_BUFFER_STATE...
int 
policy_parser::policy_parse(vector<Node*>& outnodes, const string& conf, string& outerr) {

        YY_BUFFER_STATE yybuffstate = yy_scan_string(conf.c_str());

        _last_error = "No error";
        _parser_nodes = &outnodes;
        _parser_lineno = 1;

        int res = yyparse();
        
        yy_delete_buffer(yybuffstate);
        outerr = _last_error;
        
        return res;
}
