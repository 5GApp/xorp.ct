#define yy_create_buffer boot_create_buffer
#define yy_delete_buffer boot_delete_buffer
#define yy_scan_buffer boot_scan_buffer
#define yy_scan_string boot_scan_string
#define yy_scan_bytes boot_scan_bytes
#define yy_flex_debug boot_flex_debug
#define yy_init_buffer boot_init_buffer
#define yy_flush_buffer boot_flush_buffer
#define yy_load_buffer_state boot_load_buffer_state
#define yy_switch_to_buffer boot_switch_to_buffer
#define yyin bootin
#define yyleng bootleng
#define yylex bootlex
#define yyout bootout
#define yyrestart bootrestart
#define yytext boottext

#line 19 "lex.boot.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 * $FreeBSD: src/usr.bin/lex/flex.skl,v 1.4 1999/10/27 07:56:44 obrien Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 29
#define YY_END_OF_BUFFER 30
static yyconst short int yy_accept[680] =
    {   0,
        0,    0,   24,   24,   17,   17,   30,   28,    3,    4,
       16,   28,    9,    9,    9,    6,    5,   15,   15,   15,
       15,    1,    2,   24,   26,   25,   17,   20,   22,   29,
        3,   23,    0,    9,    0,    0,    9,    9,    9,   12,
       15,   15,   15,   15,   24,   25,   25,   27,   17,   21,
       18,   19,    0,    0,    0,    9,    0,    0,   12,    9,
        9,    0,   12,   12,   12,   12,   15,   15,   15,    0,
        0,    0,    0,    0,    9,    0,    0,    0,    0,   12,
       12,   12,   12,   13,   13,    0,   12,    0,   12,   12,
       12,   12,   15,   15,    7,    0,    0,    0,    0,    9,

        0,    0,    0,   12,   12,    0,   12,   12,   12,   12,
       13,   13,   13,    0,    0,    0,   12,   12,   12,   12,
       12,   12,   12,    8,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   13,    0,    0,    0,    0,
        0,   12,    0,   12,    0,   12,   12,   12,   12,   10,
       10,   10,    0,    0,    0,    0,   12,   12,    0,   12,
       12,   12,   12,   12,   12,    0,   12,   12,   12,   12,
        0,    0,    0,    0,    0,    0,    0,   12,   12,   12,
       12,   12,   12,   12,    0,   10,   10,   10,   10,    0,

        0,    0,    0,    0,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   12,    0,   12,    0,   12,   12,   12,   12,
       11,   11,   11,   10,    0,    0,    0,   12,   12,    0,
       12,   12,   12,   12,   12,   12,    0,   12,   12,   12,
       12,   12,   12,    0,   12,   12,   12,   12,   12,   12,
       12,    0,    0,    0,    0,    0,    0,    0,    0,   12,
       12,   12,   12,   12,   12,   12,    0,    0,    0,    0,
        0,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       12,    0,   12,    0,   12,   12,   12,   12,    0,    0,
       14,   12,   12,    0,   12,   12,   12,   12,   12,   12,
        0,   12,   12,   12,   12,   12,   12,    0,   12,   12,
       12,   12,   12,   12,    0,   12,   12,   12,   12,   12,
       12,   12,   12,    0,    0,    0,    0,    0,    0,    0,
        0,   12,   12,   12,   12,   12,   12,   12,    0,    0,
        0,   14,    0,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   12,
        0,   12,    0,   12,   12,   12,   12,    0,    0,    0,
        0,    0,   12,    0,   12,    0,   12,   12,   12,   12,
       12,   12,    0,   12,   12,   12,   12,   12,   12,    0,
       12,   12,   12,   12,   12,   12,    0,   12,   12,   12,
       12,   12,   12,    0,   12,   12,   12,   12,   12,   12,
       12,   12,    0,    0,    0,    0,    0,    0,    0,    0,

       12,   12,   12,   12,   12,   12,   12,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   12,    0,   12,    0,   12,   12,   12,   12,    0,
        0,    0,    0,    0,   12,   12,    0,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,    0,    0,    0,    0,    0,    0,    0,    0,
       12,   12,   12,   12,    0,    0,    0,    0,    0,    0,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   12,   12,    0,    0,    0,    0,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,    0,    0,
        0,    0,    0,   12,    0,    0,    0,    0,    0,   12,
       12,   12,   12,    0,    0,    0,    0,    0,   12,   12,
       12,   12,    0,   12,   12,   12,   12,    0,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   15,   15,   16,   17,   18,    1,
        1,    1,    1,    1,   19,   19,   19,   19,   19,   19,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
        1,   21,    1,    1,    6,    1,   22,   19,   19,   19,

       23,   24,   20,   20,   20,   20,   20,   25,   20,   20,
       20,   20,   20,   26,   27,   28,   29,   20,   20,   20,
       20,   20,   30,    1,   31,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[32] =
    {   0,
        1,    1,    2,    3,    4,    5,    6,    7,    8,    8,
        8,    8,    8,    8,    8,    8,    9,    1,   10,    5,
       11,   10,   10,   10,    5,    5,    5,    5,    5,    1,
        1
    } ;

static yyconst short int yy_base[920] =
    {   0,
        0,    0,   29,   30,   33,   35, 2141, 3908, 2138, 3908,
     3908, 2133,   50,   68,   84, 2106, 3908,   95,    0, 2100,
     2094, 3908, 3908,    0, 3908,   35,    0, 3908, 3908,   47,
     2105, 3908,   35,  118, 2070, 2060,  136,   26,  154,  171,
        0,  192, 2040, 2035,    0,   44,   50, 3908,    0, 3908,
     3908,   67, 2055,  215, 2054,  225, 2024, 2020,  242,    0,
     2029, 2024,  260,  278,  294,  180,  305, 1994, 1997,  326,
     2011, 1998,  331, 1997, 1985, 1984, 1964, 1960, 1959,  341,
      359,  375,  183,    0,  330,  333,  383,  399,  408,  419,
       32,  432, 1957, 1938,    0, 1953,  443, 1951, 1938, 1927,

     1925, 1924, 1904,  452,  470,  486,  429,  504,  123,  517,
     3908,    0, 1901, 1909,  528, 1907,  538,  540,  551,  569,
      585,  514, 1894,    0,  540, 1893, 1891,  593, 1878, 1867,
     1865, 1864, 1842, 1841,  603,  621,  637,  644,  646,  648,
      659,  677,  693,  700, 1849, 3908,  543, 1848, 1836,  703,
     1835,  703,  592,  714,  730,  739,  750,  141,  763, 1832,
      773, 1817, 1817, 1805, 1804, 1793,  782,  800,  816,  760,
      834,  159,  847,  844,  858,  874,  883,  894,  230,  907,
     1802,  918, 1800, 1799, 1779,  928, 1775,  938,  940,  951,
      969,  985,  904, 1774,  991, 1771, 1758, 1000, 1757, 1746,

     1726, 1723, 1720, 1719, 1010, 1028, 1044, 1051, 1053, 1055,
     1066, 1084, 1100, 1107, 1718, 1109, 1111, 1122, 1140, 1156,
     1163, 1717,  595, 1715, 1700, 1166, 1699,  648, 1697, 1684,
     1168, 1682, 1168,  703, 1179, 1195, 1204, 1215,  244, 1228,
      940, 1000, 3908, 1679, 1652, 1651, 1649, 1238, 1256, 1272,
     1225, 1290,  247, 1303, 1300, 1314, 1330, 1339, 1350,  265,
     1363, 1360, 1374, 1390, 1399, 1410,  283, 1423, 1643, 1433,
     1642, 1641, 1628, 1443, 1626, 1624, 1606, 1453, 1605, 1463,
     1465, 1476, 1494, 1510, 1420, 1603, 1578, 1577, 1575, 1562,
     1560, 1518, 1536, 1552, 1559, 1561, 1563, 1574, 1592, 1608,

     1615, 1568, 1617, 1619, 1630, 1648, 1664, 1671, 1550, 1673,
     1675, 1686, 1704, 1720, 1727, 1549, 1546, 1531, 1730, 1530,
     1003, 1529, 1508, 1732, 1507, 1055, 1505, 1490, 1734, 1489,
     1734, 1111, 1745, 1761, 1770, 1781,  346, 1794, 1477, 1464,
     1444, 1804, 1822, 1838, 1791, 1856,  364, 1869, 1866, 1880,
     1896, 1905, 1916,  388, 1929, 1926, 1940, 1956, 1965, 1976,
      404, 1989, 1986, 2000, 2016, 2025, 2036,  429, 2049, 1443,
     1431, 2059, 1430, 1429, 1428, 2069, 1408, 1404, 1403, 2079,
     1401, 2089, 2091, 2102, 2120, 2136, 2046, 1388, 1377, 1375,
     1362, 1361, 2142, 2160, 2178, 2194, 2201, 2203, 2205, 2216,

     2234, 2250, 2257, 1369, 2259, 2261, 2272, 2290, 2306, 2313,
     1368, 2315, 2317, 2328, 2346, 2362, 2369, 1348, 2371, 2373,
     2384, 2402, 2418, 2425, 1344, 1342, 1340, 2428, 1327, 1168,
     1327, 1325, 2430, 1312, 1465, 1311, 1309, 2432, 1308, 2432,
     1468, 2443, 2459, 2468, 2479,  432, 2492, 1276, 1275, 2503,
     2521, 2537, 1282, 1272, 2545,    0, 2489, 2563,  454, 2576,
     2573, 2587,    0, 2597, 2608,  457, 2621, 2618, 2632,    0,
     2642, 2653,  475, 2666, 2663, 2677,    0, 2687, 2698,  488,
     2711, 2708, 2722,    0, 2732, 2743,  491, 2756, 1269, 1268,
     2766, 1266, 1252, 1251, 2776, 1249, 1248, 1237, 2786, 1236,

     2796, 2798, 2809, 2827, 2843, 2753, 1234, 1223, 1203, 1563,
     2851, 1199, 1198, 2869,  514,   69, 1205, 2882, 2887, 1192,
     1192, 2889, 2893, 1189, 1167, 2895, 2900, 1164, 1154, 2906,
     2908, 1152, 1151, 2911, 2913, 1135, 1135, 1132, 1119, 2916,
     1117, 1619, 1116, 1098, 2919, 1097, 1675, 1095, 1080, 2922,
     1079, 2919, 2091, 2932,    0, 2942, 2953,  517, 2966, 1077,
     2977, 1064,   96,  109, 1061, 1059,  137, 1041, 2963, 1040,
     2977, 1038, 2987, 1023, 2988, 1022, 2989, 1020,  982,  981,
     2999,  979,  965,  964, 3009,  962,  949,  947, 3019,  946,
     3029, 3031,  928,  919, 2094,  916,  915, 3034,  913,  902,

      891,  887,  886,  884,  871,  870,  868,  855,  854, 3036,
      852, 2205,  852,  830, 3038,  829, 2261,  827,  826, 3040,
      814, 3049,  812,  811, 3060,  796,  795,  792,  791,  771,
      770,  768,  767,  747,  743,  742, 3069,  740,  728,  727,
     3079,  725,  709,  707, 2317,  702,  691, 3089,  690,  687,
      672, 3091,  671, 2373,  670,  657, 3093,  655,  652,  634,
     3102,  633,  632,  616,  615, 3111,  613,  600,  582,  581,
     3120,  579,  564,  563, 3122,  561,  548,  528, 3908, 3138,
     3149, 3158, 3168, 3179, 3190,  480, 3193, 3196, 3201, 3204,
     3205, 3208,  443, 3212,  416, 3217, 3218, 3220, 3223, 3226,

     3230,  409,  393, 3234, 3239, 3242, 3243, 3246, 3249, 3253,
      369, 3258, 3261, 3264, 3268,  351, 3273, 3274, 3277, 3280,
     3284, 3289, 3293,  337, 3298,  318, 3300, 3304, 3306, 3307,
     3310, 3313, 3317, 3321, 3326, 3329, 3332, 3335, 3338, 3342,
     3346, 3347, 3350, 3353, 3356, 3360, 3365, 3369, 3374, 3378,
      315, 3383,  305, 3386,  302, 3388, 3391, 3394, 3397, 3401,
     3405, 3409, 3413, 3415, 3418, 3421, 3424, 3427, 3430, 3434,
     3437, 3440, 3443, 3446, 3450, 3455, 3459, 3464, 3468, 3473,
     3477, 3481,  288, 3484,  270, 3487,  235, 3489, 3492, 3495,
     3498, 3502, 3506, 3510, 3514, 3518, 3520, 3523, 3526, 3529,

     3532, 3535, 3539, 3542, 3545, 3548, 3552, 3557, 3561, 3566,
     3570, 3575, 3579, 3584, 3588, 3592,  225, 3595,  215, 3598,
      205, 3600, 3603, 3606, 3610, 3613, 3616, 3620, 3623, 3627,
     3630, 3634, 3637, 3641, 3644, 3648, 3652, 3654, 3657, 3660,
     3663, 3666, 3669, 3673, 3676,  202, 3679, 3682, 3686, 3691,
     3695, 3700, 3704, 3709, 3713, 3718, 3722, 3727, 3731, 3735,
      184, 3738,  181, 3741,  164, 3742, 3746, 3751, 3754, 3757,
     3761, 3765, 3769, 3773, 3777, 3781, 3785, 3789, 3791, 3794,
     3797, 3800, 3803, 3806, 3810,  154, 3815, 3817, 3821, 3825,
     3829, 3833, 3837, 3841, 3845,  128, 3848,   92, 3851, 3853,

     3858, 3861, 3863, 3867, 3869, 3872, 3875, 3877,   81, 3882,
     3884,   45, 3887, 3889, 3891, 3893, 3895, 3897, 3899
    } ;

static yyconst short int yy_def[920] =
    {   0,
      679,    1,  680,  680,  681,  681,  679,  679,  679,  679,
      679,  679,  679,  679,   14,  679,  679,  679,  682,   18,
      682,  679,  679,  683,  679,  684,  685,  679,  679,  679,
      679,  679,  686,  679,  687,  688,  679,   37,  679,  679,
      682,  679,   42,  682,  683,  684,  684,  679,  685,  679,
      679,  679,  689,  679,  690,  679,  691,  692,  679,   56,
       56,  693,  679,  679,   64,  694,  679,  682,  682,  695,
      690,  696,  696,  679,  697,  698,  679,  699,  700,  679,
      679,   81,  701,  702,  702,  703,  679,  679,  704,  679,
       90,  704,  682,  682,  682,  705,  679,  706,  679,  697,

      707,  708,  709,  679,  679,  679,  710,  679,  108,  710,
      679,  711,  711,  712,  679,  713,  714,  714,  679,  679,
      120,  715,  118,  682,  716,  706,  717,  717,  679,  699,
      718,  679,  719,  720,  679,  679,  136,  721,  722,  722,
      679,  679,  142,  723,  140,  679,  724,  713,  725,  725,
      679,  679,  726,  679,  679,  727,  679,  157,  727,  728,
      679,  729,  679,  730,  731,  732,  679,  679,  679,  733,
      679,  171,  733,  679,  679,  679,  734,  679,  178,  734,
      735,  679,  736,  679,  737,  679,  738,  739,  739,  679,
      679,  191,  740,  189,  679,  729,  741,  741,  679,  742,

      743,  679,  744,  745,  679,  679,  206,  746,  747,  747,
      679,  679,  212,  748,  210,  749,  749,  679,  679,  219,
      750,  217,  751,  736,  752,  752,  679,  753,  738,  754,
      754,  679,  679,  755,  679,  679,  756,  679,  238,  756,
      195,  679,  679,  679,  757,  758,  759,  679,  679,  679,
      760,  679,  252,  760,  679,  679,  679,  761,  679,  259,
      761,  679,  679,  679,  762,  679,  266,  762,  763,  679,
      764,  679,  765,  679,  766,  679,  767,  679,  768,  769,
      769,  679,  679,  283,  770,  281,  771,  772,  679,  773,
      774,  679,  679,  293,  775,  776,  776,  679,  679,  299,

      777,  297,  778,  778,  679,  679,  306,  779,  304,  780,
      780,  679,  679,  313,  781,  311,  764,  782,  782,  679,
      783,  766,  784,  784,  679,  785,  768,  786,  786,  679,
      679,  787,  679,  679,  788,  679,  336,  788,  789,  790,
      791,  679,  679,  679,  792,  679,  346,  792,  679,  679,
      679,  793,  679,  353,  793,  679,  679,  679,  794,  679,
      360,  794,  679,  679,  679,  795,  679,  367,  795,  679,
      796,  679,  797,  679,  798,  679,  799,  679,  800,  679,
      801,  802,  802,  679,  679,  385,  803,  383,  804,  805,
      679,  806,  679,  679,  679,  395,  807,  808,  808,  679,

      679,  401,  809,  399,  810,  810,  679,  679,  408,  811,
      406,  812,  812,  679,  679,  415,  813,  413,  814,  814,
      679,  679,  422,  815,  420,  797,  816,  816,  679,  817,
      799,  818,  818,  679,  819,  801,  820,  820,  679,  679,
      821,  679,  679,  822,  679,  445,  822,  823,  824,  679,
      679,  451,  825,  826,  679,  827,  828,  679,  458,  828,
      679,  679,  829,  830,  679,  465,  830,  679,  679,  831,
      832,  679,  472,  832,  679,  679,  833,  834,  679,  479,
      834,  679,  679,  835,  836,  679,  486,  836,  679,  837,
      679,  838,  679,  839,  679,  840,  679,  841,  679,  842,

      843,  843,  679,  679,  504,  844,  502,  845,  679,  846,
      679,  847,  848,  679,  514,  848,  849,  850,  850,  851,
      519,  852,  852,  853,  523,  854,  854,  855,  527,  856,
      856,  857,  531,  858,  858,  859,  535,  838,  860,  860,
      679,  861,  840,  862,  862,  679,  863,  842,  864,  864,
      679,  679,  865,  679,  866,  867,  679,  557,  867,  868,
      679,  869,  870,  870,  871,  679,  870,  872,  679,  873,
      679,  874,  679,  875,  679,  876,  679,  877,  679,  878,
      679,  879,  679,  880,  679,  881,  679,  882,  679,  883,
      884,  884,  885,  592,  886,  869,  887,  887,  679,  679,

      888,  889,  890,  891,  892,  893,  894,  879,  895,  895,
      679,  896,  881,  897,  897,  679,  898,  883,  899,  899,
      679,  679,  900,  901,  679,  902,  679,  903,  679,  679,
      679,  679,  679,  679,  679,  904,  679,  905,  679,  906,
      679,  907,  679,  908,  909,  902,  910,  910,  679,  905,
      911,  911,  679,  912,  907,  913,  913,  679,  679,  914,
      679,  915,  679,  679,  916,  679,  917,  679,  915,  918,
      918,  679,  917,  919,  919,  679,  679,  679,    0,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679
    } ;

static yyconst short int yy_nxt[3940] =
    {   0,
        8,    9,   10,   11,    8,    8,    8,   12,   13,   13,
       14,   15,   15,   15,   15,   15,   16,   17,   18,   19,
        8,   18,   18,   20,   19,   19,   19,   21,   19,   22,
       23,   25,   25,   26,   26,   28,   29,   28,   29,   47,
       61,   61,   48,   53,   53,   54,  118,  118,  679,   50,
       51,  679,  667,   30,   47,   30,   33,   48,   34,   34,
       34,   34,   34,   34,   34,   34,   35,   52,   36,   50,
       51,   36,   36,   36,   33,  510,   37,   37,   37,   37,
       37,   38,   39,   39,   35,  512,   36,   52,  662,   36,
       36,   36,   39,   39,   39,   39,   39,   39,   41,  642,

       41,   41,  510,   42,   42,   42,   42,   42,   42,   42,
       42,   35,  512,   42,   41,  679,   42,   42,   42,   41,
       41,   41,   41,   41,   33,  512,   56,   56,   56,   56,
       56,   56,   56,   56,   35,  638,   57,  140,  140,   57,
       57,   57,   33,  510,   60,   60,   60,   60,   60,   60,
       60,   60,   35,  512,   57,  189,  189,   57,   57,   57,
       33,  626,   61,   61,   61,   61,   61,   61,   61,   61,
       35,  590,   57,  210,  210,   57,   57,   57,   62,   63,
       63,   64,   65,   65,   65,   65,   65,   62,  586,   66,
       62,  582,   66,   66,   66,   41,   88,   41,   41,  106,

       67,   67,   67,   67,   67,   67,   67,   67,   35,  562,
       67,   41,  500,   67,   67,   67,   41,   41,   41,   41,
       41,   70,  496,   72,   72,   72,   72,   72,   73,   74,
       74,   33,  492,   75,   75,   75,   75,   75,   75,   75,
       75,   76,  381,   77,  217,  217,   77,   77,   77,   62,
       80,   80,   81,   82,   82,   82,   82,   82,  281,  281,
       83,  297,  297,   83,   83,   83,   86,   62,   87,   87,
       87,   87,   87,   87,   87,   87,   88,  377,   89,  304,
      304,   89,   89,   89,   86,   62,   90,   90,   90,   90,
       90,   91,   92,   92,   88,  373,   89,  311,  311,   89,

       89,   89,   92,   92,   92,   92,   92,   92,   41,  279,
       41,   41,  275,   93,   93,   93,   93,   93,   93,   93,
       93,   76,  271,   93,   41,  187,   93,   93,   93,   41,
       41,   41,   41,   41,   96,   96,   97,   70,  112,  112,
      113,  114,  114,  115,  183,  679,  679,   86,   62,  105,
      105,  105,  105,  105,  105,  105,  105,  106,  162,  107,
      383,  383,  107,  107,  107,   86,   62,  108,  108,  108,
      108,  108,  109,  110,  110,  106,  146,  107,  399,  399,
      107,  107,  107,  110,  110,  110,  110,  110,  110,   86,
       62,  117,  117,  117,  117,  117,  117,  117,  117,   88,

      116,  118,  406,  406,  118,  118,  118,  119,  119,  120,
      121,  121,  121,  121,  121,   62,  111,  122,  413,  413,
      122,  122,  122,   98,   88,   86,   62,  123,  123,  123,
      123,  123,  123,  123,  123,   88,   62,  118,   86,   62,
      118,  118,  118,  420,  420,  106,  502,  502,   88,  125,
       84,  127,  127,  127,  127,  127,  128,  129,  129,   62,
      135,  135,  136,  137,  137,  137,  137,  137,  519,  519,
      138,  523,  523,  138,  138,  138,   86,   62,  139,  139,
      139,  139,  139,  139,  139,  139,  106,   55,  140,  527,
      527,  140,  140,  140,  141,  141,  142,  143,  143,  143,

      143,  143,  531,  531,  144,  535,  535,  144,  144,  144,
       86,   62,  145,  145,  145,  145,  145,  145,  145,  145,
      106,   62,  140,   86,   62,  140,  140,  140,  564,  564,
      155,  592,  592,  106,  147,   62,  149,  149,  149,  149,
      149,  150,  151,  151,   86,   62,  679,   62,  160,  160,
      161,  181,  181,  182,   88,   62,   88,  153,   62,  154,
      154,  154,  154,  154,  154,  154,  154,  155,   62,  156,
       62,   62,  156,  156,  156,  153,   62,  157,  157,  157,
      157,  157,  158,  159,  159,  155,   62,  156,   62,   62,
      156,  156,  156,  159,  159,  159,  159,  159,  159,  125,

      185,  185,  186,  269,  269,  270,  654,  679,  679,   86,
       62,  168,  168,  168,  168,  168,  168,  168,  168,  169,
       62,  170,   62,   62,  170,  170,  170,   86,   62,  171,
      171,  171,  171,  171,  172,  173,  173,  169,  645,  170,
       62,   62,  170,  170,  170,  173,  173,  173,  173,  173,
      173,   62,   86,   62,  679,   62,  273,  273,  274,   62,
      169,  654,  106,  654,  106,  153,   62,  175,  175,  175,
      175,  175,  175,  175,  175,  176,  654,  177,   62,   62,
      177,  177,  177,  153,   62,  178,  178,  178,  178,  178,
      179,  180,  180,  176,   62,  177,  645,  645,  177,  177,

      177,  180,  180,  180,  180,  180,  180,   62,  645,  147,
       62,  277,  277,  278,   62,  617,  176,  679,  679,   88,
      153,   62,  188,  188,  188,  188,  188,  188,  188,  188,
      155,  654,  189,  654,  612,  189,  189,  189,  190,  190,
      191,  192,  192,  192,  192,  192,   62,   62,  193,   62,
       62,  193,  193,  193,   62,  155,  153,   62,  194,  194,
      194,  194,  194,  194,  194,  194,  155,   62,  189,  153,
       62,  189,  189,  189,   62,   62,  169,   62,   62,  155,
      195,  197,  197,  197,  197,  197,  198,  199,  199,   62,
      205,  205,  206,  207,  207,  207,  207,  207,   62,   62,

      208,  595,  645,  208,  208,  208,   86,   62,  209,  209,
      209,  209,  209,  209,  209,  209,  169,  645,  210,   62,
      617,  210,  210,  210,  211,  211,  212,  213,  213,  213,
      213,  213,  617,  617,  214,  612,  612,  214,  214,  214,
       86,   62,  215,  215,  215,  215,  215,  215,  215,  215,
      169,   62,  210,   86,   62,  210,  210,  210,  612,   62,
      106,   62,   62,  169,  153,   62,  216,  216,  216,  216,
      216,  216,  216,  216,  176,   62,  217,   62,   62,  217,
      217,  217,  218,  218,  219,  220,  220,  220,  220,  220,
       62,   62,  221,   62,   62,  221,  221,  221,   62,  176,

      153,   62,  222,  222,  222,  222,  222,  222,  222,  222,
      176,   62,  217,  153,   62,  217,  217,  217,  512,  595,
      236,  595,  595,  176,  223,  553,  225,  225,  225,  225,
      225,  226,  227,  227,  228,   62,  230,  230,  230,  230,
      230,  231,  232,  232,  153,   62,  679,   62,  243,  243,
      243,  243,  617,  617,  155,  547,  155,  234,   62,  235,
      235,  235,  235,  235,  235,  235,  235,  236,  612,  237,
      612,  542,  237,  237,  237,  234,   62,  238,  238,  238,
      238,  238,  239,  240,  240,  236,   62,  237,   62,   62,
      237,  237,  237,  240,  240,  240,  240,  240,  240,  241,

      241,  241,  242,  243,  243,  243,  243,  195,  243,  243,
      243,  371,  371,  372,  679,  679,   86,   62,  249,  249,
      249,  249,  249,  249,  249,  249,  250,   62,  251,   62,
       62,  251,  251,  251,   86,   62,  252,  252,  252,  252,
      252,  253,  254,  254,  250,   62,  251,   62,   62,  251,
      251,  251,  254,  254,  254,  254,  254,  254,   62,   86,
       62,  679,   62,  375,  375,  376,   62,  250,   62,  169,
      595,  169,  153,   62,  256,  256,  256,  256,  256,  256,
      256,  256,  257,  595,  258,  547,  547,  258,  258,  258,
      153,   62,  259,  259,  259,  259,  259,  260,  261,  261,

      257,  547,  258,  542,  542,  258,  258,  258,  261,  261,
      261,  261,  261,  261,   62,  153,   62,  679,   62,  379,
      379,  380,  542,  257,   62,  176,   62,  176,  234,   62,
      263,  263,  263,  263,  263,  263,  263,  263,  264,   62,
      265,  441,   62,  265,  265,  265,  234,   62,  266,  266,
      266,  266,  266,  267,  268,  268,  264,  332,  265,   62,
      234,  265,  265,  265,  268,  268,  268,  268,  268,  268,
       62,   62,  223,  153,  228,   62,  490,  490,  491,  264,
      679,  679,  679,  679,  155,  234,   62,  280,  280,  280,
      280,  280,  280,  280,  280,  236,   62,  281,   86,   62,

      281,  281,  281,  282,  282,  283,  284,  284,  284,  284,
      284,   62,   62,  285,  512,  566,  285,  285,  285,  393,
      236,  234,   62,  286,  286,  286,  286,  286,  286,  286,
      286,  236,   62,  281,  234,   62,  281,  281,  281,  393,
      441,  250,  547,  547,  236,   62,  292,  292,  293,  294,
      294,  294,  294,  294,  435,  542,  295,  542,  430,  295,
      295,  295,   86,   62,  296,  296,  296,  296,  296,  296,
      296,  296,  250,   62,  297,   62,   62,  297,  297,  297,
      298,  298,  299,  300,  300,  300,  300,  300,  512,   62,
      301,  393,  393,  301,  301,  301,   86,   62,  302,  302,

      302,  302,  302,  302,  302,  302,  250,   62,  297,   86,
       62,  297,  297,  297,  435,  435,  169,  435,  430,  250,
      153,   62,  303,  303,  303,  303,  303,  303,  303,  303,
      257,  430,  304,  430,   62,  304,  304,  304,  305,  305,
      306,  307,  307,  307,  307,  307,   62,   62,  308,   62,
      332,  308,  308,  308,  234,  257,  153,   62,  309,  309,
      309,  309,  309,  309,  309,  309,  257,   62,  304,  153,
       62,  304,  304,  304,  153,   86,  176,  393,  390,  257,
      234,   62,  310,  310,  310,  310,  310,  310,  310,  310,
      264,  342,  311,  390,  332,  311,  311,  311,  312,  312,

      313,  314,  314,  314,  314,  314,   62,  435,  315,  435,
      326,  315,  315,  315,  430,  264,  234,   62,  316,  316,
      316,  316,  316,  316,  316,  316,  264,   62,  311,  234,
       62,  311,  311,  311,  430,  321,  334,   62,   62,  264,
       62,  318,  318,  318,  318,  318,  319,  320,  320,  321,
       62,  323,  323,  323,  323,  323,  324,  325,  325,  326,
      393,  328,  328,  328,  328,  328,  329,  330,  330,  234,
       62,  679,   62,  494,  494,  495,  498,  498,  499,  236,
      390,  236,  332,   62,  333,  333,  333,  333,  333,  333,
      333,  333,  334,  390,  335,  326,  326,  335,  335,  335,

      332,   62,  336,  336,  336,  336,  336,  337,  338,  338,
      334,  326,  335,  321,  321,  335,  335,  335,  338,  338,
      338,  338,  338,  338,   86,   62,  343,  343,  343,  343,
      343,  343,  343,  343,  344,  321,  345,   62,   62,  345,
      345,  345,   86,   62,  346,  346,  346,  346,  346,  347,
      348,  348,  344,   62,  345,  234,  153,  345,  345,  345,
      348,  348,  348,  348,  348,  348,   62,   86,   62,  679,
       62,  560,  560,  561,   86,  344,  342,  250,  291,  250,
      153,   62,  350,  350,  350,  350,  350,  350,  350,  350,
      351,  288,  352,  248,  288,  352,  352,  352,  153,   62,

      353,  353,  353,  353,  353,  354,  355,  355,  351,  234,
      352,  326,  326,  352,  352,  352,  355,  355,  355,  355,
      355,  355,   62,  153,   62,  679,   62,  580,  580,  581,
      228,  351,  321,  257,  321,  257,  234,   62,  357,  357,
      357,  357,  357,  357,  357,  357,  358,  223,  359,   62,
       62,  359,  359,  359,  234,   62,  360,  360,  360,  360,
      360,  361,  362,  362,  358,  291,  359,  288,  288,  359,
      359,  359,  362,  362,  362,  362,  362,  362,   62,  234,
       62,  679,   62,  584,  584,  585,  195,  358,  228,  264,
      228,  264,  332,   62,  364,  364,  364,  364,  364,  364,

      364,  364,  365,  228,  366,  223,  223,  366,  366,  366,
      332,   62,  367,  367,  367,  367,  367,  368,  369,  369,
      365,  223,  366,  153,   86,  366,  366,  366,  369,  369,
      369,  369,  369,  369,   62,  248,  204,   62,  321,  201,
      326,   62,  167,  365,  679,  679,  679,  679,  679,  679,
      236,  332,   62,  382,  382,  382,  382,  382,  382,  382,
      382,  334,  201,  383,  195,  195,  383,  383,  383,  384,
      384,  385,  386,  386,  386,  386,  386,   62,  195,  387,
      153,  228,  387,  387,  387,  228,  334,  332,   62,  388,
      388,  388,  388,  388,  388,  388,  388,  334,   62,  383,

      332,   62,  383,  383,  383,  147,  223,  344,  223,  204,
      334,   62,  394,  394,  395,  396,  396,  396,  396,  396,
      201,  201,  397,  125,  195,  397,  397,  397,   86,   62,
      398,  398,  398,  398,  398,  398,  398,  398,  344,  195,
      399,  147,  147,  399,  399,  399,  400,  400,  401,  402,
      402,  402,  402,  402,  147,   86,  403,  167,  134,  403,
      403,  403,   86,   62,  404,  404,  404,  404,  404,  404,
      404,  404,  344,   62,  399,   86,   62,  399,  399,  399,
      131,  104,  250,  131,  125,  344,  153,   62,  405,  405,
      405,  405,  405,  405,  405,  405,  351,  125,  406,  125,

       86,  406,  406,  406,  407,  407,  408,  409,  409,  409,
      409,  409,   62,  147,  410,  147,  679,  410,  410,  410,
      134,  351,  153,   62,  411,  411,  411,  411,  411,  411,
      411,  411,  351,   62,  406,  153,   62,  406,  406,  406,
      131,  131,  257,  679,   70,  351,  234,   62,  412,  412,
      412,  412,  412,  412,  412,  412,  358,  125,  413,  125,
      124,  413,  413,  413,  414,  414,  415,  416,  416,  416,
      416,  416,   62,   76,  417,  104,   79,  417,  417,  417,
       76,  358,  234,   62,  418,  418,  418,  418,  418,  418,
      418,  418,  358,   62,  413,  234,   62,  413,  413,  413,

       59,   76,  264,   70,   70,  358,  332,   62,  419,  419,
      419,  419,  419,  419,  419,  419,  365,   70,  420,   95,
       94,  420,  420,  420,  421,  421,  422,  423,  423,  423,
      423,  423,   62,   85,  424,  679,   79,  424,  424,  424,
       76,  365,  332,   62,  425,  425,  425,  425,  425,  425,
      425,  425,  365,   62,  420,  332,   62,  420,  420,  420,
       70,   70,  443,   69,   68,  365,   62,  427,  427,  427,
      427,  427,  428,  429,  429,  430,   35,  432,  432,  432,
      432,  432,  433,  434,  434,  435,   59,  437,  437,  437,
      437,  437,  438,  439,  439,  332,   62,  679,   62,  588,

      588,  589,  624,  624,  625,  334,   31,  334,  441,   62,
      442,  442,  442,  442,  442,  442,  442,  442,  443,   44,
      444,   43,   40,  444,  444,  444,  441,   62,  445,  445,
      445,  445,  445,  446,  447,  447,  443,   32,  444,   31,
      679,  444,  444,  444,  447,  447,  447,  447,  447,  447,
      450,  450,  451,  452,  452,  452,  452,  452,  453,  679,
      454,  679,  679,  454,  454,  454,   86,   62,  455,  455,
      455,  455,  455,  455,  455,  455,  456,  679,  457,  679,
      679,  457,  457,  457,   86,   62,  458,  458,  458,  458,
      458,  459,  460,  460,  456,  679,  457,  679,  679,  457,

      457,  457,  460,  460,  460,  460,  460,  460,   62,   86,
       62,  679,   62,  636,  636,  637,  679,  456,  679,  344,
      679,  344,  153,   62,  462,  462,  462,  462,  462,  462,
      462,  462,  463,  679,  464,  679,  679,  464,  464,  464,
      153,   62,  465,  465,  465,  465,  465,  466,  467,  467,
      463,  679,  464,  679,  679,  464,  464,  464,  467,  467,
      467,  467,  467,  467,   62,  153,   62,  679,   62,  640,
      640,  641,  679,  463,  679,  351,  679,  351,  234,   62,
      469,  469,  469,  469,  469,  469,  469,  469,  470,  679,
      471,  679,  679,  471,  471,  471,  234,   62,  472,  472,

      472,  472,  472,  473,  474,  474,  470,  679,  471,  679,
      679,  471,  471,  471,  474,  474,  474,  474,  474,  474,
       62,  234,   62,  679,   62,  660,  660,  661,  679,  470,
      679,  358,  679,  358,  332,   62,  476,  476,  476,  476,
      476,  476,  476,  476,  477,  679,  478,  679,  679,  478,
      478,  478,  332,   62,  479,  479,  479,  479,  479,  480,
      481,  481,  477,  679,  478,  679,  679,  478,  478,  478,
      481,  481,  481,  481,  481,  481,   62,  332,   62,  679,
       62,  665,  665,  666,  679,  477,  679,  365,  679,  365,
      441,   62,  483,  483,  483,  483,  483,  483,  483,  483,

      484,  679,  485,  679,  679,  485,  485,  485,  441,   62,
      486,  486,  486,  486,  486,  487,  488,  488,  484,  679,
      485,  679,  679,  485,  485,  485,  488,  488,  488,  488,
      488,  488,   62,  679,  679,   62,  430,  679,  435,   62,
      679,  484,  679,  679,  679,  679,  679,  679,  334,  441,
       62,  501,  501,  501,  501,  501,  501,  501,  501,  443,
      679,  502,  679,  679,  502,  502,  502,  503,  503,  504,
      505,  505,  505,  505,  505,   62,  679,  506,  679,  679,
      506,  506,  506,  679,  443,  441,   62,  507,  507,  507,
      507,  507,  507,  507,  507,  443,   62,  502,  441,   62,

      502,  502,  502,  679,  679,  456,  679,  679,  443,  510,
      679,  511,  511,  511,  511,  511,  511,  511,  511,  512,
      679,  513,  679,  679,  513,  513,  513,  510,  679,  514,
      514,  514,  514,  514,  515,  516,  516,  512,  679,  513,
      679,  679,  513,  513,  513,  516,  516,  516,  516,  516,
      516,   86,   62,  518,  518,  518,  518,  518,  518,  518,
      518,  456,  679,  519,  679,  679,  519,  519,  519,   86,
       62,  521,  521,  521,  521,  521,  521,  521,  521,  456,
       62,  519,   86,   62,  519,  519,  519,  679,  679,  344,
      679,  679,  456,  153,   62,  522,  522,  522,  522,  522,

      522,  522,  522,  463,   62,  523,  679,  679,  523,  523,
      523,  679,  679,  463,  153,   62,  525,  525,  525,  525,
      525,  525,  525,  525,  463,   62,  523,  153,   62,  523,
      523,  523,  679,  679,  351,  679,  679,  463,  234,   62,
      526,  526,  526,  526,  526,  526,  526,  526,  470,   62,
      527,  679,  679,  527,  527,  527,  679,  679,  470,  234,
       62,  529,  529,  529,  529,  529,  529,  529,  529,  470,
       62,  527,  234,   62,  527,  527,  527,  679,  679,  358,
      679,  679,  470,  332,   62,  530,  530,  530,  530,  530,
      530,  530,  530,  477,   62,  531,  679,  679,  531,  531,

      531,  679,  679,  477,  332,   62,  533,  533,  533,  533,
      533,  533,  533,  533,  477,   62,  531,  332,   62,  531,
      531,  531,  679,  679,  365,  679,  679,  477,  441,   62,
      534,  534,  534,  534,  534,  534,  534,  534,  484,   62,
      535,  679,  679,  535,  535,  535,  679,  679,  484,  441,
       62,  537,  537,  537,  537,  537,  537,  537,  537,  484,
       62,  535,  441,   62,  535,  535,  535,  679,  679,  555,
      679,  679,  484,   62,  539,  539,  539,  539,  539,  540,
      541,  541,  542,  679,  544,  544,  544,  544,  544,  545,
      546,  546,  547,  679,  549,  549,  549,  549,  549,  550,

      551,  551,  441,   62,  679,   62,  679,  679,  679,  679,
      679,  679,  443,  679,  443,  553,   62,  554,  554,  554,
      554,  554,  554,  554,  554,  555,  679,  556,  679,  679,
      556,  556,  556,  553,   62,  557,  557,  557,  557,  557,
      558,  559,  559,  555,  679,  556,  679,  679,  556,  556,
      556,  559,  559,  559,  559,  559,  559,  510,  679,  563,
      563,  563,  563,  563,  563,  563,  563,  512,  679,  564,
      679,  679,  564,  564,  564,  510,  679,  567,  567,  567,
      567,  567,  567,  567,  567,  512,  679,  564,   86,   62,
      564,  564,  564,  679,   62,  153,   62,  679,  456,  679,

       62,  234,   62,  456,  679,  463,  679,   62,  679,  463,
      679,  470,  332,   62,  679,   62,  470,  441,   62,  679,
       62,  679,  477,   62,  477,  542,   62,  484,  547,  484,
      679,  679,  679,  679,  679,  443,  679,  679,  553,   62,
      591,  591,  591,  591,  591,  591,  591,  591,  555,   62,
      592,  679,  679,  592,  592,  592,  679,  679,  555,  553,
       62,  594,  594,  594,  594,  594,  594,  594,  594,  555,
       62,  592,  553,   62,  592,  592,  592,  679,  679,  456,
      679,  679,  555,  595,   62,  597,  597,  597,  597,  597,
      598,  599,  599,  463,   62,   62,   62,  679,  679,  679,

      679,  679,  679,  470,  477,  484,   62,  609,  609,  609,
      609,  609,  610,  611,  611,  612,  679,  614,  614,  614,
      614,  614,  615,  616,  616,  617,  679,  619,  619,  619,
      619,  619,  620,  621,  621,  553,   62,  679,   62,  679,
      595,  679,  679,   62,  612,  555,  617,  555,  679,  679,
      679,  679,  679,  679,  679,  679,   62,  679,  679,  679,
      679,  679,  679,  679,  679,  555,  645,  679,  647,  647,
      647,  647,  647,  648,  649,  649,   62,  651,  651,  651,
      651,  651,  652,  653,  653,  654,  679,  656,  656,  656,
      656,  656,  657,  658,  658,  645,  679,  679,   62,  654,

      679,  679,  679,  679,  679,  679,  679,  679,  679,   62,
      670,  670,  670,  670,  670,  671,  672,  672,   62,  674,
      674,  674,  674,  674,  675,  676,  676,   62,  679,   62,
      679,  679,  679,  679,  679,  679,  679,  679,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       41,  679,   41,   41,  679,   41,  679,   41,   45,  679,
       45,  679,   45,   45,   45,   45,   45,   45,   45,   46,
      679,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       49,  679,  679,   49,   49,   49,   49,   49,   49,   49,

       58,   58,   58,   57,   57,   57,   71,  679,   71,   74,
      679,   74,   77,   77,   77,   78,   78,   78,   89,   89,
       89,   89,   99,  679,   99,  100,  100,  101,  101,  101,
      102,  102,  102,  103,  103,  103,  107,  107,  107,  107,
      118,  118,  118,  118,  126,  679,  126,  129,  679,  129,
      130,  130,  130,  132,  132,  132,  133,  133,  133,  140,
      140,  140,  140,  148,  679,  148,  151,  679,  151,  152,
      152,  152,  152,  152,  156,  156,  156,  156,  163,  679,
      163,  164,  164,  164,  165,  165,  165,  166,  166,  166,
      170,  170,  170,  170,  174,  174,  174,  174,  174,  177,

      177,  177,  177,  184,  679,  184,  189,  189,  189,  189,
      196,  196,  199,  199,  200,  200,  200,  202,  202,  202,
      203,  203,  203,  210,  210,  210,  210,  217,  217,  217,
      217,  224,  679,  224,  227,  679,  227,  229,  679,  229,
      232,  679,  232,  233,  233,  233,  233,  233,  237,  237,
      237,  237,  244,  244,  165,  165,  165,  245,  245,  245,
      246,  246,  246,  247,  247,  247,  251,  251,  251,  251,
      255,  255,  255,  255,  255,  258,  258,  258,  258,  262,
      262,  262,  262,  262,  265,  265,  265,  265,  272,  679,
      272,  276,  679,  276,  281,  281,  281,  281,  287,  287,

      287,  289,  289,  289,  290,  290,  290,  297,  297,  297,
      297,  304,  304,  304,  304,  311,  311,  311,  311,  317,
      317,  320,  320,  322,  679,  322,  325,  679,  325,  327,
      679,  327,  330,  679,  330,  331,  331,  331,  331,  331,
      335,  335,  335,  335,  246,  246,  246,  339,  339,  339,
      340,  340,  340,  341,  341,  341,  345,  345,  345,  345,
      349,  349,  349,  349,  349,  352,  352,  352,  352,  356,
      356,  356,  356,  356,  359,  359,  359,  359,  363,  363,
      363,  363,  363,  366,  366,  366,  366,  370,  370,  374,
      679,  374,  378,  679,  378,  383,  383,  383,  383,  389,

      389,  389,  391,  391,  391,  392,  392,  392,  399,  399,
      399,  399,  406,  406,  406,  406,  413,  413,  413,  413,
      420,  420,  420,  420,  426,  426,  429,  429,  431,  679,
      431,  434,  679,  434,  436,  679,  436,  439,  679,  439,
      440,  440,  440,  440,  440,  444,  444,  444,  444,  340,
      340,  340,  448,  448,  448,  449,  449,  449,  457,  457,
      457,  457,  461,  461,  461,  461,  461,  464,  464,  464,
      464,  468,  468,  468,  468,  468,  471,  471,  471,  471,
      475,  475,  475,  475,  475,  478,  478,  478,  478,  482,
      482,  482,  482,  482,  485,  485,  485,  485,  489,  489,

      493,  679,  493,  497,  679,  497,  502,  502,  502,  502,
      508,  508,  508,  509,  509,  509,  517,  517,  679,  517,
      513,  513,  513,  520,  679,  520,  519,  519,  519,  519,
      524,  679,  524,  523,  523,  523,  523,  528,  679,  528,
      527,  527,  527,  527,  532,  679,  532,  531,  531,  531,
      531,  536,  679,  536,  535,  535,  535,  535,  538,  538,
      541,  541,  543,  679,  543,  546,  679,  546,  548,  679,
      548,  551,  679,  551,  552,  552,  552,  552,  552,  556,
      556,  556,  556,  449,  449,  449,  565,  565,  565,  564,
      564,  564,  568,  568,  679,  568,  569,  569,  569,  569,

      569,  570,  570,  679,  570,  571,  571,  571,  571,  571,
      572,  572,  679,  572,  573,  573,  573,  573,  573,  574,
      574,  679,  574,  575,  575,  575,  575,  575,  576,  576,
      679,  576,  577,  577,  577,  577,  577,  578,  578,  679,
      578,  579,  579,  583,  679,  583,  587,  679,  587,  593,
      679,  593,  592,  592,  592,  592,  596,  679,  596,  599,
      679,  599,  600,  679,  600,  600,  600,  601,  601,  679,
      601,  602,  602,  679,  602,  603,  603,  679,  603,  604,
      604,  679,  604,  605,  605,  679,  605,  606,  606,  679,
      606,  607,  607,  679,  607,  608,  608,  611,  611,  613,

      679,  613,  616,  679,  616,  618,  679,  618,  621,  679,
      621,  622,  622,  622,  622,  622,  623,  623,  679,  623,
      627,  679,  627,  628,  628,  679,  628,  629,  629,  679,
      629,  630,  630,  679,  630,  631,  631,  679,  631,  632,
      632,  679,  632,  633,  633,  679,  633,  634,  634,  679,
      634,  635,  635,  639,  679,  639,  643,  679,  643,  644,
      644,  679,  644,  646,  679,  646,  649,  679,  649,  566,
      566,  679,  566,  650,  650,  653,  653,  655,  679,  655,
      658,  679,  658,  659,  659,  679,  659,  663,  679,  663,
      664,  664,  668,  679,  668,  669,  669,  672,  672,  673,

      673,  676,  676,  677,  677,  678,  678,    7,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679
    } ;

static yyconst short int yy_chk[3940] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    3,    4,    5,    5,    6,    6,   26,
       38,   38,   26,   33,   33,   33,   91,   91,   46,   30,
       30,   46,  912,    5,   47,    6,   13,   47,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   30,   13,   52,
       52,   13,   13,   13,   14,  516,   14,   14,   14,   14,
       14,   14,   14,   14,   14,  516,   14,   52,  909,   14,
       14,   14,   15,   15,   15,   15,   15,   15,   18,  898,

       18,   18,  563,   18,   18,   18,   18,   18,   18,   18,
       18,   18,  563,   18,   18,  564,   18,   18,   18,   18,
       18,   18,   18,   18,   34,  564,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  896,   34,  109,  109,   34,
       34,   34,   37,  567,   37,   37,   37,   37,   37,   37,
       37,   37,   37,  567,   37,  158,  158,   37,   37,   37,
       39,  886,   39,   39,   39,   39,   39,   39,   39,   39,
       39,  865,   39,  172,  172,   39,   39,   39,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   66,  863,   40,
       83,  861,   40,   40,   40,   42,   66,   42,   42,   83,

       42,   42,   42,   42,   42,   42,   42,   42,   42,  846,
       42,   42,  821,   42,   42,   42,   42,   42,   42,   42,
       42,   54,  819,   54,   54,   54,   54,   54,   54,   54,
       54,   56,  817,   56,   56,   56,   56,   56,   56,   56,
       56,   56,  787,   56,  179,  179,   56,   56,   56,   59,
       59,   59,   59,   59,   59,   59,   59,   59,  239,  239,
       59,  253,  253,   59,   59,   59,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,  785,   63,  260,
      260,   63,   63,   63,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,  783,   64,  267,  267,   64,

       64,   64,   65,   65,   65,   65,   65,   65,   67,  755,
       67,   67,  753,   67,   67,   67,   67,   67,   67,   67,
       67,   67,  751,   67,   67,  726,   67,   67,   67,   67,
       67,   67,   67,   67,   70,   70,   70,   73,   85,   85,
       85,   86,   86,   86,  724,   73,   73,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,  716,   80,
      337,  337,   80,   80,   80,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,  711,   81,  347,  347,
       81,   81,   81,   82,   82,   82,   82,   82,   82,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,

      703,   87,  354,  354,   87,   87,   87,   88,   88,   88,
       88,   88,   88,   88,   88,   89,  702,   88,  361,  361,
       88,   88,   88,  695,   89,   90,   90,   90,   90,   90,
       90,   90,   90,   90,   90,   90,  107,   90,   92,   92,
       90,   90,   90,  368,  368,  107,  446,  446,   92,   97,
      693,   97,   97,   97,   97,   97,   97,   97,   97,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  459,  459,
      104,  466,  466,  104,  104,  104,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  686,  105,  473,
      473,  105,  105,  105,  106,  106,  106,  106,  106,  106,

      106,  106,  480,  480,  106,  487,  487,  106,  106,  106,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  122,  108,  110,  110,  108,  108,  108,  515,  515,
      122,  558,  558,  110,  115,  678,  115,  115,  115,  115,
      115,  115,  115,  115,  117,  117,  118,  118,  125,  125,
      125,  147,  147,  147,  117,  677,  118,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  676,  119,
      674,  673,  119,  119,  119,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  672,  120,  670,  669,
      120,  120,  120,  121,  121,  121,  121,  121,  121,  128,

      153,  153,  153,  223,  223,  223,  668,  128,  128,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      667,  135,  665,  664,  135,  135,  135,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  663,  136,
      662,  660,  136,  136,  136,  137,  137,  137,  137,  137,
      137,  138,  139,  139,  140,  140,  228,  228,  228,  659,
      138,  658,  139,  656,  140,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  655,  141,  653,  651,
      141,  141,  141,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  650,  142,  649,  647,  142,  142,

      142,  143,  143,  143,  143,  143,  143,  144,  646,  150,
      152,  234,  234,  234,  644,  643,  144,  150,  150,  152,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  642,  154,  640,  639,  154,  154,  154,  155,  155,
      155,  155,  155,  155,  155,  155,  156,  638,  155,  636,
      635,  155,  155,  155,  634,  156,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  170,  157,  159,
      159,  157,  157,  157,  633,  632,  170,  631,  630,  159,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  629,  628,

      167,  627,  626,  167,  167,  167,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  624,  168,  623,
      621,  168,  168,  168,  169,  169,  169,  169,  169,  169,
      169,  169,  619,  618,  169,  616,  614,  169,  169,  169,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  174,  171,  173,  173,  171,  171,  171,  613,  611,
      174,  609,  608,  173,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  607,  175,  606,  605,  175,
      175,  175,  176,  176,  176,  176,  176,  176,  176,  176,
      177,  604,  176,  603,  602,  176,  176,  176,  601,  177,

      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  193,  178,  180,  180,  178,  178,  178,  600,  599,
      193,  597,  596,  180,  182,  594,  182,  182,  182,  182,
      182,  182,  182,  182,  186,  593,  186,  186,  186,  186,
      186,  186,  186,  186,  188,  188,  189,  189,  241,  241,
      241,  241,  590,  588,  188,  587,  189,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  586,  190,
      584,  583,  190,  190,  190,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  582,  191,  580,  579,
      191,  191,  191,  192,  192,  192,  192,  192,  192,  195,

      195,  195,  195,  195,  195,  195,  195,  198,  242,  242,
      242,  321,  321,  321,  198,  198,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  578,  205,  576,
      574,  205,  205,  205,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  572,  206,  570,  568,  206,
      206,  206,  207,  207,  207,  207,  207,  207,  208,  209,
      209,  210,  210,  326,  326,  326,  566,  208,  565,  209,
      562,  210,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  560,  211,  551,  549,  211,  211,  211,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,

      212,  548,  212,  546,  544,  212,  212,  212,  213,  213,
      213,  213,  213,  213,  214,  216,  216,  217,  217,  332,
      332,  332,  543,  214,  541,  216,  539,  217,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  538,
      218,  537,  536,  218,  218,  218,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  533,  219,  532,
      529,  219,  219,  219,  220,  220,  220,  220,  220,  220,
      221,  528,  226,  525,  231,  233,  430,  430,  430,  221,
      226,  226,  231,  231,  233,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  524,  235,  521,  520,

      235,  235,  235,  236,  236,  236,  236,  236,  236,  236,
      236,  237,  517,  236,  513,  512,  236,  236,  236,  509,
      237,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  251,  238,  240,  240,  238,  238,  238,  508,
      507,  251,  500,  498,  240,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  497,  496,  248,  494,  493,  248,
      248,  248,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  492,  249,  490,  489,  249,  249,  249,
      250,  250,  250,  250,  250,  250,  250,  250,  454,  453,
      250,  449,  448,  250,  250,  250,  252,  252,  252,  252,

      252,  252,  252,  252,  252,  252,  252,  255,  252,  254,
      254,  252,  252,  252,  439,  437,  255,  436,  434,  254,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  432,  256,  431,  429,  256,  256,  256,  257,  257,
      257,  257,  257,  257,  257,  257,  258,  427,  257,  426,
      425,  257,  257,  257,  418,  258,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  262,  259,  261,
      261,  259,  259,  259,  411,  404,  262,  392,  391,  261,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  390,  263,  389,  388,  263,  263,  263,  264,  264,

      264,  264,  264,  264,  264,  264,  265,  381,  264,  379,
      378,  264,  264,  264,  377,  265,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  285,  266,  268,
      268,  266,  266,  266,  375,  374,  285,  373,  371,  268,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  274,
      370,  274,  274,  274,  274,  274,  274,  274,  274,  278,
      341,  278,  278,  278,  278,  278,  278,  278,  278,  280,
      280,  281,  281,  435,  435,  435,  441,  441,  441,  280,
      340,  281,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  339,  282,  330,  328,  282,  282,  282,

      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  327,  283,  325,  323,  283,  283,  283,  284,  284,
      284,  284,  284,  284,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  322,  292,  320,  318,  292,
      292,  292,  293,  293,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  317,  293,  316,  309,  293,  293,  293,
      294,  294,  294,  294,  294,  294,  295,  296,  296,  297,
      297,  510,  510,  510,  302,  295,  291,  296,  290,  297,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  289,  298,  288,  287,  298,  298,  298,  299,  299,

      299,  299,  299,  299,  299,  299,  299,  299,  299,  286,
      299,  279,  277,  299,  299,  299,  300,  300,  300,  300,
      300,  300,  301,  303,  303,  304,  304,  542,  542,  542,
      276,  301,  275,  303,  273,  304,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  272,  305,  271,
      269,  305,  305,  305,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  247,  306,  246,  245,  306,
      306,  306,  307,  307,  307,  307,  307,  307,  308,  310,
      310,  311,  311,  547,  547,  547,  244,  308,  232,  310,
      230,  311,  312,  312,  312,  312,  312,  312,  312,  312,

      312,  312,  312,  229,  312,  227,  225,  312,  312,  312,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  224,  313,  222,  215,  313,  313,  313,  314,  314,
      314,  314,  314,  314,  315,  204,  203,  319,  324,  202,
      329,  331,  201,  315,  319,  319,  324,  324,  329,  329,
      331,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  200,  333,  199,  197,  333,  333,  333,  334,
      334,  334,  334,  334,  334,  334,  334,  335,  196,  334,
      194,  187,  334,  334,  334,  185,  335,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  345,  336,

      338,  338,  336,  336,  336,  184,  183,  345,  181,  166,
      338,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      165,  164,  342,  163,  162,  342,  342,  342,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  160,
      343,  151,  149,  343,  343,  343,  344,  344,  344,  344,
      344,  344,  344,  344,  148,  145,  344,  134,  133,  344,
      344,  344,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  349,  346,  348,  348,  346,  346,  346,
      132,  131,  349,  130,  129,  348,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  127,  350,  126,

      123,  350,  350,  350,  351,  351,  351,  351,  351,  351,
      351,  351,  352,  116,  351,  114,  113,  351,  351,  351,
      103,  352,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  356,  353,  355,  355,  353,  353,  353,
      102,  101,  356,  100,   99,  355,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,   98,  357,   96,
       94,  357,  357,  357,  358,  358,  358,  358,  358,  358,
      358,  358,  359,   93,  358,   79,   78,  358,  358,  358,
       77,  359,  360,  360,  360,  360,  360,  360,  360,  360,
      360,  360,  360,  363,  360,  362,  362,  360,  360,  360,

       76,   75,  363,   74,   72,  362,  364,  364,  364,  364,
      364,  364,  364,  364,  364,  364,  364,   71,  364,   69,
       68,  364,  364,  364,  365,  365,  365,  365,  365,  365,
      365,  365,  366,   62,  365,   61,   58,  365,  365,  365,
       57,  366,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  387,  367,  369,  369,  367,  367,  367,
       55,   53,  387,   44,   43,  369,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  376,   36,  376,  376,  376,
      376,  376,  376,  376,  376,  380,   35,  380,  380,  380,
      380,  380,  380,  380,  380,  382,  382,  383,  383,  553,

      553,  553,  595,  595,  595,  382,   31,  383,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,   21,
      384,   20,   16,  384,  384,  384,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,   12,  385,    9,
        7,  385,  385,  385,  386,  386,  386,  386,  386,  386,
      393,  393,  393,  393,  393,  393,  393,  393,  393,    0,
      393,    0,    0,  393,  393,  393,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,    0,  394,    0,
        0,  394,  394,  394,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,    0,  395,    0,    0,  395,

      395,  395,  396,  396,  396,  396,  396,  396,  397,  398,
      398,  399,  399,  612,  612,  612,    0,  397,    0,  398,
        0,  399,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,    0,  400,    0,    0,  400,  400,  400,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
      401,    0,  401,    0,    0,  401,  401,  401,  402,  402,
      402,  402,  402,  402,  403,  405,  405,  406,  406,  617,
      617,  617,    0,  403,    0,  405,    0,  406,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,    0,
      407,    0,    0,  407,  407,  407,  408,  408,  408,  408,

      408,  408,  408,  408,  408,  408,  408,    0,  408,    0,
        0,  408,  408,  408,  409,  409,  409,  409,  409,  409,
      410,  412,  412,  413,  413,  645,  645,  645,    0,  410,
        0,  412,    0,  413,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,    0,  414,    0,    0,  414,
      414,  414,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,    0,  415,    0,    0,  415,  415,  415,
      416,  416,  416,  416,  416,  416,  417,  419,  419,  420,
      420,  654,  654,  654,    0,  417,    0,  419,    0,  420,
      421,  421,  421,  421,  421,  421,  421,  421,  421,  421,

      421,    0,  421,    0,    0,  421,  421,  421,  422,  422,
      422,  422,  422,  422,  422,  422,  422,  422,  422,    0,
      422,    0,    0,  422,  422,  422,  423,  423,  423,  423,
      423,  423,  424,    0,    0,  428,  433,    0,  438,  440,
        0,  424,  428,  428,  433,  433,  438,  438,  440,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
        0,  442,    0,    0,  442,  442,  442,  443,  443,  443,
      443,  443,  443,  443,  443,  444,    0,  443,    0,    0,
      443,  443,  443,    0,  444,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  457,  445,  447,  447,

      445,  445,  445,    0,    0,  457,    0,    0,  447,  450,
        0,  450,  450,  450,  450,  450,  450,  450,  450,  450,
        0,  450,    0,    0,  450,  450,  450,  451,    0,  451,
      451,  451,  451,  451,  451,  451,  451,  451,    0,  451,
        0,    0,  451,  451,  451,  452,  452,  452,  452,  452,
      452,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,    0,  455,    0,    0,  455,  455,  455,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      461,  458,  460,  460,  458,  458,  458,    0,    0,  461,
        0,    0,  460,  462,  462,  462,  462,  462,  462,  462,

      462,  462,  462,  462,  464,  462,    0,    0,  462,  462,
      462,    0,    0,  464,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  468,  465,  467,  467,  465,
      465,  465,    0,    0,  468,    0,    0,  467,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  471,
      469,    0,    0,  469,  469,  469,    0,    0,  471,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
      475,  472,  474,  474,  472,  472,  472,    0,    0,  475,
        0,    0,  474,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  478,  476,    0,    0,  476,  476,

      476,    0,    0,  478,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  482,  479,  481,  481,  479,
      479,  479,    0,    0,  482,    0,    0,  481,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  485,
      483,    0,    0,  483,  483,  483,    0,    0,  485,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      506,  486,  488,  488,  486,  486,  486,    0,    0,  506,
        0,    0,  488,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  495,    0,  495,  495,  495,  495,  495,  495,
      495,  495,  499,    0,  499,  499,  499,  499,  499,  499,

      499,  499,  501,  501,  502,  502,    0,    0,    0,    0,
        0,    0,  501,    0,  502,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,    0,  503,    0,    0,
      503,  503,  503,  504,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,    0,  504,    0,    0,  504,  504,
      504,  505,  505,  505,  505,  505,  505,  511,    0,  511,
      511,  511,  511,  511,  511,  511,  511,  511,    0,  511,
        0,    0,  511,  511,  511,  514,    0,  514,  514,  514,
      514,  514,  514,  514,  514,  514,    0,  514,  518,  518,
      514,  514,  514,  519,  519,  522,  522,    0,  518,  523,

      523,  526,  526,  519,    0,  522,  527,  527,    0,  523,
        0,  526,  530,  530,  531,  531,  527,  534,  534,  535,
      535,    0,  530,  540,  531,  545,  552,  534,  550,  535,
      540,  540,    0,  545,  545,  552,  550,  550,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  556,
      554,    0,    0,  554,  554,  554,    0,    0,  556,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      569,  557,  559,  559,  557,  557,  557,    0,    0,  569,
        0,    0,  559,  561,  571,  561,  561,  561,  561,  561,
      561,  561,  561,  571,  573,  575,  577,    0,    0,    0,

        0,    0,    0,  573,  575,  577,  581,  581,  581,  581,
      581,  581,  581,  581,  581,  585,    0,  585,  585,  585,
      585,  585,  585,  585,  585,  589,    0,  589,  589,  589,
      589,  589,  589,  589,  589,  591,  591,  592,  592,    0,
      598,    0,    0,  610,  615,  591,  620,  592,  598,  598,
      610,  610,  615,  615,  620,  620,  622,    0,    0,    0,
        0,    0,    0,    0,    0,  622,  625,    0,  625,  625,
      625,  625,  625,  625,  625,  625,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  641,    0,  641,  641,  641,
      641,  641,  641,  641,  641,  648,    0,    0,  652,  657,

        0,    0,    0,  648,  648,  652,  652,  657,  657,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  671,    0,  675,
        0,    0,    0,    0,  671,  671,  675,  675,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      682,    0,  682,  682,    0,  682,    0,  682,  683,    0,
      683,    0,  683,  683,  683,  683,  683,  683,  683,  684,
        0,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      685,    0,    0,  685,  685,  685,  685,  685,  685,  685,

      687,  687,  687,  688,  688,  688,  689,    0,  689,  690,
        0,  690,  691,  691,  691,  692,  692,  692,  694,  694,
      694,  694,  696,    0,  696,  697,  697,  698,  698,  698,
      699,  699,  699,  700,  700,  700,  701,  701,  701,  701,
      704,  704,  704,  704,  705,    0,  705,  706,    0,  706,
      707,  707,  707,  708,  708,  708,  709,  709,  709,  710,
      710,  710,  710,  712,    0,  712,  713,    0,  713,  714,
      714,  714,  714,  714,  715,  715,  715,  715,  717,    0,
      717,  718,  718,  718,  719,  719,  719,  720,  720,  720,
      721,  721,  721,  721,  722,  722,  722,  722,  722,  723,

      723,  723,  723,  725,    0,  725,  727,  727,  727,  727,
      728,  728,  729,  729,  730,  730,  730,  731,  731,  731,
      732,  732,  732,  733,  733,  733,  733,  734,  734,  734,
      734,  735,    0,  735,  736,    0,  736,  737,    0,  737,
      738,    0,  738,  739,  739,  739,  739,  739,  740,  740,
      740,  740,  741,  741,  742,  742,  742,  743,  743,  743,
      744,  744,  744,  745,  745,  745,  746,  746,  746,  746,
      747,  747,  747,  747,  747,  748,  748,  748,  748,  749,
      749,  749,  749,  749,  750,  750,  750,  750,  752,    0,
      752,  754,    0,  754,  756,  756,  756,  756,  757,  757,

      757,  758,  758,  758,  759,  759,  759,  760,  760,  760,
      760,  761,  761,  761,  761,  762,  762,  762,  762,  763,
      763,  764,  764,  765,    0,  765,  766,    0,  766,  767,
        0,  767,  768,    0,  768,  769,  769,  769,  769,  769,
      770,  770,  770,  770,  771,  771,  771,  772,  772,  772,
      773,  773,  773,  774,  774,  774,  775,  775,  775,  775,
      776,  776,  776,  776,  776,  777,  777,  777,  777,  778,
      778,  778,  778,  778,  779,  779,  779,  779,  780,  780,
      780,  780,  780,  781,  781,  781,  781,  782,  782,  784,
        0,  784,  786,    0,  786,  788,  788,  788,  788,  789,

      789,  789,  790,  790,  790,  791,  791,  791,  792,  792,
      792,  792,  793,  793,  793,  793,  794,  794,  794,  794,
      795,  795,  795,  795,  796,  796,  797,  797,  798,    0,
      798,  799,    0,  799,  800,    0,  800,  801,    0,  801,
      802,  802,  802,  802,  802,  803,  803,  803,  803,  804,
      804,  804,  805,  805,  805,  806,  806,  806,  807,  807,
      807,  807,  808,  808,  808,  808,  808,  809,  809,  809,
      809,  810,  810,  810,  810,  810,  811,  811,  811,  811,
      812,  812,  812,  812,  812,  813,  813,  813,  813,  814,
      814,  814,  814,  814,  815,  815,  815,  815,  816,  816,

      818,    0,  818,  820,    0,  820,  822,  822,  822,  822,
      823,  823,  823,  824,  824,  824,  825,  825,    0,  825,
      826,  826,  826,  827,    0,  827,  828,  828,  828,  828,
      829,    0,  829,  830,  830,  830,  830,  831,    0,  831,
      832,  832,  832,  832,  833,    0,  833,  834,  834,  834,
      834,  835,    0,  835,  836,  836,  836,  836,  837,  837,
      838,  838,  839,    0,  839,  840,    0,  840,  841,    0,
      841,  842,    0,  842,  843,  843,  843,  843,  843,  844,
      844,  844,  844,  845,  845,  845,  847,  847,  847,  848,
      848,  848,  849,  849,    0,  849,  850,  850,  850,  850,

      850,  851,  851,    0,  851,  852,  852,  852,  852,  852,
      853,  853,    0,  853,  854,  854,  854,  854,  854,  855,
      855,    0,  855,  856,  856,  856,  856,  856,  857,  857,
        0,  857,  858,  858,  858,  858,  858,  859,  859,    0,
      859,  860,  860,  862,    0,  862,  864,    0,  864,  866,
        0,  866,  867,  867,  867,  867,  868,    0,  868,  869,
        0,  869,  870,    0,  870,  870,  870,  871,  871,    0,
      871,  872,  872,    0,  872,  873,  873,    0,  873,  874,
      874,    0,  874,  875,  875,    0,  875,  876,  876,    0,
      876,  877,  877,    0,  877,  878,  878,  879,  879,  880,

        0,  880,  881,    0,  881,  882,    0,  882,  883,    0,
      883,  884,  884,  884,  884,  884,  885,  885,    0,  885,
      887,    0,  887,  888,  888,    0,  888,  889,  889,    0,
      889,  890,  890,    0,  890,  891,  891,    0,  891,  892,
      892,    0,  892,  893,  893,    0,  893,  894,  894,    0,
      894,  895,  895,  897,    0,  897,  899,    0,  899,  900,
      900,    0,  900,  901,    0,  901,  902,    0,  902,  903,
      903,    0,  903,  904,  904,  905,  905,  906,    0,  906,
      907,    0,  907,  908,  908,    0,  908,  910,    0,  910,
      911,  911,  913,    0,  913,  914,  914,  915,  915,  916,

      916,  917,  917,  918,  918,  919,  919,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "boot.ll"
#define INITIAL 0
#line 2 "boot.ll"
#include "libxorp/xorp.h"
#include "y.boot_tab.h"
int boot_linenum = 1;
extern char* bootlval;
string parsebuf;
#define YY_NO_UNPUT 1
#define comment 1

#define string 2

/*
 * IPv6 address representation in Augmented Backus-Naur Form (ABNF).
 * Representation taken from email by Roy T. Fielding <roy.fielding@day.com>
 * to uri@w3.org mailing list on 05 Dec 2002:
 *   http://lists.w3.org/Archives/Public/uri/2002Dec/0000.html
 *
 *    IPv6address   = (                          6( h4 ":" ) ls32 )
 *                  / (                     "::" 5( h4 ":" ) ls32 )
 *                  / ( [              h4 ] "::" 4( h4 ":" ) ls32 )
 *                  / ( [ *1( h4 ":" ) h4 ] "::" 3( h4 ":" ) ls32 )
 *                  / ( [ *2( h4 ":" ) h4 ] "::" 2( h4 ":" ) ls32 )
 *                  / ( [ *3( h4 ":" ) h4 ] "::"    h4 ":"   ls32 )
 *                  / ( [ *4( h4 ":" ) h4 ] "::"             ls32 )
 *                  / ( [ *5( h4 ":" ) h4 ] "::"             h4   )
 *                  / ( [ *6( h4 ":" ) h4 ] "::"                  )
 *
 *    ls32          = ( h4 ":" h4 ) / IPv4address
 *                  ; least-significant 32 bits of address
 *    h4            = 1*4HEXDIG
 *    IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet
 *    dec-octet     = 1*2DIGIT                      ; 0-9, 00-99
 *                  / ( "0" / "1" ) 2DIGIT          ; 000-199
 *                  / "2" %x30-34 DIGIT             ; 200-249
 *                  / "25" %x30-35                  ; 250-255
 *
 */
#line 1562 "lex.boot.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 63 "boot.ll"


#line 1716 "lex.boot.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 680 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3908 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 65 "boot.ll"
{
	return UPLEVEL;
	}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 69 "boot.ll"
{
	return DOWNLEVEL;
	}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "boot.ll"
/* whitespace */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "boot.ll"
{
	boot_linenum++;
	return END;
	}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "boot.ll"
{
	return END;
	}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 84 "boot.ll"
{
	return ASSIGN_OPERATOR;
	}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 88 "boot.ll"
{
	bootlval = strdup(boottext);
	return BOOL_VALUE;
	}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 93 "boot.ll"
{
	bootlval = strdup(boottext);
	return BOOL_VALUE;
	}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 98 "boot.ll"
{
	bootlval = strdup(boottext);
	return UINT_VALUE;
	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 103 "boot.ll"
{
	bootlval = strdup(boottext);
	return IPV4_VALUE;
	}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 108 "boot.ll"
{
	bootlval = strdup(boottext);
	return IPV4NET_VALUE;
	}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 113 "boot.ll"
{
	bootlval = strdup(boottext);
	return IPV6_VALUE;
	}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 118 "boot.ll"
{
	bootlval = strdup(boottext);
	return IPV6NET_VALUE;
	}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 123 "boot.ll"
{
	bootlval = strdup(boottext);
	return MACADDR_VALUE;
	}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 128 "boot.ll"
{
	bootlval = strdup(boottext);
	return LITERAL;
	}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 133 "boot.ll"
{
			BEGIN(string);
			parsebuf="";
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 138 "boot.ll"
/* normal text */ {
			parsebuf += boottext;
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 142 "boot.ll"
/* allow quoted quotes */ {
			parsebuf += "\"";
			}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 146 "boot.ll"
/* allow quoted backslash */ {
			parsebuf += "\\";
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 150 "boot.ll"
/* allow unquoted newlines */ {
			boot_linenum++;
			parsebuf += "\n";
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 155 "boot.ll"
/* allow quoted newlines */ {
			boot_linenum++;
			parsebuf += "\n";
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 160 "boot.ll"
{
			BEGIN(INITIAL);
			bootlval = strdup(parsebuf.c_str());
			return STRING;
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 166 "boot.ll"
BEGIN(comment);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 168 "boot.ll"
/* eat up anything that's not a '*' */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 170 "boot.ll"
/* eat up '*'s not followed by "/"s */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 172 "boot.ll"
boot_linenum++;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 174 "boot.ll"
BEGIN(INITIAL);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 176 "boot.ll"
{
	/* everything else is a syntax error */
	return SYNTAX_ERROR;
	}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 182 "boot.ll"
ECHO;
	YY_BREAK
#line 2004 "lex.boot.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(string):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 680 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 680 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 679);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 182 "boot.ll"

