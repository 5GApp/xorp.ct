/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#ident "$XORP$"

#include "xorp_if_mib_xif.hh"

bool
XrlXorpIfMibV0p1Client::send_load_mib(
	const char*	the_tgt, 
	const string&	mod_name, 
	const string&	abs_path, 
	const CB0&	cb
)
{
    Xrl x(the_tgt, "xorp_if_mib/0.1/load_mib");
    x.args().add("mod_name", mod_name);
    x.args().add("abs_path", abs_path);
    return _sender->send(x, callback(this, &XrlXorpIfMibV0p1Client::unmarshall0, cb));
}


/* Unmarshall load_mib */
void
XrlXorpIfMibV0p1Client::unmarshall0(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB0		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t mib_index;
    try {
	a->get("mib_index", mib_index);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &mib_index);
}

bool
XrlXorpIfMibV0p1Client::send_unload_mib(
	const char*	the_tgt, 
	const uint32_t&	mib_index, 
	const CB1&	cb
)
{
    Xrl x(the_tgt, "xorp_if_mib/0.1/unload_mib");
    x.args().add("mib_index", mib_index);
    return _sender->send(x, callback(this, &XrlXorpIfMibV0p1Client::unmarshall1, cb));
}


/* Unmarshall unload_mib */
void
XrlXorpIfMibV0p1Client::unmarshall1(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB1		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    bool unloaded;
    try {
	a->get("unloaded", unloaded);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &unloaded);
}
