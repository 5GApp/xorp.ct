#define yy_create_buffer tplt_create_buffer
#define yy_delete_buffer tplt_delete_buffer
#define yy_scan_buffer tplt_scan_buffer
#define yy_scan_string tplt_scan_string
#define yy_scan_bytes tplt_scan_bytes
#define yy_flex_debug tplt_flex_debug
#define yy_init_buffer tplt_init_buffer
#define yy_flush_buffer tplt_flush_buffer
#define yy_load_buffer_state tplt_load_buffer_state
#define yy_switch_to_buffer tplt_switch_to_buffer
#define yyin tpltin
#define yyleng tpltleng
#define yylex tpltlex
#define yyout tpltout
#define yyrestart tpltrestart
#define yytext tplttext

#line 19 "lex.tplt.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 * $FreeBSD: src/usr.bin/lex/flex.skl,v 1.4 1999/10/27 07:56:44 obrien Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 39
#define YY_END_OF_BUFFER 40
static yyconst short int yy_accept[720] =
    {   0,
        0,    0,   34,   34,   40,   38,    3,    4,   38,   38,
       38,    8,   38,   38,   22,   22,   22,    6,    5,    7,
       31,   31,   31,   31,   31,   31,   31,   31,    1,    2,
       34,   36,   35,    3,   28,    0,   32,    0,   29,    0,
       22,    9,   33,    0,   22,    0,    0,   22,   22,   22,
       25,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   34,   35,   35,   37,    0,   29,    0,    0,
        0,   22,    0,    0,    0,   25,   22,   22,    0,   25,
       25,   25,   25,   31,   31,   31,   11,   31,   31,   31,
       31,   10,   12,   30,    0,    0,    0,    0,    0,    0,

       22,    0,    0,    0,    0,   25,   25,   25,   25,   26,
       26,    0,   25,    0,   25,   25,   25,   25,   31,   13,
       31,   15,   17,   31,   31,   20,    0,    0,    0,    0,
        0,    0,    0,   25,   25,    0,   25,   25,   25,   25,
       26,   26,   26,    0,    0,    0,   25,   25,   25,   25,
       25,   25,   25,   21,   31,   31,   31,   31,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   26,    0,
        0,    0,    0,    0,   25,    0,   25,    0,   25,   25,
       25,   25,   31,   31,   31,   14,   23,   23,   23,    0,

        0,    0,    0,   25,   25,    0,   25,   25,   25,   25,
       25,   25,    0,   25,   25,   25,   25,    0,    0,    0,
        0,    0,    0,    0,   25,   25,   25,   25,   25,   25,
       25,   16,   18,   19,    0,   23,   23,   23,   23,    0,
        0,    0,    0,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   25,    0,   25,    0,   25,   25,   25,   25,   24,
       24,   24,   23,    0,    0,    0,   25,   25,    0,   25,
       25,   25,   25,   25,   25,    0,   25,   25,   25,   25,

       25,   25,    0,   25,   25,   25,   25,   25,   25,   25,
        0,    0,    0,    0,    0,    0,    0,    0,   25,   25,
       25,   25,   25,   25,   25,    0,    0,    0,    0,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   25,    0,
       25,    0,   25,   25,   25,   25,    0,    0,    0,   25,
       25,    0,   25,   25,   25,   25,   25,   25,    0,   25,
       25,   25,   25,   25,   25,    0,   25,   25,   25,   25,

       25,   25,    0,   25,   25,   25,   25,   25,   25,   25,
       25,    0,    0,    0,    0,    0,    0,    0,    0,   25,
       25,   25,   25,   25,   25,   25,    0,    0,    0,    0,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   25,    0,   25,    0,
       25,   25,   25,   25,    0,    0,    0,    0,    0,   25,
        0,   25,    0,   25,   25,   25,   25,   25,   25,    0,

       25,   25,   25,   25,   25,   25,    0,   25,   25,   25,
       25,   25,   25,    0,   25,   25,   25,   25,   25,   25,
        0,   25,   25,   25,   25,   25,   25,   25,   25,    0,
        0,    0,    0,    0,    0,    0,    0,   25,   25,   25,
       25,   25,   25,   25,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   25,    0,
       25,    0,   25,   25,   25,   25,    0,    0,    0,    0,

        0,    0,   25,   25,    0,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
        0,    0,    0,    0,    0,    0,    0,    0,   25,   25,
       25,   25,    0,    0,    0,    0,    0,    0,    0,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       25,   25,   27,    0,    0,    0,    0,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,    0,    0,
        0,    0,    0,   25,    0,    0,    0,    0,    0,   25,
       25,   25,   25,    0,    0,    0,    0,    0,   25,   25,

       25,   25,    0,   25,   25,   25,   25,    0,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    4,    6,    7,    4,    1,    8,
        9,   10,    4,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   22,   23,   24,   25,    4,
       26,   27,    4,   28,   29,   29,   29,   29,   29,   29,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
        4,    4,    4,    4,   31,    4,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   39,   39,   41,   42,   43,
       44,   45,   39,   46,   47,   48,   49,   50,   39,   51,
       39,   39,   52,    4,   53,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[54] =
    {   0,
        1,    2,    3,    2,    2,    2,    2,    2,    4,    5,
        2,    6,    7,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   10,    1,    2,   11,   12,   13,   14,
       15,   16,   16,   16,   16,   16,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,    2,    2
    } ;

static yyconst short int yy_base[966] =
    {   0,
        0,    0,   51,   52, 3138, 4856,   54, 4856, 3098, 3094,
        0, 4856,   45, 3089,   70,   93,   48, 3074, 4856, 4856,
      105,    0, 3053, 3015,   51, 3014,   27, 3025, 4856, 4856,
        0, 4856,   60, 3040, 4856, 3036, 4856,    0,    0,   48,
     2979, 4856, 4856,   64,  144, 2966, 2963,  167,  109,  176,
      186,    0,  209, 2942, 2944, 2918, 2884, 2897, 2892, 2880,
     2831, 2861,    0,   87,  160, 4856, 2866,    0, 2861,  234,
     2860,  245, 2821, 2820, 2818,  269,    0, 2828, 2824,  294,
      317,  326,  333,  343, 2798, 2781,    0,   79, 2785, 2752,
     2753,    0,    0, 4856, 2777,  195, 2772, 2771,  335, 2770,

      224, 2743, 2742, 2740, 2739,  368,  391,  400,  407,    0,
      255,  278,  419,  442,  456,  466,  477,  485, 2738,    0,
     2725, 2694, 2693, 2700, 2693,    0, 2720,  497, 2719, 2700,
     2688, 2686, 2685,  507,  532,  555,  569,  579,  590,  598,
     4856,    0, 2685, 2694,  610, 2680,  621,  623,  635,  658,
      407,  668,  670,    0, 2655, 2653, 2652, 2650,  304, 2672,
     2649,  487, 2648, 2635, 2634, 2633, 2632,  682,  705,  600,
      715,  717,  719,  731,  754,  623,  764,  766, 4856,  352,
     2629, 2627,  776, 2625,  773,  378,  785,  808,  822,  832,
      843,  851, 2588, 2587, 2588,    0, 2597,  862, 2596, 2595,

     2583, 2582, 2581,  872,  897,  920,  934,  944,  955,  963,
      964,  976,  999, 1013, 1023, 1034, 1042, 2578, 1054, 2576,
     2574, 2572, 1065, 2571, 1076, 1078, 1090, 1113,  670, 1123,
     1125,    0,    0,    0, 1135, 2569, 2546,  854, 2545, 2533,
     2532, 2531, 2530, 1146, 1169,  766, 1179, 1181, 1183, 1195,
     1218,  965, 1228, 1230, 1232, 1234, 1246, 1269, 1044, 1279,
     1281,  413, 2527, 2525, 1291, 2523,  429, 2522, 2521, 1299,
     2520, 1299,  451, 1311, 1334, 1348, 1358, 1369, 1377,  516,
      542, 4856, 2518, 2487, 2486, 2484, 1388, 1413, 1436, 1450,
     1460, 1471, 1479, 1480, 1492, 1515, 1529, 1539, 1550, 1558,

     1559, 1571, 1594, 1608, 1618, 1629, 1637, 2493, 1648, 2492,
     2492, 2473, 1659, 2472, 2470, 2469, 1670, 2468, 1681, 1683,
     1695, 1718, 1078, 1728, 1730, 2456, 2444, 2442, 2417, 1742,
     1765, 1125, 1775, 1777, 1779, 1791, 1814, 1281, 1824, 1826,
     1828, 1830, 1842, 1865, 1379, 1875, 1877, 1879, 1881, 1893,
     1916, 1481, 1926, 1928, 2426, 2424, 1561, 2423,  564, 2423,
     2422, 1639, 2408,  645, 2406, 2386, 1938, 2375, 1935,  692,
     1947, 1970, 1984, 1994, 2005, 2013, 2351, 2316, 2315, 2024,
     2049, 2072, 2086, 2096, 2107, 2115, 2116, 2128, 2151, 2165,
     2175, 2186, 2194, 2195, 2207, 2230, 2244, 2254, 2265, 2273,

     2274, 2286, 2309, 2323, 2333, 2344, 2352, 2322, 2321, 2363,
     2320, 2320, 2304, 2374, 2303, 2301, 2300, 2385, 2299, 2396,
     2398, 2410, 2433, 1683, 2443, 2445, 2287, 2237, 2236, 2455,
     2480, 2503, 1730, 2513, 2515, 2517, 2529, 2552, 1928, 2562,
     2564, 2566, 2568, 2580, 2603, 2015, 2613, 2615, 2617, 2619,
     2631, 2654, 2117, 2664, 2666, 2668, 2670, 2682, 2705, 2196,
     2715, 2717, 2243, 2242, 2276, 2241,  719, 2241, 2225, 2354,
     2224,  741, 2222, 2221, 2727, 2220, 2724,  795, 2736, 2759,
     2773, 2783, 2794, 2802, 2208, 2193, 2814, 2837, 2398, 2168,
     2157, 2848,    0, 2862, 2872, 2883, 2891, 2892, 2904,    0,

     2918, 2928, 2939, 2947, 2948, 2960,    0, 2974, 2984, 2995,
     3003, 3004, 3016,    0, 3030, 3040, 3051, 3059, 3060, 3072,
        0, 3086, 3096, 3107, 3115, 2164, 2163, 3126, 2162, 2162,
     2146, 3137, 2145, 2143, 2142, 3148, 2141, 3159, 3161, 3173,
     3196, 2445, 3206, 3208, 2129, 2114,  817, 3220, 2079, 2078,
     3243, 3254,   71, 2085, 3210, 3262, 2084, 3266, 3268, 3270,
     2083, 3274, 3282, 3286, 2082, 3288, 3290, 3294, 2066, 3302,
     3306, 3308, 2065, 3310, 2063, 2062, 2805, 2061,  881, 2061,
     2042, 3117, 2041,  907, 2039, 2038, 3320, 2037, 3303,  929,
     3328,    0, 3342, 3352, 3363, 3371, 2025, 2035, 3383, 2023,

      145,  600, 2014, 1987, 1044, 1986, 3383, 1983, 3394, 1982,
     3395, 1981, 3396, 1980, 3397, 1964, 1963, 1961, 3408, 1960,
     1960, 1959, 3419, 1911, 1910, 1908, 3430, 1907, 3441, 3443,
     1905, 3445, 1894,  986, 1891, 1889, 3373, 1887, 1874, 1883,
     1882, 1859, 1858, 1856, 1855, 1854, 1853, 1839, 2894, 1837,
     1008, 1836, 1834, 3455, 1833, 1100, 1832, 1809, 3463, 1808,
     3463, 1805, 1794, 1804, 3475, 1803, 1789, 1786, 1784, 1783,
     1782, 1739, 1737, 1709, 1707, 1670, 3485, 1659, 1647, 1489,
     3496, 1431, 1427, 1405, 1156, 1387, 1379, 3507, 1309, 1288,
     1243, 2950, 1236, 1183, 1213, 1209, 3515, 1193, 1187, 1163,

     3522, 1107, 1066, 1051, 1012, 3532,  993,  973,  933,  914,
     3006,  889,  885,  852, 3062,  821,  802,  748, 4856, 3555,
     3571,   42, 3583, 3589, 3606, 3623, 3629, 3641,  733, 3650,
     3658, 3671,  207,  228, 3680, 3688, 3696,  728, 3705,  704,
      266, 3713, 3721, 3729, 3738,  657,  612, 3747,  290,  315,
     3755, 3763, 3772,  573,  364,  389, 3782, 3791,  554,  440,
     3799, 3807, 3815, 3824, 3834, 3843,  529,  528,  502, 3852,
       68,  110, 3860, 3868, 3876, 3885, 3894,  553,  637,  656,
      684, 3904, 3913,  163, 3921, 3929, 3937, 3946, 3956, 3965,
     3975, 3984,  499,  703,  460,  731,  441, 3993, 4001, 4009,

     4017, 4026, 4035, 4044,  231,  464,  752,  806,  893,  918,
     4054, 4063, 4071, 4079, 4087, 4096, 4106, 4115, 4125, 4134,
     4144, 4153,  577,  390,  997,  365, 1092,  361, 4162, 4170,
     4178, 4186, 4195, 4204, 4213, 4222,  830,  942, 1111, 1139,
     1167, 1195, 4232, 4241, 4249, 4257, 4266, 4276, 4285, 4295,
     4304, 4314, 4323, 4333, 4342, 1021, 1212,  347, 1216, 1242,
      340, 1246, 1264,  316, 4351, 4359, 4367, 4376, 4384, 4392,
     4401, 4409, 4418, 4426, 4435, 4443, 4452, 4460, 4469, 1268,
     1312, 1265, 1329, 1330, 1351, 4479, 4488, 4496,  291, 4504,
     4512, 4521, 4531, 4540, 4550, 4559, 4569, 4578, 4588, 4597,

     4607, 4616, 1333,  287, 1352,  267, 1405,  250, 4624, 4633,
     4641, 1406, 1409, 4651, 4660, 4669, 4678, 4687, 4696, 4705,
     4714, 1356, 1430, 1434, 1453, 1454, 1510, 4724, 4733, 4741,
      225, 1511, 4750, 4759, 4768, 4777, 4786, 4795, 4804, 1458,
      208, 1532,  204, 1533, 4813, 4821, 1589, 1590, 4830, 1514,
     1537, 1611, 1612, 4839,  166, 1697, 1593,  124, 1713, 1616,
     1717, 1759, 1761, 1764, 1786
    } ;

static yyconst short int yy_def[966] =
    {   0,
      719,    1,  720,  720,  719,  719,  719,  719,  721,  719,
      722,  719,  723,  719,  719,   15,   16,  719,  719,  719,
      719,  724,   21,   21,  724,  724,  724,  724,  719,  719,
      725,  719,  726,  719,  719,  721,  719,  727,  728,  723,
       40,  719,  719,  729,  719,  730,  731,   45,   48,   48,
      719,  724,  724,  724,   53,  724,  724,  724,  724,  724,
      724,  724,  725,  726,  726,  719,  732,  728,  733,  719,
      734,  719,  735,  736,  737,  719,   72,   72,  738,  719,
       80,   81,  739,   21,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  719,  732,  740,  734,  741,  719,  719,

       40,  719,  742,  743,  744,  719,  106,  107,  745,  746,
      746,  747,  719,  719,  748,  113,  748,  748,  724,  724,
      724,  724,  724,  724,  724,  724,  749,  719,  750,  719,
      743,  751,  752,  719,  719,  719,  753,  135,  753,  753,
      719,  754,  754,  755,  719,  756,  757,  757,  719,  149,
      150,  758,  757,  724,  724,  724,  724,  724,  759,  750,
      760,  719,  719,  761,  719,  762,  763,  719,  168,  169,
      764,  765,  765,  719,  174,  175,  766,  765,  719,  767,
      756,  768,  719,  719,  719,  769,  719,  719,  770,  187,
      770,  770,  724,  724,  724,  724,  771,  719,  772,  719,

      773,  774,  775,  719,  719,  719,  776,  205,  776,  776,
      719,  719,  719,  777,  212,  777,  777,  778,  719,  779,
      719,  780,  719,  781,  782,  782,  719,  227,  228,  783,
      782,  724,  724,  724,  719,  772,  784,  719,  719,  785,
      719,  786,  787,  719,  244,  245,  788,  789,  789,  719,
      250,  251,  790,  789,  791,  791,  719,  257,  258,  792,
      791,  793,  779,  794,  719,  719,  795,  781,  796,  719,
      719,  719,  797,  719,  719,  798,  274,  798,  798,  235,
      719,  719,  719,  799,  800,  801,  719,  719,  719,  802,
      288,  802,  802,  719,  719,  719,  803,  295,  803,  803,

      719,  719,  719,  804,  302,  804,  804,  805,  719,  806,
      719,  807,  719,  808,  719,  809,  719,  810,  811,  811,
      719,  321,  322,  812,  811,  813,  719,  814,  815,  719,
      330,  331,  816,  817,  817,  719,  336,  337,  818,  817,
      819,  819,  719,  343,  344,  820,  819,  821,  821,  719,
      350,  351,  822,  821,  806,  823,  719,  719,  824,  808,
      825,  719,  719,  826,  810,  827,  719,  719,  719,  828,
      719,  719,  829,  371,  829,  829,  830,  831,  832,  719,
      719,  719,  833,  381,  833,  833,  719,  719,  719,  834,
      388,  834,  834,  719,  719,  719,  835,  395,  835,  835,

      719,  719,  719,  836,  402,  836,  836,  719,  837,  719,
      838,  719,  839,  719,  840,  719,  841,  719,  842,  843,
      843,  719,  422,  423,  844,  843,  845,  719,  846,  719,
      719,  431,  432,  847,  848,  848,  719,  437,  438,  849,
      848,  850,  850,  719,  444,  445,  851,  850,  852,  852,
      719,  451,  452,  853,  852,  854,  854,  719,  458,  459,
      855,  854,  856,  857,  719,  719,  858,  859,  860,  719,
      719,  861,  862,  863,  719,  719,  719,  864,  719,  719,
      865,  479,  865,  865,  866,  867,  719,  487,  488,  868,
      869,  719,  870,  871,  492,  871,  871,  719,  719,  872,

      873,  499,  873,  873,  719,  719,  874,  875,  506,  875,
      875,  719,  719,  876,  877,  513,  877,  877,  719,  719,
      878,  879,  520,  879,  879,  719,  880,  719,  881,  719,
      882,  719,  883,  719,  884,  719,  885,  886,  886,  719,
      540,  541,  887,  886,  888,  719,  889,  719,  890,  891,
      548,  891,  891,  892,  893,  893,  894,  893,  895,  895,
      896,  895,  897,  897,  898,  897,  899,  899,  900,  899,
      901,  901,  902,  901,  881,  903,  719,  719,  904,  883,
      905,  719,  719,  906,  885,  907,  719,  719,  719,  908,
      719,  909,  910,  591,  910,  910,  911,  912,  719,  913,

      914,  914,  915,  719,  914,  916,  719,  917,  719,  918,
      719,  919,  719,  920,  719,  921,  719,  922,  719,  923,
      719,  924,  719,  925,  719,  926,  719,  927,  928,  928,
      929,  928,  930,  931,  913,  932,  719,  719,  719,  933,
      934,  935,  936,  937,  938,  939,  923,  940,  719,  719,
      941,  925,  942,  719,  719,  943,  927,  944,  719,  719,
      719,  945,  946,  947,  719,  948,  719,  949,  719,  719,
      719,  719,  719,  719,  719,  950,  719,  951,  719,  952,
      719,  953,  719,  954,  955,  948,  956,  719,  719,  951,
      957,  719,  719,  958,  953,  959,  719,  719,  719,  960,

      719,  961,  719,  719,  962,  719,  963,  719,  961,  964,
      719,  719,  963,  965,  719,  719,  719,  719,    0,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719
    } ;

static yyconst short int yy_nxt[4910] =
    {   0,
        6,    7,    8,    6,    9,   10,   11,    6,    6,    6,
       12,   13,    6,   14,   15,   15,   16,   17,   17,   17,
       17,   17,   17,   18,   19,   20,    6,    6,   21,   22,
        6,   21,   23,   21,   21,   21,   24,   22,   22,   25,
       22,   26,   22,   22,   22,   22,   22,   27,   28,   22,
       22,   29,   30,   32,   32,   34,   40,   39,   39,   40,
       33,   33,   50,   50,   50,   50,   50,   50,   56,   65,
       59,   42,   60,   66,  719,  236,  236,   61,   69,   69,
       70,   35,   44,  547,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   46,  549,   57,  719,  122,   47,  123,

      719,   47,   47,   47,   47,   47,   47,   48,   48,   48,
       48,   48,   49,   50,   50,   50,   52,  239,  239,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   46,   78,
       78,   78,  707,   53,   52,   52,   53,   53,   53,   53,
       53,   53,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   44,  547,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   73,  549,   65,
      283,  283,   74,   66,  702,   74,   74,   74,   74,   74,
       74,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   79,

       80,   80,   81,   82,   82,   82,   82,   82,   82,  127,
      127,  128,  682,   97,   83,   97,  678,   83,   83,   83,
       83,   83,   83,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   73,  666,  100,  719,  100,   84,  355,  355,
       84,   84,   84,   84,   84,   84,   96,   46,   98,   98,
       98,   98,   98,   99,  100,  100,  100,   44,  628,  101,
      101,  101,  101,  101,  101,  101,  101,  101,   46,  142,
      142,  143,  130,  102,  130,  624,  102,  102,  102,  102,
      102,  102,   79,  106,  106,  107,  108,  108,  108,  108,
      108,  108,  144,  144,  145,  620,  160,  109,  160,  600,

      109,  109,  109,  109,  109,  109,  112,   79,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  114,  197,  197,
      198,  163,  115,  163,  537,  115,  115,  115,  115,  115,
      115,  116,  116,  116,  116,  116,  117,  118,  118,  118,
      118,  118,  118,  118,  118,  118,   79,   96,  533,  130,
      130,  130,  130,  130,  130,  529,  114,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  218,  218,  219,  419,
      181,  119,  181,  415,  119,  119,  119,  119,  119,  119,
      112,   79,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  136,  222,  222,  223,  184,  137,  184,  411,  137,

      137,  137,  137,  137,  137,  138,  138,  138,  138,  138,
      139,  140,  140,  140,  140,  140,  140,  140,  140,  140,
       79,  192,  192,  192,  192,  192,  192,  308,  308,  309,
      136,  112,   79,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  114,  312,  312,  313,  200,  148,  200,  318,
      148,  148,  148,  148,  148,  148,  149,  149,  150,  151,
      151,  151,  151,  151,  151,  316,  316,  317,  314,   79,
      152,  358,  358,  152,  152,  152,  152,  152,  152,  114,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  112,
       79,  153,  153,  153,  153,  153,  153,  112,   79,  159,

      114,  200,  200,  200,  200,  200,  200,  310,  114,  159,
      224,  161,  161,  161,  161,  161,  162,  163,  163,  163,
       79,  168,  168,  169,  170,  170,  170,  170,  170,  170,
      282,  282,  282,  282,  221,  171,  221,  220,  171,  171,
      171,  171,  171,  171,  112,   79,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  136,  282,  282,  282,  263,
      173,  263,  199,  173,  173,  173,  173,  173,  173,  174,
      174,  175,  176,  176,  176,  176,  176,  176,  409,  409,
      410,  179,   79,  177,  408,  408,  177,  177,  177,  177,
      177,  177,  136,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  112,   79,  178,  178,  178,  178,  178,  178,
      112,   79,  719,  136,  210,  210,  210,  210,  210,  210,
      146,  136,  180,  549,  182,  182,  182,  182,  182,  183,
      184,  184,  184,  112,   79,  719,   79,  217,  217,  217,
      217,  217,  217,  266,  114,  266,  114,  186,   79,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  188,  413,
      413,  414,  268,  189,  268,  141,  189,  189,  189,  189,
      189,  189,  190,  190,  190,  190,  190,  191,  192,  192,
      192,   79,  112,   79,  279,  279,  279,  279,  279,  279,
      271,  188,  271,  114,  112,   79,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  206,  417,  417,  418,  311,
      207,  311,  129,  207,  207,  207,  207,  207,  207,  208,
      208,  208,  208,  208,  209,  210,  210,  210,   79,  112,
       79,  719,   79,  527,  527,  528,  110,  315,  206,  315,
      136,   71,  136,  186,   79,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  213,  531,  531,  532,  360,  214,
      360,   79,  214,  214,  214,  214,  214,  214,  215,  215,
      215,  215,  215,  216,  217,  217,  217,   79,  112,   79,
      293,  293,  293,  293,  293,  293,   79,  213,  180,  136,
      221,  221,  221,  221,  221,  221,  114,  186,   79,  225,

      225,  225,  225,  225,  225,  225,  225,  225,  188,  535,
      535,  536,  363,  226,  363,   79,  226,  226,  226,  226,
      226,  226,  227,  227,  228,  229,  229,  229,  229,  229,
      229,  598,  598,  599,   79,   79,  230,  463,  463,  230,
      230,  230,  230,  230,  230,  188,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  186,   79,  231,  231,  231,
      231,  231,  231,  186,   79,   79,  188,  235,  283,  283,
      283,  283,  283,  283,  188,  235,  237,  237,  237,  237,
      237,  238,  239,  239,  239,   79,  244,  244,  245,  246,
      246,  246,  246,  246,  246,  618,  618,  619,   79,  365,

      247,  365,   79,  247,  247,  247,  247,  247,  247,  112,
       79,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      206,  622,  622,  623,  368,  249,  368,   79,  249,  249,
      249,  249,  249,  249,  250,  250,  251,  252,  252,  252,
      252,  252,  252,  626,  626,  627,   79,   79,  253,  466,
      466,  253,  253,  253,  253,  253,  253,  206,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  112,   79,  254,
      254,  254,  254,  254,  254,  112,   79,   79,  206,  300,
      300,  300,  300,  300,  300,  694,  206,  136,  186,   79,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  213,

      664,  664,  665,  412,  256,  412,   79,  256,  256,  256,
      256,  256,  256,  257,  257,  258,  259,  259,  259,  259,
      259,  259,  676,  676,  677,   79,   79,  260,  466,  466,
      260,  260,  260,  260,  260,  260,  213,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  186,   79,  261,  261,
      261,  261,  261,  261,  186,   79,  547,  213,  307,  307,
      307,  307,  307,  307,   79,  213,  262,  549,  264,  264,
      264,  264,  264,  265,  266,  266,  266,  267,  685,  269,
      269,  269,  269,  269,  270,  271,  271,  271,  186,   79,
      719,   79,  376,  376,  376,  376,  376,  376,  416,  188,

      416,  188,  273,   79,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  275,  680,  680,  681,  468,  276,  468,
       79,  276,  276,  276,  276,  276,  276,  277,  277,  277,
      277,  277,  278,  279,  279,  279,   79,  186,   79,  386,
      386,  386,  386,  386,  386,  471,  275,  471,  188,  280,
      280,  280,  281,  282,  282,  282,  282,  282,  112,   79,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  289,
      700,  700,  701,  473,  290,  473,   79,  290,  290,  290,
      290,  290,  290,  291,  291,  291,  291,  291,  292,  293,
      293,  293,   79,  112,   79,  719,   79,  705,  705,  706,

       79,  476,  289,  476,  206,  694,  206,  186,   79,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  296,  526,
      526,  694,  471,  297,  471,  694,  297,  297,  297,  297,
      297,  297,  298,  298,  298,  298,  298,  299,  300,  300,
      300,   79,  112,   79,  186,   79,  719,   79,  530,   79,
      530,  296,  476,  206,  476,  213,   79,  213,  273,   79,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  303,
      534,  580,  534,  580,  304,  575,  575,  304,  304,  304,
      304,  304,  304,  305,  305,  305,  305,  305,  306,  307,
      307,  307,   79,  186,   79,  393,  393,  393,  393,  393,

      393,   79,  303,  262,  213,  311,  311,  311,  311,  311,
      311,  267,   79,  315,  315,  315,  315,  315,  315,  578,
      578,  685,  188,  273,   79,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  275,  583,  585,  583,  585,  320,
      617,  617,  320,  320,  320,  320,  320,  320,  321,  321,
      322,  323,  323,  323,  323,  323,  323,  588,  621,  588,
      621,   79,  324,  647,  647,  324,  324,  324,  324,  324,
      324,  275,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  273,   79,  325,  325,  325,  325,  325,  325,  273,
       79,  685,  275,  400,  400,  400,  400,  400,  400,  685,

      275,   79,  330,  330,  331,  332,  332,  332,  332,  332,
      332,  625,  635,  625,  635,  638,  333,  638,   79,  333,
      333,  333,  333,  333,  333,  112,   79,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  289,  650,  650,  656,
      652,  335,  652,  694,  335,  335,  335,  335,  335,  335,
      336,  336,  337,  338,  338,  338,  338,  338,  338,  655,
      657,  655,  657,   79,  339,  675,  675,  339,  339,  339,
      339,  339,  339,  289,  340,  340,  340,  340,  340,  340,
      340,  340,  340,  112,   79,  340,  340,  340,  340,  340,
      340,  112,   79,   79,  289,  407,  407,  407,  407,  407,

      407,  694,  289,  206,  186,   79,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  296,  660,  667,  660,  667,
      342,  690,  690,  342,  342,  342,  342,  342,  342,  343,
      343,  344,  345,  345,  345,  345,  345,  345,  679,  683,
      679,  683,   79,  346,  693,  693,  346,  346,  346,  346,
      346,  346,  296,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  186,   79,  347,  347,  347,  347,  347,  347,
      186,   79,   79,  296,   79,  408,  408,  408,  408,  408,
      408,  296,  213,  273,   79,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  303,  686,  689,  686,  689,  349,

      704,  704,  349,  349,  349,  349,  349,  349,  350,  350,
      351,  352,  352,  352,  352,  352,  352,  695,  698,  695,
      698,   79,  353,  709,  709,  353,  353,  353,  353,  353,
      353,  303,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  273,   79,  354,  354,  354,  354,  354,  354,  273,
       79,  359,  303,  412,  412,  412,  412,  412,  412,  651,
      303,   79,  356,  356,  356,  356,  356,  357,  358,  358,
      358,  359,   79,  361,  361,  361,  361,  361,  362,  363,
      363,  363,  364,   79,  366,  366,  366,  366,  366,  367,
      368,  368,  368,  273,   79,  719,   79,  484,  484,  484,

      484,  484,  484,  703,  275,  703,  275,  370,   79,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  372,  708,
       79,  708,   79,  373,  712,  712,  373,  373,  373,  373,
      373,  373,  374,  374,  374,  374,  374,  375,  376,  376,
      376,   79,  273,   79,  497,  497,  497,  497,  497,  497,
       79,  372,   79,  275,  112,   79,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  382,  713,  713,  716,  716,
      383,  717,  717,  383,  383,  383,  383,  383,  383,  384,
      384,  384,  384,  384,  385,  386,  386,  386,   79,  112,
       79,  719,   79,  718,  718,   79,   79,   79,  382,   79,

      289,  634,  289,  186,   79,  388,  388,  388,  388,  388,
      388,  388,  388,  388,  389,  685,  685,  430,   79,  390,
      656,  656,  390,  390,  390,  390,  390,  390,  391,  391,
      391,  391,  391,  392,  393,  393,  393,   79,  112,   79,
      186,   79,  719,   79,  656,  651,  651,  389,  651,  289,
       79,  296,   79,  296,  273,   79,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  396,   79,   79,   79,   79,
      397,   79,   79,  397,  397,  397,  397,  397,  397,  398,
      398,  398,  398,  398,  399,  400,  400,  400,   79,  186,
       79,  273,   79,  719,   79,   79,   79,  549,  396,  634,

      296,  634,  303,  634,  303,  370,   79,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  403,  430,   79,  656,
      656,  404,  584,  651,  404,  404,  404,  404,  404,  404,
      405,  405,  405,  405,  405,  406,  407,  407,  407,   79,
      273,   79,  504,  504,  504,  504,  504,  504,   79,  403,
      364,  303,  416,  416,  416,  416,  416,  416,  275,  370,
       79,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      372,  651,  579,   79,   79,  421,   79,   79,  421,  421,
      421,  421,  421,  421,  422,  422,  423,  424,  424,  424,
      424,  424,  424,   79,   79,   79,   79,   79,  425,   79,

       79,  425,  425,  425,  425,  425,  425,  372,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  370,   79,  426,
      426,  426,  426,  426,  426,  370,   79,   79,  372,  511,
      511,  511,  511,  511,  511,  634,  372,   79,  431,  431,
      432,  433,  433,  433,  433,  433,  433,  634,  380,  584,
      584,  584,  434,  579,  579,  434,  434,  434,  434,  434,
      434,  112,   79,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  382,  579,   79,   79,   79,  436,   79,   79,
      436,  436,  436,  436,  436,  436,  437,  437,  438,  439,
      439,  439,  439,  439,  439,   79,   79,   79,   79,   79,

      440,  549,  604,  440,  440,  440,  440,  440,  440,  382,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  112,
       79,  441,  441,  441,  441,  441,  441,  112,   79,   79,
      382,  518,  518,  518,  518,  518,  518,  430,  382,  289,
      186,   79,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  389,  597,  584,  584,  472,  443,  579,  579,  443,
      443,  443,  443,  443,  443,  444,  444,  445,  446,  446,
      446,  446,  446,  446,  467,   79,   79,   79,   79,  447,
      549,   79,  447,  447,  447,  447,  447,  447,  389,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  186,   79,

      448,  448,  448,  448,  448,  448,  186,   79,   79,  389,
      525,  525,  525,  525,  525,  525,  430,  389,  296,  273,
       79,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      396,  329,  472,  472,  472,  450,  467,  467,  450,  450,
      450,  450,  450,  450,  451,  451,  452,  453,  453,  453,
      453,  453,  453,  467,   79,   79,   79,   79,  454,  430,
      329,  454,  454,  454,  454,  454,  454,  396,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  273,   79,  455,
      455,  455,  455,  455,  455,  273,   79,   79,  396,   79,
      526,  526,  526,  526,  526,  526,  396,  303,  370,   79,

      456,  456,  456,  456,  456,  456,  456,  456,  456,  403,
      287,  472,  472,  364,  457,  467,  467,  457,  457,  457,
      457,  457,  457,  458,  458,  459,  460,  460,  460,  460,
      460,  460,  359,   79,   79,   79,   79,  461,  430,  329,
      461,  461,  461,  461,  461,  461,  403,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  370,   79,  462,  462,
      462,  462,  462,  462,  370,   79,  467,  403,  530,  530,
      530,  530,  530,  530,  427,  403,   79,  464,  464,  464,
      464,  464,  465,  466,  466,  466,  467,  364,  469,  469,
      469,  469,  469,  470,  471,  471,  471,  472,  364,  474,

      474,  474,  474,  474,  475,  476,  476,  476,  370,   79,
      719,   79,  553,  553,  553,  553,  553,  553,  364,  372,
      359,  372,  478,   79,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  480,  359,  359,   79,   79,  481,   79,
      380,  481,  481,  481,  481,  481,  481,  482,  482,  482,
      482,  482,  483,  484,  484,  484,   79,  370,   79,  596,
      596,  596,  596,  596,  596,  329,  480,  243,  372,  487,
      487,  488,  489,  489,  489,  489,  489,  489,  490,  243,
      364,  364,  267,  491,  359,  359,  491,  491,  491,  491,
      491,  491,  112,   79,  492,  492,  492,  492,  492,  492,

      492,  492,  492,  493,  262,   79,   79,  329,  494,  243,
      204,  494,  494,  494,  494,  494,  494,  495,  495,  495,
      495,  495,  496,  497,  497,  497,   79,  112,   79,  719,
       79,  235,  267,  267,  267,  262,  493,  262,  382,  262,
      382,  186,   79,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  500,  287,  243,  167,  284,  501,  235,  235,
      501,  501,  501,  501,  501,  501,  502,  502,  502,  502,
      502,  503,  504,  504,  504,   79,  112,   79,  186,   79,
      719,   79,  235,  267,  267,  500,  180,  382,  262,  389,
      262,  389,  273,   79,  506,  506,  506,  506,  506,  506,

      506,  506,  506,  507,  243,  167,  167,  159,  508,  235,
      235,  508,  508,  508,  508,  508,  508,  509,  509,  509,
      509,  509,  510,  511,  511,  511,   79,  186,   79,  273,
       79,  719,   79,  234,  233,  232,  507,  180,  389,  180,
      396,  180,  396,  370,   79,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  514,  204,  167,  105,  134,  515,
      159,  159,  515,  515,  515,  515,  515,  515,  516,  516,
      516,  516,  516,  517,  518,  518,  518,   79,  273,   79,
      370,   79,  719,   79,  159,  196,  195,  514,  194,  396,
      193,  403,  180,  403,  478,   79,  520,  520,  520,  520,

      520,  520,  520,  520,  520,  521,  180,  719,  167,  105,
      522,  164,   96,  522,  522,  522,  522,  522,  522,  523,
      523,  523,  523,  523,  524,  525,  525,  525,   79,  370,
       79,  159,  159,  158,  157,  156,  155,   79,  521,  472,
      403,  534,  534,  534,  534,  534,  534,  372,  478,   79,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  480,
      154,   46,  134,  105,  539,  105,   46,  539,  539,  539,
      539,  539,  539,  540,  540,  541,  542,  542,  542,  542,
      542,  542,   96,   96,   96,   94,   79,  543,  126,  125,
      543,  543,  543,  543,  543,  543,  480,  544,  544,  544,

      544,  544,  544,  544,  544,  544,  478,   79,  544,  544,
      544,  544,  544,  544,  478,   79,  124,  480,   79,  617,
      617,  617,  617,  617,  617,  480,  547,  121,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  549,  120,  111,
      719,  105,  550,   46,   76,  550,  550,  550,  550,  550,
      550,  551,  551,  551,  551,  551,  552,  553,  553,  553,
      112,   79,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  493,   96,   96,   94,   79,  556,   93,   92,  556,
      556,  556,  556,  556,  556,  493,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  112,   79,  558,  558,  558,

      558,  558,  558,  112,   79,   79,  493,   79,  675,  675,
      675,  675,  675,  675,  493,  382,  186,   79,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  500,   91,   90,
       89,   79,  560,   88,   87,  560,  560,  560,  560,  560,
      560,  500,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  186,   79,  562,  562,  562,  562,  562,  562,  186,
       79,   79,  500,   79,  704,  704,  704,  704,  704,  704,
      500,  389,  273,   79,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  507,   86,   85,   73,   79,  564,   76,
      719,  564,  564,  564,  564,  564,  564,  507,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  273,   79,  566,
      566,  566,  566,  566,  566,  273,   79,   79,  507,   79,
      717,  717,  717,  717,  717,  717,  507,  396,  370,   79,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  514,
       37,   34,   62,   79,  568,   58,   55,  568,  568,  568,
      568,  568,  568,  514,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  370,   79,  570,  570,  570,  570,  570,
      570,  370,   79,   79,  514,   79,  718,  718,  718,  718,
      718,  718,  514,  403,  478,   79,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  521,   54,   51,   43,   79,

      572,   38,   37,  572,  572,  572,  572,  572,  572,  521,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  478,
       79,  574,  574,  574,  574,  574,  574,  478,   79,  579,
      521,  621,  621,  621,  621,  621,  621,  719,  521,   79,
      576,  576,  576,  576,  576,  577,  578,  578,  578,  579,
      719,  581,  581,  581,  581,  581,  582,  583,  583,  583,
      584,  719,  586,  586,  586,  586,  586,  587,  588,  588,
      588,  478,   79,  719,   79,  719,  719,  719,  719,  719,
      719,  719,  480,  719,  480,  590,   79,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  592,  719,  719,  719,

      719,  593,  719,  719,  593,  593,  593,  593,  593,  593,
      594,  594,  594,  594,  594,  595,  596,  596,  596,   79,
      478,   79,  112,   79,  719,  719,  719,  719,  719,  592,
      719,  480,  547,  493,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  549,  719,  719,  719,  719,  602,  719,
      719,  602,  602,  602,  602,  602,  602,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  547,  719,  605,  605,
      605,  605,  605,  605,  719,   79,  719,  549,  112,   79,
      186,   79,  719,   79,  719,  493,  186,   79,  719,  493,
      719,  500,  719,  500,  273,   79,  719,  500,  719,   79,

      273,   79,  370,   79,  719,  507,  719,   79,  719,  507,
      719,  507,  719,  514,  370,   79,   79,  514,  478,   79,
      719,   79,  478,   79,  719,  514,  480,  719,  719,  521,
      719,  521,  584,  521,  625,  625,  625,  625,  625,  625,
      590,   79,  629,  629,  629,  629,  629,  629,  629,  629,
      629,  592,  719,  719,  719,   79,  630,  719,  719,  630,
      630,  630,  630,  630,  630,  592,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  590,   79,  632,  632,  632,
      632,  632,  632,  590,   79,  634,  592,  667,  667,  667,
      667,  667,  667,  719,  592,  634,   79,  636,  636,  636,

      636,  636,  637,  638,  638,  638,  493,   79,   79,   79,
       79,  719,  719,  719,  719,  719,  719,  500,  507,  514,
      521,   79,  648,  648,  648,  648,  648,  649,  650,  650,
      650,  651,  719,  653,  653,  653,  653,  653,  654,  655,
      655,  655,  656,  719,  658,  658,  658,  658,  658,  659,
      660,  660,  660,  590,   79,  719,   79,  590,   79,  719,
      719,  719,  719,  719,  592,  719,  592,  651,  592,  679,
      679,  679,  679,  679,  679,  656,   79,  683,  683,  683,
      683,  683,  683,  719,  719,  719,  592,  685,  719,  687,
      687,  687,  687,  687,  688,  689,  689,  689,   79,  691,

      691,  691,  691,  691,  692,  693,  693,  693,  694,  719,
      696,  696,  696,  696,  696,  697,  698,  698,  698,  685,
      719,  703,  703,  703,  703,  703,  703,  694,  719,  708,
      708,  708,  708,  708,  708,   79,  710,  710,  710,  710,
      710,  711,  712,  712,  712,   79,  714,  714,  714,  714,
      714,  715,  716,  716,  716,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   36,  719,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   41,  719,
      719,   41,  719,   41,   52,  719,  719,   52,  719,  719,

      719,   52,   52,   52,   52,   52,   63,   63,  719,   63,
      719,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   64,   64,  719,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       67,   67,   67,  719,   67,   67,   68,  719,  719,   68,
      719,  719,  719,  719,  719,   68,   68,   68,   75,   75,
      719,  719,   75,  719,  719,   75,   74,   74,  719,  719,
       74,  719,  719,   74,   95,  719,   95,   95,  719,   95,
      719,  719,   95,   95,   95,   95,   95,   95,  103,  103,
      719,  719,  103,  719,  719,  103,  102,  102,  719,  719,

      102,  719,  719,  102,  104,  104,  719,  719,  104,  719,
      719,  104,  115,  115,  115,  719,  719,  115,  719,  719,
      115,  131,  131,  719,  719,  131,  719,  719,  131,  132,
      132,  719,  719,  132,  719,  719,  132,  133,  133,  719,
      719,  133,  719,  719,  133,  137,  137,  137,  719,  719,
      137,  719,  719,  137,  148,  148,  148,  719,  719,  148,
      719,  719,  148,  165,  165,  719,  719,  165,  719,  719,
      165,  166,  166,  719,  719,  166,  719,  719,  166,  173,
      173,  173,  719,  719,  173,  719,  719,  173,  185,  185,
      185,  185,  719,  719,  185,  719,  719,  185,  189,  189,

      189,  719,  719,  189,  719,  719,  189,  201,  201,  719,
      719,  201,  719,  719,  201,  202,  202,  719,  719,  202,
      719,  719,  202,  203,  203,  719,  719,  203,  719,  719,
      203,  207,  207,  207,  719,  719,  207,  719,  719,  207,
      211,  211,  211,  211,  719,  719,  211,  719,  719,  211,
      214,  214,  214,  719,  719,  214,  719,  719,  214,  226,
      226,  226,  719,  719,  226,  719,  719,  226,  240,  240,
      719,  719,  240,  719,  719,  240,  241,  241,  719,  719,
      241,  719,  719,  241,  242,  242,  719,  719,  242,  719,
      719,  242,  249,  249,  249,  719,  719,  249,  719,  719,

      249,  256,  256,  256,  719,  719,  256,  719,  719,  256,
      272,  272,  272,  272,  719,  719,  272,  719,  719,  272,
      276,  276,  276,  719,  719,  276,  719,  719,  276,  202,
      202,  719,  719,  202,  719,  719,  202,  285,  285,  719,
      719,  285,  719,  719,  285,  286,  286,  719,  719,  286,
      719,  719,  286,  290,  290,  290,  719,  719,  290,  719,
      719,  290,  294,  294,  294,  294,  719,  719,  294,  719,
      719,  294,  297,  297,  297,  719,  719,  297,  719,  719,
      297,  301,  301,  301,  301,  719,  719,  301,  719,  719,
      301,  304,  304,  304,  719,  719,  304,  719,  719,  304,

      320,  320,  320,  719,  719,  320,  719,  719,  320,  326,
      326,  719,  719,  326,  719,  719,  326,  327,  327,  719,
      719,  327,  719,  719,  327,  328,  328,  719,  719,  328,
      719,  719,  328,  335,  335,  335,  719,  719,  335,  719,
      719,  335,  342,  342,  342,  719,  719,  342,  719,  719,
      342,  349,  349,  349,  719,  719,  349,  719,  719,  349,
      369,  369,  369,  369,  719,  719,  369,  719,  719,  369,
      373,  373,  373,  719,  719,  373,  719,  719,  373,  377,
      377,  719,  719,  377,  719,  719,  377,  378,  378,  719,
      719,  378,  719,  719,  378,  379,  379,  719,  719,  379,

      719,  719,  379,  383,  383,  383,  719,  719,  383,  719,
      719,  383,  387,  387,  387,  387,  719,  719,  387,  719,
      719,  387,  390,  390,  390,  719,  719,  390,  719,  719,
      390,  394,  394,  394,  394,  719,  719,  394,  719,  719,
      394,  397,  397,  397,  719,  719,  397,  719,  719,  397,
      401,  401,  401,  401,  719,  719,  401,  719,  719,  401,
      404,  404,  404,  719,  719,  404,  719,  719,  404,  421,
      421,  421,  719,  719,  421,  719,  719,  421,  285,  285,
      719,  719,  285,  719,  719,  285,  428,  428,  719,  719,
      428,  719,  719,  428,  429,  429,  719,  719,  429,  719,

      719,  429,  436,  436,  436,  719,  719,  436,  719,  719,
      436,  443,  443,  443,  719,  719,  443,  719,  719,  443,
      450,  450,  450,  719,  719,  450,  719,  719,  450,  457,
      457,  457,  719,  719,  457,  719,  719,  457,  477,  477,
      477,  477,  719,  719,  477,  719,  719,  477,  481,  481,
      481,  719,  719,  481,  719,  719,  481,  485,  485,  719,
      719,  485,  719,  719,  485,  486,  486,  719,  719,  486,
      719,  719,  486,  494,  494,  494,  719,  719,  494,  719,
      719,  494,  498,  498,  498,  498,  719,  719,  498,  719,
      719,  498,  501,  501,  501,  719,  719,  501,  719,  719,

      501,  505,  505,  505,  505,  719,  719,  505,  719,  719,
      505,  508,  508,  508,  719,  719,  508,  719,  719,  508,
      512,  512,  512,  512,  719,  719,  512,  719,  719,  512,
      515,  515,  515,  719,  719,  515,  719,  719,  515,  519,
      519,  519,  519,  719,  719,  519,  719,  719,  519,  522,
      522,  522,  719,  719,  522,  719,  719,  522,  539,  539,
      539,  719,  719,  539,  719,  719,  539,  545,  545,  719,
      719,  545,  719,  719,  545,  546,  546,  719,  719,  546,
      719,  719,  546,  554,  554,  719,  719,  719,  554,  719,
      719,  554,  550,  550,  719,  719,  550,  719,  719,  550,

      557,  719,  719,  719,  557,  719,  719,  557,  556,  556,
      556,  719,  719,  556,  719,  719,  556,  561,  719,  719,
      719,  561,  719,  719,  561,  560,  560,  560,  719,  719,
      560,  719,  719,  560,  565,  719,  719,  719,  565,  719,
      719,  565,  564,  564,  564,  719,  719,  564,  719,  719,
      564,  569,  719,  719,  719,  569,  719,  719,  569,  568,
      568,  568,  719,  719,  568,  719,  719,  568,  573,  719,
      719,  719,  573,  719,  719,  573,  572,  572,  572,  719,
      719,  572,  719,  719,  572,  589,  589,  589,  589,  719,
      719,  589,  719,  719,  589,  593,  593,  593,  719,  719,

      593,  719,  719,  593,  378,  378,  719,  719,  378,  719,
      719,  378,  603,  603,  719,  719,  603,  719,  719,  603,
      602,  602,  719,  719,  602,  719,  719,  602,  606,  606,
      719,  719,  719,  606,  719,  719,  606,  607,  607,  607,
      607,  719,  719,  607,  719,  719,  607,  608,  608,  719,
      719,  719,  608,  719,  719,  608,  609,  609,  609,  609,
      719,  719,  609,  719,  719,  609,  610,  610,  719,  719,
      719,  610,  719,  719,  610,  611,  611,  611,  611,  719,
      719,  611,  719,  719,  611,  612,  612,  719,  719,  719,
      612,  719,  719,  612,  613,  613,  613,  613,  719,  719,

      613,  719,  719,  613,  614,  614,  719,  719,  719,  614,
      719,  719,  614,  615,  615,  615,  615,  719,  719,  615,
      719,  719,  615,  616,  616,  719,  719,  719,  616,  719,
      719,  616,  631,  719,  719,  719,  631,  719,  719,  631,
      630,  630,  630,  719,  719,  630,  719,  719,  630,  633,
      633,  719,  719,  633,  719,  719,  633,  639,  719,  639,
      639,  719,  719,  639,  719,  719,  639,  640,  640,  719,
      719,  719,  640,  719,  719,  640,  641,  641,  719,  719,
      719,  641,  719,  719,  641,  642,  642,  719,  719,  719,
      642,  719,  719,  642,  643,  643,  719,  719,  719,  643,

      719,  719,  643,  644,  644,  719,  719,  719,  644,  719,
      719,  644,  645,  645,  719,  719,  719,  645,  719,  719,
      645,  646,  646,  719,  719,  719,  646,  719,  719,  646,
      661,  661,  661,  661,  719,  719,  661,  719,  719,  661,
      662,  662,  719,  719,  719,  662,  719,  719,  662,  663,
      663,  719,  719,  663,  719,  719,  663,  668,  668,  719,
      719,  719,  668,  719,  719,  668,  669,  669,  719,  719,
      719,  669,  719,  719,  669,  670,  670,  719,  719,  719,
      670,  719,  719,  670,  671,  671,  719,  719,  719,  671,
      719,  719,  671,  672,  672,  719,  719,  719,  672,  719,

      719,  672,  673,  673,  719,  719,  719,  673,  719,  719,
      673,  674,  674,  719,  719,  719,  674,  719,  719,  674,
      684,  684,  719,  719,  719,  684,  719,  719,  684,  486,
      486,  719,  719,  486,  719,  719,  486,  604,  604,  719,
      719,  719,  604,  719,  719,  604,  699,  699,  719,  719,
      719,  699,  719,  719,  699,    5,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  719,  719,  719,  719,  719,  719
    } ;

static yyconst short int yy_chk[4910] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    4,    7,   13,  722,  722,   40,
        3,    4,   17,   17,   17,   17,   17,   17,   25,   33,
       27,   13,   27,   33,   40,  771,  771,   27,   44,   44,
       44,    7,   15,  553,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,  553,   25,   64,   88,   15,   88,

       64,   15,   15,   15,   15,   15,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   21,  772,  772,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   49,
       49,   49,  958,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   45,  601,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,  601,   65,
      784,  784,   45,   65,  955,   45,   45,   45,   45,   45,
       45,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   96,
       96,   96,  943,  733,   51,  733,  941,   51,   51,   51,
       51,   51,   51,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,  931,  734,  101,  734,   53,  805,  805,
       53,   53,   53,   53,   53,   53,   70,  101,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   72,  908,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,  111,
      111,  111,  741,   72,  741,  906,   72,   72,   72,   72,
       72,   72,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,  112,  112,  112,  904,  749,   76,  749,  889,

       76,   76,   76,   76,   76,   76,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,  159,  159,
      159,  750,   80,  750,  864,   80,   80,   80,   80,   80,
       80,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       82,   82,   82,   82,   82,   82,   83,   99,  861,   99,
       99,   99,   99,   99,   99,  858,   83,   84,   84,   84,
       84,   84,   84,   84,   84,   84,  180,  180,  180,  828,
      755,   84,  755,  826,   84,   84,   84,   84,   84,   84,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  186,  186,  186,  756,  106,  756,  824,  106,

      106,  106,  106,  106,  106,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  108,  108,  108,  108,  108,  108,
      109,  151,  151,  151,  151,  151,  151,  262,  262,  262,
      109,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  267,  267,  267,  760,  113,  760,  797,
      113,  113,  113,  113,  113,  113,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  273,  273,  273,  795,  115,
      114,  806,  806,  114,  114,  114,  114,  114,  114,  115,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  117,
      117,  117,  117,  117,  117,  117,  117,  118,  118,  162,

      117,  162,  162,  162,  162,  162,  162,  793,  118,  128,
      769,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      280,  280,  280,  280,  768,  134,  768,  767,  134,  134,
      134,  134,  134,  134,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  281,  281,  281,  778,
      135,  778,  759,  135,  135,  135,  135,  135,  135,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  359,  359,
      359,  754,  137,  136,  823,  823,  136,  136,  136,  136,
      136,  136,  137,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  139,  139,  139,  139,  139,  139,  139,  139,
      140,  140,  602,  139,  170,  170,  170,  170,  170,  170,
      747,  140,  145,  602,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  147,  147,  148,  148,  176,  176,  176,
      176,  176,  176,  779,  147,  779,  148,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  364,
      364,  364,  780,  149,  780,  746,  149,  149,  149,  149,
      149,  149,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  152,  153,  153,  229,  229,  229,  229,  229,  229,
      781,  152,  781,  153,  168,  168,  168,  168,  168,  168,

      168,  168,  168,  168,  168,  168,  370,  370,  370,  794,
      168,  794,  740,  168,  168,  168,  168,  168,  168,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  171,  172,
      172,  173,  173,  467,  467,  467,  738,  796,  171,  796,
      172,  729,  173,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  472,  472,  472,  807,  174,
      807,  718,  174,  174,  174,  174,  174,  174,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  177,  178,  178,
      246,  246,  246,  246,  246,  246,  185,  177,  183,  178,
      183,  183,  183,  183,  183,  183,  185,  187,  187,  187,

      187,  187,  187,  187,  187,  187,  187,  187,  187,  478,
      478,  478,  808,  187,  808,  717,  187,  187,  187,  187,
      187,  187,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  547,  547,  547,  716,  189,  188,  837,  837,  188,
      188,  188,  188,  188,  188,  189,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  191,  191,  191,  191,  191,
      191,  191,  191,  192,  192,  714,  191,  238,  238,  238,
      238,  238,  238,  238,  192,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  579,  579,  579,  713,  809,

      204,  809,  712,  204,  204,  204,  204,  204,  204,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  584,  584,  584,  810,  205,  810,  710,  205,  205,
      205,  205,  205,  205,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  590,  590,  590,  709,  207,  206,  838,
      838,  206,  206,  206,  206,  206,  206,  207,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  209,  209,  209,
      209,  209,  209,  209,  209,  210,  210,  211,  209,  252,
      252,  252,  252,  252,  252,  708,  210,  211,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,

      634,  634,  634,  825,  212,  825,  707,  212,  212,  212,
      212,  212,  212,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  651,  651,  651,  705,  214,  213,  856,  856,
      213,  213,  213,  213,  213,  213,  214,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  216,  216,  216,  216,
      216,  216,  216,  216,  217,  217,  605,  216,  259,  259,
      259,  259,  259,  259,  704,  217,  219,  605,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  223,  703,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  225,  225,
      226,  226,  323,  323,  323,  323,  323,  323,  827,  225,

      827,  226,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  656,  656,  656,  839,  227,  839,
      702,  227,  227,  227,  227,  227,  227,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  230,  231,  231,  332,
      332,  332,  332,  332,  332,  840,  230,  840,  231,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      685,  685,  685,  841,  244,  841,  700,  244,  244,  244,
      244,  244,  244,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  247,  248,  248,  249,  249,  694,  694,  694,

      699,  842,  247,  842,  248,  698,  249,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  857,
      857,  696,  859,  250,  859,  695,  250,  250,  250,  250,
      250,  250,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  253,  254,  254,  255,  255,  256,  256,  860,  693,
      860,  253,  862,  254,  862,  255,  691,  256,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      863,  882,  863,  882,  257,  880,  880,  257,  257,  257,
      257,  257,  257,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  260,  261,  261,  338,  338,  338,  338,  338,

      338,  690,  260,  265,  261,  265,  265,  265,  265,  265,
      265,  270,  272,  270,  270,  270,  270,  270,  270,  881,
      881,  689,  272,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  883,  884,  883,  884,  274,
      903,  903,  274,  274,  274,  274,  274,  274,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  885,  905,  885,
      905,  276,  275,  922,  922,  275,  275,  275,  275,  275,
      275,  276,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  278,  278,  278,  278,  278,  278,  278,  278,  279,
      279,  687,  278,  345,  345,  345,  345,  345,  345,  686,

      279,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  907,  912,  907,  912,  913,  287,  913,  684,  287,
      287,  287,  287,  287,  287,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  923,  923,  683,
      924,  288,  924,  682,  288,  288,  288,  288,  288,  288,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  925,
      926,  925,  926,  290,  289,  940,  940,  289,  289,  289,
      289,  289,  289,  290,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  292,  292,  292,  292,  292,  292,  292,
      292,  293,  293,  294,  292,  352,  352,  352,  352,  352,

      352,  680,  293,  294,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  927,  932,  927,  932,
      295,  950,  950,  295,  295,  295,  295,  295,  295,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  942,  944,
      942,  944,  297,  296,  951,  951,  296,  296,  296,  296,
      296,  296,  297,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  299,  299,  299,  299,  299,  299,  299,  299,
      300,  300,  301,  299,  357,  357,  357,  357,  357,  357,
      357,  300,  301,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  947,  948,  947,  948,  302,

      957,  957,  302,  302,  302,  302,  302,  302,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  952,  953,  952,
      953,  304,  303,  960,  960,  303,  303,  303,  303,  303,
      303,  304,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  306,  306,  306,  306,  306,  306,  306,  306,  307,
      307,  362,  306,  362,  362,  362,  362,  362,  362,  679,
      307,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  313,  678,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  317,  676,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  319,  319,  320,  320,  424,  424,  424,

      424,  424,  424,  956,  319,  956,  320,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  959,
      675,  959,  674,  321,  961,  961,  321,  321,  321,  321,
      321,  321,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  324,  325,  325,  433,  433,  433,  433,  433,  433,
      673,  324,  672,  325,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  962,  962,  963,  963,
      330,  964,  964,  330,  330,  330,  330,  330,  330,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  333,  334,
      334,  335,  335,  965,  965,  671,  670,  669,  333,  668,

      334,  667,  335,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  666,  664,  663,  662,  336,
      660,  658,  336,  336,  336,  336,  336,  336,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  339,  340,  340,
      341,  341,  342,  342,  657,  655,  653,  339,  652,  340,
      650,  341,  648,  342,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  647,  646,  645,  644,
      343,  643,  642,  343,  343,  343,  343,  343,  343,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  346,  347,
      347,  348,  348,  349,  349,  641,  640,  639,  346,  638,

      347,  636,  348,  635,  349,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  633,  631,  628,
      626,  350,  625,  624,  350,  350,  350,  350,  350,  350,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  353,
      354,  354,  439,  439,  439,  439,  439,  439,  369,  353,
      367,  354,  367,  367,  367,  367,  367,  367,  369,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  622,  621,  620,  618,  371,  617,  616,  371,  371,
      371,  371,  371,  371,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  614,  612,  610,  608,  373,  372,  606,

      604,  372,  372,  372,  372,  372,  372,  373,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  375,  375,  375,
      375,  375,  375,  375,  375,  376,  376,  603,  375,  446,
      446,  446,  446,  446,  446,  600,  376,  380,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  598,  597,  588,
      586,  585,  380,  583,  581,  380,  380,  380,  380,  380,
      380,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  580,  578,  576,  575,  381,  573,  569,
      381,  381,  381,  381,  381,  381,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  565,  561,  557,  554,  383,

      382,  550,  549,  382,  382,  382,  382,  382,  382,  383,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  385,
      385,  385,  385,  385,  385,  385,  385,  386,  386,  387,
      385,  453,  453,  453,  453,  453,  453,  546,  386,  387,
      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  545,  537,  535,  534,  388,  533,  531,  388,
      388,  388,  388,  388,  388,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  530,  529,  527,  526,  390,  389,
      491,  490,  389,  389,  389,  389,  389,  389,  390,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  392,  392,

      392,  392,  392,  392,  392,  392,  393,  393,  394,  392,
      460,  460,  460,  460,  460,  460,  486,  393,  394,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  485,  476,  474,  473,  395,  471,  469,  395,  395,
      395,  395,  395,  395,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  468,  466,  464,  463,  397,  396,  429,
      428,  396,  396,  396,  396,  396,  396,  397,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  399,  399,  399,
      399,  399,  399,  399,  399,  400,  400,  401,  399,  465,
      465,  465,  465,  465,  465,  465,  400,  401,  402,  402,

      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      427,  419,  417,  416,  402,  415,  413,  402,  402,  402,
      402,  402,  402,  403,  403,  403,  403,  403,  403,  403,
      403,  403,  412,  411,  409,  408,  404,  403,  379,  378,
      403,  403,  403,  403,  403,  403,  404,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  406,  406,  406,  406,
      406,  406,  406,  406,  407,  407,  470,  406,  470,  470,
      470,  470,  470,  470,  377,  407,  410,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  414,  368,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  418,  366,  418,

      418,  418,  418,  418,  418,  418,  418,  418,  420,  420,
      421,  421,  489,  489,  489,  489,  489,  489,  365,  420,
      363,  421,  422,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  361,  360,  358,  356,  422,  355,
      329,  422,  422,  422,  422,  422,  422,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  425,  426,  426,  542,
      542,  542,  542,  542,  542,  328,  425,  327,  426,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  326,
      318,  316,  315,  430,  314,  312,  430,  430,  430,  430,
      430,  430,  431,  431,  431,  431,  431,  431,  431,  431,

      431,  431,  431,  431,  311,  310,  308,  286,  431,  285,
      284,  431,  431,  431,  431,  431,  431,  432,  432,  432,
      432,  432,  432,  432,  432,  432,  434,  435,  435,  436,
      436,  283,  271,  269,  268,  266,  434,  264,  435,  263,
      436,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  243,  242,  241,  240,  437,  239,  237,
      437,  437,  437,  437,  437,  437,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  440,  441,  441,  442,  442,
      443,  443,  236,  224,  222,  440,  221,  441,  220,  442,
      218,  443,  444,  444,  444,  444,  444,  444,  444,  444,

      444,  444,  444,  444,  203,  202,  201,  200,  444,  199,
      197,  444,  444,  444,  444,  444,  444,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  447,  448,  448,  449,
      449,  450,  450,  195,  194,  193,  447,  184,  448,  182,
      449,  181,  450,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  167,  166,  165,  164,  451,
      163,  161,  451,  451,  451,  451,  451,  451,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  454,  455,  455,
      456,  456,  457,  457,  160,  158,  157,  454,  156,  455,
      155,  456,  146,  457,  458,  458,  458,  458,  458,  458,

      458,  458,  458,  458,  458,  458,  144,  143,  133,  132,
      458,  131,  130,  458,  458,  458,  458,  458,  458,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  461,  462,
      462,  129,  127,  125,  124,  123,  122,  477,  461,  475,
      462,  475,  475,  475,  475,  475,  475,  477,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      121,  119,  105,  104,  479,  103,  102,  479,  479,  479,
      479,  479,  479,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  100,   98,   97,   95,  481,  480,   91,   90,
      480,  480,  480,  480,  480,  480,  481,  482,  482,  482,

      482,  482,  482,  482,  482,  482,  483,  483,  483,  483,
      483,  483,  483,  483,  484,  484,   89,  483,  577,  577,
      577,  577,  577,  577,  577,  484,  487,   86,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,   85,   79,
       78,   75,  487,   74,   73,  487,  487,  487,  487,  487,
      487,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,   71,   69,   67,  494,  492,   62,   61,  492,
      492,  492,  492,  492,  492,  494,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  496,  496,  496,  496,  496,

      496,  496,  496,  497,  497,  498,  496,  649,  649,  649,
      649,  649,  649,  649,  497,  498,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,   60,   59,
       58,  501,  499,   57,   56,  499,  499,  499,  499,  499,
      499,  501,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  503,  503,  503,  503,  503,  503,  503,  503,  504,
      504,  505,  503,  692,  692,  692,  692,  692,  692,  692,
      504,  505,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,   55,   54,   47,  508,  506,   46,
       41,  506,  506,  506,  506,  506,  506,  508,  509,  509,

      509,  509,  509,  509,  509,  509,  509,  510,  510,  510,
      510,  510,  510,  510,  510,  511,  511,  512,  510,  711,
      711,  711,  711,  711,  711,  711,  511,  512,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
       36,   34,   28,  515,  513,   26,   24,  513,  513,  513,
      513,  513,  513,  515,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  517,  517,  517,  517,  517,  517,  517,
      517,  518,  518,  519,  517,  715,  715,  715,  715,  715,
      715,  715,  518,  519,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,   23,   18,   14,  522,

      520,   10,    9,  520,  520,  520,  520,  520,  520,  522,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  524,
      524,  524,  524,  524,  524,  524,  524,  525,  525,  582,
      524,  582,  582,  582,  582,  582,  582,    5,  525,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  532,
        0,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      536,    0,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  538,  538,  539,  539,    0,    0,    0,    0,    0,
        0,    0,  538,    0,  539,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,    0,    0,    0,

        0,  540,    0,    0,  540,  540,  540,  540,  540,  540,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  543,
      544,  544,  555,  555,    0,    0,    0,    0,    0,  543,
        0,  544,  548,  555,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,    0,    0,    0,    0,  548,    0,
        0,  548,  548,  548,  548,  548,  548,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  552,    0,  552,  552,
      552,  552,  552,  552,  556,  556,    0,  552,  558,  558,
      559,  559,  560,  560,    0,  556,  562,  562,    0,  558,
        0,  559,    0,  560,  563,  563,    0,  562,  564,  564,

      566,  566,  567,  567,    0,  563,  568,  568,    0,  564,
        0,  566,    0,  567,  570,  570,  589,  568,  571,  571,
      572,  572,  574,  574,    0,  570,  589,    0,    0,  571,
        0,  572,  587,  574,  587,  587,  587,  587,  587,  587,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,    0,    0,    0,  593,  591,    0,    0,  591,
      591,  591,  591,  591,  591,  593,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  595,  595,  595,  595,  595,
      595,  595,  595,  596,  596,  637,  595,  637,  637,  637,
      637,  637,  637,    0,  596,  599,  607,  599,  599,  599,

      599,  599,  599,  599,  599,  599,  607,  609,  611,  613,
      615,    0,    0,    0,    0,    0,    0,  609,  611,  613,
      615,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  623,    0,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  627,    0,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  629,  629,  630,  630,  632,  632,    0,
        0,    0,    0,    0,  629,    0,  630,  654,  632,  654,
      654,  654,  654,  654,  654,  659,  661,  659,  659,  659,
      659,  659,  659,    0,    0,    0,  661,  665,    0,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  677,  677,

      677,  677,  677,  677,  677,  677,  677,  677,  681,    0,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  688,
        0,  688,  688,  688,  688,  688,  688,  697,    0,  697,
      697,  697,  697,  697,  697,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  721,    0,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  723,    0,
        0,  723,    0,  723,  724,    0,    0,  724,    0,    0,

        0,  724,  724,  724,  724,  724,  725,  725,    0,  725,
        0,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  726,  726,    0,  726,  726,  726,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      727,  727,  727,    0,  727,  727,  728,    0,    0,  728,
        0,    0,    0,    0,    0,  728,  728,  728,  730,  730,
        0,    0,  730,    0,    0,  730,  731,  731,    0,    0,
      731,    0,    0,  731,  732,    0,  732,  732,    0,  732,
        0,    0,  732,  732,  732,  732,  732,  732,  735,  735,
        0,    0,  735,    0,    0,  735,  736,  736,    0,    0,

      736,    0,    0,  736,  737,  737,    0,    0,  737,    0,
        0,  737,  739,  739,  739,    0,    0,  739,    0,    0,
      739,  742,  742,    0,    0,  742,    0,    0,  742,  743,
      743,    0,    0,  743,    0,    0,  743,  744,  744,    0,
        0,  744,    0,    0,  744,  745,  745,  745,    0,    0,
      745,    0,    0,  745,  748,  748,  748,    0,    0,  748,
        0,    0,  748,  751,  751,    0,    0,  751,    0,    0,
      751,  752,  752,    0,    0,  752,    0,    0,  752,  753,
      753,  753,    0,    0,  753,    0,    0,  753,  757,  757,
      757,  757,    0,    0,  757,    0,    0,  757,  758,  758,

      758,    0,    0,  758,    0,    0,  758,  761,  761,    0,
        0,  761,    0,    0,  761,  762,  762,    0,    0,  762,
        0,    0,  762,  763,  763,    0,    0,  763,    0,    0,
      763,  764,  764,  764,    0,    0,  764,    0,    0,  764,
      765,  765,  765,  765,    0,    0,  765,    0,    0,  765,
      766,  766,  766,    0,    0,  766,    0,    0,  766,  770,
      770,  770,    0,    0,  770,    0,    0,  770,  773,  773,
        0,    0,  773,    0,    0,  773,  774,  774,    0,    0,
      774,    0,    0,  774,  775,  775,    0,    0,  775,    0,
        0,  775,  776,  776,  776,    0,    0,  776,    0,    0,

      776,  777,  777,  777,    0,    0,  777,    0,    0,  777,
      782,  782,  782,  782,    0,    0,  782,    0,    0,  782,
      783,  783,  783,    0,    0,  783,    0,    0,  783,  785,
      785,    0,    0,  785,    0,    0,  785,  786,  786,    0,
        0,  786,    0,    0,  786,  787,  787,    0,    0,  787,
        0,    0,  787,  788,  788,  788,    0,    0,  788,    0,
        0,  788,  789,  789,  789,  789,    0,    0,  789,    0,
        0,  789,  790,  790,  790,    0,    0,  790,    0,    0,
      790,  791,  791,  791,  791,    0,    0,  791,    0,    0,
      791,  792,  792,  792,    0,    0,  792,    0,    0,  792,

      798,  798,  798,    0,    0,  798,    0,    0,  798,  799,
      799,    0,    0,  799,    0,    0,  799,  800,  800,    0,
        0,  800,    0,    0,  800,  801,  801,    0,    0,  801,
        0,    0,  801,  802,  802,  802,    0,    0,  802,    0,
        0,  802,  803,  803,  803,    0,    0,  803,    0,    0,
      803,  804,  804,  804,    0,    0,  804,    0,    0,  804,
      811,  811,  811,  811,    0,    0,  811,    0,    0,  811,
      812,  812,  812,    0,    0,  812,    0,    0,  812,  813,
      813,    0,    0,  813,    0,    0,  813,  814,  814,    0,
        0,  814,    0,    0,  814,  815,  815,    0,    0,  815,

        0,    0,  815,  816,  816,  816,    0,    0,  816,    0,
        0,  816,  817,  817,  817,  817,    0,    0,  817,    0,
        0,  817,  818,  818,  818,    0,    0,  818,    0,    0,
      818,  819,  819,  819,  819,    0,    0,  819,    0,    0,
      819,  820,  820,  820,    0,    0,  820,    0,    0,  820,
      821,  821,  821,  821,    0,    0,  821,    0,    0,  821,
      822,  822,  822,    0,    0,  822,    0,    0,  822,  829,
      829,  829,    0,    0,  829,    0,    0,  829,  830,  830,
        0,    0,  830,    0,    0,  830,  831,  831,    0,    0,
      831,    0,    0,  831,  832,  832,    0,    0,  832,    0,

        0,  832,  833,  833,  833,    0,    0,  833,    0,    0,
      833,  834,  834,  834,    0,    0,  834,    0,    0,  834,
      835,  835,  835,    0,    0,  835,    0,    0,  835,  836,
      836,  836,    0,    0,  836,    0,    0,  836,  843,  843,
      843,  843,    0,    0,  843,    0,    0,  843,  844,  844,
      844,    0,    0,  844,    0,    0,  844,  845,  845,    0,
        0,  845,    0,    0,  845,  846,  846,    0,    0,  846,
        0,    0,  846,  847,  847,  847,    0,    0,  847,    0,
        0,  847,  848,  848,  848,  848,    0,    0,  848,    0,
        0,  848,  849,  849,  849,    0,    0,  849,    0,    0,

      849,  850,  850,  850,  850,    0,    0,  850,    0,    0,
      850,  851,  851,  851,    0,    0,  851,    0,    0,  851,
      852,  852,  852,  852,    0,    0,  852,    0,    0,  852,
      853,  853,  853,    0,    0,  853,    0,    0,  853,  854,
      854,  854,  854,    0,    0,  854,    0,    0,  854,  855,
      855,  855,    0,    0,  855,    0,    0,  855,  865,  865,
      865,    0,    0,  865,    0,    0,  865,  866,  866,    0,
        0,  866,    0,    0,  866,  867,  867,    0,    0,  867,
        0,    0,  867,  868,  868,    0,    0,    0,  868,    0,
        0,  868,  869,  869,    0,    0,  869,    0,    0,  869,

      870,    0,    0,    0,  870,    0,    0,  870,  871,  871,
      871,    0,    0,  871,    0,    0,  871,  872,    0,    0,
        0,  872,    0,    0,  872,  873,  873,  873,    0,    0,
      873,    0,    0,  873,  874,    0,    0,    0,  874,    0,
        0,  874,  875,  875,  875,    0,    0,  875,    0,    0,
      875,  876,    0,    0,    0,  876,    0,    0,  876,  877,
      877,  877,    0,    0,  877,    0,    0,  877,  878,    0,
        0,    0,  878,    0,    0,  878,  879,  879,  879,    0,
        0,  879,    0,    0,  879,  886,  886,  886,  886,    0,
        0,  886,    0,    0,  886,  887,  887,  887,    0,    0,

      887,    0,    0,  887,  888,  888,    0,    0,  888,    0,
        0,  888,  890,  890,    0,    0,  890,    0,    0,  890,
      891,  891,    0,    0,  891,    0,    0,  891,  892,  892,
        0,    0,    0,  892,    0,    0,  892,  893,  893,  893,
      893,    0,    0,  893,    0,    0,  893,  894,  894,    0,
        0,    0,  894,    0,    0,  894,  895,  895,  895,  895,
        0,    0,  895,    0,    0,  895,  896,  896,    0,    0,
        0,  896,    0,    0,  896,  897,  897,  897,  897,    0,
        0,  897,    0,    0,  897,  898,  898,    0,    0,    0,
      898,    0,    0,  898,  899,  899,  899,  899,    0,    0,

      899,    0,    0,  899,  900,  900,    0,    0,    0,  900,
        0,    0,  900,  901,  901,  901,  901,    0,    0,  901,
        0,    0,  901,  902,  902,    0,    0,    0,  902,    0,
        0,  902,  909,    0,    0,    0,  909,    0,    0,  909,
      910,  910,  910,    0,    0,  910,    0,    0,  910,  911,
      911,    0,    0,  911,    0,    0,  911,  914,    0,  914,
      914,    0,    0,  914,    0,    0,  914,  915,  915,    0,
        0,    0,  915,    0,    0,  915,  916,  916,    0,    0,
        0,  916,    0,    0,  916,  917,  917,    0,    0,    0,
      917,    0,    0,  917,  918,  918,    0,    0,    0,  918,

        0,    0,  918,  919,  919,    0,    0,    0,  919,    0,
        0,  919,  920,  920,    0,    0,    0,  920,    0,    0,
      920,  921,  921,    0,    0,    0,  921,    0,    0,  921,
      928,  928,  928,  928,    0,    0,  928,    0,    0,  928,
      929,  929,    0,    0,    0,  929,    0,    0,  929,  930,
      930,    0,    0,  930,    0,    0,  930,  933,  933,    0,
        0,    0,  933,    0,    0,  933,  934,  934,    0,    0,
        0,  934,    0,    0,  934,  935,  935,    0,    0,    0,
      935,    0,    0,  935,  936,  936,    0,    0,    0,  936,
        0,    0,  936,  937,  937,    0,    0,    0,  937,    0,

        0,  937,  938,  938,    0,    0,    0,  938,    0,    0,
      938,  939,  939,    0,    0,    0,  939,    0,    0,  939,
      945,  945,    0,    0,    0,  945,    0,    0,  945,  946,
      946,    0,    0,  946,    0,    0,  946,  949,  949,    0,
        0,    0,  949,    0,    0,  949,  954,  954,    0,    0,
        0,  954,    0,    0,  954,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  719,  719,  719,  719,  719,  719
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "template.ll"
#define INITIAL 0
#line 2 "template.ll"
#include <string.h>
#include "y.tplt_tab.h"
int tplt_linenum = 1;
extern char* tpltlval;
#define YY_NO_UNPUT 1
#define comment 1

/*
 * IPv6 address representation in Augmented Backus-Naur Form (ABNF).
 * Representation taken from email by Roy T. Fielding <roy.fielding@day.com>
 * to uri@w3.org mailing list on 05 Dec 2002:
 *   http://lists.w3.org/Archives/Public/uri/2002Dec/0000.html
 *
 *    IPv6address   = (                          6( h4 ":" ) ls32 )
 *                  / (                     "::" 5( h4 ":" ) ls32 )
 *                  / ( [              h4 ] "::" 4( h4 ":" ) ls32 )
 *                  / ( [ *1( h4 ":" ) h4 ] "::" 3( h4 ":" ) ls32 )
 *                  / ( [ *2( h4 ":" ) h4 ] "::" 2( h4 ":" ) ls32 )
 *                  / ( [ *3( h4 ":" ) h4 ] "::"    h4 ":"   ls32 )
 *                  / ( [ *4( h4 ":" ) h4 ] "::"             ls32 )
 *                  / ( [ *5( h4 ":" ) h4 ] "::"             h4   )
 *                  / ( [ *6( h4 ":" ) h4 ] "::"                  )
 *
 *    ls32          = ( h4 ":" h4 ) / IPv4address
 *                  ; least-significant 32 bits of address
 *    h4            = 1*4HEXDIG
 *    IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet
 *    dec-octet     = 1*2DIGIT                      ; 0-9, 00-99
 *                  / ( "0" / "1" ) 2DIGIT          ; 000-199
 *                  / "2" %x30-34 DIGIT             ; 200-249
 *                  / "25" %x30-35                  ; 250-255
 *
 */
#line 1790 "lex.tplt.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 61 "template.ll"


#line 1944 "lex.tplt.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 720 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4856 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 63 "template.ll"
{
	return UPLEVEL;
	}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 67 "template.ll"
{
	return DOWNLEVEL;
	}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 71 "template.ll"
/* whitespace */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 73 "template.ll"
{
	/* newline is not significant */
	tplt_linenum++;
	}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 78 "template.ll"
{
	return END;
	}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 82 "template.ll"
{
	return COLON;
	}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 86 "template.ll"
{
	return ASSIGN_DEFAULT;
	}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 90 "template.ll"
{
	return LISTNEXT;
	}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 94 "template.ll"
{
	tpltlval = strdup(tplttext);
	return RETURN;
	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 99 "template.ll"
{
	tpltlval = strdup(tplttext);
	return TEXT_TYPE;
	}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 104 "template.ll"
{
	tpltlval = strdup(tplttext);
	return INT_TYPE;
	}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 109 "template.ll"
{
	tpltlval = strdup(tplttext);
	return UINT_TYPE;
	}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 114 "template.ll"
{
	tpltlval = strdup(tplttext);
	return BOOL_TYPE;
	}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 119 "template.ll"
{
	tpltlval = strdup(tplttext);
	return TOGGLE_TYPE;
	}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 124 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV4_TYPE;
	}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 129 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV4NET_TYPE;
	}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 134 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV6_TYPE;
	}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 139 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV6NET_TYPE;
	}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 144 "template.ll"
{
	tpltlval = strdup(tplttext);
	return MACADDR_TYPE;
	}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 149 "template.ll"
{
	tpltlval = strdup(tplttext);
	return BOOL_VALUE;
	}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 154 "template.ll"
{
	tpltlval = strdup(tplttext);
	return BOOL_VALUE;
	}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 159 "template.ll"
{
	tpltlval = strdup(tplttext);
	return INTEGER_VALUE;
	}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 164 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV4_VALUE;
	}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 169 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV4NET_VALUE;
	}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 174 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV6_VALUE;
	}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 179 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV6NET_VALUE;
	}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 184 "template.ll"
{
	tpltlval = strdup(tplttext);
	return MACADDR_VALUE;
	}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 189 "template.ll"
{
	tpltlval = strdup("@");
	return VARDEF;
	}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 194 "template.ll"
{
	tpltlval = strdup(tplttext);
	return COMMAND;
	}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 199 "template.ll"
{
	tpltlval = strdup(tplttext);
	return VARIABLE;
	}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 204 "template.ll"
{
	tpltlval = strdup(tplttext);
	return LITERAL;
	}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 209 "template.ll"
{
	tpltlval = strdup(tplttext);
	return STRING;
	}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 214 "template.ll"
BEGIN(comment);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 216 "template.ll"
/* eat up anything that's not a '*' */
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 218 "template.ll"
/* eat up '*'s not followed by "/"s */
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 220 "template.ll"
tplt_linenum++;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 222 "template.ll"
BEGIN(INITIAL);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 224 "template.ll"
{
	/* everything else is a syntax error */
	return SYNTAX_ERROR;
	}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 230 "template.ll"
ECHO;
	YY_BREAK
#line 2312 "lex.tplt.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 720 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 720 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 719);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 230 "template.ll"

