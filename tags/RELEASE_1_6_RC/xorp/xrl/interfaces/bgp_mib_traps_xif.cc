/*
 * Copyright (c) 2001-2008 XORP, Inc.
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#ident "$XORP: xorp/xrl/interfaces/bgp_mib_traps_xif.cc,v 1.17 2008/09/23 08:13:16 abittau Exp $"

#include "bgp_mib_traps_xif.hh"

bool
XrlBgpMibTrapsV0p1Client::send_send_bgp_established_trap(
	const char*	dst_xrl_target_name,
	const string&	bgp_last_error,
	const uint32_t&	bgp_state,
	const SendBgpEstablishedTrapCB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "bgp_mib_traps/0.1/send_bgp_established_trap");
        x->args().add(XrlAtom(bgp_last_error));
        x->args().add(XrlAtom(bgp_state));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, bgp_last_error);
    x->args().set_arg(1, bgp_state);

    return _sender->send(*x, callback(this, &XrlBgpMibTrapsV0p1Client::unmarshall_send_bgp_established_trap, cb));
}


/* Unmarshall send_bgp_established_trap */
void
XrlBgpMibTrapsV0p1Client::unmarshall_send_bgp_established_trap(
	const XrlError&	e,
	XrlArgs*	a,
	SendBgpEstablishedTrapCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlBgpMibTrapsV0p1Client::send_send_bgp_backward_transition_trap(
	const char*	dst_xrl_target_name,
	const string&	bgp_last_error,
	const uint32_t&	bgp_state,
	const SendBgpBackwardTransitionTrapCB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "bgp_mib_traps/0.1/send_bgp_backward_transition_trap");
        x->args().add(XrlAtom(bgp_last_error));
        x->args().add(XrlAtom(bgp_state));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, bgp_last_error);
    x->args().set_arg(1, bgp_state);

    return _sender->send(*x, callback(this, &XrlBgpMibTrapsV0p1Client::unmarshall_send_bgp_backward_transition_trap, cb));
}


/* Unmarshall send_bgp_backward_transition_trap */
void
XrlBgpMibTrapsV0p1Client::unmarshall_send_bgp_backward_transition_trap(
	const XrlError&	e,
	XrlArgs*	a,
	SendBgpBackwardTransitionTrapCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}
