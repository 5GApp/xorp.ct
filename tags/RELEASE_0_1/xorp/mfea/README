#
# $XORP: xorp/mfea/README,v 1.2 2002/12/09 15:25:06 pavlin Exp $
#

Multicast Forwarding Engine Abstraction
=============================

The main purpose of the MFEA is to abstract the underlying system and
the multicast forwarding engine, and to provide a consistent interface
to multicast-related modules such as PIM and MLD/IGMP.

The MFEA is intended to fulfill several roles on behalf of multicast-related
processes such as MLD/IGMP and PIM-SM.

    1) It provides access to the multicast forwarding engine for processes
       such as PIM-SM.

    2) It installs dataflow monitors into the kernel (if the underlying
       system supports it), or reads bandwidth forwarding statistics per
       dataflow.

    3) It reads information about network interfaces from the kernel.

    4) It reports changes to network interface configurations (not
       implemented yet).

    5) It reads the underlying unicast forwarding table, and composes
       Reverse-Path Forwarding information for processes such as PIM-SM.

    6) It reports changes to the RPF information.

    7) It allows protocol-specific packets (e.g., PIM or IGMP) to be
       sent/received to/from network interfaces.


Configuration
=============

MFEA like most Xorp processes does not take its configuration
parameters from the command line. Its parameters are provided via
XRLs. At the very least a MFEA process must be provided with
the set of network interfaces to enable for multicast.

Startup
=======

In normal operation, MFEA would be started by the XORP router manager
process, not directly from the command line.  

For testing and debugging purposes, MFEA can be manually started.  The
Xorp MFEA process assumes that the XRL finder is are already running.
However, the binary program ``test_mfea'' already contains it as well,
therefore it is sufficient to start only this program.

After ``test_mfea'' is started, the MFEA is disabled by default. To
start it, and to configure its operation, run script ``configure_mfea''.
Note that it MUST be run from the ``mfea'' directory.

However, before running ``configure_mfea'', you must configure
it for each router:

 - Add an entry for each router under "case $HOSTNAME in" with the
   set of network interfaces to enable.
   Example:

	xorp1)
	ENABLE_VIFS="dc1 dc2 dc4"
	;;

 - By default, ``test_mfea'' will log all protocol-related messages.
   To disable them, comment-out the following variables:

	MFEA_ENABLE_LOG_TRACE=yes

 - After MFEA is started, if you want to send a single XRL command
   to it and change some of its configuration, you can use the command
   ./command_mfea <xrl_command> [xrl_command_arguments ... ]
   
   The list of all XRL commands and their arguments are in
   ``xrl_mfea_shell_funcs.sh''

 - After MFEA is started, if you want to access its internal
   information, you can use the built-in CLI:
     telnet localhost 12000
   If you want to enable access from other subnets other than the local
   host only, add the corresponding subnet to test_mfea.cc under
   "CLI access".

   Currently, the CLI supports primarily "show" commands. For example,
   "show igmp interface" will show the list of all interfaces known to
   IGMP and their status. At each moment you can press <TAB> for the
   list of existing commands at each level, and a brief description
   of them. Command-line editing is similar to tcsh: e.g., Ctrl-A and
   Ctrl-E to go to the beginning or end of the current line, Ctrl-A
   to kill the remaining part of the current line, etc.
   To exit, press Ctrl-D when you are on a new empty line.

Documentation
=============

The MFEA architecture is described in:
	$(XORP)/docs/mfea

The programming documentation is in:
	$(XORP)/docs/kdoc/html/mfea

Testing
=======

Currently, the MFEA testing is performed manually, indirectly as part of
the MLD/IGMP and PIM-SM testing.

In the future, automated testing will be added, similar to
the BGP testing framework.

Status
======

Currently (note: December 5, 2002), the MFEA supports abstraction for
the following systems:

 * {Free,Net,Open}BSD OS (tested only on FreeBSD-4.5).
 * Lunux OS (tested only on Red Hat Linux 7.2 with kernel 2.4.18)

However, even though IPv6 support is implemented, it has not been tested yet.

