/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/clnt-gen'.
 */

#ident "$XORP: xorp/xrl/interfaces/cli_manager_xif.cc,v 1.5 2003/02/06 22:21:24 hodson Exp $"

#include "cli_manager_xif.hh"

bool
XrlCliManagerV0p1Client::send_enable_cli(
	const char*	the_tgt, 
	const CB0&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/enable_cli");
    return _sender->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall0, cb));
}


/* Unmarshall enable_cli */
void
XrlCliManagerV0p1Client::unmarshall0(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB0		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlCliManagerV0p1Client::send_disable_cli(
	const char*	the_tgt, 
	const CB1&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/disable_cli");
    return _sender->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall1, cb));
}


/* Unmarshall disable_cli */
void
XrlCliManagerV0p1Client::unmarshall1(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB1		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlCliManagerV0p1Client::send_start_cli(
	const char*	the_tgt, 
	const CB2&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/start_cli");
    return _sender->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall2, cb));
}


/* Unmarshall start_cli */
void
XrlCliManagerV0p1Client::unmarshall2(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB2		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlCliManagerV0p1Client::send_stop_cli(
	const char*	the_tgt, 
	const CB3&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/stop_cli");
    return _sender->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall3, cb));
}


/* Unmarshall stop_cli */
void
XrlCliManagerV0p1Client::unmarshall3(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB3		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlCliManagerV0p1Client::send_add_enable_cli_access_from_subnet4(
	const char*	the_tgt, 
	const IPv4Net&	subnet_addr, 
	const CB4&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/add_enable_cli_access_from_subnet4");
    x.args().add("subnet_addr", subnet_addr);
    return _sender->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall4, cb));
}


/* Unmarshall add_enable_cli_access_from_subnet4 */
void
XrlCliManagerV0p1Client::unmarshall4(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB4		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlCliManagerV0p1Client::send_add_enable_cli_access_from_subnet6(
	const char*	the_tgt, 
	const IPv6Net&	subnet_addr, 
	const CB5&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/add_enable_cli_access_from_subnet6");
    x.args().add("subnet_addr", subnet_addr);
    return _sender->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall5, cb));
}


/* Unmarshall add_enable_cli_access_from_subnet6 */
void
XrlCliManagerV0p1Client::unmarshall5(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB5		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlCliManagerV0p1Client::send_delete_enable_cli_access_from_subnet4(
	const char*	the_tgt, 
	const IPv4Net&	subnet_addr, 
	const CB6&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/delete_enable_cli_access_from_subnet4");
    x.args().add("subnet_addr", subnet_addr);
    return _sender->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall6, cb));
}


/* Unmarshall delete_enable_cli_access_from_subnet4 */
void
XrlCliManagerV0p1Client::unmarshall6(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB6		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlCliManagerV0p1Client::send_delete_enable_cli_access_from_subnet6(
	const char*	the_tgt, 
	const IPv6Net&	subnet_addr, 
	const CB7&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/delete_enable_cli_access_from_subnet6");
    x.args().add("subnet_addr", subnet_addr);
    return _sender->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall7, cb));
}


/* Unmarshall delete_enable_cli_access_from_subnet6 */
void
XrlCliManagerV0p1Client::unmarshall7(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB7		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlCliManagerV0p1Client::send_add_disable_cli_access_from_subnet4(
	const char*	the_tgt, 
	const IPv4Net&	subnet_addr, 
	const CB8&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/add_disable_cli_access_from_subnet4");
    x.args().add("subnet_addr", subnet_addr);
    return _sender->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall8, cb));
}


/* Unmarshall add_disable_cli_access_from_subnet4 */
void
XrlCliManagerV0p1Client::unmarshall8(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB8		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlCliManagerV0p1Client::send_add_disable_cli_access_from_subnet6(
	const char*	the_tgt, 
	const IPv6Net&	subnet_addr, 
	const CB9&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/add_disable_cli_access_from_subnet6");
    x.args().add("subnet_addr", subnet_addr);
    return _sender->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall9, cb));
}


/* Unmarshall add_disable_cli_access_from_subnet6 */
void
XrlCliManagerV0p1Client::unmarshall9(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB9		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlCliManagerV0p1Client::send_delete_disable_cli_access_from_subnet4(
	const char*	the_tgt, 
	const IPv4Net&	subnet_addr, 
	const CB10&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/delete_disable_cli_access_from_subnet4");
    x.args().add("subnet_addr", subnet_addr);
    return _sender->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall10, cb));
}


/* Unmarshall delete_disable_cli_access_from_subnet4 */
void
XrlCliManagerV0p1Client::unmarshall10(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB10		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlCliManagerV0p1Client::send_delete_disable_cli_access_from_subnet6(
	const char*	the_tgt, 
	const IPv6Net&	subnet_addr, 
	const CB11&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/delete_disable_cli_access_from_subnet6");
    x.args().add("subnet_addr", subnet_addr);
    return _sender->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall11, cb));
}


/* Unmarshall delete_disable_cli_access_from_subnet6 */
void
XrlCliManagerV0p1Client::unmarshall11(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB11		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlCliManagerV0p1Client::send_add_cli_command(
	const char*	the_tgt, 
	const string&	processor_name, 
	const string&	command_name, 
	const string&	command_help, 
	const bool&	is_command_cd, 
	const string&	command_cd_prompt, 
	const bool&	is_command_processor, 
	const CB12&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/add_cli_command");
    x.args().add("processor_name", processor_name);
    x.args().add("command_name", command_name);
    x.args().add("command_help", command_help);
    x.args().add("is_command_cd", is_command_cd);
    x.args().add("command_cd_prompt", command_cd_prompt);
    x.args().add("is_command_processor", is_command_processor);
    return _sender->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall12, cb));
}


/* Unmarshall add_cli_command */
void
XrlCliManagerV0p1Client::unmarshall12(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB12		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlCliManagerV0p1Client::send_delete_cli_command(
	const char*	the_tgt, 
	const string&	processor_name, 
	const string&	command_name, 
	const CB13&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/delete_cli_command");
    x.args().add("processor_name", processor_name);
    x.args().add("command_name", command_name);
    return _sender->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall13, cb));
}


/* Unmarshall delete_cli_command */
void
XrlCliManagerV0p1Client::unmarshall13(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB13		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}
