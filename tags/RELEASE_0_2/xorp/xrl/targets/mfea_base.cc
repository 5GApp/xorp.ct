/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/tgt-gen'.
 */

#ident "$XORP: xorp/xrl/targets/mfea_base.cc,v 1.3 2003/02/08 09:18:28 pavlin Exp $"


#include "mfea_base.hh"

const XrlCmdError
XrlMfeaTargetBase::handle_common_0_1_get_target_name(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/get_target_name", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string name; 
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_target_name failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("name", name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_common_0_1_get_version(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/get_version", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string version; 
    try {
	XrlCmdError e = common_0_1_get_version(
	    version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_version failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("version", version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_cli_processor_0_1_process_command(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling cli_processor/0.1/process_command", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string ret_processor_name; 
    string ret_cli_term_name; 
    uint32_t ret_cli_session_id; 
    string ret_command_output; 
    try {
	XrlCmdError e = cli_processor_0_1_process_command(
	    xrl.const_args().get_string("processor_name"), 
	    xrl.const_args().get_string("cli_term_name"), 
	    xrl.const_args().get_uint32("cli_session_id"), 
	    xrl.const_args().get_string("command_name"), 
	    xrl.const_args().get_string("command_args"), 
	    ret_processor_name, 
	    ret_cli_term_name, 
	    ret_cli_session_id, 
	    ret_command_output);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_processor/0.1/process_command failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("ret_processor_name", ret_processor_name);
	args->add("ret_cli_term_name", ret_cli_term_name);
	args->add("ret_cli_session_id", ret_cli_session_id);
	args->add("ret_command_output", ret_command_output);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_add_protocol4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/add_protocol4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_add_protocol4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/add_protocol4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_add_protocol6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/add_protocol6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_add_protocol6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/add_protocol6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_protocol4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/delete_protocol4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_delete_protocol4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_protocol4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_protocol6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/delete_protocol6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_delete_protocol6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_protocol6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_start_protocol_vif4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mfea/0.1/start_protocol_vif4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_start_protocol_vif4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/start_protocol_vif4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_start_protocol_vif6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mfea/0.1/start_protocol_vif6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_start_protocol_vif6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/start_protocol_vif6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_stop_protocol_vif4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mfea/0.1/stop_protocol_vif4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_stop_protocol_vif4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/stop_protocol_vif4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_stop_protocol_vif6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mfea/0.1/stop_protocol_vif6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_stop_protocol_vif6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/stop_protocol_vif6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_allow_signal_messages(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling mfea/0.1/allow_signal_messages", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_allow_signal_messages(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_bool("is_allow"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/allow_signal_messages failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_allow_mrib_messages(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling mfea/0.1/allow_mrib_messages", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_allow_mrib_messages(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_bool("is_allow"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/allow_mrib_messages failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_join_multicast_group4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 6) { 
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling mfea/0.1/join_multicast_group4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_join_multicast_group4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv4("group_address"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/join_multicast_group4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_join_multicast_group6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 6) { 
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling mfea/0.1/join_multicast_group6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_join_multicast_group6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv6("group_address"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/join_multicast_group6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_leave_multicast_group4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 6) { 
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling mfea/0.1/leave_multicast_group4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_leave_multicast_group4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv4("group_address"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/leave_multicast_group4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_leave_multicast_group6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 6) { 
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling mfea/0.1/leave_multicast_group6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_leave_multicast_group6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv6("group_address"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/leave_multicast_group6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_add_mfc4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 8) { 
	XLOG_ERROR("Wrong number of arguments (%u != 8) handling mfea/0.1/add_mfc4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_add_mfc4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv4("source_address"), 
	    xrl.const_args().get_ipv4("group_address"), 
	    xrl.const_args().get_uint32("iif_vif_index"), 
	    xrl.const_args().get_binary("oiflist"), 
	    xrl.const_args().get_binary("oiflist_disable_wrongvif"), 
	    xrl.const_args().get_uint32("max_vifs_oiflist"), 
	    xrl.const_args().get_ipv4("rp_address"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/add_mfc4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_add_mfc6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 8) { 
	XLOG_ERROR("Wrong number of arguments (%u != 8) handling mfea/0.1/add_mfc6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_add_mfc6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv6("source_address"), 
	    xrl.const_args().get_ipv6("group_address"), 
	    xrl.const_args().get_uint32("iif_vif_index"), 
	    xrl.const_args().get_binary("oiflist"), 
	    xrl.const_args().get_binary("oiflist_disable_wrongvif"), 
	    xrl.const_args().get_uint32("max_vifs_oiflist"), 
	    xrl.const_args().get_ipv6("rp_address"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/add_mfc6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_mfc4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/delete_mfc4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_delete_mfc4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv4("source_address"), 
	    xrl.const_args().get_ipv4("group_address"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_mfc4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_mfc6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/delete_mfc6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_delete_mfc6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv6("source_address"), 
	    xrl.const_args().get_ipv6("group_address"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_mfc6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_send_protocol_message4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 11) { 
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea/0.1/send_protocol_message4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_send_protocol_message4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv4("source_address"), 
	    xrl.const_args().get_ipv4("dest_address"), 
	    xrl.const_args().get_int32("ip_ttl"), 
	    xrl.const_args().get_int32("ip_tos"), 
	    xrl.const_args().get_bool("is_router_alert"), 
	    xrl.const_args().get_binary("protocol_message"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/send_protocol_message4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_send_protocol_message6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 11) { 
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea/0.1/send_protocol_message6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_send_protocol_message6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv6("source_address"), 
	    xrl.const_args().get_ipv6("dest_address"), 
	    xrl.const_args().get_int32("ip_ttl"), 
	    xrl.const_args().get_int32("ip_tos"), 
	    xrl.const_args().get_bool("is_router_alert"), 
	    xrl.const_args().get_binary("protocol_message"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/send_protocol_message6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_add_dataflow_monitor4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 11) { 
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea/0.1/add_dataflow_monitor4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_add_dataflow_monitor4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv4("source_address"), 
	    xrl.const_args().get_ipv4("group_address"), 
	    xrl.const_args().get_uint32("threshold_interval_sec"), 
	    xrl.const_args().get_uint32("threshold_interval_usec"), 
	    xrl.const_args().get_uint32("threshold_packets"), 
	    xrl.const_args().get_uint32("threshold_bytes"), 
	    xrl.const_args().get_bool("is_threshold_in_packets"), 
	    xrl.const_args().get_bool("is_threshold_in_bytes"), 
	    xrl.const_args().get_bool("is_geq_upcall"), 
	    xrl.const_args().get_bool("is_leq_upcall"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/add_dataflow_monitor4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_add_dataflow_monitor6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 11) { 
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea/0.1/add_dataflow_monitor6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_add_dataflow_monitor6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv6("source_address"), 
	    xrl.const_args().get_ipv6("group_address"), 
	    xrl.const_args().get_uint32("threshold_interval_sec"), 
	    xrl.const_args().get_uint32("threshold_interval_usec"), 
	    xrl.const_args().get_uint32("threshold_packets"), 
	    xrl.const_args().get_uint32("threshold_bytes"), 
	    xrl.const_args().get_bool("is_threshold_in_packets"), 
	    xrl.const_args().get_bool("is_threshold_in_bytes"), 
	    xrl.const_args().get_bool("is_geq_upcall"), 
	    xrl.const_args().get_bool("is_leq_upcall"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/add_dataflow_monitor6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_dataflow_monitor4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 11) { 
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea/0.1/delete_dataflow_monitor4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_delete_dataflow_monitor4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv4("source_address"), 
	    xrl.const_args().get_ipv4("group_address"), 
	    xrl.const_args().get_uint32("threshold_interval_sec"), 
	    xrl.const_args().get_uint32("threshold_interval_usec"), 
	    xrl.const_args().get_uint32("threshold_packets"), 
	    xrl.const_args().get_uint32("threshold_bytes"), 
	    xrl.const_args().get_bool("is_threshold_in_packets"), 
	    xrl.const_args().get_bool("is_threshold_in_bytes"), 
	    xrl.const_args().get_bool("is_geq_upcall"), 
	    xrl.const_args().get_bool("is_leq_upcall"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_dataflow_monitor4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_dataflow_monitor6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 11) { 
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea/0.1/delete_dataflow_monitor6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_delete_dataflow_monitor6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv6("source_address"), 
	    xrl.const_args().get_ipv6("group_address"), 
	    xrl.const_args().get_uint32("threshold_interval_sec"), 
	    xrl.const_args().get_uint32("threshold_interval_usec"), 
	    xrl.const_args().get_uint32("threshold_packets"), 
	    xrl.const_args().get_uint32("threshold_bytes"), 
	    xrl.const_args().get_bool("is_threshold_in_packets"), 
	    xrl.const_args().get_bool("is_threshold_in_bytes"), 
	    xrl.const_args().get_bool("is_geq_upcall"), 
	    xrl.const_args().get_bool("is_leq_upcall"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_dataflow_monitor6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_all_dataflow_monitor4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/delete_all_dataflow_monitor4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_delete_all_dataflow_monitor4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv4("source_address"), 
	    xrl.const_args().get_ipv4("group_address"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_all_dataflow_monitor4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_all_dataflow_monitor6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/delete_all_dataflow_monitor6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_delete_all_dataflow_monitor6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv6("source_address"), 
	    xrl.const_args().get_ipv6("group_address"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_all_dataflow_monitor6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_enable_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mfea/0.1/enable_vif", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_enable_vif(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/enable_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_disable_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mfea/0.1/disable_vif", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_disable_vif(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/disable_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_start_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mfea/0.1/start_vif", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_start_vif(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/start_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_stop_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mfea/0.1/stop_vif", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_stop_vif(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/stop_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_enable_all_vifs(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/enable_all_vifs", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_enable_all_vifs(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/enable_all_vifs failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_disable_all_vifs(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/disable_all_vifs", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_disable_all_vifs(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/disable_all_vifs failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_start_all_vifs(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/start_all_vifs", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_start_all_vifs(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/start_all_vifs failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_stop_all_vifs(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/stop_all_vifs", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_stop_all_vifs(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/stop_all_vifs failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_enable_mfea(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/enable_mfea", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_enable_mfea(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/enable_mfea failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_disable_mfea(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/disable_mfea", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_disable_mfea(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/disable_mfea failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_enable_cli(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/enable_cli", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_enable_cli(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/enable_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_disable_cli(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/disable_cli", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_disable_cli(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/disable_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_start_mfea(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/start_mfea", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_start_mfea(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/start_mfea failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_stop_mfea(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/stop_mfea", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_stop_mfea(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/stop_mfea failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_start_cli(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/start_cli", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_start_cli(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/start_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_stop_cli(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/stop_cli", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_stop_cli(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/stop_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_enable_log_trace(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/enable_log_trace", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_enable_log_trace(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/enable_log_trace failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_disable_log_trace(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/disable_log_trace", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_disable_log_trace(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/disable_log_trace failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_get_mrib_table_default_metric_preference(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/get_mrib_table_default_metric_preference", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t metric_preference; 
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_get_mrib_table_default_metric_preference(
	    metric_preference, 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/get_mrib_table_default_metric_preference failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("metric_preference", metric_preference);
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_set_mrib_table_default_metric_preference(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mfea/0.1/set_mrib_table_default_metric_preference", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_set_mrib_table_default_metric_preference(
	    xrl.const_args().get_uint32("metric_preference"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/set_mrib_table_default_metric_preference failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_reset_mrib_table_default_metric_preference(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/reset_mrib_table_default_metric_preference", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_reset_mrib_table_default_metric_preference(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/reset_mrib_table_default_metric_preference failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_get_mrib_table_default_metric(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/get_mrib_table_default_metric", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t metric; 
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_get_mrib_table_default_metric(
	    metric, 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/get_mrib_table_default_metric failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("metric", metric);
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_set_mrib_table_default_metric(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mfea/0.1/set_mrib_table_default_metric", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_set_mrib_table_default_metric(
	    xrl.const_args().get_uint32("metric"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/set_mrib_table_default_metric failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_reset_mrib_table_default_metric(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/reset_mrib_table_default_metric", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_0_1_reset_mrib_table_default_metric(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/reset_mrib_table_default_metric failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

