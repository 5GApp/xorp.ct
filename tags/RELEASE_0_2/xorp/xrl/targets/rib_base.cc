/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/tgt-gen'.
 */

#ident "$XORP: xorp/xrl/targets/rib_base.cc,v 1.3 2003/03/10 20:26:49 mjh Exp $"


#include "rib_base.hh"

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_no_fea(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling rib/0.1/no_fea", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_no_fea();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/no_fea failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_add_igp_table4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling rib/0.1/add_igp_table4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_igp_table4(
	    xrl.const_args().get_string("protocol"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/add_igp_table4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_add_igp_table6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling rib/0.1/add_igp_table6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_igp_table6(
	    xrl.const_args().get_string("protocol"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/add_igp_table6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_delete_igp_table4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling rib/0.1/delete_igp_table4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_delete_igp_table4(
	    xrl.const_args().get_string("protocol"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/delete_igp_table4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_delete_igp_table6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling rib/0.1/delete_igp_table6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_delete_igp_table6(
	    xrl.const_args().get_string("protocol"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/delete_igp_table6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_add_egp_table4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling rib/0.1/add_egp_table4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_egp_table4(
	    xrl.const_args().get_string("protocol"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/add_egp_table4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_add_egp_table6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling rib/0.1/add_egp_table6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_egp_table6(
	    xrl.const_args().get_string("protocol"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/add_egp_table6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_delete_egp_table4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling rib/0.1/delete_egp_table4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_delete_egp_table4(
	    xrl.const_args().get_string("protocol"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/delete_egp_table4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_delete_egp_table6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling rib/0.1/delete_egp_table6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_delete_egp_table6(
	    xrl.const_args().get_string("protocol"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/delete_egp_table6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_add_route4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 6) { 
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling rib/0.1/add_route4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_route4(
	    xrl.const_args().get_string("protocol"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"), 
	    xrl.const_args().get_ipv4net("network"), 
	    xrl.const_args().get_ipv4("nexthop"), 
	    xrl.const_args().get_uint32("metric"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/add_route4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_add_route6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 6) { 
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling rib/0.1/add_route6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_route6(
	    xrl.const_args().get_string("protocol"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"), 
	    xrl.const_args().get_ipv6net("network"), 
	    xrl.const_args().get_ipv6("nexthop"), 
	    xrl.const_args().get_uint32("metric"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/add_route6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_replace_route4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 6) { 
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling rib/0.1/replace_route4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_replace_route4(
	    xrl.const_args().get_string("protocol"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"), 
	    xrl.const_args().get_ipv4net("network"), 
	    xrl.const_args().get_ipv4("nexthop"), 
	    xrl.const_args().get_uint32("metric"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/replace_route4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_replace_route6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 6) { 
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling rib/0.1/replace_route6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_replace_route6(
	    xrl.const_args().get_string("protocol"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"), 
	    xrl.const_args().get_ipv6net("network"), 
	    xrl.const_args().get_ipv6("nexthop"), 
	    xrl.const_args().get_uint32("metric"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/replace_route6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_delete_route4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling rib/0.1/delete_route4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_delete_route4(
	    xrl.const_args().get_string("protocol"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"), 
	    xrl.const_args().get_ipv4net("network"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/delete_route4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_delete_route6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling rib/0.1/delete_route6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_delete_route6(
	    xrl.const_args().get_string("protocol"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"), 
	    xrl.const_args().get_ipv6net("network"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/delete_route6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_lookup_route4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling rib/0.1/lookup_route4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    IPv4 nexthop; 
    try {
	XrlCmdError e = rib_0_1_lookup_route4(
	    xrl.const_args().get_ipv4("addr"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"), 
	    nexthop);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/lookup_route4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("nexthop", nexthop);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_lookup_route6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling rib/0.1/lookup_route6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    IPv6 nexthop; 
    try {
	XrlCmdError e = rib_0_1_lookup_route6(
	    xrl.const_args().get_ipv6("addr"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"), 
	    nexthop);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/lookup_route6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("nexthop", nexthop);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_new_vif(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling rib/0.1/new_vif", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_new_vif(
	    xrl.const_args().get_string("name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/new_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_add_vif_addr4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling rib/0.1/add_vif_addr4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_vif_addr4(
	    xrl.const_args().get_string("name"), 
	    xrl.const_args().get_ipv4("addr"), 
	    xrl.const_args().get_ipv4net("subnet"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/add_vif_addr4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_add_vif_addr6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling rib/0.1/add_vif_addr6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_add_vif_addr6(
	    xrl.const_args().get_string("name"), 
	    xrl.const_args().get_ipv6("addr"), 
	    xrl.const_args().get_ipv6net("subnet"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/add_vif_addr6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_redist_enable4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling rib/0.1/redist_enable4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_redist_enable4(
	    xrl.const_args().get_string("from"), 
	    xrl.const_args().get_string("to"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/redist_enable4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_redist_enable6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling rib/0.1/redist_enable6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_redist_enable6(
	    xrl.const_args().get_string("from"), 
	    xrl.const_args().get_string("to"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/redist_enable6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_redist_disable4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling rib/0.1/redist_disable4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_redist_disable4(
	    xrl.const_args().get_string("from"), 
	    xrl.const_args().get_string("to"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/redist_disable4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_redist_disable6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling rib/0.1/redist_disable6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_redist_disable6(
	    xrl.const_args().get_string("from"), 
	    xrl.const_args().get_string("to"), 
	    xrl.const_args().get_bool("unicast"), 
	    xrl.const_args().get_bool("multicast"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/redist_disable6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_register_interest4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling rib/0.1/register_interest4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool resolves; 
    IPv4 base_addr; 
    uint32_t prefix; 
    uint32_t realprefix; 
    IPv4 nexthop; 
    uint32_t metric; 
    try {
	XrlCmdError e = rib_0_1_register_interest4(
	    xrl.const_args().get_string("target"), 
	    xrl.const_args().get_ipv4("addr"), 
	    resolves, 
	    base_addr, 
	    prefix, 
	    realprefix, 
	    nexthop, 
	    metric);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/register_interest4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("resolves", resolves);
	args->add("base_addr", base_addr);
	args->add("prefix", prefix);
	args->add("realprefix", realprefix);
	args->add("nexthop", nexthop);
	args->add("metric", metric);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_deregister_interest4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling rib/0.1/deregister_interest4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_deregister_interest4(
	    xrl.const_args().get_string("target"), 
	    xrl.const_args().get_ipv4("addr"), 
	    xrl.const_args().get_uint32("prefix"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/deregister_interest4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_register_interest6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling rib/0.1/register_interest6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool resolves; 
    IPv6 base_addr; 
    uint32_t prefix; 
    uint32_t realprefix; 
    IPv6 nexthop; 
    uint32_t metric; 
    try {
	XrlCmdError e = rib_0_1_register_interest6(
	    xrl.const_args().get_string("target"), 
	    xrl.const_args().get_ipv6("addr"), 
	    resolves, 
	    base_addr, 
	    prefix, 
	    realprefix, 
	    nexthop, 
	    metric);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/register_interest6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("resolves", resolves);
	args->add("base_addr", base_addr);
	args->add("prefix", prefix);
	args->add("realprefix", realprefix);
	args->add("nexthop", nexthop);
	args->add("metric", metric);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_rib_0_1_deregister_interest6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling rib/0.1/deregister_interest6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = rib_0_1_deregister_interest6(
	    xrl.const_args().get_string("target"), 
	    xrl.const_args().get_ipv6("addr"), 
	    xrl.const_args().get_uint32("prefix"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for rib/0.1/deregister_interest6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_fea_ifmgr_client_0_1_interface_update(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling fea_ifmgr_client/0.1/interface_update", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_client_0_1_interface_update(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_uint32("event"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fea_ifmgr_client/0.1/interface_update failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_fea_ifmgr_client_0_1_vif_update(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling fea_ifmgr_client/0.1/vif_update", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_client_0_1_vif_update(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vifname"), 
	    xrl.const_args().get_uint32("event"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fea_ifmgr_client/0.1/vif_update failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_fea_ifmgr_client_0_1_vifaddr4_update(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling fea_ifmgr_client/0.1/vifaddr4_update", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_client_0_1_vifaddr4_update(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vifname"), 
	    xrl.const_args().get_ipv4("addr"), 
	    xrl.const_args().get_uint32("event"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fea_ifmgr_client/0.1/vifaddr4_update failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_fea_ifmgr_client_0_1_vifaddr6_update(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling fea_ifmgr_client/0.1/vifaddr6_update", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_client_0_1_vifaddr6_update(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vifname"), 
	    xrl.const_args().get_ipv6("addr"), 
	    xrl.const_args().get_uint32("event"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fea_ifmgr_client/0.1/vifaddr6_update failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_common_0_1_get_target_name(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/get_target_name", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string name; 
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_target_name failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("name", name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlRibTargetBase::handle_common_0_1_get_version(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/get_version", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string version; 
    try {
	XrlCmdError e = common_0_1_get_version(
	    version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_version failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("version", version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

