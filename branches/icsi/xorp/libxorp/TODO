#
# $XORP: xorp/libxorp/TODO,v 1.24 2002/12/09 11:43:48 pavlin Exp $
#

* ether_compat.c is not linked against the library. Remove it
  along with ether_compat.h??
  If not, add to it the XORP copyright header (if that file was
  written by us).

* Change Vif::vif_index() type from uint16_t to size_t ??

* Merge test_ipnet with test_ipv{4,6,x}net (or remove it if
  the new test programs cover all tests in test_ipnet).

* Remove/disable IPvX::copy_out(struct sockaddr_in&) for IPv6 addresses.
  Similarly, remove/disable IPvX::copy_out(struct sockaddr_in6&) for IPv4
  addresses. Do the same thing for the corresponding copy_in(). (OK???)

* Rename ConfigParam::_initial_value and get_initial_value() to
  default_value

* Rename Trie to SomethingMoreAppropriate(TM) and rename Trie::route()
  to SomethingMoreAppropriate::payload()

* Rename Transaction to SomethingBatchLike(TM)

* Rename IPvX *Vif::addr_ptr() to IPvX& Vif::vif_addr() instead?

* Do we want to have Vif::operator string()?
  E.g., should it be a policy that all XRL atoms should have string()
  operator?

* Change things around such that ProtoNode::vif_find...() functions
  won't require static_cast<> to use them at the protocol level.

* Change ProtoUnit::ProtoUnit() constructor such that the default is to disable
  a Proto entry when created.

* Add IPvXNet::is_multicast(), is_unicast(), etc.

* All constants such as IP address size, should be static class constants.

* Implement the equivalent of ipvx_smallest() and ipvx_largest()

* Re-implement family2multicast_prefix_base()

* Add IPvX(const char *addrstr) that should check first whether the
  string is the IPv4 dotdecimal format, or the IPv6 format.

* Need to create a front-end for C programs (e.g. family2addr_size())

* Some of the IPvX function probably should not be inline.
  E.g., IPvX::addr_size(family)

* Need to do something about multiple EventLoop instances (breaks xorp
  ipc).  Some alternatives:
	- we have an event loop instance count that stops multiple
          instances.
	- EventLoop::run() becomes a static member that runs all the 
	  event loops.
	- change the way ipc learns about the event loop.



