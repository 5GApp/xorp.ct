/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/clnt-gen'.
 *
 * $XORP: xorp/xrl/interfaces/finder_xif.hh,v 1.4 2002/11/19 19:31:44 hodson Exp $
 */


#ifndef __XRL_INTERFACES_FINDER_XIF_HH__
#define __XRL_INTERFACES_FINDER_XIF_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XifFinder"
#include "libxorp/xlog.h"
#include "libxipc/xrlrouter.hh"

class XrlFinderV0p1Client {
public:
    XrlFinderV0p1Client(XrlRouter* r) : _router(r) {}
    virtual ~XrlFinderV0p1Client() {}

    typedef XorpCallback2<void, const XrlError&, const string*>::RefPtr CB0;
    /**
     *  Send Xrl intended to:
     *  
     *  Fails if target_name is already registered. The target_name must
     *  support the finder_client interface in order to be able to process
     *  messages from the finder.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_register_xrl_target(
	const char*	target_name, 
	const string&	target_name, 
	const string&	callback_pf, 
	const string&	callback_pf_addr, 
	const CB0&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB1;

    bool send_unregister_xrl_target(
	const char*	target_name, 
	const string&	target_cookie, 
	const CB1&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const string*>::RefPtr CB2;
    /**
     *  Send Xrl intended to:
     *  
     *  Add resolved Xrl into system, fails if xrl is already registered.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_add_xrl(
	const char*	target_name, 
	const string&	target_cookie, 
	const string&	xrl, 
	const string&	protocol_name, 
	const string&	protocol_args, 
	const CB2&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB3;
    /**
     *  Send Xrl intended to:
     *  
     *  Remove xrl
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_remove_xrl(
	const char*	target_name, 
	const string&	target_cookie, 
	const string&	xrl, 
	const CB3&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const string*>::RefPtr CB4;
    /**
     *  Send Xrl intended to:
     *  
     *  Forcibly add xrl. The Xrl will remain in the cache indefinitely and is
     *  only removable with forcibly_remove_xrl
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_add_xrl_override(
	const char*	target_name, 
	const string&	target_cookie, 
	const string&	xrl, 
	const string&	protocol_name, 
	const string&	protocol_args, 
	const CB4&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB5;
    /**
     *  Send Xrl intended to:
     *  
     *  Forcibly remove_xrl
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_remove_xrl_override(
	const char*	target_name, 
	const string&	target_cookie, 
	const string&	xrl, 
	const CB5&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const string*>::RefPtr CB6;
    /**
     *  Send Xrl intended to:
     *  
     *  Resolve xrl
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_resolve_xrl(
	const char*	target_name, 
	const string&	target_cookie, 
	const string&	xrl, 
	const CB6&	cb
    );

    typedef XorpCallback4<void, const XrlError&, const string*, const string*, const string*>::RefPtr CB7;
    /**
     *  Send Xrl intended to:
     *  
     *  Get information on Xrl
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_get_xrl_info(
	const char*	target_name, 
	const string&	target_cookie, 
	const string&	xrl, 
	const CB7&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const XrlAtomList*>::RefPtr CB8;
    /**
     *  Send Xrl intended to:
     *  
     *  Get list of registered Xrl targets
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_get_xrl_targets(
	const char*	target_name, 
	const CB8&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const XrlAtomList*>::RefPtr CB9;
    /**
     *  Send Xrl intended to:
     *  
     *  Get list of Xrls registered by target
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_get_xrls_registered_by(
	const char*	target_name, 
	const string&	target_name, 
	const CB9&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const XrlAtomList*>::RefPtr CB10;
    /**
     *  Send Xrl intended to:
     *  
     *  Get list of all Xrls registered with finder
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_get_all_xrls(
	const char*	target_name, 
	const CB10&	cb
    );

protected:
    XrlRouter* _router;

private:
    void unmarshall0(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB0		cb
    );

    void unmarshall1(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB1		cb
    );

    void unmarshall2(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB2		cb
    );

    void unmarshall3(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB3		cb
    );

    void unmarshall4(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB4		cb
    );

    void unmarshall5(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB5		cb
    );

    void unmarshall6(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB6		cb
    );

    void unmarshall7(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB7		cb
    );

    void unmarshall8(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB8		cb
    );

    void unmarshall9(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB9		cb
    );

    void unmarshall10(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB10		cb
    );

};

#endif /* __XRL_INTERFACES_FINDER_XIF_HH__ */
