/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/clnt-gen'.
 */

#ident "$XORP: xorp/xrl/interfaces/bgp_xif.cc,v 1.8 2002/12/04 23:13:09 atanu Exp $"

#include "bgp_xif.hh"

bool
XrlBgpV0p2Client::send_local_config(
	const char*	the_tgt, 
	const uint32_t&	as, 
	const IPv4&	id, 
	const CB0&	cb
)
{
    Xrl x(the_tgt, "bgp/0.2/local_config");
    x.args().add("as", as);
    x.args().add("id", id);
    return _router->send(x, callback(this, &XrlBgpV0p2Client::unmarshall0, cb));
}


/* Unmarshall local_config */
void
XrlBgpV0p2Client::unmarshall0(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB0		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlBgpV0p2Client::send_set_local_as(
	const char*	the_tgt, 
	const uint32_t&	as, 
	const CB1&	cb
)
{
    Xrl x(the_tgt, "bgp/0.2/set_local_as");
    x.args().add("as", as);
    return _router->send(x, callback(this, &XrlBgpV0p2Client::unmarshall1, cb));
}


/* Unmarshall set_local_as */
void
XrlBgpV0p2Client::unmarshall1(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB1		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlBgpV0p2Client::send_set_bgpid(
	const char*	the_tgt, 
	const IPv4&	id, 
	const CB2&	cb
)
{
    Xrl x(the_tgt, "bgp/0.2/set_bgpid");
    x.args().add("id", id);
    return _router->send(x, callback(this, &XrlBgpV0p2Client::unmarshall2, cb));
}


/* Unmarshall set_bgpid */
void
XrlBgpV0p2Client::unmarshall2(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB2		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlBgpV0p2Client::send_add_peer(
	const char*	the_tgt, 
	const string&	local_ip, 
	const uint32_t&	local_port, 
	const string&	peer_ip, 
	const uint32_t&	peer_port, 
	const uint32_t&	as, 
	const IPv4&	next_hop, 
	const uint32_t&	holdtime, 
	const CB3&	cb
)
{
    Xrl x(the_tgt, "bgp/0.2/add_peer");
    x.args().add("local_ip", local_ip);
    x.args().add("local_port", local_port);
    x.args().add("peer_ip", peer_ip);
    x.args().add("peer_port", peer_port);
    x.args().add("as", as);
    x.args().add("next_hop", next_hop);
    x.args().add("holdtime", holdtime);
    return _router->send(x, callback(this, &XrlBgpV0p2Client::unmarshall3, cb));
}


/* Unmarshall add_peer */
void
XrlBgpV0p2Client::unmarshall3(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB3		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlBgpV0p2Client::send_delete_peer(
	const char*	the_tgt, 
	const string&	local_ip, 
	const uint32_t&	local_port, 
	const string&	peer_ip, 
	const uint32_t&	peer_port, 
	const uint32_t&	as, 
	const CB4&	cb
)
{
    Xrl x(the_tgt, "bgp/0.2/delete_peer");
    x.args().add("local_ip", local_ip);
    x.args().add("local_port", local_port);
    x.args().add("peer_ip", peer_ip);
    x.args().add("peer_port", peer_port);
    x.args().add("as", as);
    return _router->send(x, callback(this, &XrlBgpV0p2Client::unmarshall4, cb));
}


/* Unmarshall delete_peer */
void
XrlBgpV0p2Client::unmarshall4(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB4		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlBgpV0p2Client::send_enable_peer(
	const char*	the_tgt, 
	const string&	local_ip, 
	const uint32_t&	local_port, 
	const string&	peer_ip, 
	const uint32_t&	peer_port, 
	const CB5&	cb
)
{
    Xrl x(the_tgt, "bgp/0.2/enable_peer");
    x.args().add("local_ip", local_ip);
    x.args().add("local_port", local_port);
    x.args().add("peer_ip", peer_ip);
    x.args().add("peer_port", peer_port);
    return _router->send(x, callback(this, &XrlBgpV0p2Client::unmarshall5, cb));
}


/* Unmarshall enable_peer */
void
XrlBgpV0p2Client::unmarshall5(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB5		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlBgpV0p2Client::send_disable_peer(
	const char*	the_tgt, 
	const string&	local_ip, 
	const uint32_t&	local_port, 
	const string&	peer_ip, 
	const uint32_t&	peer_port, 
	const CB6&	cb
)
{
    Xrl x(the_tgt, "bgp/0.2/disable_peer");
    x.args().add("local_ip", local_ip);
    x.args().add("local_port", local_port);
    x.args().add("peer_ip", peer_ip);
    x.args().add("peer_port", peer_port);
    return _router->send(x, callback(this, &XrlBgpV0p2Client::unmarshall6, cb));
}


/* Unmarshall disable_peer */
void
XrlBgpV0p2Client::unmarshall6(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB6		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlBgpV0p2Client::send_set_peer_state(
	const char*	the_tgt, 
	const string&	local_ip, 
	const uint32_t&	local_port, 
	const string&	peer_ip, 
	const uint32_t&	peer_port, 
	const bool&	toggle, 
	const CB7&	cb
)
{
    Xrl x(the_tgt, "bgp/0.2/set_peer_state");
    x.args().add("local_ip", local_ip);
    x.args().add("local_port", local_port);
    x.args().add("peer_ip", peer_ip);
    x.args().add("peer_port", peer_port);
    x.args().add("toggle", toggle);
    return _router->send(x, callback(this, &XrlBgpV0p2Client::unmarshall7, cb));
}


/* Unmarshall set_peer_state */
void
XrlBgpV0p2Client::unmarshall7(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB7		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlBgpV0p2Client::send_register_rib(
	const char*	the_tgt, 
	const string&	name, 
	const CB8&	cb
)
{
    Xrl x(the_tgt, "bgp/0.2/register_rib");
    x.args().add("name", name);
    return _router->send(x, callback(this, &XrlBgpV0p2Client::unmarshall8, cb));
}


/* Unmarshall register_rib */
void
XrlBgpV0p2Client::unmarshall8(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB8		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlBgpV0p2Client::send_add_route(
	const char*	the_tgt, 
	const int32_t&	origin, 
	const int32_t&	asnum, 
	const IPv4&	next_hop, 
	const IPv4Net&	nlri, 
	const CB9&	cb
)
{
    Xrl x(the_tgt, "bgp/0.2/add_route");
    x.args().add("origin", origin);
    x.args().add("asnum", asnum);
    x.args().add("next_hop", next_hop);
    x.args().add("nlri", nlri);
    return _router->send(x, callback(this, &XrlBgpV0p2Client::unmarshall9, cb));
}


/* Unmarshall add_route */
void
XrlBgpV0p2Client::unmarshall9(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB9		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlBgpV0p2Client::send_delete_route(
	const char*	the_tgt, 
	const IPv4Net&	nlri, 
	const CB10&	cb
)
{
    Xrl x(the_tgt, "bgp/0.2/delete_route");
    x.args().add("nlri", nlri);
    return _router->send(x, callback(this, &XrlBgpV0p2Client::unmarshall10, cb));
}


/* Unmarshall delete_route */
void
XrlBgpV0p2Client::unmarshall10(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB10		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlBgpV0p2Client::send_terminate(
	const char*	the_tgt, 
	const CB11&	cb
)
{
    Xrl x(the_tgt, "bgp/0.2/terminate");
    return _router->send(x, callback(this, &XrlBgpV0p2Client::unmarshall11, cb));
}


/* Unmarshall terminate */
void
XrlBgpV0p2Client::unmarshall11(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB11		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlBgpV0p2Client::send_set_parameter(
	const char*	the_tgt, 
	const string&	local_ip, 
	const uint32_t&	local_port, 
	const string&	peer_ip, 
	const uint32_t&	peer_port, 
	const string&	parameter, 
	const CB12&	cb
)
{
    Xrl x(the_tgt, "bgp/0.2/set_parameter");
    x.args().add("local_ip", local_ip);
    x.args().add("local_port", local_port);
    x.args().add("peer_ip", peer_ip);
    x.args().add("peer_port", peer_port);
    x.args().add("parameter", parameter);
    return _router->send(x, callback(this, &XrlBgpV0p2Client::unmarshall12, cb));
}


/* Unmarshall set_parameter */
void
XrlBgpV0p2Client::unmarshall12(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB12		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}
