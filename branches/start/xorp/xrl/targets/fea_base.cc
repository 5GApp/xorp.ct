/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/tgt-gen'.
 */

#ident "$XORP: xorp/xrl/targets/fea_base.cc,v 1.23 2002/11/15 00:09:09 hodson Exp $"


#include "fea_base.hh"

const XrlCmdError
XrlFeaTargetBase::handle_common_0_1_get_target_name(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling common/0.1/get_target_name", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string name; 
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_target_name failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("name", name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_common_0_1_get_version(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling common/0.1/get_version", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string version; 
    try {
	XrlCmdError e = common_0_1_get_version(
	    version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_version failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("version", version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_all_interface_names(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling ifmgr/0.1/get_all_interface_names", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    XrlAtomList ifnames; 
    try {
	XrlCmdError e = ifmgr_0_1_get_all_interface_names(
	    ifnames);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_all_interface_names failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("ifnames", ifnames);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_configured_interface_names(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling ifmgr/0.1/get_configured_interface_names", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    XrlAtomList ifnames; 
    try {
	XrlCmdError e = ifmgr_0_1_get_configured_interface_names(
	    ifnames);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_configured_interface_names failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("ifnames", ifnames);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_all_vif_names(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling ifmgr/0.1/get_all_vif_names", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    XrlAtomList vifs; 
    try {
	XrlCmdError e = ifmgr_0_1_get_all_vif_names(
	    xrl.const_args().get_string("ifname"), 
	    vifs);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_all_vif_names failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("vifs", vifs);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_configured_vif_names(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling ifmgr/0.1/get_configured_vif_names", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    XrlAtomList vifs; 
    try {
	XrlCmdError e = ifmgr_0_1_get_configured_vif_names(
	    xrl.const_args().get_string("ifname"), 
	    vifs);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_configured_vif_names failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("vifs", vifs);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_vif_flags4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling ifmgr/0.1/get_vif_flags4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool enabled; 
    bool broadcast; 
    bool loopback; 
    bool point_to_point; 
    bool multicast; 
    try {
	XrlCmdError e = ifmgr_0_1_get_vif_flags4(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv4("address"), 
	    enabled, 
	    broadcast, 
	    loopback, 
	    point_to_point, 
	    multicast);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_vif_flags4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("enabled", enabled);
	args->add("broadcast", broadcast);
	args->add("loopback", loopback);
	args->add("point_to_point", point_to_point);
	args->add("multicast", multicast);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_vif_flags6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling ifmgr/0.1/get_vif_flags6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool enabled; 
    bool loopback; 
    bool point_to_point; 
    bool multicast; 
    try {
	XrlCmdError e = ifmgr_0_1_get_vif_flags6(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv6("address"), 
	    enabled, 
	    loopback, 
	    point_to_point, 
	    multicast);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_vif_flags6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("enabled", enabled);
	args->add("loopback", loopback);
	args->add("point_to_point", point_to_point);
	args->add("multicast", multicast);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_all_vif_addresses4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling ifmgr/0.1/get_all_vif_addresses4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    XrlAtomList addresses; 
    try {
	XrlCmdError e = ifmgr_0_1_get_all_vif_addresses4(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    addresses);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_all_vif_addresses4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("addresses", addresses);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_configured_vif_addresses4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling ifmgr/0.1/get_configured_vif_addresses4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    XrlAtomList addresses; 
    try {
	XrlCmdError e = ifmgr_0_1_get_configured_vif_addresses4(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    addresses);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_configured_vif_addresses4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("addresses", addresses);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_all_vif_addresses6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling ifmgr/0.1/get_all_vif_addresses6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    XrlAtomList addresses; 
    try {
	XrlCmdError e = ifmgr_0_1_get_all_vif_addresses6(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    addresses);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_all_vif_addresses6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("addresses", addresses);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_configured_vif_addresses6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling ifmgr/0.1/get_configured_vif_addresses6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    XrlAtomList addresses; 
    try {
	XrlCmdError e = ifmgr_0_1_get_configured_vif_addresses6(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    addresses);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_configured_vif_addresses6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("addresses", addresses);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_interface_enabled(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling ifmgr/0.1/get_interface_enabled", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool enabled; 
    try {
	XrlCmdError e = ifmgr_0_1_get_interface_enabled(
	    xrl.const_args().get_string("ifname"), 
	    enabled);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_interface_enabled failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("enabled", enabled);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_mac(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling ifmgr/0.1/get_mac", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    Mac mac; 
    try {
	XrlCmdError e = ifmgr_0_1_get_mac(
	    xrl.const_args().get_string("ifname"), 
	    mac);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_mac failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("mac", mac);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_mtu(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling ifmgr/0.1/get_mtu", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t mtu; 
    try {
	XrlCmdError e = ifmgr_0_1_get_mtu(
	    xrl.const_args().get_string("ifname"), 
	    mtu);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_mtu failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("mtu", mtu);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_vif_enabled(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling ifmgr/0.1/get_vif_enabled", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool enabled; 
    try {
	XrlCmdError e = ifmgr_0_1_get_vif_enabled(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    enabled);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_vif_enabled failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("enabled", enabled);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_prefix4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling ifmgr/0.1/get_prefix4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t prefix; 
    try {
	XrlCmdError e = ifmgr_0_1_get_prefix4(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv4("address"), 
	    prefix);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_prefix4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("prefix", prefix);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_broadcast4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling ifmgr/0.1/get_broadcast4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    IPv4 broadcast; 
    try {
	XrlCmdError e = ifmgr_0_1_get_broadcast4(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv4("address"), 
	    broadcast);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_broadcast4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("broadcast", broadcast);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_endpoint4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling ifmgr/0.1/get_endpoint4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    IPv4 endpoint; 
    try {
	XrlCmdError e = ifmgr_0_1_get_endpoint4(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv4("address"), 
	    endpoint);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_endpoint4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("endpoint", endpoint);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_prefix6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling ifmgr/0.1/get_prefix6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t prefix; 
    try {
	XrlCmdError e = ifmgr_0_1_get_prefix6(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv6("address"), 
	    prefix);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_prefix6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("prefix", prefix);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_get_endpoint6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling ifmgr/0.1/get_endpoint6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    IPv6 endpoint; 
    try {
	XrlCmdError e = ifmgr_0_1_get_endpoint6(
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv6("address"), 
	    endpoint);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/get_endpoint6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("endpoint", endpoint);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_start_transaction(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling ifmgr/0.1/start_transaction", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t tid; 
    try {
	XrlCmdError e = ifmgr_0_1_start_transaction(
	    tid);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/start_transaction failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("tid", tid);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_commit_transaction(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling ifmgr/0.1/commit_transaction", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_commit_transaction(
	    xrl.const_args().get_uint32("tid"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/commit_transaction failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_abort_transaction(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling ifmgr/0.1/abort_transaction", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_abort_transaction(
	    xrl.const_args().get_uint32("tid"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/abort_transaction failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_create_interface(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling ifmgr/0.1/create_interface", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_create_interface(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/create_interface failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_delete_interface(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling ifmgr/0.1/delete_interface", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_delete_interface(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/delete_interface failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_set_interface_enabled(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling ifmgr/0.1/set_interface_enabled", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_set_interface_enabled(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_bool("enabled"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/set_interface_enabled failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_set_mac(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling ifmgr/0.1/set_mac", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_set_mac(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_mac("mac"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/set_mac failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_set_mtu(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling ifmgr/0.1/set_mtu", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_set_mtu(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_uint32("mtu"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/set_mtu failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_create_vif(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling ifmgr/0.1/create_vif", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_create_vif(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/create_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_delete_vif(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling ifmgr/0.1/delete_vif", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_delete_vif(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/delete_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_set_vif_enabled(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%d != 4) handling ifmgr/0.1/set_vif_enabled", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_set_vif_enabled(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_bool("enabled"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/set_vif_enabled failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_create_address4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%d != 4) handling ifmgr/0.1/create_address4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_create_address4(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv4("address"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/create_address4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_delete_address4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%d != 4) handling ifmgr/0.1/delete_address4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_delete_address4(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv4("address"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/delete_address4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_set_prefix4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling ifmgr/0.1/set_prefix4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_set_prefix4(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv4("address"), 
	    xrl.const_args().get_uint32("prefix"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/set_prefix4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_set_broadcast4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling ifmgr/0.1/set_broadcast4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_set_broadcast4(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv4("address"), 
	    xrl.const_args().get_ipv4("broadcast"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/set_broadcast4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_set_endpoint4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling ifmgr/0.1/set_endpoint4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_set_endpoint4(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv4("address"), 
	    xrl.const_args().get_ipv4("endpoint"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/set_endpoint4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_create_address6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%d != 4) handling ifmgr/0.1/create_address6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_create_address6(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv6("address"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/create_address6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_delete_address6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%d != 4) handling ifmgr/0.1/delete_address6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_delete_address6(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv6("address"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/delete_address6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_set_prefix6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling ifmgr/0.1/set_prefix6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_set_prefix6(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv6("address"), 
	    xrl.const_args().get_uint32("prefix"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/set_prefix6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_set_endpoint6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling ifmgr/0.1/set_endpoint6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_set_endpoint6(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vif"), 
	    xrl.const_args().get_ipv6("address"), 
	    xrl.const_args().get_ipv6("endpoint"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/set_endpoint6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_register_client(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling ifmgr/0.1/register_client", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_register_client(
	    xrl.const_args().get_string("clientname"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/register_client failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_ifmgr_0_1_unregister_client(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling ifmgr/0.1/unregister_client", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = ifmgr_0_1_unregister_client(
	    xrl.const_args().get_string("clientname"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for ifmgr/0.1/unregister_client failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_fti_0_1_start_transaction(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling fti/0.1/start_transaction", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t tid; 
    try {
	XrlCmdError e = fti_0_1_start_transaction(
	    tid);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.1/start_transaction failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("tid", tid);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_fti_0_1_commit_transaction(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling fti/0.1/commit_transaction", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_1_commit_transaction(
	    xrl.const_args().get_uint32("tid"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.1/commit_transaction failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_fti_0_1_abort_transaction(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling fti/0.1/abort_transaction", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_1_abort_transaction(
	    xrl.const_args().get_uint32("tid"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.1/abort_transaction failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_fti_0_1_add_entry4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling fti/0.1/add_entry4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_1_add_entry4(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_ipv4net("dst"), 
	    xrl.const_args().get_ipv4("gateway"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vifname"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.1/add_entry4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_fti_0_1_delete_entry4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling fti/0.1/delete_entry4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_1_delete_entry4(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_ipv4net("dst"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.1/delete_entry4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_fti_0_1_add_entry6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling fti/0.1/add_entry6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_1_add_entry6(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_ipv6net("dst"), 
	    xrl.const_args().get_ipv6("gateway"), 
	    xrl.const_args().get_string("ifname"), 
	    xrl.const_args().get_string("vifname"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.1/add_entry6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_fti_0_1_delete_entry6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling fti/0.1/delete_entry6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_1_delete_entry6(
	    xrl.const_args().get_uint32("tid"), 
	    xrl.const_args().get_ipv6net("dst"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.1/delete_entry6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_fti_0_1_delete_all_entries(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling fti/0.1/delete_all_entries", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_1_delete_all_entries(
	    xrl.const_args().get_uint32("tid"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.1/delete_all_entries failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_fti_0_1_delete_all_entries4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling fti/0.1/delete_all_entries4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_1_delete_all_entries4(
	    xrl.const_args().get_uint32("tid"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.1/delete_all_entries4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_fti_0_1_delete_all_entries6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling fti/0.1/delete_all_entries6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_1_delete_all_entries6(
	    xrl.const_args().get_uint32("tid"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.1/delete_all_entries6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_fti_0_1_lookup_route4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling fti/0.1/lookup_route4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    IPv4Net netmask; 
    IPv4 gateway; 
    string ifname; 
    string vifname; 
    try {
	XrlCmdError e = fti_0_1_lookup_route4(
	    xrl.const_args().get_ipv4("dst"), 
	    netmask, 
	    gateway, 
	    ifname, 
	    vifname);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.1/lookup_route4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("netmask", netmask);
	args->add("gateway", gateway);
	args->add("ifname", ifname);
	args->add("vifname", vifname);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_fti_0_1_lookup_entry4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling fti/0.1/lookup_entry4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    IPv4 gateway; 
    string ifname; 
    string vifname; 
    try {
	XrlCmdError e = fti_0_1_lookup_entry4(
	    xrl.const_args().get_ipv4net("dst"), 
	    gateway, 
	    ifname, 
	    vifname);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.1/lookup_entry4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("gateway", gateway);
	args->add("ifname", ifname);
	args->add("vifname", vifname);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_fti_0_1_lookup_route6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling fti/0.1/lookup_route6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    IPv6Net netmask; 
    IPv6 gateway; 
    string ifname; 
    string vifname; 
    try {
	XrlCmdError e = fti_0_1_lookup_route6(
	    xrl.const_args().get_ipv6("dst"), 
	    netmask, 
	    gateway, 
	    ifname, 
	    vifname);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.1/lookup_route6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("netmask", netmask);
	args->add("gateway", gateway);
	args->add("ifname", ifname);
	args->add("vifname", vifname);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_fti_0_1_lookup_entry6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling fti/0.1/lookup_entry6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    IPv6 gateway; 
    string ifname; 
    string vifname; 
    try {
	XrlCmdError e = fti_0_1_lookup_entry6(
	    xrl.const_args().get_ipv6net("dst"), 
	    gateway, 
	    ifname, 
	    vifname);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.1/lookup_entry6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("gateway", gateway);
	args->add("ifname", ifname);
	args->add("vifname", vifname);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_raw_packet_0_1_send4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 8) { 
	XLOG_ERROR("Wrong number of arguments (%d != 8) handling raw_packet/0.1/send4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = raw_packet_0_1_send4(
	    xrl.const_args().get_ipv4("src_address"), 
	    xrl.const_args().get_ipv4("dst_address"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("proto"), 
	    xrl.const_args().get_uint32("ttl"), 
	    xrl.const_args().get_uint32("tos"), 
	    xrl.const_args().get_binary("options"), 
	    xrl.const_args().get_binary("payload"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for raw_packet/0.1/send4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_raw_packet_0_1_send_raw4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling raw_packet/0.1/send_raw4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = raw_packet_0_1_send_raw4(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_binary("packet"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for raw_packet/0.1/send_raw4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_raw_packet_0_1_register_vif_receiver(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%d != 4) handling raw_packet/0.1/register_vif_receiver", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = raw_packet_0_1_register_vif_receiver(
	    xrl.const_args().get_string("router_name"), 
	    xrl.const_args().get_string("if_name"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("proto"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for raw_packet/0.1/register_vif_receiver failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaTargetBase::handle_raw_packet_0_1_unregister_vif_receiver(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%d != 4) handling raw_packet/0.1/unregister_vif_receiver", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = raw_packet_0_1_unregister_vif_receiver(
	    xrl.const_args().get_string("router_name"), 
	    xrl.const_args().get_string("if_name"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("proto"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for raw_packet/0.1/unregister_vif_receiver failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

