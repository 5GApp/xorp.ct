# Copyright (c) 2009 XORP, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, Version 2, June
# 1991 as published by the Free Software Foundation. Redistribution
# and/or modification of this program under the terms of any other
# version of the GNU General Public License is not permitted.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. For more details,
# see the GNU General Public License, Version 2, a copy of which can be
# found in the XORP LICENSE.gpl file.
#
# XORP Inc, 2953 Bunker Hill Lane, Suite 204, Santa Clara, CA 95054, USA;
# http://xorp.net

# $XORP$

import os
Import('env')

env = env.Clone()

is_shared = env.has_key('SHAREDLIBS')

subdirs = [
	'tests',
	'tools',
	]

SConscript(dirs = subdirs, exports = 'env')

env.AppendUnique(CPPPATH = [
    '#',
    '$BUILDDIR',
    ])

env.PrependUnique(LIBPATH = [
    '$BUILDDIR/libxorp',
    '$BUILDDIR/libcomm',
    '$BUILDDIR/libxipc',
    '$BUILDDIR/libproto',
    '$BUILDDIR/libfeaclient',
    '$BUILDDIR/policy/backend',
    '$BUILDDIR/policy/common',
    '$BUILDDIR/xrl/interfaces',
    '$BUILDDIR/xrl/targets',
    '.'
    ])

env.AppendUnique(LIBS = [
    'xorp_rib',				# The library, not the executable.
    'xorp_fea_client',
    'xif_fea_ifmgr_mirror',
    'xif_fea_ifmgr_replicator',
    'xif_fti',
    'xif_rib_client',
    'xif_finder_event_notifier',
    'xif_redist4',
    'xif_redist_transaction4',
    'xif_policy_redist4',
    'xif_profile_client',
    'xst_fea_ifmgr_mirror',
    'xst_rib',
    'xorp_policy_backend',
    'xorp_policy_common',
    'xorp_finder',
    'xorp_ipc',
    'xorp_core',
    'xorp_proto',
    'xorp_comm'
])

# IPv6 related stuff should only be enabled when needed.
if not (env.has_key('disable_ipv6') and env['disable_ipv6']):
    env.AppendUnique(LIBS = [
        'xif_redist6',
        'xif_redist_transaction6',
        'xif_policy_redist6',
        ])

env.Replace(RPATH = [
    env.Literal(env['xorp_module_rpath'])
])

libxorp_rib_srcs = [
	     'protocol.cc',
	     'redist_xrl.cc',
	     'register_server.cc',
	     'rib.cc',
	     'rib_manager.cc',
	     'rib_varrw.cc',
	     'route.cc',
	     'rt_tab_base.cc',
	     'rt_tab_deletion.cc',
	     'rt_tab_extint.cc',
	     'rt_tab_log.cc',
	     'rt_tab_merged.cc',
	     'rt_tab_origin.cc',
	     'rt_tab_pol_conn.cc',
	     'rt_tab_pol_redist.cc',
	     'rt_tab_redist.cc',
	     'rt_tab_register.cc',
	     'vifmanager.cc',
	     'xrl_target.cc'
             ]

if not (env.has_key('disable_profile') and env['disable_profile']):
	     libxorp_rib_srcs.append('profile_vars.cc')
             
if is_shared:
    libxorp_rib = env.SharedLibrary(target = 'libxorp_rib',
				    source = libxorp_rib_srcs,
				    LIBS = '')
    if env['rtld_origin']:
        for obj in libxorp_rib:
            env.AddPostAction(libxorp_rib,
                env.Symlink(obj.abspath,
                            os.path.join(env['xorp_alias_libdir'], str(obj))))
else:
    libxorp_rib = env.StaticLibrary(target = 'libxorp_rib',
				    source = libxorp_rib_srcs,
				    LIBS = '')

ribsrcs = [
          'main_rib.cc',
          ]

rib = env.Program(target = 'xorp_rib', source = ribsrcs)

env.Alias('install', env.InstallProgram(env['xorp_moduledir'], rib))

if is_shared:
    env.Alias('install', env.InstallLibrary(env['xorp_libdir'], libxorp_rib))

Default(rib)
