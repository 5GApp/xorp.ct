# Copyright (c) 2009-2010 XORP, Inc and Others
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, Version 2, June
# 1991 as published by the Free Software Foundation. Redistribution
# and/or modification of this program under the terms of any other
# version of the GNU General Public License is not permitted.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. For more details,
# see the GNU General Public License, Version 2, a copy of which can be
# found in the XORP LICENSE.gpl file.
#
# XORP Inc, 2953 Bunker Hill Lane, Suite 204, Santa Clara, CA 95054, USA;
# http://xorp.net

# $XORP$

# FIXME: tests

import os
Import('env')

env = env.Clone()

is_shared = env.has_key('SHAREDLIBS')

subdirs = ['tools']

SConscript(dirs = subdirs, exports = 'env')

env.AppendUnique(CPPPATH = [
    '#',
    '$BUILDDIR',
    ])

env.AppendUnique(LIBPATH = [
    '$BUILDDIR/libxorp',
    '$BUILDDIR/libcomm',
    '$BUILDDIR/libxipc',
    '$BUILDDIR/libproto',
    '$BUILDDIR/libfeaclient',
    '$BUILDDIR/policy/backend',
    '$BUILDDIR/policy/common',
    '$BUILDDIR/xrl/interfaces',
    '$BUILDDIR/xrl/targets',
    '$BUILDDIR/mrt',
    '.'
    ])

env.AppendUnique(LIBS = [
    'olsr',
    'olsrxrl',
    'xst_olsr4',
    'xorp_policy_backend',
    'xorp_policy_common',
    'xorp_fea_client',
    'xif_rib',
    'xif_socket4',
    'xif_finder_event_notifier',
    'xif_fea_ifmgr_mirror',
    'xif_fea_ifmgr_replicator',
    'xif_profile_client',
    'xif_fea_rawpkt4',
    'xst_fea_ifmgr_mirror',
    'xorp_ipc',
    'xorp_core',
    'xorp_proto',
    'xorp_comm',
])

if not is_shared:
    env.AppendUnique(LIBS = [
        "crypto",
        "rt",
        ])

if not (env.has_key('disable_ipv6') and env['disable_ipv6']):
    env.AppendUnique(LIBS = [
        'xif_fea_rawpkt6',
        ])


env.Replace(RPATH = [
    env.Literal(env['xorp_module_rpath'])
])

### libolsr

libolsrsrcs = [
	'external.cc',
	'face.cc',
	'face_manager.cc',
	'link.cc',
	'message.cc',
	'neighbor.cc',
	'neighborhood.cc',
	'olsr.cc',
	'olsr_types.cc',
	'policy_varrw.cc',
	'route_manager.cc',
	'topology.cc',
	'twohop.cc',
	]

if is_shared:
    libolsr = env.SharedLibrary(target = 'libolsr', source = libolsrsrcs, LIBS = '')
    env.Alias('install',
              env.InstallLibrary(env['xorp_libdir'], libolsr))
else:
    libolsr = env.StaticLibrary(target = 'libolsr', source = libolsrsrcs, LIBS = '')

### libolsrxrl

libolsrxrlsrcs = [
	'xrl_io.cc',
	'xrl_port.cc',
	'xrl_queue.cc',
	'xrl_target.cc',
	]

if is_shared:
    libolsrxrl = env.SharedLibrary(target = 'libolsrxrl', source = libolsrxrlsrcs, LIBS = '')
    env.Alias('install',
              env.InstallLibrary(env['xorp_libdir'], libolsrxrl))
else:
    libolsrxrl = env.StaticLibrary(target = 'libolsrxrl', source = libolsrxrlsrcs, LIBS = '')

### olsr4

olsr4srcs = [
	'xorp_olsr.cc',
	]


olsr4 = env.Program(target = 'xorp_olsr4', source = olsr4srcs)

env.Alias('install', env.InstallProgram(env['xorp_moduledir'], olsr4))

Default(libolsr, libolsrxrl, olsr4)
