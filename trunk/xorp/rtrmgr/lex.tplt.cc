#define yy_create_buffer tplt_create_buffer
#define yy_delete_buffer tplt_delete_buffer
#define yy_scan_buffer tplt_scan_buffer
#define yy_scan_string tplt_scan_string
#define yy_scan_bytes tplt_scan_bytes
#define yy_flex_debug tplt_flex_debug
#define yy_init_buffer tplt_init_buffer
#define yy_flush_buffer tplt_flush_buffer
#define yy_load_buffer_state tplt_load_buffer_state
#define yy_switch_to_buffer tplt_switch_to_buffer
#define yyin tpltin
#define yyleng tpltleng
#define yylex tpltlex
#define yyout tpltout
#define yyrestart tpltrestart
#define yytext tplttext

#line 19 "lex.tplt.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 * $FreeBSD: src/usr.bin/lex/flex.skl,v 1.4 1999/10/27 07:56:44 obrien Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 39
#define YY_END_OF_BUFFER 40
static yyconst short int yy_accept[720] =
    {   0,
        0,    0,   34,   34,   40,   38,    3,    4,   38,   38,
       38,    8,   38,   38,   22,   22,   22,    6,    5,    7,
       31,   31,   31,   31,   31,   31,   31,   31,    1,    2,
       34,   36,   35,    3,   28,    0,   32,    0,   29,    0,
       22,    9,   33,    0,   22,    0,    0,   22,   22,   22,
       25,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   34,   35,   35,   37,    0,   29,    0,    0,
        0,   22,    0,    0,   25,   22,   22,    0,   25,   25,
       25,   25,   31,   31,   31,   11,   31,   31,   31,   31,
       10,   12,   30,    0,    0,    0,    0,    0,    0,   22,

        0,    0,    0,    0,   25,   25,   25,   25,   26,   26,
        0,   25,    0,   25,   25,   25,   25,   31,   13,   31,
       15,   17,   31,   31,   20,    0,    0,    0,    0,    0,
        0,    0,   25,   25,    0,   25,   25,   25,   25,   26,
       26,   26,    0,    0,    0,   25,   25,   25,   25,   25,
       25,   25,   21,   31,   31,   31,   31,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   26,    0,
        0,    0,    0,    0,   25,    0,   25,    0,   25,   25,
       25,   25,   31,   31,   31,   14,   23,   23,   23,    0,

        0,    0,    0,   25,   25,    0,   25,   25,   25,   25,
       25,   25,    0,   25,   25,   25,   25,    0,    0,    0,
        0,    0,    0,    0,   25,   25,   25,   25,   25,   25,
       25,   16,   18,   19,    0,   23,   23,   23,   23,    0,
        0,    0,    0,    0,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   25,    0,   25,    0,   25,   25,   25,   25,
       24,   24,   24,   23,    0,    0,    0,   25,   25,    0,
       25,   25,   25,   25,   25,   25,    0,   25,   25,   25,

       25,   25,   25,    0,   25,   25,   25,   25,   25,   25,
       25,    0,    0,    0,    0,    0,    0,    0,    0,   25,
       25,   25,   25,   25,   25,   25,    0,    0,    0,    0,
        0,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       25,    0,   25,    0,   25,   25,   25,   25,    0,    0,
       27,   25,   25,    0,   25,   25,   25,   25,   25,   25,
        0,   25,   25,   25,   25,   25,   25,    0,   25,   25,

       25,   25,   25,   25,    0,   25,   25,   25,   25,   25,
       25,   25,   25,    0,    0,    0,    0,    0,    0,    0,
        0,   25,   25,   25,   25,   25,   25,   25,    0,    0,
        0,   27,    0,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   25,
        0,   25,    0,   25,   25,   25,   25,    0,    0,    0,
        0,    0,   25,    0,   25,    0,   25,   25,   25,   25,

       25,   25,    0,   25,   25,   25,   25,   25,   25,    0,
       25,   25,   25,   25,   25,   25,    0,   25,   25,   25,
       25,   25,   25,    0,   25,   25,   25,   25,   25,   25,
       25,   25,    0,    0,    0,    0,    0,    0,    0,    0,
       25,   25,   25,   25,   25,   25,   25,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   25,    0,   25,    0,   25,   25,   25,   25,    0,

        0,    0,    0,    0,   25,   25,    0,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,    0,    0,    0,    0,    0,    0,    0,    0,
       25,   25,   25,   25,    0,    0,    0,    0,    0,    0,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   25,   25,    0,    0,    0,    0,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,    0,    0,
        0,    0,    0,   25,    0,    0,    0,    0,    0,   25,
       25,   25,   25,    0,    0,    0,    0,    0,   25,   25,

       25,   25,    0,   25,   25,   25,   25,    0,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    4,    6,    7,    4,    4,    8,
        9,   10,    4,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   22,   23,   24,   25,    4,
       26,   27,    4,   28,   29,   29,   29,   29,   29,   29,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
        4,    4,    4,    4,   31,    4,   32,   33,   34,   35,

       36,   37,   38,   30,   39,   30,   30,   40,   41,   42,
       43,   44,   30,   45,   46,   47,   48,   49,   30,   50,
       30,   30,   51,    4,   52,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[53] =
    {   0,
        1,    2,    3,    2,    2,    2,    2,    2,    4,    5,
        2,    6,    7,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   10,    1,    2,   11,   12,   13,   14,
       15,   13,   13,   13,   13,   13,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
        2,    2
    } ;

static yyconst short int yy_base[966] =
    {   0,
        0,    0,   50,   51, 3213, 4421,   53, 4421, 3207, 3190,
        0, 4421,   44, 3186,   69,   92,   47, 3171, 4421, 4421,
      104,    0, 3151, 3161,   39, 3160,   25, 3173, 4421, 4421,
        0, 4421,   59, 3188, 4421, 3171, 4421,    0,    0,   47,
     3153, 4421, 4421,   61,  142, 3128, 3093,  165,   73,  174,
      184,    0,  207, 3073, 3073, 3095, 3062, 3027, 3022, 3009,
     3009, 3038,    0,  158,  159, 4421, 2996,    0, 2991,  232,
     2988,  243, 2976, 2975,  267,    0, 2936, 2932,  292,  315,
      324,  331,  344, 2905, 2898,    0,   78, 2911, 2855, 2856,
        0,    0, 4421, 2880,  114, 2875, 2874,  333, 2846,  222,

     2834, 2832, 2831, 2830,  382,  405,  414,  333,    0,  193,
      216,  422,  445,  459,  469,  480,  488, 2829,    0, 2806,
     2789, 2762, 2768, 2760,    0, 2786,  500, 2785, 2784, 2757,
     2756, 2754,  510,  535,  558,  572,  582,  593,  601, 4421,
        0, 2754, 2763,  613, 2762,  624,  626,  638,  661,  490,
      671,  673,    0, 2715, 2714, 2714, 2712,  253, 2734, 2733,
      603, 2714, 2702, 2700, 2699, 2698, 2697,  685,  708,  626,
      718,  720,  722,  734,  757,  673,  767,  769, 4421,  276,
     2694, 2692,  779, 2690,  776,  302,  788,  811,  825,  835,
      846,  854, 2654, 2653, 2654,    0, 2662,  865, 2661, 2660,

     2648, 2647, 2646,  875,  900,  923,  937,  947,  958,  966,
      967,  979, 1002, 1016, 1026, 1037, 1045, 2643, 1057, 2641,
     2639, 2637, 1068, 2636, 1079, 1081, 1093, 1116,  769, 1126,
     1128,    0,    0,    0, 1138, 2634, 2611,  857, 2610, 2598,
     2597, 2596, 2595, 2581, 1149, 1172,  968, 1182, 1184, 1186,
     1198, 1221, 1047, 1231, 1233, 1235, 1237, 1249, 1272, 1081,
     1282, 1284,  354, 2590, 2588, 1294, 2586,  392, 2585, 2584,
     1302, 2561, 1302,  432, 1314, 1337, 1351, 1361, 1372, 1380,
      454,  519, 4421, 2559, 2547, 2546, 2545, 1391, 1416, 1439,
     1453, 1463, 1474, 1482, 1483, 1495, 1518, 1532, 1542, 1553,

     1561, 1562, 1574, 1597, 1611, 1621, 1632, 1640, 2554, 1651,
     2540, 2539, 2537, 1662, 2536, 2535, 2534, 1673, 2533, 1684,
     1686, 1698, 1721, 1128, 1731, 1733, 2501, 2500, 2498, 2497,
     2496, 1745, 1768, 1284, 1778, 1780, 1782, 1794, 1817, 1382,
     1827, 1829, 1831, 1833, 1845, 1868, 1484, 1878, 1880, 1882,
     1884, 1896, 1919, 1563, 1929, 1931, 2505, 2486, 1643, 2485,
      545, 2484, 2483, 1941, 2482,  567, 2481, 2469, 1949, 2467,
     1949,  648, 1961, 1984, 1998, 2008, 2019, 2027, 2431, 2430,
     2428, 2038, 2063, 2086, 2100, 2110, 2121, 2129, 2130, 2142,
     2165, 2179, 2189, 2200, 2208, 2209, 2221, 2244, 2258, 2268,

     2279, 2287, 2288, 2300, 2323, 2337, 2347, 2358, 2366, 2437,
     2436, 2377, 2435, 2422, 2420, 2388, 2400, 2389, 2376, 2399,
     2341, 2410, 2412, 2424, 2447, 1686, 2457, 2459, 2329, 2326,
     2325, 2324, 2469, 2494, 2517, 1733, 2527, 2529, 2531, 2543,
     2566, 1931, 2576, 2578, 2580, 2582, 2594, 2617, 2029, 2627,
     2629, 2631, 2633, 2645, 2668, 2131, 2678, 2680, 2682, 2684,
     2696, 2719, 2210, 2729, 2731, 2333, 2317, 2290, 2316,  695,
     2315, 2314, 2368, 2313,  722, 2312, 2262, 2741, 2261, 2738,
      744, 2750, 2773, 2787, 2797, 2808, 2816, 2247, 2246, 2828,
     2851, 2412, 2255, 2244, 2862,    0, 2876, 2886, 2897, 2905,

     2906, 2918,    0, 2932, 2942, 2953, 2961, 2962, 2974,    0,
     2988, 2998, 3009, 3017, 3018, 3030,    0, 3044, 3054, 3065,
     3073, 3074, 3086,    0, 3100, 3110, 3121, 3129, 2238, 2237,
     3140, 2235, 2235, 2234, 3151, 2233, 2218, 2183, 3162, 2182,
     3173, 3175, 3187, 3210, 2459, 3220, 3222, 2168, 2167,  798,
     3234, 2166, 2165, 3257, 3268,  143, 2159, 3224, 3276, 2158,
     3280, 3282, 3284, 2156, 3288, 3296, 3300, 2155, 3302, 3304,
     3308, 2154, 3316, 3320, 3322, 2153, 3324, 2138, 2103, 2819,
     2102,  820, 2100, 2099, 3131, 2098,  884, 2097, 2081, 3334,
     2080, 3317,  910, 3342,    0, 3356, 3366, 3377, 3385, 2078,

     3397, 2077,  490, 1047, 2075, 2074, 1663, 2055, 3397, 2054,
     3408, 2052, 3409, 2051, 3410, 2050, 3411, 2049, 2048, 2036,
     3422, 2028, 2002, 2001, 3433, 1998, 1997, 1996, 3444, 1995,
     3455, 3457, 1978, 3459,  932, 1978, 1976, 3387, 1975, 1963,
     1972, 1958, 1957, 1956, 1938, 1913, 1912, 1910, 1909, 2908,
     1908,  989, 1908, 1894, 3469, 1892, 1011, 1890, 1888, 3477,
     1887, 3477, 1885, 1863, 3489, 1862, 1860, 1858, 1857, 1856,
     1842, 1840, 1838, 1836, 1835, 1834, 3499, 1811, 1811, 1809,
     3510, 1808, 1807, 1805, 1103, 1792, 1790, 3521, 1788, 1786,
     1785, 2964, 1742, 1159, 1741, 1713, 3529, 1711, 1641, 1570,

     3536, 1491, 1403, 1389, 1381, 3546, 1311, 1292, 1195, 1163,
     3020, 1110, 1068, 1054, 3076, 1015,  996,  975, 4421, 3569,
     3583,   66, 3593, 3599, 3614, 3629, 3633, 3642,  941, 3649,
     3654, 3664,  205,  228, 3671, 3676,  922, 3682,  860,  264,
     3687, 3692, 3697, 3703,  829,  807, 3709,  288,  313, 3714,
     3719, 3724, 3730,  756,  403,  443, 3737, 3743,  736,  531,
     3748, 3753, 3758, 3764, 3771, 3777,  731,  556,  707, 3783,
      109,  467, 3788, 3793, 3798, 3804, 3810,  640,  659,  687,
      706, 3817, 3823,  580, 3828, 3833, 3838, 3843, 3849, 3856,
     3862, 3869, 3875,  660,  734,  618,  755,  615, 3881, 3886,

     3891, 3896, 3902, 3908, 3914,  810,  833,  896,  921, 1000,
     1095, 3921, 3927, 3932, 3937, 3942, 3947, 3953, 3960, 3966,
     3973, 3979, 3986, 3992,  945,  576, 1114,  557, 1142,  502,
     3998, 4003, 4008, 4013, 4019, 4025, 4031, 4037, 1024, 1171,
     1194, 1195, 1198, 1216, 4044, 4050, 4055, 4060, 4065, 4071,
     4078, 4084, 4091, 4097, 4104, 4110, 4117, 4123, 1220, 1244,
      444, 1217, 1247,  404, 1251, 1267,  363, 4129, 4134, 4139,
     4145, 4150,  202, 4156,  285, 4162,  345, 4168,  528, 4174,
      893, 4180, 1271, 1315, 1268, 1332, 1333, 1354, 4187, 4193,
     4198,  314, 4203, 4208, 4214, 4221, 4227, 4234, 4240, 4247,

     4253, 4260, 4266, 4273, 4279, 1336,  265, 1355,  248, 1408,
      229, 1409, 4285, 1412, 1434, 4292, 4298, 4304, 4310, 4316,
     4322, 4328, 4334, 1359, 1438, 1435, 1456, 1457, 1513, 4341,
     4347,  161, 1514, 4353, 4359, 4365, 4371, 4377, 4383, 4389,
     1461,  123, 1535,   91, 1536, 4395, 1592, 1593, 4401, 1517,
     1540, 1614, 1615, 4407,   63, 1700, 1596,   49, 1716, 1619,
     1720, 1762, 1764, 1767, 1789
    } ;

static yyconst short int yy_def[966] =
    {   0,
      719,    1,  720,  720,  719,  719,  719,  719,  721,  719,
      722,  719,  723,  719,  719,   15,   16,  719,  719,  719,
      719,  724,   21,   21,  724,  724,  724,  724,  719,  719,
      725,  719,  726,  719,  719,  721,  719,  727,  728,  723,
       40,  719,  719,  729,  719,  730,  731,   45,   48,   48,
      719,  724,   21,  724,   53,  724,  724,  724,  724,  724,
      724,  724,  725,  726,  726,  719,  732,  728,  733,  719,
      734,  719,  735,  736,  719,   72,   72,  737,  719,   79,
       80,  738,  719,  724,  724,  724,  724,  724,  724,  724,
      724,  724,  719,  732,  739,  734,  740,  719,  719,   40,

      741,  719,  742,  743,  719,  105,  106,  744,  745,  745,
      746,  719,  719,  747,  112,  747,  747,  724,  724,  724,
      724,  724,  724,  724,  724,  748,  719,  749,  719,  750,
      751,  752,  719,  719,  719,  753,  134,  753,  753,  719,
      754,  754,  755,  719,  756,  757,  757,  719,  148,  149,
      758,  757,  724,  724,  724,  724,  724,  759,  749,  760,
      719,  719,  742,  761,  719,  762,  763,  719,  168,  169,
      764,  765,  765,  719,  174,  175,  766,  765,  719,  767,
      756,  768,  719,  719,  719,  769,  719,  719,  770,  187,
      770,  770,  724,  724,  724,  724,  771,  719,  772,  719,

      773,  774,  775,  719,  719,  719,  776,  205,  776,  776,
      719,  719,  719,  777,  212,  777,  777,  778,  719,  779,
      719,  780,  719,  781,  782,  782,  719,  227,  228,  783,
      782,  724,  724,  724,  719,  772,  784,  719,  719,  785,
      786,  719,  787,  788,  719,  245,  246,  789,  790,  790,
      719,  251,  252,  791,  790,  792,  792,  719,  258,  259,
      793,  792,  794,  779,  795,  719,  719,  796,  781,  797,
      719,  719,  719,  798,  719,  719,  799,  275,  799,  799,
      235,  719,  719,  719,  800,  801,  802,  719,  719,  719,
      803,  289,  803,  803,  719,  719,  719,  804,  296,  804,

      804,  719,  719,  719,  805,  303,  805,  805,  806,  719,
      807,  719,  808,  719,  809,  719,  810,  719,  811,  812,
      812,  719,  322,  323,  813,  812,  814,  815,  719,  816,
      817,  719,  332,  333,  818,  819,  819,  719,  338,  339,
      820,  819,  821,  821,  719,  345,  346,  822,  821,  823,
      823,  719,  352,  353,  824,  823,  807,  825,  719,  719,
      826,  809,  827,  719,  719,  828,  811,  829,  719,  719,
      719,  830,  719,  719,  831,  373,  831,  831,  832,  833,
      834,  719,  719,  719,  835,  383,  835,  835,  719,  719,
      719,  836,  390,  836,  836,  719,  719,  719,  837,  397,

      837,  837,  719,  719,  719,  838,  404,  838,  838,  719,
      839,  719,  840,  719,  841,  719,  842,  719,  843,  719,
      844,  845,  845,  719,  424,  425,  846,  845,  847,  848,
      719,  849,  719,  719,  434,  435,  850,  851,  851,  719,
      440,  441,  852,  851,  853,  853,  719,  447,  448,  854,
      853,  855,  855,  719,  454,  455,  856,  855,  857,  857,
      719,  461,  462,  858,  857,  859,  860,  719,  719,  861,
      862,  863,  719,  719,  864,  865,  866,  719,  719,  719,
      867,  719,  719,  868,  482,  868,  868,  869,  870,  719,
      490,  491,  871,  872,  719,  873,  874,  495,  874,  874,

      719,  719,  875,  876,  502,  876,  876,  719,  719,  877,
      878,  509,  878,  878,  719,  719,  879,  880,  516,  880,
      880,  719,  719,  881,  882,  523,  882,  882,  719,  883,
      719,  884,  719,  885,  719,  886,  719,  887,  719,  888,
      889,  889,  719,  543,  544,  890,  889,  891,  719,  892,
      719,  893,  894,  551,  894,  894,  895,  896,  896,  897,
      896,  898,  898,  899,  898,  900,  900,  901,  900,  902,
      902,  903,  902,  904,  904,  905,  904,  884,  906,  719,
      719,  907,  886,  908,  719,  719,  909,  888,  910,  719,
      719,  719,  911,  719,  912,  913,  594,  913,  913,  914,

      719,  915,  916,  916,  917,  719,  916,  918,  719,  919,
      719,  920,  719,  921,  719,  922,  719,  923,  719,  924,
      719,  925,  719,  926,  719,  927,  719,  928,  719,  929,
      930,  930,  931,  930,  932,  915,  933,  719,  719,  719,
      934,  935,  936,  937,  938,  939,  940,  925,  941,  719,
      719,  942,  927,  943,  719,  719,  944,  929,  945,  719,
      719,  719,  946,  947,  719,  948,  719,  949,  719,  719,
      719,  719,  719,  719,  719,  950,  719,  951,  719,  952,
      719,  953,  719,  954,  955,  948,  956,  719,  719,  951,
      957,  719,  719,  958,  953,  959,  719,  719,  719,  960,

      719,  961,  719,  719,  962,  719,  963,  719,  961,  964,
      719,  719,  963,  965,  719,  719,  719,  719,    0,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719
    } ;

static yyconst short int yy_nxt[4474] =
    {   0,
        6,    7,    8,    6,    9,   10,   11,    6,    6,    6,
       12,   13,    6,   14,   15,   15,   16,   17,   17,   17,
       17,   17,   17,   18,   19,   20,    6,    6,   21,   22,
        6,   21,   23,   21,   21,   21,   24,   22,   25,   22,
       26,   22,   22,   22,   22,   22,   27,   28,   22,   22,
       29,   30,   32,   32,   34,   40,   56,  707,   40,   33,
       33,   50,   50,   50,   50,   50,   50,   59,   65,   60,
       42,  702,   66,  719,   61,   69,   69,   70,   39,   39,
       35,   44,   57,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   46,   77,   77,   77,  121,   47,  122,  682,

       47,   47,   47,   47,   47,   47,   48,   48,   48,   48,
       48,   49,   50,   50,   50,   52,  236,  236,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   46,  126,  126,
      127,  678,   53,   52,   52,   53,   53,   53,   53,   53,
       53,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   44,  550,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   46,  552,  719,   65,  666,
       73,  719,   66,   73,   73,   73,   73,   73,   73,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   78,   79,   79,

       80,   81,   81,   81,   81,   81,   81,  141,  141,  142,
      560,   96,   82,   96,  560,   82,   82,   82,   82,   82,
       82,   83,   83,   83,   83,   83,   83,   83,   83,   83,
      143,  143,  144,  719,   99,   83,   99,  630,   83,   83,
       83,   83,   83,   83,   95,  101,   97,   97,   97,   97,
       97,   98,   99,   99,   99,   44,  626,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  101,  197,  197,  198,
      129,  102,  129,  622,  102,  102,  102,  102,  102,  102,
       78,  105,  105,  106,  107,  107,  107,  107,  107,  107,
      218,  218,  219,  564,  159,  108,  159,  564,  108,  108,

      108,  108,  108,  108,  111,   78,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  113,  222,  222,  223,  162,
      114,  162,  602,  114,  114,  114,  114,  114,  114,  115,
      115,  115,  115,  115,  116,  117,  117,  117,  117,  117,
      117,  117,  117,  117,   78,   95,   78,  129,  129,  129,
      129,  129,  129,  568,  113,   52,  135,  568,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  101,  309,  309,
      310,  540,  118,   52,   52,  118,  118,  118,  118,  118,
      118,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  111,   78,  134,  134,  134,  134,

      134,  134,  134,  134,  134,  135,  313,  313,  314,  181,
      136,  181,  536,  136,  136,  136,  136,  136,  136,  137,
      137,  137,  137,  137,  138,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  111,   78,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  113,  317,  317,  318,  184,
      147,  184,  532,  147,  147,  147,  147,  147,  147,  148,
      148,  149,  150,  150,  150,  150,  150,  150,  283,  283,
      283,  283,   78,  151,  239,  239,  151,  151,  151,  151,
      151,  151,  113,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  111,   78,  152,  152,  152,  152,  152,  152,

      111,   78,  550,  113,  192,  192,  192,  192,  192,  192,
      421,  113,  158,  552,  160,  160,  160,  160,  160,  161,
      162,  162,  162,   78,  168,  168,  169,  170,  170,  170,
      170,  170,  170,  283,  283,  283,  572,  200,  171,  200,
      572,  171,  171,  171,  171,  171,  171,  111,   78,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  135,  411,
      411,  412,  221,  173,  221,  417,  173,  173,  173,  173,
      173,  173,  174,  174,  175,  176,  176,  176,  176,  176,
      176,  415,  415,  416,  413,   78,  177,  284,  284,  177,
      177,  177,  177,  177,  177,  135,  178,  178,  178,  178,

      178,  178,  178,  178,  178,  111,   78,  178,  178,  178,
      178,  178,  178,  111,   78,  158,  135,  200,  200,  200,
      200,  200,  200,  319,  135,  180,  315,  182,  182,  182,
      182,  182,  183,  184,  184,  184,  111,   78,  719,   78,
      210,  210,  210,  210,  210,  210,  264,  113,  264,  113,
      186,   78,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  188,  419,  419,  420,  267,  189,  267,  311,  189,
      189,  189,  189,  189,  189,  190,  190,  190,  190,  190,
      191,  192,  192,  192,   78,  111,   78,  217,  217,  217,
      217,  217,  217,  269,  188,  269,  113,  111,   78,  205,

      205,  205,  205,  205,  205,  205,  205,  205,  206,  530,
      530,  531,  272,  207,  272,  224,  207,  207,  207,  207,
      207,  207,  208,  208,  208,  208,  208,  209,  210,  210,
      210,   78,  111,   78,  719,   78,  534,  534,  535,  220,
      312,  206,  312,  135,  199,  135,  186,   78,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  213,  538,  538,
      539,  316,  214,  316,  179,  214,  214,  214,  214,  214,
      214,  215,  215,  215,  215,  215,  216,  217,  217,  217,
       78,  111,   78,  280,  280,  280,  280,  280,  280,   78,
      213,  180,  135,  221,  221,  221,  221,  221,  221,  113,

      186,   78,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  188,  600,  600,  601,  145,  226,  357,  357,  226,
      226,  226,  226,  226,  226,  227,  227,  228,  229,  229,
      229,  229,  229,  229,  620,  620,  621,  140,   78,  230,
      360,  360,  230,  230,  230,  230,  230,  230,  188,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  186,   78,
      231,  231,  231,  231,  231,  231,  186,   78,  128,  188,
      235,  284,  284,  284,  284,  284,  284,  188,  235,  237,
      237,  237,  237,  237,  238,  239,  239,  239,   78,  245,
      245,  246,  247,  247,  247,  247,  247,  247,  624,  624,

      625,  576,  362,  248,  362,  576,  248,  248,  248,  248,
      248,  248,  111,   78,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  206,  628,  628,  629,  365,  250,  365,
      109,  250,  250,  250,  250,  250,  250,  251,  251,  252,
      253,  253,  253,  253,  253,  253,  664,  664,  665,   71,
       78,  254,  410,  410,  254,  254,  254,  254,  254,  254,
      206,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      111,   78,  255,  255,  255,  255,  255,  255,  111,   78,
       78,  206,  294,  294,  294,  294,  294,  294,   78,  206,
      135,  186,   78,  256,  256,  256,  256,  256,  256,  256,

      256,  256,  213,  676,  676,  677,  367,  257,  367,   78,
      257,  257,  257,  257,  257,  257,  258,  258,  259,  260,
      260,  260,  260,  260,  260,  680,  680,  681,   78,   78,
      261,  466,  466,  261,  261,  261,  261,  261,  261,  213,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  186,
       78,  262,  262,  262,  262,  262,  262,  186,   78,  719,
      213,  301,  301,  301,  301,  301,  301,   78,  213,  263,
      552,  265,  265,  265,  265,  265,  266,  267,  267,  267,
      268,   78,  270,  270,  270,  270,  270,  271,  272,  272,
      272,  186,   78,  719,   78,  308,  308,  308,  308,  308,

      308,  370,  188,  370,  188,  274,   78,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  276,  700,  700,  701,
      414,  277,  414,   78,  277,  277,  277,  277,  277,  277,
      278,  278,  278,  278,  278,  279,  280,  280,  280,   78,
      186,   78,  378,  378,  378,  378,  378,  378,  418,  276,
      418,  188,  281,  281,  281,  282,  283,  283,  283,  283,
      283,  111,   78,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  290,  705,  705,  706,   78,  291,  469,  469,
      291,  291,  291,  291,  291,  291,  292,  292,  292,  292,
      292,  293,  294,  294,  294,   78,  111,   78,  719,   78,

      471,  474,  471,  474,  476,  290,  476,  206,   78,  206,
      186,   78,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  297,  479,  474,  479,  474,  298,  469,  469,  298,
      298,  298,  298,  298,  298,  299,  299,  299,  299,  299,
      300,  301,  301,  301,   78,  111,   78,  186,   78,  719,
       78,  529,  529,  533,  297,  533,  206,  479,  213,  479,
      213,  274,   78,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  304,  537,  583,  537,  583,  305,  578,  578,
      305,  305,  305,  305,  305,  305,  306,  306,  306,  306,
      306,  307,  308,  308,  308,   78,  186,   78,  388,  388,

      388,  388,  388,  388,  694,  304,  263,  213,  312,  312,
      312,  312,  312,  312,  268,   78,  316,  316,  316,  316,
      316,  316,  581,  581,   78,  188,  274,   78,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  276,  586,  588,
      586,  588,  321,  619,  619,  321,  321,  321,  321,  321,
      321,  322,  322,  323,  324,  324,  324,  324,  324,  324,
      591,  623,  591,  623,   78,  325,  648,  648,  325,  325,
      325,  325,  325,  325,  276,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  274,   78,  326,  326,  326,  326,
      326,  326,  274,   78,   78,  276,  395,  395,  395,  395,

      395,  395,   78,  276,   78,  332,  332,  333,  334,  334,
      334,  334,  334,  334,  627,  685,  627,  633,  636,  335,
      636,  633,  335,  335,  335,  335,  335,  335,  111,   78,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  290,
      639,  653,  639,  653,  337,  651,  651,  337,  337,  337,
      337,  337,  337,  338,  338,  339,  340,  340,  340,  340,
      340,  340,  656,  658,  656,  658,   78,  341,  675,  675,
      341,  341,  341,  341,  341,  341,  290,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  111,   78,  342,  342,
      342,  342,  342,  342,  111,   78,   78,  290,  402,  402,

      402,  402,  402,  402,   78,  290,  206,  186,   78,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  297,  661,
      667,  661,  667,  344,  690,  690,  344,  344,  344,  344,
      344,  344,  345,  345,  346,  347,  347,  347,  347,  347,
      347,  679,  683,  679,  683,   78,  348,  693,  693,  348,
      348,  348,  348,  348,  348,  297,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  186,   78,  349,  349,  349,
      349,  349,  349,  186,   78,   78,  297,  409,  409,  409,
      409,  409,  409,   78,  297,  213,  274,   78,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  304,  686,  689,

      686,  689,  351,  704,  704,  351,  351,  351,  351,  351,
      351,  352,  352,  353,  354,  354,  354,  354,  354,  354,
      695,  698,  695,  698,   78,  355,  709,  709,  355,  355,
      355,  355,  355,  355,  304,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  274,   78,  356,  356,  356,  356,
      356,  356,  274,   78,   78,  304,   78,  410,  410,  410,
      410,  410,  410,  304,   78,  358,  358,  358,  358,  358,
      359,  360,  360,  360,  361,  550,  363,  363,  363,  363,
      363,  364,  365,  365,  365,  366,  552,  368,  368,  368,
      368,  368,  369,  370,  370,  370,  274,   78,  719,   78,

      487,  487,  487,  487,  487,  487,  703,  276,  703,  276,
      372,   78,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  374,  708,  694,  708,  694,  375,  712,  712,  375,
      375,  375,  375,  375,  375,  376,  376,  376,  376,  376,
      377,  378,  378,  378,   78,  274,   78,  500,  500,  500,
      500,  500,  500,  694,  374,   78,  276,  111,   78,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  384,  713,
      713,  716,  716,  385,  717,  717,  385,  385,  385,  385,
      385,  385,  386,  386,  386,  386,  386,  387,  388,  388,
      388,   78,  111,   78,  719,   78,  718,  718,   78,   78,

      685,  384,  685,  290,  685,  290,  186,   78,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  391,   78,  657,
      694,  694,  392,  652,   78,  392,  392,  392,  392,  392,
      392,  393,  393,  393,  393,  393,  394,  395,  395,  395,
       78,  111,   78,  186,   78,  719,   78,   78,   78,   78,
      391,   78,  290,   78,  297,   78,  297,  274,   78,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  398,   78,
       78,   78,  635,  399,  685,  685,  399,  399,  399,  399,
      399,  399,  400,  400,  400,  400,  400,  401,  402,  402,
      402,   78,  186,   78,  274,   78,  719,   78,   78,  657,

      657,  398,  657,  297,  652,  304,  652,  304,  372,   78,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  405,
      652,   78,   78,   78,  406,   78,   78,  406,  406,  406,
      406,  406,  406,  407,  407,  407,  407,  407,  408,  409,
      409,  409,   78,  274,   78,  507,  507,  507,  507,  507,
      507,   78,  405,  361,  304,  414,  414,  414,  414,  414,
      414,  366,   78,  418,  418,  418,  418,  418,  418,   78,
       78,   78,  276,  372,   78,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  374,   78,  552,  635,  635,  423,
      635,   78,  423,  423,  423,  423,  423,  423,  424,  424,

      425,  426,  426,  426,  426,  426,  426,  657,  657,  587,
      652,   78,  427,  652,  582,  427,  427,  427,  427,  427,
      427,  374,  428,  428,  428,  428,  428,  428,  428,  428,
      428,  372,   78,  428,  428,  428,  428,  428,  428,  372,
       78,   78,  374,  514,  514,  514,  514,  514,  514,   78,
      374,   78,  434,  434,  435,  436,  436,  436,  436,  436,
      436,   78,   78,   78,   78,   78,  437,   78,   78,  437,
      437,  437,  437,  437,  437,  111,   78,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  384,   78,   78,  635,
      635,  439,  587,  587,  439,  439,  439,  439,  439,  439,

      440,  440,  441,  442,  442,  442,  442,  442,  442,  587,
      582,  582,  582,   78,  443,   78,   78,  443,  443,  443,
      443,  443,  443,  384,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  111,   78,  444,  444,  444,  444,  444,
      444,  111,   78,   78,  384,  521,  521,  521,  521,  521,
      521,   78,  384,  290,  186,   78,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  391,   78,   78,   78,   78,
      446,   78,   78,  446,  446,  446,  446,  446,  446,  447,
      447,  448,  449,  449,  449,  449,  449,  449,  552,  606,
      433,  433,   78,  450,  587,  587,  450,  450,  450,  450,

      450,  450,  391,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  186,   78,  451,  451,  451,  451,  451,  451,
      186,   78,   78,  391,  528,  528,  528,  528,  528,  528,
      475,  391,  297,  274,   78,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  398,  582,  582,  470,   78,  453,
       78,   78,  453,  453,  453,  453,  453,  453,  454,  454,
      455,  456,  456,  456,  456,  456,  456,  552,   78,  433,
      433,   78,  457,  475,  475,  457,  457,  457,  457,  457,
      457,  398,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  274,   78,  458,  458,  458,  458,  458,  458,  274,

       78,   78,  398,   78,  529,  529,  529,  529,  529,  529,
      398,  304,  372,   78,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  405,  475,  470,  470,  470,  460,   78,
       78,  460,  460,  460,  460,  460,  460,  461,  461,  462,
      463,  463,  463,  463,  463,  463,   78,  433,  430,  382,
       78,  464,  430,  475,  464,  464,  464,  464,  464,  464,
      405,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      372,   78,  465,  465,  465,  465,  465,  465,  372,   78,
      470,  405,  533,  533,  533,  533,  533,  533,  475,  405,
       78,  467,  467,  467,  467,  467,  468,  469,  469,  469,

      470,  366,  472,  472,  472,  472,  472,  473,  474,  474,
      474,  475,  470,  477,  477,  477,  477,  477,  478,  479,
      479,  479,  372,   78,  719,   78,  556,  556,  556,  556,
      556,  556,  470,  374,  361,  374,  481,   78,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  483,   78,   78,
       78,  433,  484,  430,  430,  484,  484,  484,  484,  484,
      484,  485,  485,  485,  485,  485,  486,  487,  487,  487,
       78,  372,   78,  599,  599,  599,  599,  599,  599,  366,
      483,  366,  374,  490,  490,  491,  492,  492,  492,  492,
      492,  492,  493,  366,  361,  361,  361,  494,   78,   78,

      494,  494,  494,  494,  494,  494,  111,   78,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  496,   78,  382,
      331,  328,  497,  288,  328,  497,  497,  497,  497,  497,
      497,  498,  498,  498,  498,  498,  499,  500,  500,  500,
       78,  111,   78,  719,   78,  366,  366,  268,  361,  361,
      496,  263,  384,   78,  384,  186,   78,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  503,   78,  331,  328,
      328,  504,  235,  268,  504,  504,  504,  504,  504,  504,
      505,  505,  505,  505,  505,  506,  507,  507,  507,   78,
      111,   78,  186,   78,  719,   78,  268,  268,  263,  503,

      263,  384,  263,  391,  288,  391,  274,   78,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  510,  244,  241,
      204,  241,  511,  235,  235,  511,  511,  511,  511,  511,
      511,  512,  512,  512,  512,  512,  513,  514,  514,  514,
       78,  186,   78,  274,   78,  719,   78,  235,  268,  268,
      510,  180,  391,  263,  398,  263,  398,  372,   78,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  517,  244,
      241,  241,  158,  518,  235,  235,  518,  518,  518,  518,
      518,  518,  519,  519,  519,  519,  519,  520,  521,  521,
      521,   78,  274,   78,  372,   78,  719,   78,  234,  233,

      232,  517,  180,  398,  180,  405,  180,  405,  481,   78,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  524,
      204,  167,  164,  133,  525,  164,  158,  525,  525,  525,
      525,  525,  525,  526,  526,  526,  526,  526,  527,  528,
      528,  528,   78,  372,   78,  158,  158,  196,  195,  194,
      193,   78,  524,  475,  405,  537,  537,  537,  537,  537,
      537,  374,  481,   78,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  483,  180,  180,  719,  167,  542,  164,
      164,  542,  542,  542,  542,  542,  542,  543,  543,  544,
      545,  545,  545,  545,  545,  545,   95,  158,  158,  157,

       78,  546,  156,  155,  546,  546,  546,  546,  546,  546,
      483,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      481,   78,  547,  547,  547,  547,  547,  547,  481,   78,
      154,  483,   78,  619,  619,  619,  619,  619,  619,  483,
      550,  153,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  552,  101,  133,  104,  101,  553,   75,   95,  553,
      553,  553,  553,  553,  553,  554,  554,  554,  554,  554,
      555,  556,  556,  556,  111,   78,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  496,   95,   95,   93,   78,
      559,  125,  124,  559,  559,  559,  559,  559,  559,  496,

      561,  561,  561,  561,  561,  561,  561,  561,  561,  111,
       78,  561,  561,  561,  561,  561,  561,  111,   78,   78,
      496,   78,  675,  675,  675,  675,  675,  675,  496,  384,
      186,   78,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  503,  123,  120,  119,   78,  563,  110,  719,  563,
      563,  563,  563,  563,  563,  503,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  186,   78,  565,  565,  565,
      565,  565,  565,  186,   78,   78,  503,   78,  704,  704,
      704,  704,  704,  704,  503,  391,  274,   78,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  510,  104,  101,

       95,   78,  567,   95,   93,  567,  567,  567,  567,  567,
      567,  510,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  274,   78,  569,  569,  569,  569,  569,  569,  274,
       78,   78,  510,   78,  717,  717,  717,  717,  717,  717,
      510,  398,  372,   78,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  517,   92,   91,   90,   78,  571,   89,
       88,  571,  571,  571,  571,  571,  571,  517,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  372,   78,  573,
      573,  573,  573,  573,  573,  372,   78,   78,  517,   78,
      718,  718,  718,  718,  718,  718,  517,  405,  481,   78,

      574,  574,  574,  574,  574,  574,  574,  574,  574,  524,
       87,   86,   85,   78,  575,   84,   46,  575,  575,  575,
      575,  575,  575,  524,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  481,   78,  577,  577,  577,  577,  577,
      577,  481,   78,  582,  524,  623,  623,  623,  623,  623,
      623,   75,  524,   78,  579,  579,  579,  579,  579,  580,
      581,  581,  581,  582,  719,  584,  584,  584,  584,  584,
      585,  586,  586,  586,  587,   37,  589,  589,  589,  589,
      589,  590,  591,  591,  591,  481,   78,  719,   78,   34,
       62,   58,   55,   54,   51,   43,  483,   38,  483,  593,

       78,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      595,   37,  719,  719,  719,  596,  719,  719,  596,  596,
      596,  596,  596,  596,  597,  597,  597,  597,  597,  598,
      599,  599,  599,   78,  481,   78,  111,   78,  719,  719,
      719,  719,  719,  595,  719,  483,  550,  496,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  552,  719,  719,
      719,  719,  604,  719,  719,  604,  604,  604,  604,  604,
      604,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      550,  719,  607,  607,  607,  607,  607,  607,  719,   78,
      719,  552,  111,   78,  186,   78,  719,   78,  719,  496,

      186,   78,  719,  496,  719,  503,  719,  503,  274,   78,
      719,  503,  719,   78,  274,   78,  372,   78,  719,  510,
      719,   78,  719,  510,  719,  510,  719,  517,  372,   78,
       78,  517,  481,   78,  719,   78,  481,   78,  719,  517,
      483,  719,  719,  524,  719,  524,  587,  524,  627,  627,
      627,  627,  627,  627,  593,   78,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  595,  719,  719,  719,   78,
      632,  719,  719,  632,  632,  632,  632,  632,  632,  595,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  593,
       78,  634,  634,  634,  634,  634,  634,  593,   78,  635,

      595,  667,  667,  667,  667,  667,  667,  719,  595,  635,
       78,  637,  637,  637,  637,  637,  638,  639,  639,  639,
      496,   78,   78,   78,   78,  719,  719,  719,  719,  719,
      719,  503,  510,  517,  524,   78,  649,  649,  649,  649,
      649,  650,  651,  651,  651,  652,  719,  654,  654,  654,
      654,  654,  655,  656,  656,  656,  657,  719,  659,  659,
      659,  659,  659,  660,  661,  661,  661,  593,   78,  719,
       78,  593,   78,  719,  719,  719,  719,  719,  595,  719,
      595,  652,  595,  679,  679,  679,  679,  679,  679,  657,
       78,  683,  683,  683,  683,  683,  683,  719,  719,  719,

      595,  685,  719,  687,  687,  687,  687,  687,  688,  689,
      689,  689,   78,  691,  691,  691,  691,  691,  692,  693,
      693,  693,  694,  719,  696,  696,  696,  696,  696,  697,
      698,  698,  698,  685,  719,  703,  703,  703,  703,  703,
      703,  694,  719,  708,  708,  708,  708,  708,  708,   78,
      710,  710,  710,  710,  710,  711,  712,  712,  712,   78,
      714,  714,  714,  714,  714,  715,  716,  716,  716,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   36,  719,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   41,  719,

      719,   41,  719,   41,   52,  719,  719,   52,  719,  719,
      719,   52,   52,   52,   63,   63,  719,   63,  719,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   64,
       64,  719,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   67,   67,   67,   68,  719,  719,
       68,  719,  719,  719,   68,   68,   68,   74,   74,  719,
      719,   74,   73,   73,  719,  719,   73,   94,  719,   94,
       94,  719,   94,  719,  719,   94,   94,   94,   94,  102,
      102,  719,  719,  102,  103,  103,  719,  719,  103,  114,
      114,  114,  719,  719,  114,  130,  130,  719,  719,  130,

      131,  131,  719,  719,  131,  132,  132,  719,  719,  132,
      136,  136,  136,  719,  719,  136,  147,  147,  147,  719,
      719,  147,  163,  163,  719,  719,  163,  165,  165,  719,
      719,  165,  166,  166,  719,  719,  166,  173,  173,  173,
      719,  719,  173,  185,  185,  185,  185,  719,  719,  185,
      189,  189,  189,  719,  719,  189,  201,  201,  719,  719,
      201,  202,  202,  719,  719,  202,  203,  203,  719,  719,
      203,  207,  207,  207,  719,  719,  207,  211,  211,  211,
      211,  719,  719,  211,  214,  214,  214,  719,  719,  214,
      226,  226,  226,  719,  719,  226,  240,  240,  719,  719,

      240,  242,  242,  719,  719,  242,  243,  243,  719,  719,
      243,  250,  250,  250,  719,  719,  250,  257,  257,  257,
      719,  719,  257,  273,  273,  273,  273,  719,  719,  273,
      277,  277,  277,  719,  719,  277,  202,  202,  719,  719,
      202,  285,  285,  719,  719,  285,  286,  286,  719,  719,
      286,  287,  287,  719,  719,  287,  291,  291,  291,  719,
      719,  291,  295,  295,  295,  295,  719,  719,  295,  298,
      298,  298,  719,  719,  298,  302,  302,  302,  302,  719,
      719,  302,  305,  305,  305,  719,  719,  305,  321,  321,
      321,  719,  719,  321,  327,  327,  719,  719,  327,  329,

      329,  719,  719,  329,  330,  330,  719,  719,  330,  337,
      337,  337,  719,  719,  337,  344,  344,  344,  719,  719,
      344,  351,  351,  351,  719,  719,  351,  371,  371,  371,
      371,  719,  719,  371,  375,  375,  375,  719,  719,  375,
      286,  286,  719,  719,  286,  379,  379,  719,  719,  379,
      380,  380,  719,  719,  380,  381,  381,  719,  719,  381,
      385,  385,  385,  719,  719,  385,  389,  389,  389,  389,
      719,  719,  389,  392,  392,  392,  719,  719,  392,  396,
      396,  396,  396,  719,  719,  396,  399,  399,  399,  719,
      719,  399,  403,  403,  403,  403,  719,  719,  403,  406,

      406,  406,  719,  719,  406,  423,  423,  423,  719,  719,
      423,  429,  429,  719,  719,  429,  431,  431,  719,  719,
      431,  432,  432,  719,  719,  432,  439,  439,  439,  719,
      719,  439,  446,  446,  446,  719,  719,  446,  453,  453,
      453,  719,  719,  453,  460,  460,  460,  719,  719,  460,
      480,  480,  480,  480,  719,  719,  480,  484,  484,  484,
      719,  719,  484,  380,  380,  719,  719,  380,  488,  488,
      719,  719,  488,  489,  489,  719,  719,  489,  497,  497,
      497,  719,  719,  497,  501,  501,  501,  501,  719,  719,
      501,  504,  504,  504,  719,  719,  504,  508,  508,  508,

      508,  719,  719,  508,  511,  511,  511,  719,  719,  511,
      515,  515,  515,  515,  719,  719,  515,  518,  518,  518,
      719,  719,  518,  522,  522,  522,  522,  719,  719,  522,
      525,  525,  525,  719,  719,  525,  542,  542,  542,  719,
      719,  542,  548,  548,  719,  719,  548,  549,  549,  719,
      719,  549,  557,  557,  719,  719,  719,  557,  553,  553,
      719,  719,  553,  559,  559,  559,  719,  719,  559,  563,
      563,  563,  719,  719,  563,  567,  567,  567,  719,  719,
      567,  571,  571,  571,  719,  719,  571,  575,  575,  575,
      719,  719,  575,  592,  592,  592,  592,  719,  719,  592,

      596,  596,  596,  719,  719,  596,  489,  489,  719,  719,
      489,  605,  605,  719,  719,  605,  604,  604,  719,  719,
      604,  608,  608,  719,  719,  719,  608,  609,  609,  609,
      609,  719,  719,  609,  610,  610,  719,  719,  719,  610,
      611,  611,  611,  611,  719,  719,  611,  612,  612,  719,
      719,  719,  612,  613,  613,  613,  613,  719,  719,  613,
      614,  614,  719,  719,  719,  614,  615,  615,  615,  615,
      719,  719,  615,  616,  616,  719,  719,  719,  616,  617,
      617,  617,  617,  719,  719,  617,  618,  618,  719,  719,
      719,  618,  632,  632,  632,  719,  719,  632,  640,  719,

      640,  640,  719,  719,  640,  641,  641,  719,  719,  719,
      641,  642,  642,  719,  719,  719,  642,  643,  643,  719,
      719,  719,  643,  644,  644,  719,  719,  719,  644,  645,
      645,  719,  719,  719,  645,  646,  646,  719,  719,  719,
      646,  647,  647,  719,  719,  719,  647,  662,  662,  662,
      662,  719,  719,  662,  663,  663,  719,  719,  719,  663,
      668,  668,  719,  719,  719,  668,  669,  669,  719,  719,
      719,  669,  670,  670,  719,  719,  719,  670,  671,  671,
      719,  719,  719,  671,  672,  672,  719,  719,  719,  672,
      673,  673,  719,  719,  719,  673,  674,  674,  719,  719,

      719,  674,  684,  684,  719,  719,  719,  684,  606,  606,
      719,  719,  719,  606,  699,  699,  719,  719,  719,  699,
        5,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719
    } ;

static yyconst short int yy_chk[4474] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    7,   13,   25,  958,   40,    3,
        4,   17,   17,   17,   17,   17,   17,   27,   33,   27,
       13,  955,   33,   40,   27,   44,   44,   44,  722,  722,
        7,   15,   25,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   49,   49,   49,   87,   15,   87,  944,

       15,   15,   15,   15,   15,   15,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   21,  771,  771,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   95,   95,
       95,  942,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   45,  556,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,  556,   64,   65,  932,
       45,   64,   65,   45,   45,   45,   45,   45,   45,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,  110,  110,  110,
      873,  733,   51,  733,  873,   51,   51,   51,   51,   51,
       51,   53,   53,   53,   53,   53,   53,   53,   53,   53,
      111,  111,  111,  100,  734,   53,  734,  911,   53,   53,
       53,   53,   53,   53,   70,  100,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   72,  909,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,  158,  158,  158,
      740,   72,  740,  907,   72,   72,   72,   72,   72,   72,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
      180,  180,  180,  875,  748,   75,  748,  875,   75,   75,

       75,   75,   75,   75,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,  186,  186,  186,  749,
       79,  749,  892,   79,   79,   79,   79,   79,   79,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   81,   81,
       81,   81,   81,   81,   82,   98,  108,   98,   98,   98,
       98,   98,   98,  877,   82,   83,  108,  877,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,  263,  263,
      263,  867,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  105,  105,  105,  105,  105,  105,

      105,  105,  105,  105,  105,  105,  268,  268,  268,  755,
      105,  755,  864,  105,  105,  105,  105,  105,  105,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  107,  107,
      107,  107,  107,  107,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  274,  274,  274,  756,
      112,  756,  861,  112,  112,  112,  112,  112,  112,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  281,  281,
      281,  281,  114,  113,  772,  772,  113,  113,  113,  113,
      113,  113,  114,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  116,  116,  116,  116,  116,  116,  116,  116,

      117,  117,  603,  116,  150,  150,  150,  150,  150,  150,
      830,  117,  127,  603,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  282,  282,  282,  879,  760,  133,  760,
      879,  133,  133,  133,  133,  133,  133,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  361,
      361,  361,  768,  134,  768,  828,  134,  134,  134,  134,
      134,  134,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  366,  366,  366,  826,  136,  135,  784,  784,  135,
      135,  135,  135,  135,  135,  136,  137,  137,  137,  137,

      137,  137,  137,  137,  137,  138,  138,  138,  138,  138,
      138,  138,  138,  139,  139,  161,  138,  161,  161,  161,
      161,  161,  161,  798,  139,  144,  796,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  146,  146,  147,  147,
      170,  170,  170,  170,  170,  170,  778,  146,  778,  147,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  372,  372,  372,  779,  148,  779,  794,  148,
      148,  148,  148,  148,  148,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  151,  152,  152,  176,  176,  176,
      176,  176,  176,  780,  151,  780,  152,  168,  168,  168,

      168,  168,  168,  168,  168,  168,  168,  168,  168,  470,
      470,  470,  781,  168,  781,  769,  168,  168,  168,  168,
      168,  168,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  171,  172,  172,  173,  173,  475,  475,  475,  767,
      795,  171,  795,  172,  759,  173,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  481,  481,
      481,  797,  174,  797,  754,  174,  174,  174,  174,  174,
      174,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      177,  178,  178,  229,  229,  229,  229,  229,  229,  185,
      177,  183,  178,  183,  183,  183,  183,  183,  183,  185,

      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  550,  550,  550,  746,  187,  806,  806,  187,
      187,  187,  187,  187,  187,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  582,  582,  582,  745,  189,  188,
      807,  807,  188,  188,  188,  188,  188,  188,  189,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  191,  191,
      191,  191,  191,  191,  191,  191,  192,  192,  739,  191,
      238,  238,  238,  238,  238,  238,  238,  192,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  587,  587,

      587,  881,  808,  204,  808,  881,  204,  204,  204,  204,
      204,  204,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  593,  593,  593,  809,  205,  809,
      737,  205,  205,  205,  205,  205,  205,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  635,  635,  635,  729,
      207,  206,  825,  825,  206,  206,  206,  206,  206,  206,
      207,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      209,  209,  209,  209,  209,  209,  209,  209,  210,  210,
      211,  209,  247,  247,  247,  247,  247,  247,  718,  210,
      211,  212,  212,  212,  212,  212,  212,  212,  212,  212,

      212,  212,  212,  652,  652,  652,  810,  212,  810,  717,
      212,  212,  212,  212,  212,  212,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  657,  657,  657,  716,  214,
      213,  839,  839,  213,  213,  213,  213,  213,  213,  214,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  216,
      216,  216,  216,  216,  216,  216,  216,  217,  217,  604,
      216,  253,  253,  253,  253,  253,  253,  714,  217,  219,
      604,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      223,  713,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  225,  225,  226,  226,  260,  260,  260,  260,  260,

      260,  811,  225,  811,  226,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  685,  685,  685,
      827,  227,  827,  712,  227,  227,  227,  227,  227,  227,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  230,
      231,  231,  324,  324,  324,  324,  324,  324,  829,  230,
      829,  231,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  694,  694,  694,  710,  245,  840,  840,
      245,  245,  245,  245,  245,  245,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  248,  249,  249,  250,  250,

      841,  842,  841,  842,  843,  248,  843,  249,  709,  250,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  844,  862,  844,  862,  251,  859,  859,  251,
      251,  251,  251,  251,  251,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  254,  255,  255,  256,  256,  257,
      257,  860,  860,  863,  254,  863,  255,  865,  256,  865,
      257,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  866,  885,  866,  885,  258,  883,  883,
      258,  258,  258,  258,  258,  258,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  261,  262,  262,  334,  334,

      334,  334,  334,  334,  708,  261,  266,  262,  266,  266,
      266,  266,  266,  266,  271,  273,  271,  271,  271,  271,
      271,  271,  884,  884,  707,  273,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  886,  887,
      886,  887,  275,  906,  906,  275,  275,  275,  275,  275,
      275,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      888,  908,  888,  908,  277,  276,  924,  924,  276,  276,
      276,  276,  276,  276,  277,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  279,  279,  279,  279,  279,  279,
      279,  279,  280,  280,  705,  279,  340,  340,  340,  340,

      340,  340,  704,  280,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  910,  703,  910,  912,  914,  288,
      914,  912,  288,  288,  288,  288,  288,  288,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      915,  926,  915,  926,  289,  925,  925,  289,  289,  289,
      289,  289,  289,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  927,  928,  927,  928,  291,  290,  941,  941,
      290,  290,  290,  290,  290,  290,  291,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  293,  293,  293,  293,
      293,  293,  293,  293,  294,  294,  295,  293,  347,  347,

      347,  347,  347,  347,  702,  294,  295,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  929,
      933,  929,  933,  296,  950,  950,  296,  296,  296,  296,
      296,  296,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  943,  945,  943,  945,  298,  297,  951,  951,  297,
      297,  297,  297,  297,  297,  298,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  300,  300,  300,  300,  300,
      300,  300,  300,  301,  301,  302,  300,  354,  354,  354,
      354,  354,  354,  700,  301,  302,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  947,  948,

      947,  948,  303,  957,  957,  303,  303,  303,  303,  303,
      303,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      952,  953,  952,  953,  305,  304,  960,  960,  304,  304,
      304,  304,  304,  304,  305,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  307,  307,  307,  307,  307,  307,
      307,  307,  308,  308,  699,  307,  359,  359,  359,  359,
      359,  359,  359,  308,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  314,  607,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  318,  607,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  320,  320,  321,  321,

      426,  426,  426,  426,  426,  426,  956,  320,  956,  321,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  959,  698,  959,  696,  322,  961,  961,  322,
      322,  322,  322,  322,  322,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  325,  326,  326,  436,  436,  436,
      436,  436,  436,  695,  325,  693,  326,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  962,
      962,  963,  963,  332,  964,  964,  332,  332,  332,  332,
      332,  332,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  335,  336,  336,  337,  337,  965,  965,  691,  690,

      689,  335,  687,  336,  686,  337,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  684,  683,
      682,  680,  338,  679,  678,  338,  338,  338,  338,  338,
      338,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      341,  342,  342,  343,  343,  344,  344,  676,  675,  674,
      341,  673,  342,  672,  343,  671,  344,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  670,
      669,  668,  667,  345,  666,  664,  345,  345,  345,  345,
      345,  345,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  348,  349,  349,  350,  350,  351,  351,  663,  661,

      659,  348,  658,  349,  656,  350,  654,  351,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      653,  651,  649,  648,  352,  647,  646,  352,  352,  352,
      352,  352,  352,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  355,  356,  356,  442,  442,  442,  442,  442,
      442,  645,  355,  364,  356,  364,  364,  364,  364,  364,
      364,  369,  371,  369,  369,  369,  369,  369,  369,  644,
      643,  642,  371,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  641,  640,  639,  637,  373,
      636,  633,  373,  373,  373,  373,  373,  373,  374,  374,

      374,  374,  374,  374,  374,  374,  374,  630,  628,  627,
      626,  375,  374,  624,  623,  374,  374,  374,  374,  374,
      374,  375,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  377,  377,  377,  377,  377,  377,  377,  377,  378,
      378,  622,  377,  449,  449,  449,  449,  449,  449,  620,
      378,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  619,  618,  616,  614,  612,  382,  610,  608,  382,
      382,  382,  382,  382,  382,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  606,  605,  602,
      600,  383,  591,  589,  383,  383,  383,  383,  383,  383,

      384,  384,  384,  384,  384,  384,  384,  384,  384,  588,
      586,  584,  583,  385,  384,  581,  579,  384,  384,  384,
      384,  384,  384,  385,  386,  386,  386,  386,  386,  386,
      386,  386,  386,  387,  387,  387,  387,  387,  387,  387,
      387,  388,  388,  389,  387,  456,  456,  456,  456,  456,
      456,  578,  388,  389,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  576,  572,  568,  564,
      390,  560,  557,  390,  390,  390,  390,  390,  390,  391,
      391,  391,  391,  391,  391,  391,  391,  391,  553,  552,
      549,  548,  392,  391,  540,  538,  391,  391,  391,  391,

      391,  391,  392,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  394,  394,  394,  394,  394,  394,  394,  394,
      395,  395,  396,  394,  463,  463,  463,  463,  463,  463,
      537,  395,  396,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  536,  534,  533,  532,  397,
      530,  529,  397,  397,  397,  397,  397,  397,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  494,  493,  489,
      488,  399,  398,  479,  477,  398,  398,  398,  398,  398,
      398,  399,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  401,  401,  401,  401,  401,  401,  401,  401,  402,

      402,  403,  401,  468,  468,  468,  468,  468,  468,  468,
      402,  403,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  476,  474,  472,  471,  404,  469,
      467,  404,  404,  404,  404,  404,  404,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  466,  432,  431,  430,
      406,  405,  429,  421,  405,  405,  405,  405,  405,  405,
      406,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      408,  408,  408,  408,  408,  408,  408,  408,  409,  409,
      473,  408,  473,  473,  473,  473,  473,  473,  419,  409,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,

      416,  418,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  420,  417,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  422,  422,  423,  423,  492,  492,  492,  492,
      492,  492,  415,  422,  414,  423,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  413,  411,
      410,  381,  424,  380,  379,  424,  424,  424,  424,  424,
      424,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      427,  428,  428,  545,  545,  545,  545,  545,  545,  370,
      427,  368,  428,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  367,  365,  363,  362,  433,  360,  358,

      433,  433,  433,  433,  433,  433,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  357,  331,
      330,  329,  434,  328,  327,  434,  434,  434,  434,  434,
      434,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      437,  438,  438,  439,  439,  319,  317,  316,  315,  313,
      437,  312,  438,  311,  439,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  309,  287,  286,
      285,  440,  284,  272,  440,  440,  440,  440,  440,  440,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  443,
      444,  444,  445,  445,  446,  446,  270,  269,  267,  443,

      265,  444,  264,  445,  244,  446,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  243,  242,
      241,  240,  447,  239,  237,  447,  447,  447,  447,  447,
      447,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      450,  451,  451,  452,  452,  453,  453,  236,  224,  222,
      450,  221,  451,  220,  452,  218,  453,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  203,
      202,  201,  200,  454,  199,  197,  454,  454,  454,  454,
      454,  454,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  457,  458,  458,  459,  459,  460,  460,  195,  194,

      193,  457,  184,  458,  182,  459,  181,  460,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      167,  166,  165,  164,  461,  163,  162,  461,  461,  461,
      461,  461,  461,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  464,  465,  465,  160,  159,  157,  156,  155,
      154,  480,  464,  478,  465,  478,  478,  478,  478,  478,
      478,  480,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  145,  143,  142,  132,  482,  131,
      130,  482,  482,  482,  482,  482,  482,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  129,  128,  126,  124,

      484,  483,  123,  122,  483,  483,  483,  483,  483,  483,
      484,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      486,  486,  486,  486,  486,  486,  486,  486,  487,  487,
      121,  486,  580,  580,  580,  580,  580,  580,  580,  487,
      490,  120,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  118,  104,  103,  102,  490,  101,   99,  490,
      490,  490,  490,  490,  490,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,   97,   96,   94,  497,
      495,   90,   89,  495,  495,  495,  495,  495,  495,  497,

      498,  498,  498,  498,  498,  498,  498,  498,  498,  499,
      499,  499,  499,  499,  499,  499,  499,  500,  500,  501,
      499,  650,  650,  650,  650,  650,  650,  650,  500,  501,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,   88,   85,   84,  504,  502,   78,   77,  502,
      502,  502,  502,  502,  502,  504,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  506,  506,  506,  506,  506,
      506,  506,  506,  507,  507,  508,  506,  692,  692,  692,
      692,  692,  692,  692,  507,  508,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,   74,   73,

       71,  511,  509,   69,   67,  509,  509,  509,  509,  509,
      509,  511,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  513,  513,  513,  513,  513,  513,  513,  513,  514,
      514,  515,  513,  711,  711,  711,  711,  711,  711,  711,
      514,  515,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,   62,   61,   60,  518,  516,   59,
       58,  516,  516,  516,  516,  516,  516,  518,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  520,  520,  520,
      520,  520,  520,  520,  520,  521,  521,  522,  520,  715,
      715,  715,  715,  715,  715,  715,  521,  522,  523,  523,

      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
       57,   56,   55,  525,  523,   54,   47,  523,  523,  523,
      523,  523,  523,  525,  526,  526,  526,  526,  526,  526,
      526,  526,  526,  527,  527,  527,  527,  527,  527,  527,
      527,  528,  528,  585,  527,  585,  585,  585,  585,  585,
      585,   46,  528,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  535,   41,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  539,   36,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  541,  541,  542,  542,   34,
       28,   26,   24,   23,   18,   14,  541,   10,  542,  543,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,    9,    5,    0,    0,  543,    0,    0,  543,  543,
      543,  543,  543,  543,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  546,  547,  547,  558,  558,    0,    0,
        0,    0,    0,  546,    0,  547,  551,  558,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,    0,    0,
        0,    0,  551,    0,    0,  551,  551,  551,  551,  551,
      551,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      555,    0,  555,  555,  555,  555,  555,  555,  559,  559,
        0,  555,  561,  561,  562,  562,  563,  563,    0,  559,

      565,  565,    0,  561,    0,  562,    0,  563,  566,  566,
        0,  565,  567,  567,  569,  569,  570,  570,    0,  566,
      571,  571,    0,  567,    0,  569,    0,  570,  573,  573,
      592,  571,  574,  574,  575,  575,  577,  577,    0,  573,
      592,    0,    0,  574,    0,  575,  590,  577,  590,  590,
      590,  590,  590,  590,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,    0,    0,    0,  596,
      594,    0,    0,  594,  594,  594,  594,  594,  594,  596,
      597,  597,  597,  597,  597,  597,  597,  597,  597,  598,
      598,  598,  598,  598,  598,  598,  598,  599,  599,  638,

      598,  638,  638,  638,  638,  638,  638,    0,  599,  601,
      609,  601,  601,  601,  601,  601,  601,  601,  601,  601,
      609,  611,  613,  615,  617,    0,    0,    0,    0,    0,
        0,  611,  613,  615,  617,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  625,    0,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  629,    0,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  631,  631,  632,
      632,  634,  634,    0,    0,    0,    0,    0,  631,    0,
      632,  655,  634,  655,  655,  655,  655,  655,  655,  660,
      662,  660,  660,  660,  660,  660,  660,    0,    0,    0,

      662,  665,    0,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  681,    0,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  688,    0,  688,  688,  688,  688,  688,
      688,  697,    0,  697,  697,  697,  697,  697,  697,  701,
      701,  701,  701,  701,  701,  701,  701,  701,  701,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  720,  720,  720,  721,    0,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  723,    0,

        0,  723,    0,  723,  724,    0,    0,  724,    0,    0,
        0,  724,  724,  724,  725,  725,    0,  725,    0,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  726,
      726,    0,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  726,  726,  726,  727,  727,  727,  728,    0,    0,
      728,    0,    0,    0,  728,  728,  728,  730,  730,    0,
        0,  730,  731,  731,    0,    0,  731,  732,    0,  732,
      732,    0,  732,    0,    0,  732,  732,  732,  732,  735,
      735,    0,    0,  735,  736,  736,    0,    0,  736,  738,
      738,  738,    0,    0,  738,  741,  741,    0,    0,  741,

      742,  742,    0,    0,  742,  743,  743,    0,    0,  743,
      744,  744,  744,    0,    0,  744,  747,  747,  747,    0,
        0,  747,  750,  750,    0,    0,  750,  751,  751,    0,
        0,  751,  752,  752,    0,    0,  752,  753,  753,  753,
        0,    0,  753,  757,  757,  757,  757,    0,    0,  757,
      758,  758,  758,    0,    0,  758,  761,  761,    0,    0,
      761,  762,  762,    0,    0,  762,  763,  763,    0,    0,
      763,  764,  764,  764,    0,    0,  764,  765,  765,  765,
      765,    0,    0,  765,  766,  766,  766,    0,    0,  766,
      770,  770,  770,    0,    0,  770,  773,  773,    0,    0,

      773,  774,  774,    0,    0,  774,  775,  775,    0,    0,
      775,  776,  776,  776,    0,    0,  776,  777,  777,  777,
        0,    0,  777,  782,  782,  782,  782,    0,    0,  782,
      783,  783,  783,    0,    0,  783,  785,  785,    0,    0,
      785,  786,  786,    0,    0,  786,  787,  787,    0,    0,
      787,  788,  788,    0,    0,  788,  789,  789,  789,    0,
        0,  789,  790,  790,  790,  790,    0,    0,  790,  791,
      791,  791,    0,    0,  791,  792,  792,  792,  792,    0,
        0,  792,  793,  793,  793,    0,    0,  793,  799,  799,
      799,    0,    0,  799,  800,  800,    0,    0,  800,  801,

      801,    0,    0,  801,  802,  802,    0,    0,  802,  803,
      803,  803,    0,    0,  803,  804,  804,  804,    0,    0,
      804,  805,  805,  805,    0,    0,  805,  812,  812,  812,
      812,    0,    0,  812,  813,  813,  813,    0,    0,  813,
      814,  814,    0,    0,  814,  815,  815,    0,    0,  815,
      816,  816,    0,    0,  816,  817,  817,    0,    0,  817,
      818,  818,  818,    0,    0,  818,  819,  819,  819,  819,
        0,    0,  819,  820,  820,  820,    0,    0,  820,  821,
      821,  821,  821,    0,    0,  821,  822,  822,  822,    0,
        0,  822,  823,  823,  823,  823,    0,    0,  823,  824,

      824,  824,    0,    0,  824,  831,  831,  831,    0,    0,
      831,  832,  832,    0,    0,  832,  833,  833,    0,    0,
      833,  834,  834,    0,    0,  834,  835,  835,  835,    0,
        0,  835,  836,  836,  836,    0,    0,  836,  837,  837,
      837,    0,    0,  837,  838,  838,  838,    0,    0,  838,
      845,  845,  845,  845,    0,    0,  845,  846,  846,  846,
        0,    0,  846,  847,  847,    0,    0,  847,  848,  848,
        0,    0,  848,  849,  849,    0,    0,  849,  850,  850,
      850,    0,    0,  850,  851,  851,  851,  851,    0,    0,
      851,  852,  852,  852,    0,    0,  852,  853,  853,  853,

      853,    0,    0,  853,  854,  854,  854,    0,    0,  854,
      855,  855,  855,  855,    0,    0,  855,  856,  856,  856,
        0,    0,  856,  857,  857,  857,  857,    0,    0,  857,
      858,  858,  858,    0,    0,  858,  868,  868,  868,    0,
        0,  868,  869,  869,    0,    0,  869,  870,  870,    0,
        0,  870,  871,  871,    0,    0,    0,  871,  872,  872,
        0,    0,  872,  874,  874,  874,    0,    0,  874,  876,
      876,  876,    0,    0,  876,  878,  878,  878,    0,    0,
      878,  880,  880,  880,    0,    0,  880,  882,  882,  882,
        0,    0,  882,  889,  889,  889,  889,    0,    0,  889,

      890,  890,  890,    0,    0,  890,  891,  891,    0,    0,
      891,  893,  893,    0,    0,  893,  894,  894,    0,    0,
      894,  895,  895,    0,    0,    0,  895,  896,  896,  896,
      896,    0,    0,  896,  897,  897,    0,    0,    0,  897,
      898,  898,  898,  898,    0,    0,  898,  899,  899,    0,
        0,    0,  899,  900,  900,  900,  900,    0,    0,  900,
      901,  901,    0,    0,    0,  901,  902,  902,  902,  902,
        0,    0,  902,  903,  903,    0,    0,    0,  903,  904,
      904,  904,  904,    0,    0,  904,  905,  905,    0,    0,
        0,  905,  913,  913,  913,    0,    0,  913,  916,    0,

      916,  916,    0,    0,  916,  917,  917,    0,    0,    0,
      917,  918,  918,    0,    0,    0,  918,  919,  919,    0,
        0,    0,  919,  920,  920,    0,    0,    0,  920,  921,
      921,    0,    0,    0,  921,  922,  922,    0,    0,    0,
      922,  923,  923,    0,    0,    0,  923,  930,  930,  930,
      930,    0,    0,  930,  931,  931,    0,    0,    0,  931,
      934,  934,    0,    0,    0,  934,  935,  935,    0,    0,
        0,  935,  936,  936,    0,    0,    0,  936,  937,  937,
        0,    0,    0,  937,  938,  938,    0,    0,    0,  938,
      939,  939,    0,    0,    0,  939,  940,  940,    0,    0,

        0,  940,  946,  946,    0,    0,    0,  946,  949,  949,
        0,    0,    0,  949,  954,  954,    0,    0,    0,  954,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "template.ll"
#define INITIAL 0
#line 2 "template.ll"
#include <string.h>
#include "y.tplt_tab.h"
int tplt_linenum = 1;
extern char* tpltlval;
#define YY_NO_UNPUT 1
#define comment 1

/*
 * IPv6 address representation in Augmented Backus-Naur Form (ABNF).
 * Representation taken from email by Roy T. Fielding <roy.fielding@day.com>
 * to uri@w3.org mailing list on 05 Dec 2002:
 *   http://lists.w3.org/Archives/Public/uri/2002Dec/0000.html
 *
 *    IPv6address   = (                          6( h4 ":" ) ls32 )
 *                  / (                     "::" 5( h4 ":" ) ls32 )
 *                  / ( [              h4 ] "::" 4( h4 ":" ) ls32 )
 *                  / ( [ *1( h4 ":" ) h4 ] "::" 3( h4 ":" ) ls32 )
 *                  / ( [ *2( h4 ":" ) h4 ] "::" 2( h4 ":" ) ls32 )
 *                  / ( [ *3( h4 ":" ) h4 ] "::"    h4 ":"   ls32 )
 *                  / ( [ *4( h4 ":" ) h4 ] "::"             ls32 )
 *                  / ( [ *5( h4 ":" ) h4 ] "::"             h4   )
 *                  / ( [ *6( h4 ":" ) h4 ] "::"                  )
 *
 *    ls32          = ( h4 ":" h4 ) / IPv4address
 *                  ; least-significant 32 bits of address
 *    h4            = 1*4HEXDIG
 *    IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet
 *    dec-octet     = 1*2DIGIT                      ; 0-9, 00-99
 *                  / ( "0" / "1" ) 2DIGIT          ; 000-199
 *                  / "2" %x30-34 DIGIT             ; 200-249
 *                  / "25" %x30-35                  ; 250-255
 *
 */
#line 1694 "lex.tplt.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 61 "template.ll"


#line 1848 "lex.tplt.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 720 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4421 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 63 "template.ll"
{
	return UPLEVEL;
	}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 67 "template.ll"
{
	return DOWNLEVEL;
	}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 71 "template.ll"
/* whitespace */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 73 "template.ll"
{
	/* newline is not significant */
	tplt_linenum++;
	}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 78 "template.ll"
{
	return END;
	}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 82 "template.ll"
{
	return COLON;
	}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 86 "template.ll"
{
	return ASSIGN_DEFAULT;
	}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 90 "template.ll"
{
	return LISTNEXT;
	}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 94 "template.ll"
{
	tpltlval = strdup(tplttext);
	return RETURN;
	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 99 "template.ll"
{
	tpltlval = strdup(tplttext);
	return TEXT_TYPE;
	}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 104 "template.ll"
{
	tpltlval = strdup(tplttext);
	return INT_TYPE;
	}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 109 "template.ll"
{
	tpltlval = strdup(tplttext);
	return UINT_TYPE;
	}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 114 "template.ll"
{
	tpltlval = strdup(tplttext);
	return BOOL_TYPE;
	}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 119 "template.ll"
{
	tpltlval = strdup(tplttext);
	return TOGGLE_TYPE;
	}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 124 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV4_TYPE;
	}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 129 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV4NET_TYPE;
	}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 134 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV6_TYPE;
	}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 139 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV6NET_TYPE;
	}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 144 "template.ll"
{
	tpltlval = strdup(tplttext);
	return MACADDR_TYPE;
	}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 149 "template.ll"
{
	tpltlval = strdup(tplttext);
	return BOOL_VALUE;
	}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 154 "template.ll"
{
	tpltlval = strdup(tplttext);
	return BOOL_VALUE;
	}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 159 "template.ll"
{
	tpltlval = strdup(tplttext);
	return INTEGER_VALUE;
	}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 164 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV4_VALUE;
	}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 169 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV4NET_VALUE;
	}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 174 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV6_VALUE;
	}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 179 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV6NET_VALUE;
	}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 184 "template.ll"
{
	tpltlval = strdup(tplttext);
	return MACADDR_VALUE;
	}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 189 "template.ll"
{
	tpltlval = strdup("@");
	return VARDEF;
	}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 194 "template.ll"
{
	tpltlval = strdup(tplttext);
	return COMMAND;
	}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 199 "template.ll"
{
	tpltlval = strdup(tplttext);
	return VARIABLE;
	}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 204 "template.ll"
{
	tpltlval = strdup(tplttext);
	return LITERAL;
	}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 209 "template.ll"
{
	tpltlval = strdup(tplttext);
	return STRING;
	}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 214 "template.ll"
BEGIN(comment);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 216 "template.ll"
/* eat up anything that's not a '*' */
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 218 "template.ll"
/* eat up '*'s not followed by "/"s */
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 220 "template.ll"
tplt_linenum++;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 222 "template.ll"
BEGIN(INITIAL);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 224 "template.ll"
{
	/* everything else is a syntax error */
	return SYNTAX_ERROR;
	}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 230 "template.ll"
ECHO;
	YY_BREAK
#line 2216 "lex.tplt.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 720 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 720 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 719);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 230 "template.ll"

