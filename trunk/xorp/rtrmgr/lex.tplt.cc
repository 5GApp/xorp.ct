#define yy_create_buffer tplt_create_buffer
#define yy_delete_buffer tplt_delete_buffer
#define yy_scan_buffer tplt_scan_buffer
#define yy_scan_string tplt_scan_string
#define yy_scan_bytes tplt_scan_bytes
#define yy_flex_debug tplt_flex_debug
#define yy_init_buffer tplt_init_buffer
#define yy_flush_buffer tplt_flush_buffer
#define yy_load_buffer_state tplt_load_buffer_state
#define yy_switch_to_buffer tplt_switch_to_buffer
#define yyin tpltin
#define yyleng tpltleng
#define yylex tpltlex
#define yyout tpltout
#define yyrestart tpltrestart
#define yytext tplttext

#line 19 "lex.tplt.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 * $FreeBSD: src/usr.bin/lex/flex.skl,v 1.4 1999/10/27 07:56:44 obrien Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 39
#define YY_END_OF_BUFFER 40
static yyconst short int yy_accept[720] =
    {   0,
        0,    0,   34,   34,   40,   38,    3,    4,   38,   38,
       38,    8,   38,   38,   22,   22,   22,    6,    5,    7,
       31,   31,   31,   31,   31,   31,   31,   31,    1,    2,
       34,   36,   35,    3,   28,    0,   32,    0,   29,    0,
       22,    9,   33,    0,   22,    0,    0,   22,   22,   22,
       25,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   34,   35,   35,   37,    0,   29,    0,    0,
        0,   22,    0,    0,    0,   25,   22,   22,    0,   25,
       25,   25,   25,   31,   31,   31,   11,   31,   31,   31,
       31,   10,   12,   30,    0,    0,    0,    0,    0,    0,

       22,    0,    0,    0,    0,   25,   25,   25,   25,   26,
       26,    0,   25,    0,   25,   25,   25,   25,   31,   13,
       31,   15,   17,   31,   31,   20,    0,    0,    0,    0,
        0,    0,    0,   25,   25,    0,   25,   25,   25,   25,
       26,   26,   26,    0,    0,    0,   25,   25,   25,   25,
       25,   25,   25,   21,   31,   31,   31,   31,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   26,    0,
        0,    0,    0,    0,   25,    0,   25,    0,   25,   25,
       25,   25,   31,   31,   31,   14,   23,   23,   23,    0,

        0,    0,    0,   25,   25,    0,   25,   25,   25,   25,
       25,   25,    0,   25,   25,   25,   25,    0,    0,    0,
        0,    0,    0,    0,   25,   25,   25,   25,   25,   25,
       25,   16,   18,   19,    0,   23,   23,   23,   23,    0,
        0,    0,    0,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   25,    0,   25,    0,   25,   25,   25,   25,   24,
       24,   24,   23,    0,    0,    0,   25,   25,    0,   25,
       25,   25,   25,   25,   25,    0,   25,   25,   25,   25,

       25,   25,    0,   25,   25,   25,   25,   25,   25,   25,
        0,    0,    0,    0,    0,    0,    0,    0,   25,   25,
       25,   25,   25,   25,   25,    0,    0,    0,    0,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   25,    0,
       25,    0,   25,   25,   25,   25,    0,    0,    0,   25,
       25,    0,   25,   25,   25,   25,   25,   25,    0,   25,
       25,   25,   25,   25,   25,    0,   25,   25,   25,   25,

       25,   25,    0,   25,   25,   25,   25,   25,   25,   25,
       25,    0,    0,    0,    0,    0,    0,    0,    0,   25,
       25,   25,   25,   25,   25,   25,    0,    0,    0,    0,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   25,    0,   25,    0,
       25,   25,   25,   25,    0,    0,    0,    0,    0,   25,
        0,   25,    0,   25,   25,   25,   25,   25,   25,    0,

       25,   25,   25,   25,   25,   25,    0,   25,   25,   25,
       25,   25,   25,    0,   25,   25,   25,   25,   25,   25,
        0,   25,   25,   25,   25,   25,   25,   25,   25,    0,
        0,    0,    0,    0,    0,    0,    0,   25,   25,   25,
       25,   25,   25,   25,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   25,    0,
       25,    0,   25,   25,   25,   25,    0,    0,    0,    0,

        0,    0,   25,   25,    0,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
        0,    0,    0,    0,    0,    0,    0,    0,   25,   25,
       25,   25,    0,    0,    0,    0,    0,    0,    0,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       25,   25,   27,    0,    0,    0,    0,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,    0,    0,
        0,    0,    0,   25,    0,    0,    0,    0,    0,   25,
       25,   25,   25,    0,    0,    0,    0,    0,   25,   25,

       25,   25,    0,   25,   25,   25,   25,    0,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    4,    6,    7,    4,    1,    8,
        9,   10,    4,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   22,   23,   24,   25,    4,
       26,   27,    4,   28,   29,   29,   29,   29,   29,   29,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
        4,    4,    4,    4,   31,    4,   32,   33,   34,   35,

       36,   37,   38,   30,   39,   30,   30,   40,   41,   42,
       43,   44,   30,   45,   46,   47,   48,   49,   30,   50,
       30,   30,   51,    4,   52,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[53] =
    {   0,
        1,    2,    3,    2,    2,    2,    2,    2,    4,    5,
        2,    6,    7,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,   10,    1,    2,   11,   12,   13,   14,
       15,   13,   13,   13,   13,   13,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
        2,    2
    } ;

static yyconst short int yy_base[966] =
    {   0,
        0,    0,   50,   51, 3214, 4418,   53, 4418, 3207, 3203,
        0, 4418,   44, 3200,   69,   92,   47, 3185, 4418, 4418,
      104,    0, 3152, 3161,   39, 3160,   25, 3173, 4418, 4418,
        0, 4418,   59, 3188, 4418, 3184, 4418,    0,    0,   47,
     3176, 4418, 4418,   61,  142, 3163, 3149,  165,   73,  174,
      184,    0,  210, 3119, 3109, 3097, 3064, 3076, 3071, 3060,
     3011, 3040,    0,  158,  159, 4418, 3045,    0, 3040,  248,
     3039,  259, 2978, 2977, 2974,  283,    0, 2984, 2980,  308,
      331,  340,  200,  346, 2906, 2899,    0,   78, 2910, 2903,
     2904,    0,    0, 4418, 2881,  114, 2876, 2873,  371, 2872,

      199, 2860, 2832, 2831, 2829,  379,  402,  411,  418,    0,
      193,  220,  430,  453,  467,  477,  488,  496, 2828,    0,
     2815, 2808, 2797, 2793, 2761,    0, 2787,  508, 2784, 2783,
     2771, 2770, 2754,  518,  543,  566,  580,  590,  601,  609,
     4418,    0, 2754, 2762,  621, 2761,  632,  634,  646,  669,
      418,  679,  681,    0, 2737, 2736, 2713, 2711,  269, 2733,
     2732,  498, 2731, 2719, 2700, 2699, 2697,  693,  716,  611,
      726,  728,  730,  742,  765,  634,  775,  777, 4418,  292,
     2707, 2706,  787, 2705,  784,  318,  796,  819,  833,  843,
      854,  862, 2657, 2655, 2655,    0, 2684,  873, 2683, 2683,

     2649, 2648, 2646,  883,  908,  931,  945,  955,  966,  974,
      975,  987, 1010, 1024, 1034, 1045, 1053, 2656, 1065, 2655,
     2654, 2640, 1076, 2638, 1087, 1089, 1101, 1124,  681, 1134,
     1136,    0,    0,    0, 1146, 2635, 2633,  865, 2632, 2621,
     2598, 2597, 2595, 1157, 1180,  777, 1190, 1192, 1194, 1206,
     1229,  976, 1239, 1241, 1243, 1245, 1257, 1280, 1055, 1290,
     1292,  355, 2605, 2604, 1302, 2603,  389, 2589, 2587, 1310,
     2585, 1310,  424, 1322, 1345, 1359, 1369, 1380, 1388,  440,
      462, 4418, 2582, 2571, 2570, 2547, 1399, 1424, 1447, 1461,
     1471, 1482, 1490, 1491, 1503, 1526, 1540, 1550, 1561, 1569,

     1570, 1582, 1605, 1619, 1629, 1640, 1648, 2556, 1659, 2554,
     2554, 2553, 1670, 2552, 2538, 2536, 1681, 2534, 1692, 1694,
     1706, 1729, 1089, 1739, 1741, 2522, 2521, 2520, 2519, 1753,
     1776, 1136, 1786, 1788, 1790, 1802, 1825, 1292, 1835, 1837,
     1839, 1841, 1853, 1876, 1390, 1886, 1888, 1890, 1892, 1904,
     1927, 1492, 1937, 1939, 2508, 2507, 1572, 2505,  527, 2505,
     2504, 1650, 2503,  553, 2484, 2483, 1949, 2481, 1946,  575,
     1958, 1981, 1995, 2005, 2016, 2024, 2469, 2468, 2467, 2035,
     2060, 2083, 2097, 2107, 2118, 2126, 2127, 2139, 2162, 2176,
     2186, 2197, 2205, 2206, 2218, 2241, 2255, 2265, 2276, 2284,

     2285, 2297, 2320, 2334, 2344, 2355, 2363, 2465, 2463, 2374,
     2438, 2438, 2436, 2385, 2435, 2434, 2433, 2396, 2419, 2407,
     2409, 2421, 2444, 1694, 2454, 2456, 2406, 2386, 2375, 2466,
     2491, 2514, 1741, 2524, 2526, 2528, 2540, 2563, 1939, 2573,
     2575, 2577, 2579, 2591, 2614, 2026, 2624, 2626, 2628, 2630,
     2642, 2665, 2128, 2675, 2677, 2679, 2681, 2693, 2716, 2207,
     2726, 2728, 2372, 2337, 2287, 2336,  656, 2334, 2333, 2365,
     2332,  703, 2331, 2315, 2738, 2314, 2735,  730, 2747, 2770,
     2784, 2794, 2805, 2813, 2301, 2300, 2825, 2848, 2409, 2309,
     2298, 2859,    0, 2873, 2883, 2894, 2902, 2903, 2915,    0,

     2929, 2939, 2950, 2958, 2959, 2971,    0, 2985, 2995, 3006,
     3014, 3015, 3027,    0, 3041, 3051, 3062, 3070, 3071, 3083,
        0, 3097, 3107, 3118, 3126, 2258, 2257, 3137, 2254, 2254,
     2253, 3148, 2252, 2236, 2235, 3159, 2233, 3170, 3172, 3184,
     3207, 2456, 3217, 3219, 2221, 2220,  752, 3231, 2219, 2204,
     3254, 3265,  143, 2179, 3221, 3273, 2178, 3277, 3279, 3281,
     2175, 3285, 3293, 3297, 2174, 3299, 3301, 3305, 2173, 3313,
     3317, 3319, 2172, 3321, 2156, 2155, 2816, 2153,  806, 2153,
     2152, 3128, 2151,  828, 2136, 2101, 3331, 2100, 3314,  892,
     3339,    0, 3353, 3363, 3374, 3382, 2086, 2096, 3394, 2095,

      249,  361, 2093, 2077,  611, 2076, 3394, 2074, 3405, 2073,
     3406, 2072, 3407, 2071, 3408, 2052, 2051, 2049, 3419, 2048,
     2048, 2047, 3430, 2046, 2034, 2026, 3441, 1999, 3452, 3454,
     1997, 3456, 1984,  918, 1994, 1993, 3384, 1992, 1965, 1974,
     1972, 1971, 1970, 1969, 1921, 1920, 1918, 1917, 2905, 1916,
      940, 1916, 1902, 3466, 1900,  997, 1898, 1896, 3474, 1895,
     3474, 1893, 1860, 1870, 3486, 1868, 1867, 1865, 1864, 1850,
     1848, 1846, 1844, 1843, 1842, 1799, 3496, 1797, 1796, 1682,
     3507, 1671, 1658, 1520, 1019, 1517, 1500, 3518, 1442, 1438,
     1416, 2961, 1397, 1111, 1390, 1340, 3526, 1334, 1319, 1299,

     3533, 1274, 1272, 1254, 1247, 3543, 1203, 1119, 1076, 1065,
     3017, 1062, 1054, 1023, 3073, 1004,  983,  944, 4418, 3566,
     3580,   66, 3590, 3596, 3611, 3626, 3630, 3639,  930, 3646,
     3651, 3661,  280,  304, 3668, 3673, 3678,  868, 3684,  837,
      329, 3689, 3694, 3699, 3705,  818,  764, 3711,  400,  539,
     3716, 3721, 3727,  744,  564,  648, 3734, 3740,  739,  667,
     3745, 3750, 3755, 3761, 3768, 3774,  715,  695,  668, 3780,
      109,  368, 3785, 3790, 3795, 3801, 3807,  714,  742,  763,
      817, 3814, 3820,  452, 3825, 3830, 3835, 3841, 3848, 3854,
     3861, 3867,  623,  904,  584,  929,  565, 3873, 3878, 3883,

     3888, 3894, 3900, 3906,  475,  588, 1008, 1103, 1122, 1150,
     3913, 3919, 3924, 3929, 3934, 3940, 3947, 3953, 3960, 3966,
     3973, 3979,  841,  513, 1175,  510, 1176,  471, 3985, 3990,
     3995, 4000, 4006, 4012, 4018, 4024,  953, 1032, 1202, 1203,
     1206, 1224, 4031, 4037, 4042, 4047, 4053, 4060, 4066, 4073,
     4079, 4086, 4092, 4099, 4105, 1179, 1228,  401, 1225, 1253,
      364, 1257, 1275,  330, 4111, 4116, 4121, 4127, 4132,  301,
     4138,  536, 4144,  901, 4150, 1274, 4156, 1339, 4162, 1323,
     1341, 1362, 1363, 1416, 1417, 4169, 4175, 4180,  281, 4185,
     4190, 4196, 4203, 4209, 4216, 4222, 4229, 4235, 4242, 4248,

     4255, 4261, 1367,  229, 1420,  206, 1442,  203, 1441, 4267,
     4272, 1464, 1465, 4279, 4285, 4291, 4297, 4303, 4309, 4315,
     4321, 1469, 1520, 1524, 1543, 1544, 1600, 4328, 4334, 4339,
      161, 1601, 4345, 4351, 4357, 4363, 4369, 4375, 4381, 1548,
      123, 1622,   91, 1623, 4387, 4392, 1708, 1724, 4398, 1604,
     1627, 1725, 1755, 4404,   63, 1771, 1728,   49, 1772, 1775,
     1797, 1799, 1819, 1821, 1824
    } ;

static yyconst short int yy_def[966] =
    {   0,
      719,    1,  720,  720,  719,  719,  719,  719,  721,  719,
      722,  719,  723,  719,  719,   15,   16,  719,  719,  719,
      719,  724,   21,   21,  724,  724,  724,  724,  719,  719,
      725,  719,  726,  719,  719,  721,  719,  727,  728,  723,
       40,  719,  719,  729,  719,  730,  731,   45,   48,   48,
      719,  724,  719,  724,   53,  724,  724,  724,  724,  724,
      724,  724,  725,  726,  726,  719,  732,  728,  733,  719,
      734,  719,  735,  736,  737,  719,   72,   72,  738,  719,
       80,   81,  739,   21,  724,  724,  724,  724,  724,  724,
      724,  724,  724,  719,  732,  740,  734,  741,  719,  719,

       40,  719,  742,  743,  744,  719,  106,  107,  745,  746,
      746,  747,  719,  719,  748,  113,  748,  748,  724,  724,
      724,  724,  724,  724,  724,  724,  749,  719,  750,  719,
      743,  751,  752,  719,  719,  719,  753,  135,  753,  753,
      719,  754,  754,  755,  719,  756,  757,  757,  719,  149,
      150,  758,  757,  724,  724,  724,  724,  724,  759,  750,
      760,  719,  719,  761,  719,  762,  763,  719,  168,  169,
      764,  765,  765,  719,  174,  175,  766,  765,  719,  767,
      756,  768,  719,  719,  719,  769,  719,  719,  770,  187,
      770,  770,  724,  724,  724,  724,  771,  719,  772,  719,

      773,  774,  775,  719,  719,  719,  776,  205,  776,  776,
      719,  719,  719,  777,  212,  777,  777,  778,  719,  779,
      719,  780,  719,  781,  782,  782,  719,  227,  228,  783,
      782,  724,  724,  724,  719,  772,  784,  719,  719,  785,
      719,  786,  787,  719,  244,  245,  788,  789,  789,  719,
      250,  251,  790,  789,  791,  791,  719,  257,  258,  792,
      791,  793,  779,  794,  719,  719,  795,  781,  796,  719,
      719,  719,  797,  719,  719,  798,  274,  798,  798,  235,
      719,  719,  719,  799,  800,  801,  719,  719,  719,  802,
      288,  802,  802,  719,  719,  719,  803,  295,  803,  803,

      719,  719,  719,  804,  302,  804,  804,  805,  719,  806,
      719,  807,  719,  808,  719,  809,  719,  810,  811,  811,
      719,  321,  322,  812,  811,  813,  719,  814,  815,  719,
      330,  331,  816,  817,  817,  719,  336,  337,  818,  817,
      819,  819,  719,  343,  344,  820,  819,  821,  821,  719,
      350,  351,  822,  821,  806,  823,  719,  719,  824,  808,
      825,  719,  719,  826,  810,  827,  719,  719,  719,  828,
      719,  719,  829,  371,  829,  829,  830,  831,  832,  719,
      719,  719,  833,  381,  833,  833,  719,  719,  719,  834,
      388,  834,  834,  719,  719,  719,  835,  395,  835,  835,

      719,  719,  719,  836,  402,  836,  836,  719,  837,  719,
      838,  719,  839,  719,  840,  719,  841,  719,  842,  843,
      843,  719,  422,  423,  844,  843,  845,  719,  846,  719,
      719,  431,  432,  847,  848,  848,  719,  437,  438,  849,
      848,  850,  850,  719,  444,  445,  851,  850,  852,  852,
      719,  451,  452,  853,  852,  854,  854,  719,  458,  459,
      855,  854,  856,  857,  719,  719,  858,  859,  860,  719,
      719,  861,  862,  863,  719,  719,  719,  864,  719,  719,
      865,  479,  865,  865,  866,  867,  719,  487,  488,  868,
      869,  719,  870,  871,  492,  871,  871,  719,  719,  872,

      873,  499,  873,  873,  719,  719,  874,  875,  506,  875,
      875,  719,  719,  876,  877,  513,  877,  877,  719,  719,
      878,  879,  520,  879,  879,  719,  880,  719,  881,  719,
      882,  719,  883,  719,  884,  719,  885,  886,  886,  719,
      540,  541,  887,  886,  888,  719,  889,  719,  890,  891,
      548,  891,  891,  892,  893,  893,  894,  893,  895,  895,
      896,  895,  897,  897,  898,  897,  899,  899,  900,  899,
      901,  901,  902,  901,  881,  903,  719,  719,  904,  883,
      905,  719,  719,  906,  885,  907,  719,  719,  719,  908,
      719,  909,  910,  591,  910,  910,  911,  912,  719,  913,

      914,  914,  915,  719,  914,  916,  719,  917,  719,  918,
      719,  919,  719,  920,  719,  921,  719,  922,  719,  923,
      719,  924,  719,  925,  719,  926,  719,  927,  928,  928,
      929,  928,  930,  931,  913,  932,  719,  719,  719,  933,
      934,  935,  936,  937,  938,  939,  923,  940,  719,  719,
      941,  925,  942,  719,  719,  943,  927,  944,  719,  719,
      719,  945,  946,  947,  719,  948,  719,  949,  719,  719,
      719,  719,  719,  719,  719,  950,  719,  951,  719,  952,
      719,  953,  719,  954,  955,  948,  956,  719,  719,  951,
      957,  719,  719,  958,  953,  959,  719,  719,  719,  960,

      719,  961,  719,  719,  962,  719,  963,  719,  961,  964,
      719,  719,  963,  965,  719,  719,  719,  719,    0,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719
    } ;

static yyconst short int yy_nxt[4471] =
    {   0,
        6,    7,    8,    6,    9,   10,   11,    6,    6,    6,
       12,   13,    6,   14,   15,   15,   16,   17,   17,   17,
       17,   17,   17,   18,   19,   20,    6,    6,   21,   22,
        6,   21,   23,   21,   21,   21,   24,   22,   25,   22,
       26,   22,   22,   22,   22,   22,   27,   28,   22,   22,
       29,   30,   32,   32,   34,   40,   56,  707,   40,   33,
       33,   50,   50,   50,   50,   50,   50,   59,   65,   60,
       42,  702,   66,  719,   61,   69,   69,   70,   39,   39,
       35,   44,   57,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   46,   78,   78,   78,  122,   47,  123,  682,

       47,   47,   47,   47,   47,   47,   48,   48,   48,   48,
       48,   49,   50,   50,   50,   52,  236,  236,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   46,  127,  127,
      128,  678,   53,   52,   52,   53,   53,   53,   53,   53,
       53,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   44,  547,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   73,  549,  719,   65,  666,
       74,  719,   66,   74,   74,   74,   74,   74,   74,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   79,   80,   80,

       81,   82,   82,   82,   82,   82,   82,  142,  142,  143,
      719,  628,   83,   79,  624,   83,   83,   83,   83,   83,
       83,   52,   46,  114,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   73,  144,  144,  145,  620,   84,   52,
       52,   84,   84,   84,   84,   84,   84,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       96,  547,   98,   98,   98,   98,   98,   99,  100,  100,
      100,   44,  549,  101,  101,  101,  101,  101,  101,  101,
      101,  101,   46,  197,  197,  198,   97,  102,   97,  600,
      102,  102,  102,  102,  102,  102,   79,  106,  106,  107,

      108,  108,  108,  108,  108,  108,  218,  218,  219,  557,
      100,  109,  100,  557,  109,  109,  109,  109,  109,  109,
      112,   79,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  114,  222,  222,  223,  130,  115,  130,  537,  115,
      115,  115,  115,  115,  115,  116,  116,  116,  116,  116,
      117,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  308,
      308,  309,  533,  719,  119,  239,  239,  119,  119,  119,
      119,  119,  119,   96,  549,  130,  130,  130,  130,  130,
      130,  112,   79,  135,  135,  135,  135,  135,  135,  135,

      135,  135,  136,  312,  312,  313,  160,  137,  160,  529,
      137,  137,  137,  137,  137,  137,  138,  138,  138,  138,
      138,  139,  140,  140,  140,  140,  140,  140,  140,  140,
      140,   79,  192,  192,  192,  192,  192,  192,  316,  316,
      317,  136,  112,   79,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  114,  282,  282,  282,  282,  148,  283,
      283,  148,  148,  148,  148,  148,  148,  149,  149,  150,
      151,  151,  151,  151,  151,  151,  282,  282,  282,  419,
       79,  152,  355,  355,  152,  152,  152,  152,  152,  152,
      114,  153,  153,  153,  153,  153,  153,  153,  153,  153,

      112,   79,  153,  153,  153,  153,  153,  153,  112,   79,
      159,  114,  200,  200,  200,  200,  200,  200,  415,  114,
      159,  411,  161,  161,  161,  161,  161,  162,  163,  163,
      163,   79,  168,  168,  169,  170,  170,  170,  170,  170,
      170,  409,  409,  410,  561,  163,  171,  163,  561,  171,
      171,  171,  171,  171,  171,  112,   79,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  136,  413,  413,  414,
      181,  173,  181,  318,  173,  173,  173,  173,  173,  173,
      174,  174,  175,  176,  176,  176,  176,  176,  176,  417,
      417,  418,  314,   79,  177,  358,  358,  177,  177,  177,

      177,  177,  177,  136,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  112,   79,  178,  178,  178,  178,  178,
      178,  112,   79,  547,  136,  210,  210,  210,  210,  210,
      210,  310,  136,  180,  549,  182,  182,  182,  182,  182,
      183,  184,  184,  184,  112,   79,  719,   79,  217,  217,
      217,  217,  217,  217,  184,  114,  184,  114,  186,   79,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  188,
      527,  527,  528,  200,  189,  200,  224,  189,  189,  189,
      189,  189,  189,  190,  190,  190,  190,  190,  191,  192,
      192,  192,   79,  112,   79,  279,  279,  279,  279,  279,

      279,  221,  188,  221,  114,  112,   79,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  206,  531,  531,  532,
      263,  207,  263,  220,  207,  207,  207,  207,  207,  207,
      208,  208,  208,  208,  208,  209,  210,  210,  210,   79,
      112,   79,  719,   79,  535,  535,  536,  199,  266,  206,
      266,  136,  179,  136,  186,   79,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  213,  598,  598,  599,  268,
      214,  268,  146,  214,  214,  214,  214,  214,  214,  215,
      215,  215,  215,  215,  216,  217,  217,  217,   79,  112,
       79,  293,  293,  293,  293,  293,  293,   79,  213,  180,

      136,  221,  221,  221,  221,  221,  221,  114,  186,   79,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  188,
      618,  618,  619,  271,  226,  271,  141,  226,  226,  226,
      226,  226,  226,  227,  227,  228,  229,  229,  229,  229,
      229,  229,  622,  622,  623,  129,   79,  230,  408,  408,
      230,  230,  230,  230,  230,  230,  188,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  186,   79,  231,  231,
      231,  231,  231,  231,  186,   79,  110,  188,  235,  283,
      283,  283,  283,  283,  283,  188,  235,  237,  237,  237,
      237,  237,  238,  239,  239,  239,   79,  244,  244,  245,

      246,  246,  246,  246,  246,  246,  626,  626,  627,  565,
      311,  247,  311,  565,  247,  247,  247,  247,  247,  247,
      112,   79,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  206,  664,  664,  665,  315,  249,  315,   71,  249,
      249,  249,  249,  249,  249,  250,  250,  251,  252,  252,
      252,  252,  252,  252,  676,  676,  677,   79,   79,  253,
      463,  463,  253,  253,  253,  253,  253,  253,  206,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  112,   79,
      254,  254,  254,  254,  254,  254,  112,   79,   79,  206,
      300,  300,  300,  300,  300,  300,   79,  206,  136,  186,

       79,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      213,  680,  680,  681,  360,  256,  360,   79,  256,  256,
      256,  256,  256,  256,  257,  257,  258,  259,  259,  259,
      259,  259,  259,  700,  700,  701,   79,   79,  260,  466,
      466,  260,  260,  260,  260,  260,  260,  213,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  186,   79,  261,
      261,  261,  261,  261,  261,  186,   79,   79,  213,  307,
      307,  307,  307,  307,  307,   79,  213,  262,   79,  264,
      264,  264,  264,  264,  265,  266,  266,  266,  267,   79,
      269,  269,  269,  269,  269,  270,  271,  271,  271,  186,

       79,  719,   79,  376,  376,  376,  376,  376,  376,  363,
      188,  363,  188,  273,   79,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  275,  705,  705,  706,  365,  276,
      365,  694,  276,  276,  276,  276,  276,  276,  277,  277,
      277,  277,  277,  278,  279,  279,  279,   79,  186,   79,
      386,  386,  386,  386,  386,  386,  368,  275,  368,  188,
      280,  280,  280,  281,  282,  282,  282,  282,  282,  112,
       79,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      289,  412,  416,  412,  416,  290,  466,  466,  290,  290,
      290,  290,  290,  290,  291,  291,  291,  291,  291,  292,

      293,  293,  293,   79,  112,   79,  719,   79,  468,  471,
      468,  471,  473,  289,  473,  206,   79,  206,  186,   79,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  296,
      476,  471,  476,  471,  297,  526,  526,  297,  297,  297,
      297,  297,  297,  298,  298,  298,  298,  298,  299,  300,
      300,  300,   79,  112,   79,  186,   79,  719,   79,  530,
       79,  530,  296,  476,  206,  476,  213,   79,  213,  273,
       79,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      303,  534,  569,  534,  685,  304,  569,   79,  304,  304,
      304,  304,  304,  304,  305,  305,  305,  305,  305,  306,

      307,  307,  307,   79,  186,   79,  393,  393,  393,  393,
      393,  393,   79,  303,  262,  213,  311,  311,  311,  311,
      311,  311,  267,   79,  315,  315,  315,  315,  315,  315,
      575,  575,   79,  188,  273,   79,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  275,  694,  573,  578,  578,
      320,  573,  694,  320,  320,  320,  320,  320,  320,  321,
      321,  322,  323,  323,  323,  323,  323,  323,  580,  583,
      580,  583,   79,  324,  617,  617,  324,  324,  324,  324,
      324,  324,  275,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  273,   79,  325,  325,  325,  325,  325,  325,

      273,   79,  694,  275,  400,  400,  400,  400,  400,  400,
       79,  275,   79,  330,  330,  331,  332,  332,  332,  332,
      332,  332,  585,  588,  585,  588,  621,  333,  621,   79,
      333,  333,  333,  333,  333,  333,  112,   79,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  289,  625,  631,
      625,   79,  335,  631,  685,  335,  335,  335,  335,  335,
      335,  336,  336,  337,  338,  338,  338,  338,  338,  338,
      635,  638,  635,  638,   79,  339,  647,  647,  339,  339,
      339,  339,  339,  339,  289,  340,  340,  340,  340,  340,
      340,  340,  340,  340,  112,   79,  340,  340,  340,  340,

      340,  340,  112,   79,   79,  289,  407,  407,  407,  407,
      407,  407,  685,  289,  206,  186,   79,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  296,  650,  650,  685,
      652,  342,  652,   79,  342,  342,  342,  342,  342,  342,
      343,  343,  344,  345,  345,  345,  345,  345,  345,  655,
      657,  655,  657,   79,  346,  675,  675,  346,  346,  346,
      346,  346,  346,  296,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  186,   79,  347,  347,  347,  347,  347,
      347,  186,   79,   79,  296,   79,  408,  408,  408,  408,
      408,  408,  296,  213,  273,   79,  348,  348,  348,  348,

      348,  348,  348,  348,  348,  303,  660,  667,  660,  667,
      349,  690,  690,  349,  349,  349,  349,  349,  349,  350,
      350,  351,  352,  352,  352,  352,  352,  352,  679,  683,
      679,  683,   79,  353,  693,  693,  353,  353,  353,  353,
      353,  353,  303,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  273,   79,  354,  354,  354,  354,  354,  354,
      273,   79,  359,  303,  412,  412,  412,  412,  412,  412,
      656,  303,   79,  356,  356,  356,  356,  356,  357,  358,
      358,  358,  359,  694,  361,  361,  361,  361,  361,  362,
      363,  363,  363,  364,  694,  366,  366,  366,  366,  366,

      367,  368,  368,  368,  273,   79,  719,   79,  484,  484,
      484,  484,  484,  484,  686,  275,  686,  275,  370,   79,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  372,
      689,  695,  689,  695,  373,  704,  704,  373,  373,  373,
      373,  373,  373,  374,  374,  374,  374,  374,  375,  376,
      376,  376,   79,  273,   79,  497,  497,  497,  497,  497,
      497,  698,  372,  698,  275,  112,   79,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  382,  703,  708,  703,
      708,  383,  709,  709,  383,  383,  383,  383,  383,  383,
      384,  384,  384,  384,  384,  385,  386,  386,  386,   79,

      112,   79,  719,   79,  712,  712,  713,  713,  651,  382,
       79,  289,   79,  289,  186,   79,  388,  388,  388,  388,
      388,  388,  388,  388,  388,  389,  716,  716,  717,  717,
      390,  718,  718,  390,  390,  390,  390,  390,  390,  391,
      391,  391,  391,  391,  392,  393,  393,  393,   79,  112,
       79,  186,   79,  719,   79,   79,   79,   79,  389,   79,
      289,   79,  296,   79,  296,  273,   79,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  396,   79,   79,  634,
      685,  397,  685,  430,  397,  397,  397,  397,  397,  397,
      398,  398,  398,  398,  398,  399,  400,  400,  400,   79,

      186,   79,  273,   79,  719,   79,   79,  656,  656,  396,
      656,  296,  651,  303,  651,  303,  370,   79,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  403,  651,   79,
       79,   79,  404,   79,   79,  404,  404,  404,  404,  404,
      404,  405,  405,  405,  405,  405,  406,  407,  407,  407,
       79,  273,   79,  504,  504,  504,  504,  504,  504,   79,
      403,  364,  303,  416,  416,  416,  416,  416,  416,  275,
      370,   79,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  372,   79,   79,   79,   79,  421,   79,  549,  421,
      421,  421,  421,  421,  421,  422,  422,  423,  424,  424,

      424,  424,  424,  424,  634,  634,  634,  430,   79,  425,
       79,  656,  425,  425,  425,  425,  425,  425,  372,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  370,   79,
      426,  426,  426,  426,  426,  426,  370,   79,  656,  372,
      511,  511,  511,  511,  511,  511,  584,  372,   79,  431,
      431,  432,  433,  433,  433,  433,  433,  433,  651,  651,
      579,   79,   79,  434,   79,   79,  434,  434,  434,  434,
      434,  434,  112,   79,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  382,   79,   79,   79,   79,  436,   79,
       79,  436,  436,  436,  436,  436,  436,  437,  437,  438,

      439,  439,  439,  439,  439,  439,   79,  634,  634,  380,
       79,  440,  584,  584,  440,  440,  440,  440,  440,  440,
      382,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      112,   79,  441,  441,  441,  441,  441,  441,  112,   79,
       79,  382,  518,  518,  518,  518,  518,  518,  584,  382,
      289,  186,   79,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  389,  579,  579,  579,   79,  443,   79,   79,
      443,  443,  443,  443,  443,  443,  444,  444,  445,  446,
      446,  446,  446,  446,  446,   79,   79,   79,   79,   79,
      447,   79,   79,  447,  447,  447,  447,  447,  447,  389,

      448,  448,  448,  448,  448,  448,  448,  448,  448,  186,
       79,  448,  448,  448,  448,  448,  448,  186,   79,   79,
      389,  525,  525,  525,  525,  525,  525,  549,  389,  296,
      273,   79,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  396,  604,  430,  597,  584,  450,  584,  472,  450,
      450,  450,  450,  450,  450,  451,  451,  452,  453,  453,
      453,  453,  453,  453,  579,  579,  467,   79,   79,  454,
       79,   79,  454,  454,  454,  454,  454,  454,  396,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  273,   79,
      455,  455,  455,  455,  455,  455,  273,   79,   79,  396,

       79,  526,  526,  526,  526,  526,  526,  396,  303,  370,
       79,  456,  456,  456,  456,  456,  456,  456,  456,  456,
      403,  549,   79,  430,  329,  457,  472,  472,  457,  457,
      457,  457,  457,  457,  458,  458,  459,  460,  460,  460,
      460,  460,  460,  472,  467,  467,  467,   79,  461,   79,
       79,  461,  461,  461,  461,  461,  461,  403,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  370,   79,  462,
      462,  462,  462,  462,  462,  370,   79,  467,  403,  530,
      530,  530,  530,  530,  530,   79,  403,   79,  464,  464,
      464,  464,  464,  465,  466,  466,  466,  467,  430,  469,

      469,  469,  469,  469,  470,  471,  471,  471,  472,  329,
      474,  474,  474,  474,  474,  475,  476,  476,  476,  370,
       79,  719,   79,  553,  553,  553,  553,  553,  553,  287,
      372,  472,  372,  478,   79,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  480,  472,  364,  467,  467,  481,
      359,   79,  481,  481,  481,  481,  481,  481,  482,  482,
      482,  482,  482,  483,  484,  484,  484,   79,  370,   79,
      596,  596,  596,  596,  596,  596,   79,  480,   79,  372,
      487,  487,  488,  489,  489,  489,  489,  489,  489,  490,
      430,  329,  427,  364,  491,  364,  364,  491,  491,  491,

      491,  491,  491,  112,   79,  492,  492,  492,  492,  492,
      492,  492,  492,  492,  493,  359,  359,  359,   79,  494,
       79,   79,  494,  494,  494,  494,  494,  494,  495,  495,
      495,  495,  495,  496,  497,  497,  497,   79,  112,   79,
      719,   79,  380,  329,  243,  243,  364,  493,  364,  382,
      267,  382,  186,   79,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  500,  359,  359,  262,   79,  501,   79,
      329,  501,  501,  501,  501,  501,  501,  502,  502,  502,
      502,  502,  503,  504,  504,  504,   79,  112,   79,  186,
       79,  719,   79,  243,  204,  235,  500,  267,  382,  267,

      389,  267,  389,  273,   79,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  507,  262,  262,  262,  287,  508,
      243,  167,  508,  508,  508,  508,  508,  508,  509,  509,
      509,  509,  509,  510,  511,  511,  511,   79,  186,   79,
      273,   79,  719,   79,  284,  235,  235,  507,  235,  389,
      267,  396,  267,  396,  370,   79,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  514,  180,  262,  262,  243,
      515,  167,  167,  515,  515,  515,  515,  515,  515,  516,
      516,  516,  516,  516,  517,  518,  518,  518,   79,  273,
       79,  370,   79,  719,   79,  159,  235,  235,  514,  234,

      396,  233,  403,  232,  403,  478,   79,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  521,  180,  180,  180,
      204,  522,  167,  105,  522,  522,  522,  522,  522,  522,
      523,  523,  523,  523,  523,  524,  525,  525,  525,   79,
      370,   79,  134,  159,  159,  159,  196,  195,   79,  521,
      472,  403,  534,  534,  534,  534,  534,  534,  372,  478,
       79,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      480,  194,  193,  180,  180,  539,  719,  167,  539,  539,
      539,  539,  539,  539,  540,  540,  541,  542,  542,  542,
      542,  542,  542,  105,  164,   96,  159,   79,  543,  159,

      158,  543,  543,  543,  543,  543,  543,  480,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  478,   79,  544,
      544,  544,  544,  544,  544,  478,   79,  157,  480,   79,
      617,  617,  617,  617,  617,  617,  480,  547,  156,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  549,  155,
      154,   46,  134,  550,  105,  105,  550,  550,  550,  550,
      550,  550,  551,  551,  551,  551,  551,  552,  553,  553,
      553,  112,   79,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  493,   46,   96,   96,   79,  556,   96,   94,
      556,  556,  556,  556,  556,  556,  493,  558,  558,  558,

      558,  558,  558,  558,  558,  558,  112,   79,  558,  558,
      558,  558,  558,  558,  112,   79,   79,  493,   79,  675,
      675,  675,  675,  675,  675,  493,  382,  186,   79,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  500,  126,
      125,  124,   79,  560,  121,  120,  560,  560,  560,  560,
      560,  560,  500,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  186,   79,  562,  562,  562,  562,  562,  562,
      186,   79,   79,  500,   79,  704,  704,  704,  704,  704,
      704,  500,  389,  273,   79,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  507,  111,  719,  105,   79,  564,

       46,   76,  564,  564,  564,  564,  564,  564,  507,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  273,   79,
      566,  566,  566,  566,  566,  566,  273,   79,   79,  507,
       79,  717,  717,  717,  717,  717,  717,  507,  396,  370,
       79,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      514,   96,   96,   94,   79,  568,   93,   92,  568,  568,
      568,  568,  568,  568,  514,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  370,   79,  570,  570,  570,  570,
      570,  570,  370,   79,   79,  514,   79,  718,  718,  718,
      718,  718,  718,  514,  403,  478,   79,  571,  571,  571,

      571,  571,  571,  571,  571,  571,  521,   91,   90,   89,
       79,  572,   88,   87,  572,  572,  572,  572,  572,  572,
      521,  574,  574,  574,  574,  574,  574,  574,  574,  574,
      478,   79,  574,  574,  574,  574,  574,  574,  478,   79,
      579,  521,  621,  621,  621,  621,  621,  621,   86,  521,
       79,  576,  576,  576,  576,  576,  577,  578,  578,  578,
      579,   85,  581,  581,  581,  581,  581,  582,  583,  583,
      583,  584,   73,  586,  586,  586,  586,  586,  587,  588,
      588,  588,  478,   79,  719,   79,   76,  719,   37,   34,
       62,   58,   55,  480,   54,  480,  590,   79,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  592,   51,   43,
       38,   37,  593,  719,  719,  593,  593,  593,  593,  593,
      593,  594,  594,  594,  594,  594,  595,  596,  596,  596,
       79,  478,   79,  112,   79,  719,  719,  719,  719,  719,
      592,  719,  480,  547,  493,  601,  601,  601,  601,  601,
      601,  601,  601,  601,  549,  719,  719,  719,  719,  602,
      719,  719,  602,  602,  602,  602,  602,  602,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  547,  719,  605,
      605,  605,  605,  605,  605,  719,   79,  719,  549,  112,
       79,  186,   79,  719,   79,  719,  493,  186,   79,  719,

      493,  719,  500,  719,  500,  273,   79,  719,  500,  719,
       79,  273,   79,  370,   79,  719,  507,  719,   79,  719,
      507,  719,  507,  719,  514,  370,   79,   79,  514,  478,
       79,  719,   79,  478,   79,  719,  514,  480,  719,  719,
      521,  719,  521,  584,  521,  625,  625,  625,  625,  625,
      625,  590,   79,  629,  629,  629,  629,  629,  629,  629,
      629,  629,  592,  719,  719,  719,   79,  630,  719,  719,
      630,  630,  630,  630,  630,  630,  592,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  590,   79,  632,  632,
      632,  632,  632,  632,  590,   79,  634,  592,  667,  667,

      667,  667,  667,  667,  719,  592,  634,   79,  636,  636,
      636,  636,  636,  637,  638,  638,  638,  493,   79,   79,
       79,   79,  719,  719,  719,  719,  719,  719,  500,  507,
      514,  521,   79,  648,  648,  648,  648,  648,  649,  650,
      650,  650,  651,  719,  653,  653,  653,  653,  653,  654,
      655,  655,  655,  656,  719,  658,  658,  658,  658,  658,
      659,  660,  660,  660,  590,   79,  719,   79,  590,   79,
      719,  719,  719,  719,  719,  592,  719,  592,  651,  592,
      679,  679,  679,  679,  679,  679,  656,   79,  683,  683,
      683,  683,  683,  683,  719,  719,  719,  592,  685,  719,

      687,  687,  687,  687,  687,  688,  689,  689,  689,   79,
      691,  691,  691,  691,  691,  692,  693,  693,  693,  694,
      719,  696,  696,  696,  696,  696,  697,  698,  698,  698,
      685,  719,  703,  703,  703,  703,  703,  703,  694,  719,
      708,  708,  708,  708,  708,  708,   79,  710,  710,  710,
      710,  710,  711,  712,  712,  712,   79,  714,  714,  714,
      714,  714,  715,  716,  716,  716,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   36,  719,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   41,  719,  719,   41,  719,

       41,   52,  719,  719,   52,  719,  719,  719,   52,   52,
       52,   63,   63,  719,   63,  719,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   64,   64,  719,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   67,   67,   67,   68,  719,  719,   68,  719,  719,
      719,   68,   68,   68,   75,   75,  719,  719,   75,   74,
       74,  719,  719,   74,   95,  719,   95,   95,  719,   95,
      719,  719,   95,   95,   95,   95,  103,  103,  719,  719,
      103,  102,  102,  719,  719,  102,  104,  104,  719,  719,
      104,  115,  115,  115,  719,  719,  115,  131,  131,  719,

      719,  131,  132,  132,  719,  719,  132,  133,  133,  719,
      719,  133,  137,  137,  137,  719,  719,  137,  148,  148,
      148,  719,  719,  148,  165,  165,  719,  719,  165,  166,
      166,  719,  719,  166,  173,  173,  173,  719,  719,  173,
      185,  185,  185,  185,  719,  719,  185,  189,  189,  189,
      719,  719,  189,  201,  201,  719,  719,  201,  202,  202,
      719,  719,  202,  203,  203,  719,  719,  203,  207,  207,
      207,  719,  719,  207,  211,  211,  211,  211,  719,  719,
      211,  214,  214,  214,  719,  719,  214,  226,  226,  226,
      719,  719,  226,  240,  240,  719,  719,  240,  241,  241,

      719,  719,  241,  242,  242,  719,  719,  242,  249,  249,
      249,  719,  719,  249,  256,  256,  256,  719,  719,  256,
      272,  272,  272,  272,  719,  719,  272,  276,  276,  276,
      719,  719,  276,  202,  202,  719,  719,  202,  285,  285,
      719,  719,  285,  286,  286,  719,  719,  286,  290,  290,
      290,  719,  719,  290,  294,  294,  294,  294,  719,  719,
      294,  297,  297,  297,  719,  719,  297,  301,  301,  301,
      301,  719,  719,  301,  304,  304,  304,  719,  719,  304,
      320,  320,  320,  719,  719,  320,  326,  326,  719,  719,
      326,  327,  327,  719,  719,  327,  328,  328,  719,  719,

      328,  335,  335,  335,  719,  719,  335,  342,  342,  342,
      719,  719,  342,  349,  349,  349,  719,  719,  349,  369,
      369,  369,  369,  719,  719,  369,  373,  373,  373,  719,
      719,  373,  377,  377,  719,  719,  377,  378,  378,  719,
      719,  378,  379,  379,  719,  719,  379,  383,  383,  383,
      719,  719,  383,  387,  387,  387,  387,  719,  719,  387,
      390,  390,  390,  719,  719,  390,  394,  394,  394,  394,
      719,  719,  394,  397,  397,  397,  719,  719,  397,  401,
      401,  401,  401,  719,  719,  401,  404,  404,  404,  719,
      719,  404,  421,  421,  421,  719,  719,  421,  285,  285,

      719,  719,  285,  428,  428,  719,  719,  428,  429,  429,
      719,  719,  429,  436,  436,  436,  719,  719,  436,  443,
      443,  443,  719,  719,  443,  450,  450,  450,  719,  719,
      450,  457,  457,  457,  719,  719,  457,  477,  477,  477,
      477,  719,  719,  477,  481,  481,  481,  719,  719,  481,
      485,  485,  719,  719,  485,  486,  486,  719,  719,  486,
      494,  494,  494,  719,  719,  494,  498,  498,  498,  498,
      719,  719,  498,  501,  501,  501,  719,  719,  501,  505,
      505,  505,  505,  719,  719,  505,  508,  508,  508,  719,
      719,  508,  512,  512,  512,  512,  719,  719,  512,  515,

      515,  515,  719,  719,  515,  519,  519,  519,  519,  719,
      719,  519,  522,  522,  522,  719,  719,  522,  539,  539,
      539,  719,  719,  539,  545,  545,  719,  719,  545,  546,
      546,  719,  719,  546,  554,  554,  719,  719,  719,  554,
      550,  550,  719,  719,  550,  556,  556,  556,  719,  719,
      556,  560,  560,  560,  719,  719,  560,  564,  564,  564,
      719,  719,  564,  568,  568,  568,  719,  719,  568,  572,
      572,  572,  719,  719,  572,  589,  589,  589,  589,  719,
      719,  589,  593,  593,  593,  719,  719,  593,  378,  378,
      719,  719,  378,  603,  603,  719,  719,  603,  602,  602,

      719,  719,  602,  606,  606,  719,  719,  719,  606,  607,
      607,  607,  607,  719,  719,  607,  608,  608,  719,  719,
      719,  608,  609,  609,  609,  609,  719,  719,  609,  610,
      610,  719,  719,  719,  610,  611,  611,  611,  611,  719,
      719,  611,  612,  612,  719,  719,  719,  612,  613,  613,
      613,  613,  719,  719,  613,  614,  614,  719,  719,  719,
      614,  615,  615,  615,  615,  719,  719,  615,  616,  616,
      719,  719,  719,  616,  630,  630,  630,  719,  719,  630,
      633,  633,  719,  719,  633,  639,  719,  639,  639,  719,
      719,  639,  640,  640,  719,  719,  719,  640,  641,  641,

      719,  719,  719,  641,  642,  642,  719,  719,  719,  642,
      643,  643,  719,  719,  719,  643,  644,  644,  719,  719,
      719,  644,  645,  645,  719,  719,  719,  645,  646,  646,
      719,  719,  719,  646,  661,  661,  661,  661,  719,  719,
      661,  662,  662,  719,  719,  719,  662,  663,  663,  719,
      719,  663,  668,  668,  719,  719,  719,  668,  669,  669,
      719,  719,  719,  669,  670,  670,  719,  719,  719,  670,
      671,  671,  719,  719,  719,  671,  672,  672,  719,  719,
      719,  672,  673,  673,  719,  719,  719,  673,  674,  674,
      719,  719,  719,  674,  684,  684,  719,  719,  719,  684,

      486,  486,  719,  719,  486,  604,  604,  719,  719,  719,
      604,  699,  699,  719,  719,  719,  699,    5,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719
    } ;

static yyconst short int yy_chk[4471] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    7,   13,   25,  958,   40,    3,
        4,   17,   17,   17,   17,   17,   17,   27,   33,   27,
       13,  955,   33,   40,   27,   44,   44,   44,  722,  722,
        7,   15,   25,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   49,   49,   49,   88,   15,   88,  943,

       15,   15,   15,   15,   15,   15,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   21,  771,  771,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   96,   96,
       96,  941,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   45,  553,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,  553,   64,   65,  931,
       45,   64,   65,   45,   45,   45,   45,   45,   45,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,  111,  111,  111,
      101,  908,   51,   83,  906,   51,   51,   51,   51,   51,
       51,   53,  101,   83,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,  112,  112,  112,  904,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       70,  601,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   72,  601,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,  159,  159,  159,  733,   72,  733,  889,
       72,   72,   72,   72,   72,   72,   76,   76,   76,   76,

       76,   76,   76,   76,   76,   76,  180,  180,  180,  870,
      734,   76,  734,  870,   76,   76,   76,   76,   76,   76,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,  186,  186,  186,  741,   80,  741,  864,   80,
       80,   80,   80,   80,   80,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   82,   82,   82,   82,   82,   82,
       84,   84,   84,   84,   84,   84,   84,   84,   84,  262,
      262,  262,  861,  602,   84,  772,  772,   84,   84,   84,
       84,   84,   84,   99,  602,   99,   99,   99,   99,   99,
       99,  106,  106,  106,  106,  106,  106,  106,  106,  106,

      106,  106,  106,  267,  267,  267,  749,  106,  749,  858,
      106,  106,  106,  106,  106,  106,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  108,  108,  108,  108,  108,
      108,  109,  151,  151,  151,  151,  151,  151,  273,  273,
      273,  109,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  280,  280,  280,  280,  113,  784,
      784,  113,  113,  113,  113,  113,  113,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  281,  281,  281,  828,
      115,  114,  805,  805,  114,  114,  114,  114,  114,  114,
      115,  116,  116,  116,  116,  116,  116,  116,  116,  116,

      117,  117,  117,  117,  117,  117,  117,  117,  118,  118,
      162,  117,  162,  162,  162,  162,  162,  162,  826,  118,
      128,  824,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  359,  359,  359,  872,  750,  134,  750,  872,  134,
      134,  134,  134,  134,  134,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  364,  364,  364,
      755,  135,  755,  797,  135,  135,  135,  135,  135,  135,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  370,
      370,  370,  795,  137,  136,  806,  806,  136,  136,  136,

      136,  136,  136,  137,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  139,  139,  139,  139,  139,  139,  139,
      139,  140,  140,  605,  139,  170,  170,  170,  170,  170,
      170,  793,  140,  145,  605,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  147,  147,  148,  148,  176,  176,
      176,  176,  176,  176,  756,  147,  756,  148,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      467,  467,  467,  760,  149,  760,  769,  149,  149,  149,
      149,  149,  149,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  152,  153,  153,  229,  229,  229,  229,  229,

      229,  768,  152,  768,  153,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  472,  472,  472,
      778,  168,  778,  767,  168,  168,  168,  168,  168,  168,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  171,
      172,  172,  173,  173,  478,  478,  478,  759,  779,  171,
      779,  172,  754,  173,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  547,  547,  547,  780,
      174,  780,  747,  174,  174,  174,  174,  174,  174,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  177,  178,
      178,  246,  246,  246,  246,  246,  246,  185,  177,  183,

      178,  183,  183,  183,  183,  183,  183,  185,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      579,  579,  579,  781,  187,  781,  746,  187,  187,  187,
      187,  187,  187,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  584,  584,  584,  740,  189,  188,  823,  823,
      188,  188,  188,  188,  188,  188,  189,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  191,  191,  191,  191,
      191,  191,  191,  191,  192,  192,  738,  191,  238,  238,
      238,  238,  238,  238,  238,  192,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  204,  204,  204,  204,

      204,  204,  204,  204,  204,  204,  590,  590,  590,  874,
      794,  204,  794,  874,  204,  204,  204,  204,  204,  204,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  634,  634,  634,  796,  205,  796,  729,  205,
      205,  205,  205,  205,  205,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  651,  651,  651,  718,  207,  206,
      837,  837,  206,  206,  206,  206,  206,  206,  207,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  209,  209,
      209,  209,  209,  209,  209,  209,  210,  210,  211,  209,
      252,  252,  252,  252,  252,  252,  717,  210,  211,  212,

      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  656,  656,  656,  807,  212,  807,  716,  212,  212,
      212,  212,  212,  212,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  685,  685,  685,  714,  214,  213,  838,
      838,  213,  213,  213,  213,  213,  213,  214,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  216,  216,  216,
      216,  216,  216,  216,  216,  217,  217,  713,  216,  259,
      259,  259,  259,  259,  259,  712,  217,  219,  710,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  223,  709,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  225,

      225,  226,  226,  323,  323,  323,  323,  323,  323,  808,
      225,  808,  226,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  694,  694,  694,  809,  227,
      809,  708,  227,  227,  227,  227,  227,  227,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  230,  231,  231,
      332,  332,  332,  332,  332,  332,  810,  230,  810,  231,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  825,  827,  825,  827,  244,  856,  856,  244,  244,
      244,  244,  244,  244,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  247,  248,  248,  249,  249,  839,  840,
      839,  840,  841,  247,  841,  248,  707,  249,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      842,  859,  842,  859,  250,  857,  857,  250,  250,  250,
      250,  250,  250,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  253,  254,  254,  255,  255,  256,  256,  860,
      705,  860,  253,  862,  254,  862,  255,  704,  256,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  863,  876,  863,  703,  257,  876,  702,  257,  257,
      257,  257,  257,  257,  258,  258,  258,  258,  258,  258,

      258,  258,  258,  260,  261,  261,  338,  338,  338,  338,
      338,  338,  700,  260,  265,  261,  265,  265,  265,  265,
      265,  265,  270,  272,  270,  270,  270,  270,  270,  270,
      880,  880,  699,  272,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  698,  878,  881,  881,
      274,  878,  696,  274,  274,  274,  274,  274,  274,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  882,  883,
      882,  883,  276,  275,  903,  903,  275,  275,  275,  275,
      275,  275,  276,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  278,  278,  278,  278,  278,  278,  278,  278,

      279,  279,  695,  278,  345,  345,  345,  345,  345,  345,
      693,  279,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  884,  885,  884,  885,  905,  287,  905,  691,
      287,  287,  287,  287,  287,  287,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  907,  909,
      907,  690,  288,  909,  689,  288,  288,  288,  288,  288,
      288,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      912,  913,  912,  913,  290,  289,  922,  922,  289,  289,
      289,  289,  289,  289,  290,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  292,  292,  292,  292,  292,  292,

      292,  292,  293,  293,  294,  292,  352,  352,  352,  352,
      352,  352,  687,  293,  294,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  923,  923,  686,
      924,  295,  924,  684,  295,  295,  295,  295,  295,  295,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  925,
      926,  925,  926,  297,  296,  940,  940,  296,  296,  296,
      296,  296,  296,  297,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  299,  299,  299,  299,  299,  299,  299,
      299,  300,  300,  301,  299,  357,  357,  357,  357,  357,
      357,  357,  300,  301,  302,  302,  302,  302,  302,  302,

      302,  302,  302,  302,  302,  302,  927,  932,  927,  932,
      302,  950,  950,  302,  302,  302,  302,  302,  302,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  942,  944,
      942,  944,  304,  303,  951,  951,  303,  303,  303,  303,
      303,  303,  304,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  306,  306,  306,  306,  306,  306,  306,  306,
      307,  307,  362,  306,  362,  362,  362,  362,  362,  362,
      683,  307,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  313,  682,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  317,  680,  317,  317,  317,  317,  317,

      317,  317,  317,  317,  319,  319,  320,  320,  424,  424,
      424,  424,  424,  424,  947,  319,  947,  320,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      948,  952,  948,  952,  321,  957,  957,  321,  321,  321,
      321,  321,  321,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  324,  325,  325,  433,  433,  433,  433,  433,
      433,  953,  324,  953,  325,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  956,  959,  956,
      959,  330,  960,  960,  330,  330,  330,  330,  330,  330,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  333,

      334,  334,  335,  335,  961,  961,  962,  962,  679,  333,
      678,  334,  676,  335,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  963,  963,  964,  964,
      336,  965,  965,  336,  336,  336,  336,  336,  336,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  339,  340,
      340,  341,  341,  342,  342,  675,  674,  673,  339,  672,
      340,  671,  341,  670,  342,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  669,  668,  667,
      666,  343,  664,  663,  343,  343,  343,  343,  343,  343,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  346,

      347,  347,  348,  348,  349,  349,  662,  660,  658,  346,
      657,  347,  655,  348,  653,  349,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  652,  650,
      648,  647,  350,  646,  645,  350,  350,  350,  350,  350,
      350,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      353,  354,  354,  439,  439,  439,  439,  439,  439,  369,
      353,  367,  354,  367,  367,  367,  367,  367,  367,  369,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  644,  643,  642,  641,  371,  640,  639,  371,
      371,  371,  371,  371,  371,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  638,  636,  635,  633,  373,  372,
      631,  628,  372,  372,  372,  372,  372,  372,  373,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  375,  375,
      375,  375,  375,  375,  375,  375,  376,  376,  626,  375,
      446,  446,  446,  446,  446,  446,  625,  376,  380,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  624,  622,
      621,  620,  618,  380,  617,  616,  380,  380,  380,  380,
      380,  380,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  614,  612,  610,  608,  381,  606,
      604,  381,  381,  381,  381,  381,  381,  382,  382,  382,

      382,  382,  382,  382,  382,  382,  603,  600,  598,  597,
      383,  382,  588,  586,  382,  382,  382,  382,  382,  382,
      383,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      385,  385,  385,  385,  385,  385,  385,  385,  386,  386,
      387,  385,  453,  453,  453,  453,  453,  453,  585,  386,
      387,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  583,  581,  580,  578,  388,  576,  575,
      388,  388,  388,  388,  388,  388,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  573,  569,  565,  561,  390,
      389,  557,  554,  389,  389,  389,  389,  389,  389,  390,

      391,  391,  391,  391,  391,  391,  391,  391,  391,  392,
      392,  392,  392,  392,  392,  392,  392,  393,  393,  394,
      392,  460,  460,  460,  460,  460,  460,  550,  393,  394,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  549,  546,  545,  537,  395,  535,  534,  395,
      395,  395,  395,  395,  395,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  533,  531,  530,  529,  397,  396,
      527,  526,  396,  396,  396,  396,  396,  396,  397,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  399,  399,
      399,  399,  399,  399,  399,  399,  400,  400,  401,  399,

      465,  465,  465,  465,  465,  465,  465,  400,  401,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  491,  490,  486,  485,  402,  476,  474,  402,  402,
      402,  402,  402,  402,  403,  403,  403,  403,  403,  403,
      403,  403,  403,  473,  471,  469,  468,  404,  403,  466,
      464,  403,  403,  403,  403,  403,  403,  404,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  406,  406,  406,
      406,  406,  406,  406,  406,  407,  407,  470,  406,  470,
      470,  470,  470,  470,  470,  463,  407,  410,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  414,  429,  414,

      414,  414,  414,  414,  414,  414,  414,  414,  418,  428,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  420,
      420,  421,  421,  489,  489,  489,  489,  489,  489,  427,
      420,  419,  421,  422,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  417,  416,  415,  413,  422,
      412,  411,  422,  422,  422,  422,  422,  422,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  425,  426,  426,
      542,  542,  542,  542,  542,  542,  409,  425,  408,  426,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      379,  378,  377,  368,  430,  366,  365,  430,  430,  430,

      430,  430,  430,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  363,  361,  360,  358,  431,
      356,  355,  431,  431,  431,  431,  431,  431,  432,  432,
      432,  432,  432,  432,  432,  432,  432,  434,  435,  435,
      436,  436,  329,  328,  327,  326,  318,  434,  316,  435,
      315,  436,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  314,  312,  311,  310,  437,  308,
      286,  437,  437,  437,  437,  437,  437,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  440,  441,  441,  442,
      442,  443,  443,  285,  284,  283,  440,  271,  441,  269,

      442,  268,  443,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  266,  264,  263,  243,  444,
      242,  241,  444,  444,  444,  444,  444,  444,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  447,  448,  448,
      449,  449,  450,  450,  240,  239,  237,  447,  236,  448,
      224,  449,  222,  450,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  221,  220,  218,  203,
      451,  202,  201,  451,  451,  451,  451,  451,  451,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  454,  455,
      455,  456,  456,  457,  457,  200,  199,  197,  454,  195,

      455,  194,  456,  193,  457,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  184,  182,  181,
      167,  458,  166,  165,  458,  458,  458,  458,  458,  458,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  461,
      462,  462,  164,  163,  161,  160,  158,  157,  477,  461,
      475,  462,  475,  475,  475,  475,  475,  475,  477,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  156,  155,  146,  144,  479,  143,  133,  479,  479,
      479,  479,  479,  479,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  132,  131,  130,  129,  481,  480,  127,

      125,  480,  480,  480,  480,  480,  480,  481,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  483,  483,  483,
      483,  483,  483,  483,  483,  484,  484,  124,  483,  577,
      577,  577,  577,  577,  577,  577,  484,  487,  123,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  122,
      121,  119,  105,  487,  104,  103,  487,  487,  487,  487,
      487,  487,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  492,  492,  492,  492,  492,  492,  492,  492,  492,
      492,  492,  492,  102,  100,   98,  494,  492,   97,   95,
      492,  492,  492,  492,  492,  492,  494,  495,  495,  495,

      495,  495,  495,  495,  495,  495,  496,  496,  496,  496,
      496,  496,  496,  496,  497,  497,  498,  496,  649,  649,
      649,  649,  649,  649,  649,  497,  498,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,   91,
       90,   89,  501,  499,   86,   85,  499,  499,  499,  499,
      499,  499,  501,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  503,  503,  503,  503,  503,  503,  503,  503,
      504,  504,  505,  503,  692,  692,  692,  692,  692,  692,
      692,  504,  505,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,   79,   78,   75,  508,  506,

       74,   73,  506,  506,  506,  506,  506,  506,  508,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  510,  510,
      510,  510,  510,  510,  510,  510,  511,  511,  512,  510,
      711,  711,  711,  711,  711,  711,  711,  511,  512,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,   71,   69,   67,  515,  513,   62,   61,  513,  513,
      513,  513,  513,  513,  515,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  517,  517,  517,  517,  517,  517,
      517,  517,  518,  518,  519,  517,  715,  715,  715,  715,
      715,  715,  715,  518,  519,  520,  520,  520,  520,  520,

      520,  520,  520,  520,  520,  520,  520,   60,   59,   58,
      522,  520,   57,   56,  520,  520,  520,  520,  520,  520,
      522,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      524,  524,  524,  524,  524,  524,  524,  524,  525,  525,
      582,  524,  582,  582,  582,  582,  582,  582,   55,  525,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      532,   54,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  536,   47,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  538,  538,  539,  539,   46,   41,   36,   34,
       28,   26,   24,  538,   23,  539,  540,  540,  540,  540,

      540,  540,  540,  540,  540,  540,  540,  540,   18,   14,
       10,    9,  540,    5,    0,  540,  540,  540,  540,  540,
      540,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      543,  544,  544,  555,  555,    0,    0,    0,    0,    0,
      543,    0,  544,  548,  555,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,    0,    0,    0,    0,  548,
        0,    0,  548,  548,  548,  548,  548,  548,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  552,    0,  552,
      552,  552,  552,  552,  552,  556,  556,    0,  552,  558,
      558,  559,  559,  560,  560,    0,  556,  562,  562,    0,

      558,    0,  559,    0,  560,  563,  563,    0,  562,  564,
      564,  566,  566,  567,  567,    0,  563,  568,  568,    0,
      564,    0,  566,    0,  567,  570,  570,  589,  568,  571,
      571,  572,  572,  574,  574,    0,  570,  589,    0,    0,
      571,    0,  572,  587,  574,  587,  587,  587,  587,  587,
      587,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,    0,    0,    0,  593,  591,    0,    0,
      591,  591,  591,  591,  591,  591,  593,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  595,  595,  595,  595,
      595,  595,  595,  595,  596,  596,  637,  595,  637,  637,

      637,  637,  637,  637,    0,  596,  599,  607,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  607,  609,  611,
      613,  615,    0,    0,    0,    0,    0,    0,  609,  611,
      613,  615,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  623,    0,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  627,    0,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  629,  629,  630,  630,  632,  632,
        0,    0,    0,    0,    0,  629,    0,  630,  654,  632,
      654,  654,  654,  654,  654,  654,  659,  661,  659,  659,
      659,  659,  659,  659,    0,    0,    0,  661,  665,    0,

      665,  665,  665,  665,  665,  665,  665,  665,  665,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  681,
        0,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      688,    0,  688,  688,  688,  688,  688,  688,  697,    0,
      697,  697,  697,  697,  697,  697,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  701,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720,  720,  720,  720,
      720,  721,    0,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  723,    0,    0,  723,    0,

      723,  724,    0,    0,  724,    0,    0,    0,  724,  724,
      724,  725,  725,    0,  725,    0,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  726,  726,    0,  726,
      726,  726,  726,  726,  726,  726,  726,  726,  726,  726,
      726,  727,  727,  727,  728,    0,    0,  728,    0,    0,
        0,  728,  728,  728,  730,  730,    0,    0,  730,  731,
      731,    0,    0,  731,  732,    0,  732,  732,    0,  732,
        0,    0,  732,  732,  732,  732,  735,  735,    0,    0,
      735,  736,  736,    0,    0,  736,  737,  737,    0,    0,
      737,  739,  739,  739,    0,    0,  739,  742,  742,    0,

        0,  742,  743,  743,    0,    0,  743,  744,  744,    0,
        0,  744,  745,  745,  745,    0,    0,  745,  748,  748,
      748,    0,    0,  748,  751,  751,    0,    0,  751,  752,
      752,    0,    0,  752,  753,  753,  753,    0,    0,  753,
      757,  757,  757,  757,    0,    0,  757,  758,  758,  758,
        0,    0,  758,  761,  761,    0,    0,  761,  762,  762,
        0,    0,  762,  763,  763,    0,    0,  763,  764,  764,
      764,    0,    0,  764,  765,  765,  765,  765,    0,    0,
      765,  766,  766,  766,    0,    0,  766,  770,  770,  770,
        0,    0,  770,  773,  773,    0,    0,  773,  774,  774,

        0,    0,  774,  775,  775,    0,    0,  775,  776,  776,
      776,    0,    0,  776,  777,  777,  777,    0,    0,  777,
      782,  782,  782,  782,    0,    0,  782,  783,  783,  783,
        0,    0,  783,  785,  785,    0,    0,  785,  786,  786,
        0,    0,  786,  787,  787,    0,    0,  787,  788,  788,
      788,    0,    0,  788,  789,  789,  789,  789,    0,    0,
      789,  790,  790,  790,    0,    0,  790,  791,  791,  791,
      791,    0,    0,  791,  792,  792,  792,    0,    0,  792,
      798,  798,  798,    0,    0,  798,  799,  799,    0,    0,
      799,  800,  800,    0,    0,  800,  801,  801,    0,    0,

      801,  802,  802,  802,    0,    0,  802,  803,  803,  803,
        0,    0,  803,  804,  804,  804,    0,    0,  804,  811,
      811,  811,  811,    0,    0,  811,  812,  812,  812,    0,
        0,  812,  813,  813,    0,    0,  813,  814,  814,    0,
        0,  814,  815,  815,    0,    0,  815,  816,  816,  816,
        0,    0,  816,  817,  817,  817,  817,    0,    0,  817,
      818,  818,  818,    0,    0,  818,  819,  819,  819,  819,
        0,    0,  819,  820,  820,  820,    0,    0,  820,  821,
      821,  821,  821,    0,    0,  821,  822,  822,  822,    0,
        0,  822,  829,  829,  829,    0,    0,  829,  830,  830,

        0,    0,  830,  831,  831,    0,    0,  831,  832,  832,
        0,    0,  832,  833,  833,  833,    0,    0,  833,  834,
      834,  834,    0,    0,  834,  835,  835,  835,    0,    0,
      835,  836,  836,  836,    0,    0,  836,  843,  843,  843,
      843,    0,    0,  843,  844,  844,  844,    0,    0,  844,
      845,  845,    0,    0,  845,  846,  846,    0,    0,  846,
      847,  847,  847,    0,    0,  847,  848,  848,  848,  848,
        0,    0,  848,  849,  849,  849,    0,    0,  849,  850,
      850,  850,  850,    0,    0,  850,  851,  851,  851,    0,
        0,  851,  852,  852,  852,  852,    0,    0,  852,  853,

      853,  853,    0,    0,  853,  854,  854,  854,  854,    0,
        0,  854,  855,  855,  855,    0,    0,  855,  865,  865,
      865,    0,    0,  865,  866,  866,    0,    0,  866,  867,
      867,    0,    0,  867,  868,  868,    0,    0,    0,  868,
      869,  869,    0,    0,  869,  871,  871,  871,    0,    0,
      871,  873,  873,  873,    0,    0,  873,  875,  875,  875,
        0,    0,  875,  877,  877,  877,    0,    0,  877,  879,
      879,  879,    0,    0,  879,  886,  886,  886,  886,    0,
        0,  886,  887,  887,  887,    0,    0,  887,  888,  888,
        0,    0,  888,  890,  890,    0,    0,  890,  891,  891,

        0,    0,  891,  892,  892,    0,    0,    0,  892,  893,
      893,  893,  893,    0,    0,  893,  894,  894,    0,    0,
        0,  894,  895,  895,  895,  895,    0,    0,  895,  896,
      896,    0,    0,    0,  896,  897,  897,  897,  897,    0,
        0,  897,  898,  898,    0,    0,    0,  898,  899,  899,
      899,  899,    0,    0,  899,  900,  900,    0,    0,    0,
      900,  901,  901,  901,  901,    0,    0,  901,  902,  902,
        0,    0,    0,  902,  910,  910,  910,    0,    0,  910,
      911,  911,    0,    0,  911,  914,    0,  914,  914,    0,
        0,  914,  915,  915,    0,    0,    0,  915,  916,  916,

        0,    0,    0,  916,  917,  917,    0,    0,    0,  917,
      918,  918,    0,    0,    0,  918,  919,  919,    0,    0,
        0,  919,  920,  920,    0,    0,    0,  920,  921,  921,
        0,    0,    0,  921,  928,  928,  928,  928,    0,    0,
      928,  929,  929,    0,    0,    0,  929,  930,  930,    0,
        0,  930,  933,  933,    0,    0,    0,  933,  934,  934,
        0,    0,    0,  934,  935,  935,    0,    0,    0,  935,
      936,  936,    0,    0,    0,  936,  937,  937,    0,    0,
        0,  937,  938,  938,    0,    0,    0,  938,  939,  939,
        0,    0,    0,  939,  945,  945,    0,    0,    0,  945,

      946,  946,    0,    0,  946,  949,  949,    0,    0,    0,
      949,  954,  954,    0,    0,    0,  954,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "template.ll"
#define INITIAL 0
#line 2 "template.ll"
#include <string.h>
#include "y.tplt_tab.h"
int tplt_linenum = 1;
extern char* tpltlval;
#define YY_NO_UNPUT 1
#define comment 1

/*
 * IPv6 address representation in Augmented Backus-Naur Form (ABNF).
 * Representation taken from email by Roy T. Fielding <roy.fielding@day.com>
 * to uri@w3.org mailing list on 05 Dec 2002:
 *   http://lists.w3.org/Archives/Public/uri/2002Dec/0000.html
 *
 *    IPv6address   = (                          6( h4 ":" ) ls32 )
 *                  / (                     "::" 5( h4 ":" ) ls32 )
 *                  / ( [              h4 ] "::" 4( h4 ":" ) ls32 )
 *                  / ( [ *1( h4 ":" ) h4 ] "::" 3( h4 ":" ) ls32 )
 *                  / ( [ *2( h4 ":" ) h4 ] "::" 2( h4 ":" ) ls32 )
 *                  / ( [ *3( h4 ":" ) h4 ] "::"    h4 ":"   ls32 )
 *                  / ( [ *4( h4 ":" ) h4 ] "::"             ls32 )
 *                  / ( [ *5( h4 ":" ) h4 ] "::"             h4   )
 *                  / ( [ *6( h4 ":" ) h4 ] "::"                  )
 *
 *    ls32          = ( h4 ":" h4 ) / IPv4address
 *                  ; least-significant 32 bits of address
 *    h4            = 1*4HEXDIG
 *    IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet
 *    dec-octet     = 1*2DIGIT                      ; 0-9, 00-99
 *                  / ( "0" / "1" ) 2DIGIT          ; 000-199
 *                  / "2" %x30-34 DIGIT             ; 200-249
 *                  / "25" %x30-35                  ; 250-255
 *
 */
#line 1692 "lex.tplt.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 61 "template.ll"


#line 1846 "lex.tplt.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 720 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4418 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 63 "template.ll"
{
	return UPLEVEL;
	}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 67 "template.ll"
{
	return DOWNLEVEL;
	}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 71 "template.ll"
/* whitespace */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 73 "template.ll"
{
	/* newline is not significant */
	tplt_linenum++;
	}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 78 "template.ll"
{
	return END;
	}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 82 "template.ll"
{
	return COLON;
	}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 86 "template.ll"
{
	return ASSIGN_DEFAULT;
	}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 90 "template.ll"
{
	return LISTNEXT;
	}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 94 "template.ll"
{
	tpltlval = strdup(tplttext);
	return RETURN;
	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 99 "template.ll"
{
	tpltlval = strdup(tplttext);
	return TEXT_TYPE;
	}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 104 "template.ll"
{
	tpltlval = strdup(tplttext);
	return INT_TYPE;
	}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 109 "template.ll"
{
	tpltlval = strdup(tplttext);
	return UINT_TYPE;
	}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 114 "template.ll"
{
	tpltlval = strdup(tplttext);
	return BOOL_TYPE;
	}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 119 "template.ll"
{
	tpltlval = strdup(tplttext);
	return TOGGLE_TYPE;
	}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 124 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV4_TYPE;
	}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 129 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV4NET_TYPE;
	}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 134 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV6_TYPE;
	}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 139 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV6NET_TYPE;
	}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 144 "template.ll"
{
	tpltlval = strdup(tplttext);
	return MACADDR_TYPE;
	}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 149 "template.ll"
{
	tpltlval = strdup(tplttext);
	return BOOL_VALUE;
	}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 154 "template.ll"
{
	tpltlval = strdup(tplttext);
	return BOOL_VALUE;
	}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 159 "template.ll"
{
	tpltlval = strdup(tplttext);
	return INTEGER_VALUE;
	}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 164 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV4_VALUE;
	}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 169 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV4NET_VALUE;
	}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 174 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV6_VALUE;
	}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 179 "template.ll"
{
	tpltlval = strdup(tplttext);
	return IPV6NET_VALUE;
	}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 184 "template.ll"
{
	tpltlval = strdup(tplttext);
	return MACADDR_VALUE;
	}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 189 "template.ll"
{
	tpltlval = strdup("@");
	return VARDEF;
	}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 194 "template.ll"
{
	tpltlval = strdup(tplttext);
	return COMMAND;
	}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 199 "template.ll"
{
	tpltlval = strdup(tplttext);
	return VARIABLE;
	}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 204 "template.ll"
{
	tpltlval = strdup(tplttext);
	return LITERAL;
	}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 209 "template.ll"
{
	tpltlval = strdup(tplttext);
	return STRING;
	}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 214 "template.ll"
BEGIN(comment);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 216 "template.ll"
/* eat up anything that's not a '*' */
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 218 "template.ll"
/* eat up '*'s not followed by "/"s */
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 220 "template.ll"
tplt_linenum++;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 222 "template.ll"
BEGIN(INITIAL);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 224 "template.ll"
{
	/* everything else is a syntax error */
	return SYNTAX_ERROR;
	}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 230 "template.ll"
ECHO;
	YY_BREAK
#line 2214 "lex.tplt.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 720 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 720 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 719);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 230 "template.ll"

