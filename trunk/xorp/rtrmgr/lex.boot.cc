#define yy_create_buffer boot_create_buffer
#define yy_delete_buffer boot_delete_buffer
#define yy_scan_buffer boot_scan_buffer
#define yy_scan_string boot_scan_string
#define yy_scan_bytes boot_scan_bytes
#define yy_flex_debug boot_flex_debug
#define yy_init_buffer boot_init_buffer
#define yy_flush_buffer boot_flush_buffer
#define yy_load_buffer_state boot_load_buffer_state
#define yy_switch_to_buffer boot_switch_to_buffer
#define yyin bootin
#define yyleng bootleng
#define yylex bootlex
#define yyout bootout
#define yyrestart bootrestart
#define yytext boottext

#line 19 "lex.boot.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 * $FreeBSD: src/usr.bin/lex/flex.skl,v 1.4 1999/10/27 07:56:44 obrien Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 29
#define YY_END_OF_BUFFER 30
static yyconst short int yy_accept[680] =
    {   0,
        0,    0,   24,   24,   17,   17,   30,   28,    3,    4,
       16,   28,    9,    9,    9,    6,    5,   15,   15,   15,
       15,    1,    2,   24,   26,   25,   17,   20,   22,   29,
        3,   23,    0,    9,    0,    0,    9,    9,    9,   12,
       15,   15,   15,   15,   24,   25,   25,   27,   17,   21,
       18,   19,    0,    0,    0,    9,    0,    0,    0,   12,
        9,    9,    0,   12,   12,   12,   12,   15,   15,   15,
        0,    0,    0,    0,    0,    9,    0,    0,    0,    0,
       12,   12,   12,   12,   13,   13,    0,   12,    0,   12,
       12,   12,   12,   15,   15,    7,    0,    0,    0,    0,

        9,    0,    0,    0,   12,   12,    0,   12,   12,   12,
       12,   13,   13,   13,    0,    0,    0,   12,   12,   12,
       12,   12,   12,   12,    8,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   13,    0,    0,    0,    0,
        0,   12,    0,   12,    0,   12,   12,   12,   12,   10,
       10,   10,    0,    0,    0,    0,   12,   12,    0,   12,
       12,   12,   12,   12,   12,    0,   12,   12,   12,   12,
        0,    0,    0,    0,    0,    0,    0,   12,   12,   12,
       12,   12,   12,   12,    0,   10,   10,   10,   10,    0,

        0,    0,    0,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   12,    0,   12,    0,   12,   12,   12,   12,   11,
       11,   11,   10,    0,    0,    0,   12,   12,    0,   12,
       12,   12,   12,   12,   12,    0,   12,   12,   12,   12,
       12,   12,    0,   12,   12,   12,   12,   12,   12,   12,
        0,    0,    0,    0,    0,    0,    0,    0,   12,   12,
       12,   12,   12,   12,   12,    0,    0,    0,    0,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   12,    0,
       12,    0,   12,   12,   12,   12,    0,    0,    0,   12,
       12,    0,   12,   12,   12,   12,   12,   12,    0,   12,
       12,   12,   12,   12,   12,    0,   12,   12,   12,   12,
       12,   12,    0,   12,   12,   12,   12,   12,   12,   12,
       12,    0,    0,    0,    0,    0,    0,    0,    0,   12,
       12,   12,   12,   12,   12,   12,    0,    0,    0,    0,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   12,    0,   12,    0,
       12,   12,   12,   12,    0,    0,    0,    0,    0,   12,
        0,   12,    0,   12,   12,   12,   12,   12,   12,    0,
       12,   12,   12,   12,   12,   12,    0,   12,   12,   12,
       12,   12,   12,    0,   12,   12,   12,   12,   12,   12,
        0,   12,   12,   12,   12,   12,   12,   12,   12,    0,
        0,    0,    0,    0,    0,    0,    0,   12,   12,   12,

       12,   12,   12,   12,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   12,    0,
       12,    0,   12,   12,   12,   12,    0,    0,    0,    0,
        0,    0,   12,   12,    0,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
        0,    0,    0,    0,    0,    0,    0,    0,   12,   12,
       12,   12,    0,    0,    0,    0,    0,    0,    0,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       12,   12,   14,    0,    0,    0,    0,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,    0,    0,
        0,    0,    0,   12,    0,    0,    0,    0,    0,   12,
       12,   12,   12,    0,    0,    0,    0,    0,   12,   12,
       12,   12,    0,   12,   12,   12,   12,    0,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   15,   15,   16,   17,   18,    1,
        1,    1,    1,    1,   19,   19,   19,   19,   19,   19,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
        1,   21,    1,    1,    6,    1,   22,   19,   19,   19,

       23,   24,   20,   20,   20,   20,   20,   25,   20,   20,
       20,   20,   20,   26,   27,   28,   29,   20,   20,   20,
       20,   20,   30,    1,   31,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[32] =
    {   0,
        1,    1,    2,    3,    4,    5,    6,    7,    8,    8,
        8,    8,    8,    8,    8,    8,    9,    1,   10,    5,
       11,   10,   10,   10,    5,    5,    5,    5,    5,    1,
        1
    } ;

static yyconst short int yy_base[920] =
    {   0,
        0,    0,   29,   30,   33,   35, 2141, 3908, 2138, 3908,
     3908, 2133,   50,   68,   84, 2106, 3908,   95,    0, 2100,
     2094, 3908, 3908,    0, 3908,   35,    0, 3908, 3908,   47,
     2105, 3908,   35,  118, 2070, 2060,  136,   26,  154,  171,
        0,  192, 2040, 2035,    0,   44,   50, 3908,    0, 3908,
     3908,   67, 2055,  215, 2054,  225, 2024, 2020, 2019,  242,
        0, 2027, 2011,  260,  278,  294,  180,  305, 1993, 1995,
      326, 1998, 1997,  331, 1995, 1984, 1964, 1960, 1959, 1957,
      341,  359,  375,  183,    0,  330,  333,  383,  399,  408,
      419,   32,  432, 1944, 1937,    0, 1951,  443, 1938, 1937,

     1925, 1924, 1904, 1900,  452,  470,  486,  429,  504,  123,
      517, 3908,    0, 1900, 1907,  528, 1894,  538,  540,  551,
      569,  585,  514, 1893,    0,  540, 1891, 1878,  593, 1877,
     1865, 1864, 1842, 1841,  603,  621,  637,  644,  646,  648,
      659,  677,  693,  700, 1849, 3908,  543, 1848, 1836,  703,
     1835,  703,  592,  714,  730,  739,  750,  141,  763, 1832,
      773, 1817, 1817, 1805, 1804, 1793,  782,  800,  816,  760,
      834,  159,  847,  844,  858,  874,  883,  894,  230,  907,
     1802,  918, 1800, 1799, 1779,  928, 1775,  938,  940,  951,
      969,  985,  904, 1774,  991, 1771, 1758, 1000, 1757, 1746,

     1726, 1723, 1720, 1010, 1028, 1044, 1051, 1053, 1055, 1066,
     1084, 1100, 1107, 1729, 1109, 1111, 1122, 1140, 1156, 1163,
     1718,  595, 1717, 1715, 1166, 1700,  648, 1699, 1697, 1168,
     1684, 1168,  703, 1179, 1195, 1204, 1215,  244, 1228,  940,
     1000, 3908, 1681, 1670, 1652, 1651, 1238, 1256, 1272, 1225,
     1290,  247, 1303, 1300, 1314, 1330, 1339, 1350,  265, 1363,
     1360, 1374, 1390, 1399, 1410,  283, 1423, 1658, 1433, 1643,
     1643, 1641, 1443, 1628, 1626, 1624, 1453, 1606, 1463, 1465,
     1476, 1494, 1510, 1420, 1605, 1593, 1578, 1577, 1575, 1518,
     1536, 1552, 1559, 1561, 1563, 1574, 1592, 1608, 1615, 1572,

     1617, 1619, 1630, 1648, 1664, 1671, 1570, 1673, 1675, 1686,
     1704, 1720, 1727, 1568, 1549, 1548, 1730, 1546, 1003, 1532,
     1531, 1732, 1529, 1055, 1508, 1507, 1734, 1505, 1734, 1111,
     1745, 1761, 1770, 1781,  346, 1794, 1480, 1479, 1477, 1804,
     1822, 1838, 1791, 1856,  364, 1869, 1866, 1880, 1896, 1905,
     1916,  388, 1929, 1926, 1940, 1956, 1965, 1976,  404, 1989,
     1986, 2000, 2016, 2025, 2036,  429, 2049, 1473, 1453, 2059,
     1443, 1432, 1431, 2069, 1429, 1428, 1408, 2079, 1404, 2089,
     2091, 2102, 2120, 2136, 2046, 1403, 1391, 1378, 1377, 2142,
     2160, 2178, 2194, 2201, 2203, 2205, 2216, 2234, 2250, 2257,

     1385, 2259, 2261, 2272, 2290, 2306, 2313, 1372, 2315, 2317,
     2328, 2346, 2362, 2369, 1371, 2371, 2373, 2384, 2402, 2418,
     2425, 1369, 1367, 1347, 2428, 1343, 1168, 1343, 1341, 2430,
     1328, 1465, 1327, 1325, 2432, 1312, 2432, 1468, 2443, 2459,
     2468, 2479,  432, 2492, 1301, 1299, 2503, 2521, 2537, 1307,
     1276, 2545,    0, 2489, 2563,  454, 2576, 2573, 2587,    0,
     2597, 2608,  457, 2621, 2618, 2632,    0, 2642, 2653,  475,
     2666, 2663, 2677,    0, 2687, 2698,  488, 2711, 2708, 2722,
        0, 2732, 2743,  491, 2756, 1284, 1282, 2766, 1281, 1270,
     1269, 2776, 1267, 1252, 1251, 2786, 1249, 2796, 2798, 2809,

     2827, 2843, 2753, 1248, 1227, 1226, 1563, 2851, 1224, 1223,
     2869,  514,   69, 1212, 2882, 2887, 1208, 1208, 2889, 2893,
     1205, 1193, 2895, 2900, 1191, 1190, 2906, 2908, 1166, 1165,
     2911, 2913, 1153, 1153, 1150, 1135, 2916, 1134, 1619, 1133,
     1120, 2919, 1118, 1675, 1116, 1098, 2922, 1097, 2919, 2091,
     2932,    0, 2942, 2953,  517, 2966, 1085, 1080, 2977, 1079,
       96,  109, 1076, 1063,  137, 1061, 2963, 1059, 2977, 1041,
     2987, 1040, 2988, 1038, 2989, 1023, 1022, 1020, 2999,  982,
      982,  980, 3009,  965,  964,  962, 3019,  949, 3029, 3031,
      946,  946,  919, 2094,  919,  916, 3034,  915,  903,  911,

      891,  887,  886,  884,  871,  870,  868,  855, 3036,  854,
     2205,  853,  852, 3038,  830, 2261,  829,  827, 3040,  826,
     3049,  813,  803,  811, 3060,  796,  795,  792,  791,  771,
      770,  768,  767,  747,  743,  742, 3069,  740,  728,  727,
     3079,  725,  709,  707, 2317,  702,  691, 3089,  690,  687,
      672, 3091,  671, 2373,  670,  657, 3093,  655,  652,  634,
     3102,  633,  632,  616,  615, 3111,  613,  600,  582,  581,
     3120,  579,  564,  563, 3122,  561,  548,  528, 3908, 3138,
     3149, 3158, 3168, 3179, 3190,  480, 3193, 3196, 3201, 3204,
     3205, 3208, 3211,  443, 3215,  416, 3220, 3221, 3223, 3226,

     3229, 3233,  409,  393, 3237, 3242, 3245, 3246, 3249, 3253,
      369, 3258, 3261, 3264, 3268,  351, 3273, 3274, 3277, 3280,
     3284, 3289, 3293,  337, 3298,  318, 3300, 3304, 3306, 3307,
     3310, 3313, 3317, 3321, 3326, 3329, 3332, 3335, 3338, 3342,
     3346, 3347, 3350, 3353, 3357, 3362, 3366, 3371, 3375,  315,
     3380,  305, 3383,  302, 3385, 3388, 3391, 3394, 3398, 3402,
     3406, 3410, 3412, 3415, 3418, 3421, 3424, 3427, 3431, 3434,
     3437, 3440, 3444, 3449, 3453, 3458, 3462, 3467, 3471, 3475,
      288, 3478,  270, 3481,  235, 3483, 3486, 3489, 3492, 3496,
     3500, 3504, 3508, 3512, 3514, 3517, 3520, 3523, 3526, 3529,

     3533, 3536, 3539, 3543, 3548, 3552, 3557, 3561, 3566, 3570,
     3575, 3579, 3583,  225, 3586,  215, 3589,  205, 3591, 3594,
     3597, 3601, 3604, 3607, 3611, 3614, 3618, 3621, 3625, 3628,
     3632, 3635, 3639, 3643, 3645, 3648, 3651, 3654, 3657, 3660,
     3664, 3667,  202, 3670, 3673, 3677, 3682, 3686, 3691, 3695,
     3700, 3704, 3709, 3713, 3718, 3722, 3726,  184, 3729,  181,
     3732,  164, 3733, 3737, 3740, 3745, 3748, 3751, 3755, 3759,
     3763, 3767, 3771, 3775, 3779, 3783, 3785, 3788, 3791, 3794,
     3797, 3800, 3804, 3807,  154, 3812, 3814, 3818, 3822, 3826,
     3830, 3834, 3838, 3842,  128, 3845,   92, 3848, 3850, 3853,

     3858, 3861, 3863, 3867, 3869, 3872, 3875, 3877,   81, 3882,
     3884,   45, 3887, 3889, 3891, 3893, 3895, 3897, 3899
    } ;

static yyconst short int yy_def[920] =
    {   0,
      679,    1,  680,  680,  681,  681,  679,  679,  679,  679,
      679,  679,  679,  679,   14,  679,  679,  679,  682,   18,
      682,  679,  679,  683,  679,  684,  685,  679,  679,  679,
      679,  679,  686,  679,  687,  688,  679,   37,  679,  679,
      682,  679,   42,  682,  683,  684,  684,  679,  685,  679,
      679,  679,  689,  679,  690,  679,  691,  692,  693,  679,
       56,   56,  694,  679,  679,   65,  695,  679,  682,  682,
      696,  690,  697,  697,  679,  698,  679,  699,  700,  701,
      679,  679,   82,  702,  703,  703,  704,  679,  679,  705,
      679,   91,  705,  682,  682,  682,  706,  679,  707,  679,

      698,  700,  708,  709,  679,  679,  679,  710,  679,  109,
      710,  679,  711,  711,  712,  679,  713,  714,  714,  679,
      679,  121,  715,  119,  682,  716,  707,  717,  717,  679,
      718,  679,  719,  720,  679,  679,  136,  721,  722,  722,
      679,  679,  142,  723,  140,  679,  724,  713,  725,  725,
      679,  679,  726,  679,  679,  727,  679,  157,  727,  728,
      679,  729,  679,  730,  731,  732,  679,  679,  679,  733,
      679,  171,  733,  679,  679,  679,  734,  679,  178,  734,
      735,  679,  736,  679,  737,  679,  738,  739,  739,  679,
      679,  191,  740,  189,  679,  729,  741,  741,  679,  742,

      679,  743,  744,  679,  679,  205,  745,  746,  746,  679,
      679,  211,  747,  209,  748,  748,  679,  679,  218,  749,
      216,  750,  736,  751,  751,  679,  752,  738,  753,  753,
      679,  679,  754,  679,  679,  755,  679,  237,  755,  195,
      679,  679,  679,  756,  757,  758,  679,  679,  679,  759,
      679,  251,  759,  679,  679,  679,  760,  679,  258,  760,
      679,  679,  679,  761,  679,  265,  761,  762,  679,  763,
      679,  764,  679,  765,  679,  766,  679,  767,  768,  768,
      679,  679,  282,  769,  280,  770,  679,  771,  772,  679,
      679,  291,  773,  774,  774,  679,  679,  297,  775,  295,

      776,  776,  679,  679,  304,  777,  302,  778,  778,  679,
      679,  311,  779,  309,  763,  780,  780,  679,  781,  765,
      782,  782,  679,  783,  767,  784,  784,  679,  679,  785,
      679,  679,  786,  679,  334,  786,  787,  788,  789,  679,
      679,  679,  790,  679,  344,  790,  679,  679,  679,  791,
      679,  351,  791,  679,  679,  679,  792,  679,  358,  792,
      679,  679,  679,  793,  679,  365,  793,  679,  794,  679,
      795,  679,  796,  679,  797,  679,  798,  679,  799,  800,
      800,  679,  679,  383,  801,  381,  802,  679,  803,  679,
      679,  679,  392,  804,  805,  805,  679,  679,  398,  806,

      396,  807,  807,  679,  679,  405,  808,  403,  809,  809,
      679,  679,  412,  810,  410,  811,  811,  679,  679,  419,
      812,  417,  795,  813,  813,  679,  814,  797,  815,  815,
      679,  816,  799,  817,  817,  679,  679,  818,  679,  679,
      819,  679,  442,  819,  820,  821,  679,  679,  448,  822,
      823,  679,  824,  825,  679,  455,  825,  679,  679,  826,
      827,  679,  462,  827,  679,  679,  828,  829,  679,  469,
      829,  679,  679,  830,  831,  679,  476,  831,  679,  679,
      832,  833,  679,  483,  833,  679,  834,  679,  835,  679,
      836,  679,  837,  679,  838,  679,  839,  840,  840,  679,

      679,  501,  841,  499,  842,  679,  843,  679,  844,  845,
      679,  511,  845,  846,  847,  847,  848,  516,  849,  849,
      850,  520,  851,  851,  852,  524,  853,  853,  854,  528,
      855,  855,  856,  532,  835,  857,  857,  679,  858,  837,
      859,  859,  679,  860,  839,  861,  861,  679,  679,  862,
      679,  863,  864,  679,  554,  864,  865,  866,  679,  867,
      868,  868,  869,  679,  868,  870,  679,  871,  679,  872,
      679,  873,  679,  874,  679,  875,  679,  876,  679,  877,
      679,  878,  679,  879,  679,  880,  679,  881,  882,  882,
      883,  590,  884,  885,  867,  886,  886,  679,  679,  887,

      888,  889,  890,  891,  892,  893,  877,  894,  894,  679,
      895,  879,  896,  896,  679,  897,  881,  898,  898,  679,
      679,  899,  900,  901,  679,  902,  679,  903,  679,  679,
      679,  679,  679,  679,  679,  904,  679,  905,  679,  906,
      679,  907,  679,  908,  909,  902,  910,  910,  679,  905,
      911,  911,  679,  912,  907,  913,  913,  679,  679,  914,
      679,  915,  679,  679,  916,  679,  917,  679,  915,  918,
      918,  679,  917,  919,  919,  679,  679,  679,    0,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,

      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679
    } ;

static yyconst short int yy_nxt[3940] =
    {   0,
        8,    9,   10,   11,    8,    8,    8,   12,   13,   13,
       14,   15,   15,   15,   15,   15,   16,   17,   18,   19,
        8,   18,   18,   20,   19,   19,   19,   21,   19,   22,
       23,   25,   25,   26,   26,   28,   29,   28,   29,   47,
       62,   62,   48,   53,   53,   54,  119,  119,  679,   50,
       51,  679,  667,   30,   47,   30,   33,   48,   34,   34,
       34,   34,   34,   34,   34,   34,   35,   52,   36,   50,
       51,   36,   36,   36,   33,  507,   37,   37,   37,   37,
       37,   38,   39,   39,   35,  509,   36,   52,  662,   36,
       36,   36,   39,   39,   39,   39,   39,   39,   41,  642,

       41,   41,  507,   42,   42,   42,   42,   42,   42,   42,
       42,   35,  509,   42,   41,  679,   42,   42,   42,   41,
       41,   41,   41,   41,   33,  509,   56,   56,   56,   56,
       56,   56,   56,   56,   57,  638,   58,  140,  140,   58,
       58,   58,   33,  507,   61,   61,   61,   61,   61,   61,
       61,   61,   57,  509,   58,  189,  189,   58,   58,   58,
       33,  626,   62,   62,   62,   62,   62,   62,   62,   62,
       57,  588,   58,  209,  209,   58,   58,   58,   63,   64,
       64,   65,   66,   66,   66,   66,   66,   63,  584,   67,
       63,  580,   67,   67,   67,   41,   89,   41,   41,  107,

       68,   68,   68,   68,   68,   68,   68,   68,   57,  560,
       68,   41,  497,   68,   68,   68,   41,   41,   41,   41,
       41,   71,  493,   73,   73,   73,   73,   73,   74,   75,
       75,   33,  489,   76,   76,   76,   76,   76,   76,   76,
       76,   35,  379,   77,  216,  216,   77,   77,   77,   63,
       81,   81,   82,   83,   83,   83,   83,   83,  280,  280,
       84,  295,  295,   84,   84,   84,   87,   63,   88,   88,
       88,   88,   88,   88,   88,   88,   89,  375,   90,  302,
      302,   90,   90,   90,   87,   63,   91,   91,   91,   91,
       91,   92,   93,   93,   89,  371,   90,  309,  309,   90,

       90,   90,   93,   93,   93,   93,   93,   93,   41,  278,
       41,   41,  274,   94,   94,   94,   94,   94,   94,   94,
       94,   35,  270,   94,   41,  187,   94,   94,   94,   41,
       41,   41,   41,   41,   97,   97,   98,   71,  113,  113,
      114,  115,  115,  116,  183,  679,  679,   87,   63,  106,
      106,  106,  106,  106,  106,  106,  106,  107,  162,  108,
      381,  381,  108,  108,  108,   87,   63,  109,  109,  109,
      109,  109,  110,  111,  111,  107,  146,  108,  396,  396,
      108,  108,  108,  111,  111,  111,  111,  111,  111,   87,
       63,  118,  118,  118,  118,  118,  118,  118,  118,   89,

      117,  119,  403,  403,  119,  119,  119,  120,  120,  121,
      122,  122,  122,  122,  122,   63,  112,  123,  410,  410,
      123,  123,  123,   99,   89,   87,   63,  124,  124,  124,
      124,  124,  124,  124,  124,   89,   63,  119,   87,   63,
      119,  119,  119,  417,  417,  107,  499,  499,   89,  126,
       85,  128,  128,  128,  128,  128,  129,  130,  130,   63,
      135,  135,  136,  137,  137,  137,  137,  137,  516,  516,
      138,  520,  520,  138,  138,  138,   87,   63,  139,  139,
      139,  139,  139,  139,  139,  139,  107,   55,  140,  524,
      524,  140,  140,  140,  141,  141,  142,  143,  143,  143,

      143,  143,  528,  528,  144,  532,  532,  144,  144,  144,
       87,   63,  145,  145,  145,  145,  145,  145,  145,  145,
      107,   63,  140,   87,   63,  140,  140,  140,  562,  562,
      155,  590,  590,  107,  147,   63,  149,  149,  149,  149,
      149,  150,  151,  151,   87,   63,  679,   63,  160,  160,
      161,  181,  181,  182,   89,   63,   89,  153,   63,  154,
      154,  154,  154,  154,  154,  154,  154,  155,   63,  156,
       63,   63,  156,  156,  156,  153,   63,  157,  157,  157,
      157,  157,  158,  159,  159,  155,   63,  156,   63,   63,
      156,  156,  156,  159,  159,  159,  159,  159,  159,  126,

      185,  185,  186,  268,  268,  269,  654,  679,  679,   87,
       63,  168,  168,  168,  168,  168,  168,  168,  168,  169,
       63,  170,   63,   63,  170,  170,  170,   87,   63,  171,
      171,  171,  171,  171,  172,  173,  173,  169,  645,  170,
       63,   63,  170,  170,  170,  173,  173,  173,  173,  173,
      173,   63,   87,   63,  679,   63,  272,  272,  273,   63,
      169,  654,  107,  654,  107,  153,   63,  175,  175,  175,
      175,  175,  175,  175,  175,  176,  654,  177,   63,   63,
      177,  177,  177,  153,   63,  178,  178,  178,  178,  178,
      179,  180,  180,  176,   63,  177,  645,  645,  177,  177,

      177,  180,  180,  180,  180,  180,  180,   63,  645,  147,
       63,  276,  276,  277,   63,  616,  176,  679,  679,   89,
      153,   63,  188,  188,  188,  188,  188,  188,  188,  188,
      155,  654,  189,  654,  611,  189,  189,  189,  190,  190,
      191,  192,  192,  192,  192,  192,   63,   63,  193,   63,
       63,  193,  193,  193,   63,  155,  153,   63,  194,  194,
      194,  194,  194,  194,  194,  194,  155,   63,  189,  153,
       63,  189,  189,  189,   63,   63,  169,   63,   63,  155,
      195,  197,  197,  197,  197,  197,  198,  199,  199,   63,
      204,  204,  205,  206,  206,  206,  206,  206,   63,   63,

      207,  594,  645,  207,  207,  207,   87,   63,  208,  208,
      208,  208,  208,  208,  208,  208,  169,  645,  209,  390,
       63,  209,  209,  209,  210,  210,  211,  212,  212,  212,
      212,  212,  616,  616,  213,  616,  611,  213,  213,  213,
       87,   63,  214,  214,  214,  214,  214,  214,  214,  214,
      169,   63,  209,   87,   63,  209,  209,  209,  611,  611,
      107,   63,   63,  169,  153,   63,  215,  215,  215,  215,
      215,  215,  215,  215,  176,   63,  216,   63,   63,  216,
      216,  216,  217,  217,  218,  219,  219,  219,  219,  219,
       63,   63,  220,   63,   63,  220,  220,  220,   63,  176,

      153,   63,  221,  221,  221,  221,  221,  221,  221,  221,
      176,   63,  216,  153,   63,  216,  216,  216,   63,  509,
      235,  594,  594,  176,  222,  594,  224,  224,  224,  224,
      224,  225,  226,  226,  227,  390,  229,  229,  229,  229,
      229,  230,  231,  231,  153,   63,  679,   63,  242,  242,
      242,  242,  550,   63,  155,  616,  155,  233,   63,  234,
      234,  234,  234,  234,  234,  234,  234,  235,  616,  236,
      544,  611,  236,  236,  236,  233,   63,  237,  237,  237,
      237,  237,  238,  239,  239,  235,  611,  236,  539,   63,
      236,  236,  236,  239,  239,  239,  239,  239,  239,  240,

      240,  240,  241,  242,  242,  242,  242,  195,  242,  242,
      242,  369,  369,  370,  679,  679,   87,   63,  248,  248,
      248,  248,  248,  248,  248,  248,  249,   63,  250,   63,
       63,  250,  250,  250,   87,   63,  251,  251,  251,  251,
      251,  252,  253,  253,  249,   63,  250,   63,   63,  250,
      250,  250,  253,  253,  253,  253,  253,  253,   63,   87,
       63,  679,   63,  373,  373,  374,   63,  249,   63,  169,
       63,  169,  153,   63,  255,  255,  255,  255,  255,  255,
      255,  255,  256,   63,  257,  594,  594,  257,  257,  257,
      153,   63,  258,  258,  258,  258,  258,  259,  260,  260,

      256,  340,  257,  544,  544,  257,  257,  257,  260,  260,
      260,  260,  260,  260,   63,  153,   63,  679,   63,  377,
      377,  378,  544,  256,  539,  176,  539,  176,  233,   63,
      262,  262,  262,  262,  262,  262,  262,  262,  263,  539,
      264,   63,   63,  264,  264,  264,  233,   63,  265,  265,
      265,  265,  265,  266,  267,  267,  263,   63,  264,  438,
       63,  264,  264,  264,  267,  267,  267,  267,  267,  267,
       63,  330,  222,   63,  227,   63,  487,  487,  488,  263,
      679,  679,  679,  679,  155,  233,   63,  279,  279,  279,
      279,  279,  279,  279,  279,  235,  233,  280,   63,  153,

      280,  280,  280,  281,  281,  282,  283,  283,  283,  283,
      283,   63,   63,  284,   87,   63,  284,  284,  284,   63,
      235,  233,   63,  285,  285,  285,  285,  285,  285,  285,
      285,  235,   63,  280,  233,   63,  280,  280,  280,  509,
      564,  249,  390,  557,  235,   63,  290,  290,  291,  292,
      292,  292,  292,  292,  438,  544,  293,  544,  432,  293,
      293,  293,   87,   63,  294,  294,  294,  294,  294,  294,
      294,  294,  249,  539,  295,  539,  427,  295,  295,  295,
      296,  296,  297,  298,  298,  298,  298,  298,   63,   63,
      299,   63,  509,  299,  299,  299,   87,   63,  300,  300,

      300,  300,  300,  300,  300,  300,  249,   63,  295,   87,
       63,  295,  295,  295,   63,  390,  169,  289,  432,  249,
      153,   63,  301,  301,  301,  301,  301,  301,  301,  301,
      256,  432,  302,  432,  427,  302,  302,  302,  303,  303,
      304,  305,  305,  305,  305,  305,   63,  427,  306,  427,
       63,  306,  306,  306,   63,  256,  153,   63,  307,  307,
      307,  307,  307,  307,  307,  307,  256,   63,  302,  153,
       63,  302,  302,  302,   63,  330,  176,  233,  153,  256,
      233,   63,  308,  308,  308,  308,  308,  308,  308,  308,
      263,   87,  309,  390,  289,  309,  309,  309,  310,  310,

      311,  312,  312,  312,  312,  312,   63,  247,  313,  330,
      432,  313,  313,  313,  432,  263,  233,   63,  314,  314,
      314,  314,  314,  314,  314,  314,  263,   63,  309,  233,
       63,  309,  309,  309,  324,  427,  332,  427,  319,  263,
       63,  316,  316,  316,  316,  316,  317,  318,  318,  319,
       63,  321,  321,  321,  321,  321,  322,  323,  323,  324,
       63,  326,  326,  326,  326,  326,  327,  328,  328,  233,
       63,  679,   63,  491,  491,  492,  495,  495,  496,  235,
       63,  235,  330,   63,  331,  331,  331,  331,  331,  331,
      331,  331,  332,  390,  333,  289,  387,  333,  333,  333,

      330,   63,  334,  334,  334,  334,  334,  335,  336,  336,
      332,  324,  333,  324,  324,  333,  333,  333,  336,  336,
      336,  336,  336,  336,   87,   63,  341,  341,  341,  341,
      341,  341,  341,  341,  342,  319,  343,  319,  319,  343,
      343,  343,   87,   63,  344,  344,  344,  344,  344,  345,
      346,  346,  342,   63,  343,   63,   63,  343,  343,  343,
      346,  346,  346,  346,  346,  346,   63,   87,   63,  679,
       63,  558,  558,  559,  233,  342,  153,  249,   87,  249,
      153,   63,  348,  348,  348,  348,  348,  348,  348,  348,
      349,  340,  350,  289,  203,  350,  350,  350,  153,   63,

      351,  351,  351,  351,  351,  352,  353,  353,  349,  203,
      350,  233,  324,  350,  350,  350,  353,  353,  353,  353,
      353,  353,   63,  153,   63,  679,   63,  578,  578,  579,
      324,  349,  227,  256,  319,  256,  233,   63,  355,  355,
      355,  355,  355,  355,  355,  355,  356,  319,  357,  222,
       63,  357,  357,  357,  233,   63,  358,  358,  358,  358,
      358,  359,  360,  360,  356,   63,  357,  289,  203,  357,
      357,  357,  360,  360,  360,  360,  360,  360,   63,  233,
       63,  679,   63,  582,  582,  583,  167,  356,  195,  263,
      227,  263,  330,   63,  362,  362,  362,  362,  362,  362,

      362,  362,  363,  227,  364,  227,  222,  364,  364,  364,
      330,   63,  365,  365,  365,  365,  365,  366,  367,  367,
      363,  222,  364,  222,  153,  364,  364,  364,  367,  367,
      367,  367,  367,  367,   63,   87,  247,   63,  319,  203,
      324,   63,  134,  363,  679,  679,  679,  679,  679,  679,
      235,  330,   63,  380,  380,  380,  380,  380,  380,  380,
      380,  332,  244,  381,  195,  195,  381,  381,  381,  382,
      382,  383,  384,  384,  384,  384,  384,   63,  195,  385,
      153,  227,  385,  385,  385,  227,  332,  330,   63,  386,
      386,  386,  386,  386,  386,  386,  386,  332,   63,  381,

      330,   63,  381,  381,  381,  147,  222,  342,  222,  203,
      332,   63,  391,  391,  392,  393,  393,  393,  393,  393,
      134,  134,  394,  126,  195,  394,  394,  394,   87,   63,
      395,  395,  395,  395,  395,  395,  395,  395,  342,  195,
      396,  147,  147,  396,  396,  396,  397,  397,  398,  399,
      399,  399,  399,  399,  147,   87,  400,  167,  134,  400,
      400,  400,   87,   63,  401,  401,  401,  401,  401,  401,
      401,  401,  342,   63,  396,   87,   63,  396,  396,  396,
       80,  105,  249,  126,  126,  342,  153,   63,  402,  402,
      402,  402,  402,  402,  402,  402,  349,  126,  403,   87,

      147,  403,  403,  403,  404,  404,  405,  406,  406,  406,
      406,  406,   63,  147,  407,  679,  134,  407,  407,  407,
       80,  349,  153,   63,  408,  408,  408,  408,  408,  408,
      408,  408,  349,   63,  403,  153,   63,  403,  403,  403,
      131,  679,  256,   71,  126,  349,  233,   63,  409,  409,
      409,  409,  409,  409,  409,  409,  356,  126,  410,  125,
       35,  410,  410,  410,  411,  411,  412,  413,  413,  413,
      413,  413,   63,  105,  414,   80,   80,  414,  414,  414,
       35,  356,  233,   63,  415,  415,  415,  415,  415,  415,
      415,  415,  356,   63,  410,  233,   63,  410,  410,  410,

       35,   71,  263,   71,   71,  356,  330,   63,  416,  416,
      416,  416,  416,  416,  416,  416,  363,   96,  417,   95,
       86,  417,  417,  417,  418,  418,  419,  420,  420,  420,
      420,  420,   63,  679,  421,   80,   35,  421,  421,  421,
       60,  363,  330,   63,  422,  422,  422,  422,  422,  422,
      422,  422,  363,   63,  417,  330,   63,  417,  417,  417,
       71,   71,  440,   70,   69,  363,   63,  424,  424,  424,
      424,  424,  425,  426,  426,  427,   57,  429,  429,  429,
      429,  429,  430,  431,  431,  432,   60,  434,  434,  434,
      434,  434,  435,  436,  436,  330,   63,  679,   63,  586,

      586,  587,  624,  624,  625,  332,   31,  332,  438,   63,
      439,  439,  439,  439,  439,  439,  439,  439,  440,   44,
      441,   43,   40,  441,  441,  441,  438,   63,  442,  442,
      442,  442,  442,  443,  444,  444,  440,   32,  441,   31,
      679,  441,  441,  441,  444,  444,  444,  444,  444,  444,
      447,  447,  448,  449,  449,  449,  449,  449,  450,  679,
      451,  679,  679,  451,  451,  451,   87,   63,  452,  452,
      452,  452,  452,  452,  452,  452,  453,  679,  454,  679,
      679,  454,  454,  454,   87,   63,  455,  455,  455,  455,
      455,  456,  457,  457,  453,  679,  454,  679,  679,  454,

      454,  454,  457,  457,  457,  457,  457,  457,   63,   87,
       63,  679,   63,  636,  636,  637,  679,  453,  679,  342,
      679,  342,  153,   63,  459,  459,  459,  459,  459,  459,
      459,  459,  460,  679,  461,  679,  679,  461,  461,  461,
      153,   63,  462,  462,  462,  462,  462,  463,  464,  464,
      460,  679,  461,  679,  679,  461,  461,  461,  464,  464,
      464,  464,  464,  464,   63,  153,   63,  679,   63,  640,
      640,  641,  679,  460,  679,  349,  679,  349,  233,   63,
      466,  466,  466,  466,  466,  466,  466,  466,  467,  679,
      468,  679,  679,  468,  468,  468,  233,   63,  469,  469,

      469,  469,  469,  470,  471,  471,  467,  679,  468,  679,
      679,  468,  468,  468,  471,  471,  471,  471,  471,  471,
       63,  233,   63,  679,   63,  660,  660,  661,  679,  467,
      679,  356,  679,  356,  330,   63,  473,  473,  473,  473,
      473,  473,  473,  473,  474,  679,  475,  679,  679,  475,
      475,  475,  330,   63,  476,  476,  476,  476,  476,  477,
      478,  478,  474,  679,  475,  679,  679,  475,  475,  475,
      478,  478,  478,  478,  478,  478,   63,  330,   63,  679,
       63,  665,  665,  666,  679,  474,  679,  363,  679,  363,
      438,   63,  480,  480,  480,  480,  480,  480,  480,  480,

      481,  679,  482,  679,  679,  482,  482,  482,  438,   63,
      483,  483,  483,  483,  483,  484,  485,  485,  481,  679,
      482,  679,  679,  482,  482,  482,  485,  485,  485,  485,
      485,  485,   63,  679,  679,   63,  427,  679,  432,   63,
      679,  481,  679,  679,  679,  679,  679,  679,  332,  438,
       63,  498,  498,  498,  498,  498,  498,  498,  498,  440,
      679,  499,  679,  679,  499,  499,  499,  500,  500,  501,
      502,  502,  502,  502,  502,   63,  679,  503,  679,  679,
      503,  503,  503,  679,  440,  438,   63,  504,  504,  504,
      504,  504,  504,  504,  504,  440,   63,  499,  438,   63,

      499,  499,  499,  679,  679,  453,  679,  679,  440,  507,
      679,  508,  508,  508,  508,  508,  508,  508,  508,  509,
      679,  510,  679,  679,  510,  510,  510,  507,  679,  511,
      511,  511,  511,  511,  512,  513,  513,  509,  679,  510,
      679,  679,  510,  510,  510,  513,  513,  513,  513,  513,
      513,   87,   63,  515,  515,  515,  515,  515,  515,  515,
      515,  453,  679,  516,  679,  679,  516,  516,  516,   87,
       63,  518,  518,  518,  518,  518,  518,  518,  518,  453,
       63,  516,   87,   63,  516,  516,  516,  679,  679,  342,
      679,  679,  453,  153,   63,  519,  519,  519,  519,  519,

      519,  519,  519,  460,   63,  520,  679,  679,  520,  520,
      520,  679,  679,  460,  153,   63,  522,  522,  522,  522,
      522,  522,  522,  522,  460,   63,  520,  153,   63,  520,
      520,  520,  679,  679,  349,  679,  679,  460,  233,   63,
      523,  523,  523,  523,  523,  523,  523,  523,  467,   63,
      524,  679,  679,  524,  524,  524,  679,  679,  467,  233,
       63,  526,  526,  526,  526,  526,  526,  526,  526,  467,
       63,  524,  233,   63,  524,  524,  524,  679,  679,  356,
      679,  679,  467,  330,   63,  527,  527,  527,  527,  527,
      527,  527,  527,  474,   63,  528,  679,  679,  528,  528,

      528,  679,  679,  474,  330,   63,  530,  530,  530,  530,
      530,  530,  530,  530,  474,   63,  528,  330,   63,  528,
      528,  528,  679,  679,  363,  679,  679,  474,  438,   63,
      531,  531,  531,  531,  531,  531,  531,  531,  481,   63,
      532,  679,  679,  532,  532,  532,  679,  679,  481,  438,
       63,  534,  534,  534,  534,  534,  534,  534,  534,  481,
       63,  532,  438,   63,  532,  532,  532,  679,  679,  552,
      679,  679,  481,   63,  536,  536,  536,  536,  536,  537,
      538,  538,  539,  679,  541,  541,  541,  541,  541,  542,
      543,  543,  544,  679,  546,  546,  546,  546,  546,  547,

      548,  548,  438,   63,  679,   63,  679,  679,  679,  679,
      679,  679,  440,  679,  440,  550,   63,  551,  551,  551,
      551,  551,  551,  551,  551,  552,  679,  553,  679,  679,
      553,  553,  553,  550,   63,  554,  554,  554,  554,  554,
      555,  556,  556,  552,  679,  553,  679,  679,  553,  553,
      553,  556,  556,  556,  556,  556,  556,  507,  679,  561,
      561,  561,  561,  561,  561,  561,  561,  509,  679,  562,
      679,  679,  562,  562,  562,  507,  679,  565,  565,  565,
      565,  565,  565,  565,  565,  509,  679,  562,   87,   63,
      562,  562,  562,  679,   63,  153,   63,  679,  453,  679,

       63,  233,   63,  453,  679,  460,  679,   63,  679,  460,
      679,  467,  330,   63,  679,   63,  467,  438,   63,  679,
       63,  679,  474,   63,  474,  539,   63,  481,  544,  481,
      679,  679,  679,  679,  679,  440,  679,  679,  550,   63,
      589,  589,  589,  589,  589,  589,  589,  589,  552,   63,
      590,  679,  679,  590,  590,  590,  679,  679,  552,  550,
       63,  592,  592,  592,  592,  592,  592,  592,  592,  552,
       63,  590,  550,   63,  590,  590,  590,  679,  679,  453,
      679,  679,  552,  594,   63,  596,  596,  596,  596,  596,
      597,  598,  598,  460,   63,   63,   63,  679,  679,  679,

      679,  679,  679,  467,  474,  481,   63,  608,  608,  608,
      608,  608,  609,  610,  610,  611,  679,  613,  613,  613,
      613,  613,  614,  615,  615,  616,  679,  618,  618,  618,
      618,  618,  619,  620,  620,  550,   63,  679,   63,  679,
      594,  679,  679,   63,  611,  552,  616,  552,  679,  679,
      679,  679,  679,  679,  679,  679,   63,  679,  679,  679,
      679,  679,  679,  679,  679,  552,  645,  679,  647,  647,
      647,  647,  647,  648,  649,  649,   63,  651,  651,  651,
      651,  651,  652,  653,  653,  654,  679,  656,  656,  656,
      656,  656,  657,  658,  658,  645,  679,  679,   63,  654,

      679,  679,  679,  679,  679,  679,  679,  679,  679,   63,
      670,  670,  670,  670,  670,  671,  672,  672,   63,  674,
      674,  674,  674,  674,  675,  676,  676,   63,  679,   63,
      679,  679,  679,  679,  679,  679,  679,  679,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       41,  679,   41,   41,  679,   41,  679,   41,   45,  679,
       45,  679,   45,   45,   45,   45,   45,   45,   45,   46,
      679,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       49,  679,  679,   49,   49,   49,   49,   49,   49,   49,

       59,   59,   59,   58,   58,   58,   72,  679,   72,   75,
      679,   75,   78,   78,   78,   77,   77,   77,   79,   79,
       79,   90,   90,   90,   90,  100,  679,  100,  101,  101,
      102,  102,  102,  103,  103,  103,  104,  104,  104,  108,
      108,  108,  108,  119,  119,  119,  119,  127,  679,  127,
      130,  679,  130,  132,  132,  132,  133,  133,  133,  140,
      140,  140,  140,  148,  679,  148,  151,  679,  151,  152,
      152,  152,  152,  152,  156,  156,  156,  156,  163,  679,
      163,  164,  164,  164,  165,  165,  165,  166,  166,  166,
      170,  170,  170,  170,  174,  174,  174,  174,  174,  177,

      177,  177,  177,  184,  679,  184,  189,  189,  189,  189,
      196,  196,  199,  199,  200,  200,  200,  201,  201,  201,
      202,  202,  202,  209,  209,  209,  209,  216,  216,  216,
      216,  223,  679,  223,  226,  679,  226,  228,  679,  228,
      231,  679,  231,  232,  232,  232,  232,  232,  236,  236,
      236,  236,  243,  243,  165,  165,  165,  245,  245,  245,
      246,  246,  246,  250,  250,  250,  250,  254,  254,  254,
      254,  254,  257,  257,  257,  257,  261,  261,  261,  261,
      261,  264,  264,  264,  264,  271,  679,  271,  275,  679,
      275,  280,  280,  280,  280,  286,  286,  286,  287,  287,

      287,  288,  288,  288,  295,  295,  295,  295,  302,  302,
      302,  302,  309,  309,  309,  309,  315,  315,  318,  318,
      320,  679,  320,  323,  679,  323,  325,  679,  325,  328,
      679,  328,  329,  329,  329,  329,  329,  333,  333,  333,
      333,  337,  337,  337,  338,  338,  338,  339,  339,  339,
      343,  343,  343,  343,  347,  347,  347,  347,  347,  350,
      350,  350,  350,  354,  354,  354,  354,  354,  357,  357,
      357,  357,  361,  361,  361,  361,  361,  364,  364,  364,
      364,  368,  368,  372,  679,  372,  376,  679,  376,  381,
      381,  381,  381,  245,  245,  245,  388,  388,  388,  389,

      389,  389,  396,  396,  396,  396,  403,  403,  403,  403,
      410,  410,  410,  410,  417,  417,  417,  417,  423,  423,
      426,  426,  428,  679,  428,  431,  679,  431,  433,  679,
      433,  436,  679,  436,  437,  437,  437,  437,  437,  441,
      441,  441,  441,  445,  445,  445,  446,  446,  446,  454,
      454,  454,  454,  458,  458,  458,  458,  458,  461,  461,
      461,  461,  465,  465,  465,  465,  465,  468,  468,  468,
      468,  472,  472,  472,  472,  472,  475,  475,  475,  475,
      479,  479,  479,  479,  479,  482,  482,  482,  482,  486,
      486,  490,  679,  490,  494,  679,  494,  499,  499,  499,

      499,  505,  505,  505,  506,  506,  506,  514,  514,  679,
      514,  510,  510,  510,  517,  679,  517,  516,  516,  516,
      516,  521,  679,  521,  520,  520,  520,  520,  525,  679,
      525,  524,  524,  524,  524,  529,  679,  529,  528,  528,
      528,  528,  533,  679,  533,  532,  532,  532,  532,  535,
      535,  538,  538,  540,  679,  540,  543,  679,  543,  545,
      679,  545,  548,  679,  548,  549,  549,  549,  549,  549,
      553,  553,  553,  553,  338,  338,  338,  563,  563,  563,
      562,  562,  562,  566,  566,  679,  566,  567,  567,  567,
      567,  567,  568,  568,  679,  568,  569,  569,  569,  569,

      569,  570,  570,  679,  570,  571,  571,  571,  571,  571,
      572,  572,  679,  572,  573,  573,  573,  573,  573,  574,
      574,  679,  574,  575,  575,  575,  575,  575,  576,  576,
      679,  576,  577,  577,  581,  679,  581,  585,  679,  585,
      591,  679,  591,  590,  590,  590,  590,  593,  593,  593,
      595,  679,  595,  598,  679,  598,  599,  679,  599,  599,
      599,  600,  600,  679,  600,  601,  601,  679,  601,  602,
      602,  679,  602,  603,  603,  679,  603,  604,  604,  679,
      604,  605,  605,  679,  605,  606,  606,  679,  606,  607,
      607,  610,  610,  612,  679,  612,  615,  679,  615,  617,

      679,  617,  620,  679,  620,  621,  621,  621,  621,  621,
      622,  622,  679,  622,  623,  623,  623,  627,  679,  627,
      628,  628,  679,  628,  629,  629,  679,  629,  630,  630,
      679,  630,  631,  631,  679,  631,  632,  632,  679,  632,
      633,  633,  679,  633,  634,  634,  679,  634,  635,  635,
      639,  679,  639,  643,  679,  643,  644,  644,  679,  644,
      446,  446,  446,  646,  679,  646,  649,  679,  649,  564,
      564,  679,  564,  650,  650,  653,  653,  655,  679,  655,
      658,  679,  658,  659,  659,  679,  659,  663,  679,  663,
      664,  664,  668,  679,  668,  669,  669,  672,  672,  673,

      673,  676,  676,  677,  677,  678,  678,    7,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679
    } ;

static yyconst short int yy_chk[3940] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    3,    4,    5,    5,    6,    6,   26,
       38,   38,   26,   33,   33,   33,   92,   92,   46,   30,
       30,   46,  912,    5,   47,    6,   13,   47,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   30,   13,   52,
       52,   13,   13,   13,   14,  513,   14,   14,   14,   14,
       14,   14,   14,   14,   14,  513,   14,   52,  909,   14,
       14,   14,   15,   15,   15,   15,   15,   15,   18,  897,

       18,   18,  561,   18,   18,   18,   18,   18,   18,   18,
       18,   18,  561,   18,   18,  562,   18,   18,   18,   18,
       18,   18,   18,   18,   34,  562,   34,   34,   34,   34,
       34,   34,   34,   34,   34,  895,   34,  110,  110,   34,
       34,   34,   37,  565,   37,   37,   37,   37,   37,   37,
       37,   37,   37,  565,   37,  158,  158,   37,   37,   37,
       39,  885,   39,   39,   39,   39,   39,   39,   39,   39,
       39,  862,   39,  172,  172,   39,   39,   39,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   67,  860,   40,
       84,  858,   40,   40,   40,   42,   67,   42,   42,   84,

       42,   42,   42,   42,   42,   42,   42,   42,   42,  843,
       42,   42,  818,   42,   42,   42,   42,   42,   42,   42,
       42,   54,  816,   54,   54,   54,   54,   54,   54,   54,
       54,   56,  814,   56,   56,   56,   56,   56,   56,   56,
       56,   56,  785,   56,  179,  179,   56,   56,   56,   60,
       60,   60,   60,   60,   60,   60,   60,   60,  238,  238,
       60,  252,  252,   60,   60,   60,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  783,   64,  259,
      259,   64,   64,   64,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,  781,   65,  266,  266,   65,

       65,   65,   66,   66,   66,   66,   66,   66,   68,  754,
       68,   68,  752,   68,   68,   68,   68,   68,   68,   68,
       68,   68,  750,   68,   68,  726,   68,   68,   68,   68,
       68,   68,   68,   68,   71,   71,   71,   74,   86,   86,
       86,   87,   87,   87,  724,   74,   74,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,  716,   81,
      335,  335,   81,   81,   81,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,  711,   82,  345,  345,
       82,   82,   82,   83,   83,   83,   83,   83,   83,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,

      704,   88,  352,  352,   88,   88,   88,   89,   89,   89,
       89,   89,   89,   89,   89,   90,  703,   89,  359,  359,
       89,   89,   89,  696,   90,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,  108,   91,   93,   93,
       91,   91,   91,  366,  366,  108,  443,  443,   93,   98,
      694,   98,   98,   98,   98,   98,   98,   98,   98,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  456,  456,
      105,  463,  463,  105,  105,  105,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  686,  106,  470,
      470,  106,  106,  106,  107,  107,  107,  107,  107,  107,

      107,  107,  477,  477,  107,  484,  484,  107,  107,  107,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  123,  109,  111,  111,  109,  109,  109,  512,  512,
      123,  555,  555,  111,  116,  678,  116,  116,  116,  116,
      116,  116,  116,  116,  118,  118,  119,  119,  126,  126,
      126,  147,  147,  147,  118,  677,  119,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  676,  120,
      674,  673,  120,  120,  120,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  672,  121,  670,  669,
      121,  121,  121,  122,  122,  122,  122,  122,  122,  129,

      153,  153,  153,  222,  222,  222,  668,  129,  129,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      667,  135,  665,  664,  135,  135,  135,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  663,  136,
      662,  660,  136,  136,  136,  137,  137,  137,  137,  137,
      137,  138,  139,  139,  140,  140,  227,  227,  227,  659,
      138,  658,  139,  656,  140,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  655,  141,  653,  651,
      141,  141,  141,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  650,  142,  649,  647,  142,  142,

      142,  143,  143,  143,  143,  143,  143,  144,  646,  150,
      152,  233,  233,  233,  644,  643,  144,  150,  150,  152,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  642,  154,  640,  639,  154,  154,  154,  155,  155,
      155,  155,  155,  155,  155,  155,  156,  638,  155,  636,
      635,  155,  155,  155,  634,  156,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  170,  157,  159,
      159,  157,  157,  157,  633,  632,  170,  631,  630,  159,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  629,  628,

      167,  627,  626,  167,  167,  167,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  624,  168,  623,
      622,  168,  168,  168,  169,  169,  169,  169,  169,  169,
      169,  169,  620,  618,  169,  617,  615,  169,  169,  169,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  174,  171,  173,  173,  171,  171,  171,  613,  612,
      174,  610,  608,  173,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  607,  175,  606,  605,  175,
      175,  175,  176,  176,  176,  176,  176,  176,  176,  176,
      177,  604,  176,  603,  602,  176,  176,  176,  601,  177,

      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  193,  178,  180,  180,  178,  178,  178,  600,  599,
      193,  598,  596,  180,  182,  595,  182,  182,  182,  182,
      182,  182,  182,  182,  186,  593,  186,  186,  186,  186,
      186,  186,  186,  186,  188,  188,  189,  189,  240,  240,
      240,  240,  592,  591,  188,  588,  189,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  586,  190,
      585,  584,  190,  190,  190,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  582,  191,  581,  580,
      191,  191,  191,  192,  192,  192,  192,  192,  192,  195,

      195,  195,  195,  195,  195,  195,  195,  198,  241,  241,
      241,  319,  319,  319,  198,  198,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  578,  204,  577,
      576,  204,  204,  204,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  574,  205,  572,  570,  205,
      205,  205,  206,  206,  206,  206,  206,  206,  207,  208,
      208,  209,  209,  324,  324,  324,  568,  207,  566,  208,
      564,  209,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  563,  210,  560,  558,  210,  210,  210,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

      211,  557,  211,  548,  546,  211,  211,  211,  212,  212,
      212,  212,  212,  212,  213,  215,  215,  216,  216,  330,
      330,  330,  545,  213,  543,  215,  541,  216,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  540,
      217,  538,  536,  217,  217,  217,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  535,  218,  534,
      533,  218,  218,  218,  219,  219,  219,  219,  219,  219,
      220,  530,  225,  529,  230,  232,  427,  427,  427,  220,
      225,  225,  230,  230,  232,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  526,  234,  525,  522,

      234,  234,  234,  235,  235,  235,  235,  235,  235,  235,
      235,  236,  521,  235,  518,  517,  235,  235,  235,  514,
      236,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  250,  237,  239,  239,  237,  237,  237,  510,
      509,  250,  506,  505,  239,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  504,  497,  247,  495,  494,  247,
      247,  247,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  493,  248,  491,  490,  248,  248,  248,
      249,  249,  249,  249,  249,  249,  249,  249,  489,  487,
      249,  486,  451,  249,  249,  249,  251,  251,  251,  251,

      251,  251,  251,  251,  251,  251,  251,  254,  251,  253,
      253,  251,  251,  251,  450,  446,  254,  445,  436,  253,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  434,  255,  433,  431,  255,  255,  255,  256,  256,
      256,  256,  256,  256,  256,  256,  257,  429,  256,  428,
      426,  256,  256,  256,  424,  257,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  261,  258,  260,
      260,  258,  258,  258,  423,  422,  261,  415,  408,  260,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  401,  262,  389,  388,  262,  262,  262,  263,  263,

      263,  263,  263,  263,  263,  263,  264,  387,  263,  386,
      379,  263,  263,  263,  377,  264,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  284,  265,  267,
      267,  265,  265,  265,  376,  375,  284,  373,  372,  267,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  273,
      371,  273,  273,  273,  273,  273,  273,  273,  273,  277,
      369,  277,  277,  277,  277,  277,  277,  277,  277,  279,
      279,  280,  280,  432,  432,  432,  438,  438,  438,  279,
      368,  280,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  339,  281,  338,  337,  281,  281,  281,

      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  328,  282,  326,  325,  282,  282,  282,  283,  283,
      283,  283,  283,  283,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  323,  290,  321,  320,  290,
      290,  290,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  318,  291,  316,  315,  291,  291,  291,
      292,  292,  292,  292,  292,  292,  293,  294,  294,  295,
      295,  507,  507,  507,  314,  293,  307,  294,  300,  295,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  289,  296,  288,  287,  296,  296,  296,  297,  297,

      297,  297,  297,  297,  297,  297,  297,  297,  297,  286,
      297,  285,  278,  297,  297,  297,  298,  298,  298,  298,
      298,  298,  299,  301,  301,  302,  302,  539,  539,  539,
      276,  299,  275,  301,  274,  302,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  272,  303,  271,
      270,  303,  303,  303,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  268,  304,  246,  245,  304,
      304,  304,  305,  305,  305,  305,  305,  305,  306,  308,
      308,  309,  309,  544,  544,  544,  244,  306,  243,  308,
      231,  309,  310,  310,  310,  310,  310,  310,  310,  310,

      310,  310,  310,  229,  310,  228,  226,  310,  310,  310,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  224,  311,  223,  221,  311,  311,  311,  312,  312,
      312,  312,  312,  312,  313,  214,  203,  317,  322,  202,
      327,  329,  201,  313,  317,  317,  322,  322,  327,  327,
      329,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  200,  331,  199,  197,  331,  331,  331,  332,
      332,  332,  332,  332,  332,  332,  332,  333,  196,  332,
      194,  187,  332,  332,  332,  185,  333,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  343,  334,

      336,  336,  334,  334,  334,  184,  183,  343,  181,  166,
      336,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      165,  164,  340,  163,  162,  340,  340,  340,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  160,
      341,  151,  149,  341,  341,  341,  342,  342,  342,  342,
      342,  342,  342,  342,  148,  145,  342,  134,  133,  342,
      342,  342,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  347,  344,  346,  346,  344,  344,  344,
      132,  131,  347,  130,  128,  346,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  127,  348,  124,

      117,  348,  348,  348,  349,  349,  349,  349,  349,  349,
      349,  349,  350,  115,  349,  114,  104,  349,  349,  349,
      103,  350,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  354,  351,  353,  353,  351,  351,  351,
      102,  101,  354,  100,   99,  353,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,   97,  355,   95,
       94,  355,  355,  355,  356,  356,  356,  356,  356,  356,
      356,  356,  357,   80,  356,   79,   78,  356,  356,  356,
       77,  357,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  361,  358,  360,  360,  358,  358,  358,

       76,   75,  361,   73,   72,  360,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,   70,  362,   69,
       63,  362,  362,  362,  363,  363,  363,  363,  363,  363,
      363,  363,  364,   62,  363,   59,   58,  363,  363,  363,
       57,  364,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  385,  365,  367,  367,  365,  365,  365,
       55,   53,  385,   44,   43,  367,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  374,   36,  374,  374,  374,
      374,  374,  374,  374,  374,  378,   35,  378,  378,  378,
      378,  378,  378,  378,  378,  380,  380,  381,  381,  550,

      550,  550,  594,  594,  594,  380,   31,  381,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,   21,
      382,   20,   16,  382,  382,  382,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,   12,  383,    9,
        7,  383,  383,  383,  384,  384,  384,  384,  384,  384,
      390,  390,  390,  390,  390,  390,  390,  390,  390,    0,
      390,    0,    0,  390,  390,  390,  391,  391,  391,  391,
      391,  391,  391,  391,  391,  391,  391,    0,  391,    0,
        0,  391,  391,  391,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,    0,  392,    0,    0,  392,

      392,  392,  393,  393,  393,  393,  393,  393,  394,  395,
      395,  396,  396,  611,  611,  611,    0,  394,    0,  395,
        0,  396,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,    0,  397,    0,    0,  397,  397,  397,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,    0,  398,    0,    0,  398,  398,  398,  399,  399,
      399,  399,  399,  399,  400,  402,  402,  403,  403,  616,
      616,  616,    0,  400,    0,  402,    0,  403,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,    0,
      404,    0,    0,  404,  404,  404,  405,  405,  405,  405,

      405,  405,  405,  405,  405,  405,  405,    0,  405,    0,
        0,  405,  405,  405,  406,  406,  406,  406,  406,  406,
      407,  409,  409,  410,  410,  645,  645,  645,    0,  407,
        0,  409,    0,  410,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,    0,  411,    0,    0,  411,
      411,  411,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,    0,  412,    0,    0,  412,  412,  412,
      413,  413,  413,  413,  413,  413,  414,  416,  416,  417,
      417,  654,  654,  654,    0,  414,    0,  416,    0,  417,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,

      418,    0,  418,    0,    0,  418,  418,  418,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,    0,
      419,    0,    0,  419,  419,  419,  420,  420,  420,  420,
      420,  420,  421,    0,    0,  425,  430,    0,  435,  437,
        0,  421,  425,  425,  430,  430,  435,  435,  437,  439,
      439,  439,  439,  439,  439,  439,  439,  439,  439,  439,
        0,  439,    0,    0,  439,  439,  439,  440,  440,  440,
      440,  440,  440,  440,  440,  441,    0,  440,    0,    0,
      440,  440,  440,    0,  441,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  454,  442,  444,  444,

      442,  442,  442,    0,    0,  454,    0,    0,  444,  447,
        0,  447,  447,  447,  447,  447,  447,  447,  447,  447,
        0,  447,    0,    0,  447,  447,  447,  448,    0,  448,
      448,  448,  448,  448,  448,  448,  448,  448,    0,  448,
        0,    0,  448,  448,  448,  449,  449,  449,  449,  449,
      449,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,    0,  452,    0,    0,  452,  452,  452,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      458,  455,  457,  457,  455,  455,  455,    0,    0,  458,
        0,    0,  457,  459,  459,  459,  459,  459,  459,  459,

      459,  459,  459,  459,  461,  459,    0,    0,  459,  459,
      459,    0,    0,  461,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  465,  462,  464,  464,  462,
      462,  462,    0,    0,  465,    0,    0,  464,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  468,
      466,    0,    0,  466,  466,  466,    0,    0,  468,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      472,  469,  471,  471,  469,  469,  469,    0,    0,  472,
        0,    0,  471,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  473,  475,  473,    0,    0,  473,  473,

      473,    0,    0,  475,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  479,  476,  478,  478,  476,
      476,  476,    0,    0,  479,    0,    0,  478,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  482,
      480,    0,    0,  480,  480,  480,    0,    0,  482,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      503,  483,  485,  485,  483,  483,  483,    0,    0,  503,
        0,    0,  485,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  492,    0,  492,  492,  492,  492,  492,  492,
      492,  492,  496,    0,  496,  496,  496,  496,  496,  496,

      496,  496,  498,  498,  499,  499,    0,    0,    0,    0,
        0,    0,  498,    0,  499,  500,  500,  500,  500,  500,
      500,  500,  500,  500,  500,  500,    0,  500,    0,    0,
      500,  500,  500,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,    0,  501,    0,    0,  501,  501,
      501,  502,  502,  502,  502,  502,  502,  508,    0,  508,
      508,  508,  508,  508,  508,  508,  508,  508,    0,  508,
        0,    0,  508,  508,  508,  511,    0,  511,  511,  511,
      511,  511,  511,  511,  511,  511,    0,  511,  515,  515,
      511,  511,  511,  516,  516,  519,  519,    0,  515,  520,

      520,  523,  523,  516,    0,  519,  524,  524,    0,  520,
        0,  523,  527,  527,  528,  528,  524,  531,  531,  532,
      532,    0,  527,  537,  528,  542,  549,  531,  547,  532,
      537,  537,    0,  542,  542,  549,  547,  547,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  553,
      551,    0,    0,  551,  551,  551,    0,    0,  553,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      567,  554,  556,  556,  554,  554,  554,    0,    0,  567,
        0,    0,  556,  559,  569,  559,  559,  559,  559,  559,
      559,  559,  559,  569,  571,  573,  575,    0,    0,    0,

        0,    0,    0,  571,  573,  575,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  583,    0,  583,  583,  583,
      583,  583,  583,  583,  583,  587,    0,  587,  587,  587,
      587,  587,  587,  587,  587,  589,  589,  590,  590,    0,
      597,    0,    0,  609,  614,  589,  619,  590,  597,  597,
      609,  609,  614,  614,  619,  619,  621,    0,    0,    0,
        0,    0,    0,    0,    0,  621,  625,    0,  625,  625,
      625,  625,  625,  625,  625,  625,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  641,    0,  641,  641,  641,
      641,  641,  641,  641,  641,  648,    0,    0,  652,  657,

        0,    0,    0,  648,  648,  652,  652,  657,  657,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  671,    0,  675,
        0,    0,    0,    0,  671,  671,  675,  675,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      682,    0,  682,  682,    0,  682,    0,  682,  683,    0,
      683,    0,  683,  683,  683,  683,  683,  683,  683,  684,
        0,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      685,    0,    0,  685,  685,  685,  685,  685,  685,  685,

      687,  687,  687,  688,  688,  688,  689,    0,  689,  690,
        0,  690,  691,  691,  691,  692,  692,  692,  693,  693,
      693,  695,  695,  695,  695,  697,    0,  697,  698,  698,
      699,  699,  699,  700,  700,  700,  701,  701,  701,  702,
      702,  702,  702,  705,  705,  705,  705,  706,    0,  706,
      707,    0,  707,  708,  708,  708,  709,  709,  709,  710,
      710,  710,  710,  712,    0,  712,  713,    0,  713,  714,
      714,  714,  714,  714,  715,  715,  715,  715,  717,    0,
      717,  718,  718,  718,  719,  719,  719,  720,  720,  720,
      721,  721,  721,  721,  722,  722,  722,  722,  722,  723,

      723,  723,  723,  725,    0,  725,  727,  727,  727,  727,
      728,  728,  729,  729,  730,  730,  730,  731,  731,  731,
      732,  732,  732,  733,  733,  733,  733,  734,  734,  734,
      734,  735,    0,  735,  736,    0,  736,  737,    0,  737,
      738,    0,  738,  739,  739,  739,  739,  739,  740,  740,
      740,  740,  741,  741,  742,  742,  742,  743,  743,  743,
      744,  744,  744,  745,  745,  745,  745,  746,  746,  746,
      746,  746,  747,  747,  747,  747,  748,  748,  748,  748,
      748,  749,  749,  749,  749,  751,    0,  751,  753,    0,
      753,  755,  755,  755,  755,  756,  756,  756,  757,  757,

      757,  758,  758,  758,  759,  759,  759,  759,  760,  760,
      760,  760,  761,  761,  761,  761,  762,  762,  763,  763,
      764,    0,  764,  765,    0,  765,  766,    0,  766,  767,
        0,  767,  768,  768,  768,  768,  768,  769,  769,  769,
      769,  770,  770,  770,  771,  771,  771,  772,  772,  772,
      773,  773,  773,  773,  774,  774,  774,  774,  774,  775,
      775,  775,  775,  776,  776,  776,  776,  776,  777,  777,
      777,  777,  778,  778,  778,  778,  778,  779,  779,  779,
      779,  780,  780,  782,    0,  782,  784,    0,  784,  786,
      786,  786,  786,  787,  787,  787,  788,  788,  788,  789,

      789,  789,  790,  790,  790,  790,  791,  791,  791,  791,
      792,  792,  792,  792,  793,  793,  793,  793,  794,  794,
      795,  795,  796,    0,  796,  797,    0,  797,  798,    0,
      798,  799,    0,  799,  800,  800,  800,  800,  800,  801,
      801,  801,  801,  802,  802,  802,  803,  803,  803,  804,
      804,  804,  804,  805,  805,  805,  805,  805,  806,  806,
      806,  806,  807,  807,  807,  807,  807,  808,  808,  808,
      808,  809,  809,  809,  809,  809,  810,  810,  810,  810,
      811,  811,  811,  811,  811,  812,  812,  812,  812,  813,
      813,  815,    0,  815,  817,    0,  817,  819,  819,  819,

      819,  820,  820,  820,  821,  821,  821,  822,  822,    0,
      822,  823,  823,  823,  824,    0,  824,  825,  825,  825,
      825,  826,    0,  826,  827,  827,  827,  827,  828,    0,
      828,  829,  829,  829,  829,  830,    0,  830,  831,  831,
      831,  831,  832,    0,  832,  833,  833,  833,  833,  834,
      834,  835,  835,  836,    0,  836,  837,    0,  837,  838,
        0,  838,  839,    0,  839,  840,  840,  840,  840,  840,
      841,  841,  841,  841,  842,  842,  842,  844,  844,  844,
      845,  845,  845,  846,  846,    0,  846,  847,  847,  847,
      847,  847,  848,  848,    0,  848,  849,  849,  849,  849,

      849,  850,  850,    0,  850,  851,  851,  851,  851,  851,
      852,  852,    0,  852,  853,  853,  853,  853,  853,  854,
      854,    0,  854,  855,  855,  855,  855,  855,  856,  856,
        0,  856,  857,  857,  859,    0,  859,  861,    0,  861,
      863,    0,  863,  864,  864,  864,  864,  865,  865,  865,
      866,    0,  866,  867,    0,  867,  868,    0,  868,  868,
      868,  869,  869,    0,  869,  870,  870,    0,  870,  871,
      871,    0,  871,  872,  872,    0,  872,  873,  873,    0,
      873,  874,  874,    0,  874,  875,  875,    0,  875,  876,
      876,  877,  877,  878,    0,  878,  879,    0,  879,  880,

        0,  880,  881,    0,  881,  882,  882,  882,  882,  882,
      883,  883,    0,  883,  884,  884,  884,  886,    0,  886,
      887,  887,    0,  887,  888,  888,    0,  888,  889,  889,
        0,  889,  890,  890,    0,  890,  891,  891,    0,  891,
      892,  892,    0,  892,  893,  893,    0,  893,  894,  894,
      896,    0,  896,  898,    0,  898,  899,  899,    0,  899,
      900,  900,  900,  901,    0,  901,  902,    0,  902,  903,
      903,    0,  903,  904,  904,  905,  905,  906,    0,  906,
      907,    0,  907,  908,  908,    0,  908,  910,    0,  910,
      911,  911,  913,    0,  913,  914,  914,  915,  915,  916,

      916,  917,  917,  918,  918,  919,  919,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "boot.ll"
#define INITIAL 0
#line 2 "boot.ll"
#include "libxorp/xorp.h"
#include "y.boot_tab.h"
int boot_linenum = 1;
extern char* bootlval;
string parsebuf;
#define YY_NO_UNPUT 1
#define comment 1

#define string 2

/*
 * IPv6 address representation in Augmented Backus-Naur Form (ABNF).
 * Representation taken from email by Roy T. Fielding <roy.fielding@day.com>
 * to uri@w3.org mailing list on 05 Dec 2002:
 *   http://lists.w3.org/Archives/Public/uri/2002Dec/0000.html
 *
 *    IPv6address   = (                          6( h4 ":" ) ls32 )
 *                  / (                     "::" 5( h4 ":" ) ls32 )
 *                  / ( [              h4 ] "::" 4( h4 ":" ) ls32 )
 *                  / ( [ *1( h4 ":" ) h4 ] "::" 3( h4 ":" ) ls32 )
 *                  / ( [ *2( h4 ":" ) h4 ] "::" 2( h4 ":" ) ls32 )
 *                  / ( [ *3( h4 ":" ) h4 ] "::"    h4 ":"   ls32 )
 *                  / ( [ *4( h4 ":" ) h4 ] "::"             ls32 )
 *                  / ( [ *5( h4 ":" ) h4 ] "::"             h4   )
 *                  / ( [ *6( h4 ":" ) h4 ] "::"                  )
 *
 *    ls32          = ( h4 ":" h4 ) / IPv4address
 *                  ; least-significant 32 bits of address
 *    h4            = 1*4HEXDIG
 *    IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet
 *    dec-octet     = 1*2DIGIT                      ; 0-9, 00-99
 *                  / ( "0" / "1" ) 2DIGIT          ; 000-199
 *                  / "2" %x30-34 DIGIT             ; 200-249
 *                  / "25" %x30-35                  ; 250-255
 *
 */
#line 1562 "lex.boot.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 63 "boot.ll"


#line 1716 "lex.boot.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 680 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3908 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 65 "boot.ll"
{
	return UPLEVEL;
	}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 69 "boot.ll"
{
	return DOWNLEVEL;
	}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "boot.ll"
/* whitespace */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "boot.ll"
{
	boot_linenum++;
	return END;
	}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "boot.ll"
{
	return END;
	}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 84 "boot.ll"
{
	return ASSIGN_OPERATOR;
	}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 88 "boot.ll"
{
	bootlval = strdup(boottext);
	return BOOL_VALUE;
	}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 93 "boot.ll"
{
	bootlval = strdup(boottext);
	return BOOL_VALUE;
	}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 98 "boot.ll"
{
	bootlval = strdup(boottext);
	return UINT_VALUE;
	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 103 "boot.ll"
{
	bootlval = strdup(boottext);
	return IPV4_VALUE;
	}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 108 "boot.ll"
{
	bootlval = strdup(boottext);
	return IPV4NET_VALUE;
	}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 113 "boot.ll"
{
	bootlval = strdup(boottext);
	return IPV6_VALUE;
	}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 118 "boot.ll"
{
	bootlval = strdup(boottext);
	return IPV6NET_VALUE;
	}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 123 "boot.ll"
{
	bootlval = strdup(boottext);
	return MACADDR_VALUE;
	}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 128 "boot.ll"
{
	bootlval = strdup(boottext);
	return LITERAL;
	}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 133 "boot.ll"
{
			BEGIN(string);
			parsebuf="";
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 138 "boot.ll"
/* normal text */ {
			parsebuf += boottext;
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 142 "boot.ll"
/* allow quoted quotes */ {
			parsebuf += "\"";
			}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 146 "boot.ll"
/* allow quoted backslash */ {
			parsebuf += "\\";
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 150 "boot.ll"
/* allow unquoted newlines */ {
			boot_linenum++;
			parsebuf += "\n";
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 155 "boot.ll"
/* allow quoted newlines */ {
			boot_linenum++;
			parsebuf += "\n";
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 160 "boot.ll"
{
			BEGIN(INITIAL);
			bootlval = strdup(parsebuf.c_str());
			return STRING;
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 166 "boot.ll"
BEGIN(comment);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 168 "boot.ll"
/* eat up anything that's not a '*' */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 170 "boot.ll"
/* eat up '*'s not followed by "/"s */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 172 "boot.ll"
boot_linenum++;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 174 "boot.ll"
BEGIN(INITIAL);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 176 "boot.ll"
{
	/* everything else is a syntax error */
	return SYNTAX_ERROR;
	}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 182 "boot.ll"
ECHO;
	YY_BREAK
#line 2004 "lex.boot.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(string):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 680 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 680 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 679);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 182 "boot.ll"

