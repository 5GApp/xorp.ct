#define yy_create_buffer boot_create_buffer
#define yy_delete_buffer boot_delete_buffer
#define yy_scan_buffer boot_scan_buffer
#define yy_scan_string boot_scan_string
#define yy_scan_bytes boot_scan_bytes
#define yy_flex_debug boot_flex_debug
#define yy_init_buffer boot_init_buffer
#define yy_flush_buffer boot_flush_buffer
#define yy_load_buffer_state boot_load_buffer_state
#define yy_switch_to_buffer boot_switch_to_buffer
#define yyin bootin
#define yyleng bootleng
#define yylex bootlex
#define yyout bootout
#define yyrestart bootrestart
#define yytext boottext

#line 19 "lex.boot.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 * $FreeBSD: src/usr.bin/lex/flex.skl,v 1.4 1999/10/27 07:56:44 obrien Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 29
#define YY_END_OF_BUFFER 30
static yyconst short int yy_accept[681] =
    {   0,
        0,    0,   24,   24,   17,   17,   30,   28,    3,    4,
       16,   28,    9,    9,    9,    6,    5,   28,   15,   15,
       15,   15,    1,    2,   24,   26,   25,   17,   20,   22,
       29,    3,   23,    0,    9,    0,    0,    9,    9,    9,
       12,   15,   15,   15,   15,   24,   25,   25,   27,   17,
       21,   18,   19,    0,    0,    0,    9,    0,    0,    0,
       12,    9,    9,    0,   12,   12,   12,   12,   15,   15,
       15,    0,    0,    0,    0,    0,    9,    0,    0,    0,
        0,   12,   12,   12,   12,   13,   13,    0,   12,    0,
       12,   12,   12,   12,   15,   15,    7,    0,    0,    0,

        0,    9,    0,    0,    0,   12,   12,    0,   12,   12,
       12,   12,   13,   13,   13,    0,    0,    0,   12,   12,
       12,   12,   12,   12,   12,    8,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   13,    0,    0,    0,
        0,    0,   12,    0,   12,    0,   12,   12,   12,   12,
       10,   10,   10,    0,    0,    0,    0,   12,   12,    0,
       12,   12,   12,   12,   12,   12,    0,   12,   12,   12,
       12,    0,    0,    0,    0,    0,    0,    0,   12,   12,
       12,   12,   12,   12,   12,    0,   10,   10,   10,   10,

        0,    0,    0,    0,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   12,    0,   12,    0,   12,   12,   12,   12,
       11,   11,   11,   10,    0,    0,    0,   12,   12,    0,
       12,   12,   12,   12,   12,   12,    0,   12,   12,   12,
       12,   12,   12,    0,   12,   12,   12,   12,   12,   12,
       12,    0,    0,    0,    0,    0,    0,    0,    0,   12,
       12,   12,   12,   12,   12,   12,    0,    0,    0,    0,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   12,
        0,   12,    0,   12,   12,   12,   12,    0,    0,    0,
       12,   12,    0,   12,   12,   12,   12,   12,   12,    0,
       12,   12,   12,   12,   12,   12,    0,   12,   12,   12,
       12,   12,   12,    0,   12,   12,   12,   12,   12,   12,
       12,   12,    0,    0,    0,    0,    0,    0,    0,    0,
       12,   12,   12,   12,   12,   12,   12,    0,    0,    0,
        0,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   12,    0,   12,
        0,   12,   12,   12,   12,    0,    0,    0,    0,    0,
       12,    0,   12,    0,   12,   12,   12,   12,   12,   12,
        0,   12,   12,   12,   12,   12,   12,    0,   12,   12,
       12,   12,   12,   12,    0,   12,   12,   12,   12,   12,
       12,    0,   12,   12,   12,   12,   12,   12,   12,   12,
        0,    0,    0,    0,    0,    0,    0,    0,   12,   12,

       12,   12,   12,   12,   12,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   12,
        0,   12,    0,   12,   12,   12,   12,    0,    0,    0,
        0,    0,    0,   12,   12,    0,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,    0,    0,    0,    0,    0,    0,    0,    0,   12,
       12,   12,   12,    0,    0,    0,    0,    0,    0,    0,

       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   12,   12,   14,    0,    0,    0,    0,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,    0,
        0,    0,    0,    0,   12,    0,    0,    0,    0,    0,
       12,   12,   12,   12,    0,    0,    0,    0,    0,   12,
       12,   12,   12,    0,   12,   12,   12,   12,    0,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   15,   15,   16,   17,   18,    1,
        1,    1,    1,    1,   19,   19,   19,   19,   19,   19,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   20,    1,    1,    6,    1,   21,   22,   22,   22,

       23,   24,   25,   25,   25,   25,   25,   26,   25,   25,
       25,   25,   25,   27,   28,   29,   30,   25,   25,   25,
       25,   25,   31,    1,   32,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[33] =
    {   0,
        1,    1,    2,    3,    4,    5,    6,    7,    8,    8,
        8,    8,    8,    8,    8,    8,    9,    1,   10,   11,
       12,   12,   12,   12,    5,    5,    5,    5,    5,    5,
        1,    1
    } ;

static yyconst short int yy_base[922] =
    {   0,
        0,    0,   30,   31,   34,   36, 2239, 3935, 2217, 3935,
     3935, 2211,   50,   68,   84, 2196, 3935, 2195,   95, 2171,
        0, 2163, 3935, 3935,    0, 3935,   36,    0, 3935, 3935,
       48, 2175, 3935,   36,  119, 2158, 2156,  137,   27,  155,
      172,    0,  193, 2146, 2141,    0,   45,   50, 3935,    0,
     3935, 3935,  221, 2163,  235, 2139,  245, 2127, 2114, 2112,
      262,    0, 2120, 2116,  280,  296,  304,  181,  315, 2097,
     2101,  217, 2093, 2091,  222, 2078, 2066, 2064, 2063, 2062,
     2061,  339,  355,  363,  184,    0,  221,  224,  371,  387,
      396,  405,   33,  415, 2037, 2029,    0, 2032,  426, 2030,

     2028, 2017, 2016, 2015, 1991,  435,  453,  469,  417,  485,
      224,  495, 3935,    0, 1990, 1983,  506, 1981,  497,  516,
      527,  543,  551,  558, 1970,    0,  417, 1969, 1968,  561,
     1967, 1956, 1955, 1954, 1953,  571,  587,  595,  602,  604,
      606,  617,  633,  641,  648, 1943, 3935,  420, 1941, 1928,
      651, 1926,  651,  497,  662,  678,  687,  696,  264,  706,
     1924,  716, 1923, 1923, 1912, 1911, 1898,  725,  743,  759,
      768,  777,  437,  787,  788,  799,  815,  824,  833,  471,
      843, 1898,  854, 1886, 1885, 1884,  864, 1883,  845,  874,
      885,  901,  909,  916, 1882,  925, 1880, 1879,  934, 1878,

     1857, 1852, 1850, 1836,  944,  960,  968,  975,  977,  979,
      990, 1006, 1014, 1021, 1844, 1023, 1025, 1036, 1052, 1060,
     1067, 1830,  500, 1829, 1828, 1070, 1827,  516, 1826, 1825,
     1072, 1824, 1072,  519, 1083, 1099, 1108, 1117,  516, 1127,
      560,  606, 3935, 1810, 1796, 1794, 1780, 1137, 1155, 1171,
     1180, 1189,  558, 1199, 1200, 1211, 1227, 1236, 1245,  645,
     1255, 1256, 1267, 1283, 1292, 1301,  647, 1311, 1787, 1321,
     1773, 1773, 1772, 1331, 1771, 1770, 1769, 1341, 1768, 1351,
     1353, 1364, 1380, 1388, 1395, 1755, 1740, 1738, 1724, 1722,
     1406, 1422, 1430, 1437, 1439, 1441, 1452, 1468, 1476, 1483,

     1718, 1485, 1487, 1498, 1514, 1522, 1529, 1717, 1531, 1533,
     1544, 1560, 1568, 1575, 1716, 1714, 1713, 1578, 1712,  706,
     1712, 1699, 1580, 1694,  709, 1692, 1678, 1582, 1676, 1582,
      788, 1593, 1609, 1618, 1627,  706, 1637, 1650, 1648, 1647,
     1647, 1665, 1681, 1690, 1699,  727, 1709, 1710, 1721, 1737,
     1746, 1755,  785, 1765, 1766, 1777, 1793, 1802, 1811,  787,
     1821, 1822, 1833, 1849, 1858, 1867,  839, 1877, 1645, 1644,
     1887, 1643, 1643, 1642, 1897, 1641, 1640, 1639, 1907, 1627,
     1917, 1919, 1930, 1946, 1954, 1961, 1622, 1610, 1596, 1594,
     1970, 1988, 2004, 2012, 2019, 2021, 2023, 2034, 2050, 2058,

     2065, 1584, 2067, 2069, 2080, 2096, 2104, 2111, 1581, 2113,
     2115, 2126, 2142, 2150, 2157, 1578, 2159, 2161, 2172, 2188,
     2196, 2203, 1577, 1556, 1554, 2206, 1541,  847, 1540, 1538,
     2208, 1537,  874, 1536, 1535, 2210, 1511, 2210,  877, 2221,
     2237, 2246, 2255,  874, 2265, 1499, 1486, 2276, 2294, 2310,
     1493, 1482, 2318,    0, 2267, 2334,  910, 2344, 2345, 2356,
        0, 2366, 2375,  912, 2385, 2386, 2397,    0, 2407, 2416,
      914, 2426, 2427, 2438,    0, 2448, 2457,  916, 2467, 2468,
     2479,    0, 2489, 2498,  928, 2508, 1490, 1489, 2518, 1488,
     1465, 1463, 2528, 1450, 1448, 1446, 2538, 1445, 2548, 2550,

     2561, 2577, 2585, 2592, 1444, 1433, 1409,  936, 2603, 1407,
     1394, 2621,  973,   69, 1402, 2594, 2639, 1401, 1401, 2641,
     2643, 1399, 1399, 2645, 2647, 1397, 1397, 2658, 2660, 1376,
     1375, 2662, 2664, 1361, 1360, 1358, 1357, 2668, 1356, 1025,
     1356, 1355, 2671, 1342, 1072, 1332, 1320, 2673, 1319, 2665,
     1127, 2683,    0, 2693, 2702,  975, 2712, 1308, 1317, 2723,
     1316,   96,  120, 1314, 1313,  138, 1312, 2714, 1300, 2732,
     1295, 2733, 1293, 2734, 1279, 2735, 1277, 1263, 1244, 2745,
     1239, 1238, 1224, 2755, 1222, 1208, 1189, 2765, 1184, 2775,
     2777, 1181, 1168, 1156, 1130, 1150, 1148, 2780, 1147, 1126,

     1134, 1116, 1111, 1109, 1095, 1093, 1070, 1068, 1048, 2782,
     1046, 1200, 1034, 1032, 2784, 1030, 1203, 1003, 1001, 2786,
      988, 2795,  985,  947,  955, 2806,  941,  898,  895,  864,
      851,  832,  827,  825,  811,  809,  776, 2815,  771,  770,
      756, 2825,  754,  738,  695, 1256,  691,  689, 2835,  675,
      672,  656, 2837,  649, 1259,  630,  628, 2839,  615,  612,
      610, 2848,  583,  582,  559,  539, 2857,  537,  482,  465,
      463, 2866,  447,  416,  404, 2868,  399,  397,  383, 3935,
     2884, 2896, 2901, 2911, 2923, 2935, 2947,  381, 2952, 2957,
     2964, 2967, 2968, 2973, 2978,  351, 2984,  349, 2991, 2992,

     2994, 2999, 3004, 3010,  327,  325, 3016, 3023, 3026, 3027,
     3032, 3038,  315, 3045, 3048, 3051, 3057,  312, 3064, 3065,
     3070, 3075, 3081, 3088, 3094,  292, 3101,  290, 3103, 3109,
     3111, 3112, 3117, 3122, 3128, 3134, 3141, 3144, 3147, 3150,
     3153, 3159, 3165, 3166, 3171, 3176, 3182, 3189, 3195, 3202,
     3208,  274, 3215,  257, 3218,  255, 3220, 3225, 3230, 3235,
     3241, 3247, 3253, 3259, 3261, 3264, 3267, 3270, 3273, 3276,
     3282, 3287, 3292, 3297, 3303, 3310, 3316, 3323, 3329, 3336,
     3342, 3348,  245, 3351,  235, 3354,  228, 3356, 3361, 3366,
     3371, 3377, 3383, 3389, 3395, 3401, 3403, 3406, 3409, 3412,

     3415, 3418, 3424, 3429, 3434, 3440, 3447, 3453, 3460, 3466,
     3473, 3479, 3486, 3492, 3498,  205, 3501,  203, 3504,  182,
     3506, 3511, 3516, 3522, 3527, 3532, 3538, 3543, 3549, 3554,
     3560, 3565, 3571, 3576, 3582, 3588, 3590, 3593, 3596, 3599,
     3602, 3605, 3611, 3616,  167, 3621, 3626, 3632, 3639, 3645,
     3652, 3658, 3665, 3671, 3678, 3684, 3691, 3697, 3703,  165,
     3706,  155, 3709,  149, 3710, 3716, 3721, 3728, 3731, 3734,
     3740, 3746, 3752, 3758, 3764, 3770, 3776, 3782, 3784, 3787,
     3790, 3793, 3796, 3799, 3805, 3810,  131, 3817, 3819, 3825,
     3831, 3837, 3843, 3849, 3855, 3861,  107, 3864,   92, 3867,

     3869, 3874, 3881, 3884, 3886, 3892, 3894, 3897, 3900, 3902,
       80, 3909, 3911,   62, 3914, 3916, 3918, 3920, 3922, 3924,
     3926
    } ;

static yyconst short int yy_def[922] =
    {   0,
      680,    1,  681,  681,  682,  682,  680,  680,  680,  680,
      680,  680,  680,  680,   14,  680,  680,  683,  680,   19,
      684,  684,  680,  680,  685,  680,  686,  687,  680,  680,
      680,  680,  680,  688,  680,  689,  690,  680,   38,  680,
      680,  684,  680,   43,  684,  685,  686,  686,  680,  687,
      680,  680,  680,  691,  680,  692,  680,  693,  694,  695,
      680,   57,   57,  696,  680,   65,   66,  697,  680,  684,
      684,  698,  692,  699,  699,  680,  700,  680,  701,  702,
      703,  680,   82,   83,  704,  705,  705,  706,  680,  680,
      707,   89,   92,  707,  684,  684,  684,  708,  680,  709,

      680,  700,  702,  710,  711,  680,  680,  680,  712,  107,
      110,  712,  680,  713,  713,  714,  680,  715,  716,  716,
      680,  121,  122,  717,  120,  684,  718,  709,  719,  719,
      680,  720,  680,  721,  722,  680,  136,  137,  723,  724,
      724,  680,  142,  143,  725,  141,  680,  726,  715,  727,
      727,  680,  680,  728,  680,  680,  729,  155,  158,  729,
      730,  680,  731,  680,  732,  733,  734,  680,  680,  680,
      735,  169,  172,  735,  680,  680,  680,  736,  176,  179,
      736,  737,  680,  738,  680,  739,  680,  740,  741,  741,
      680,  191,  192,  742,  190,  680,  731,  743,  743,  680,

      744,  680,  745,  746,  680,  205,  206,  747,  748,  748,
      680,  211,  212,  749,  210,  750,  750,  680,  218,  219,
      751,  217,  752,  738,  753,  753,  680,  754,  740,  755,
      755,  680,  680,  756,  680,  680,  757,  235,  238,  757,
      196,  680,  680,  680,  758,  759,  760,  680,  680,  680,
      761,  249,  252,  761,  680,  680,  680,  762,  256,  259,
      762,  680,  680,  680,  763,  263,  266,  763,  764,  680,
      765,  680,  766,  680,  767,  680,  768,  680,  769,  770,
      770,  680,  282,  283,  771,  281,  772,  680,  773,  774,
      680,  291,  292,  775,  776,  776,  680,  297,  298,  777,

      296,  778,  778,  680,  304,  305,  779,  303,  780,  780,
      680,  311,  312,  781,  310,  765,  782,  782,  680,  783,
      767,  784,  784,  680,  785,  769,  786,  786,  680,  680,
      787,  680,  680,  788,  332,  335,  788,  789,  790,  791,
      680,  680,  680,  792,  342,  345,  792,  680,  680,  680,
      793,  349,  352,  793,  680,  680,  680,  794,  356,  359,
      794,  680,  680,  680,  795,  363,  366,  795,  680,  796,
      680,  797,  680,  798,  680,  799,  680,  800,  680,  801,
      802,  802,  680,  383,  384,  803,  382,  804,  680,  805,
      680,  680,  392,  393,  806,  807,  807,  680,  398,  399,

      808,  397,  809,  809,  680,  405,  406,  810,  404,  811,
      811,  680,  412,  413,  812,  411,  813,  813,  680,  419,
      420,  814,  418,  797,  815,  815,  680,  816,  799,  817,
      817,  680,  818,  801,  819,  819,  680,  680,  820,  680,
      680,  821,  440,  443,  821,  822,  823,  680,  680,  449,
      824,  825,  680,  826,  827,  453,  456,  827,  680,  680,
      828,  829,  460,  463,  829,  680,  680,  830,  831,  467,
      470,  831,  680,  680,  832,  833,  474,  477,  833,  680,
      680,  834,  835,  481,  484,  835,  680,  836,  680,  837,
      680,  838,  680,  839,  680,  840,  680,  841,  842,  842,

      680,  501,  502,  843,  500,  844,  680,  845,  680,  846,
      847,  680,  512,  847,  848,  849,  849,  850,  517,  851,
      851,  852,  521,  853,  853,  854,  525,  855,  855,  856,
      529,  857,  857,  858,  533,  837,  859,  859,  680,  860,
      839,  861,  861,  680,  862,  841,  863,  863,  680,  680,
      864,  680,  865,  866,  552,  555,  866,  867,  868,  680,
      869,  870,  870,  871,  680,  870,  872,  680,  873,  680,
      874,  680,  875,  680,  876,  680,  877,  680,  878,  680,
      879,  680,  880,  680,  881,  680,  882,  680,  883,  884,
      884,  885,  591,  886,  887,  869,  888,  888,  680,  680,

      889,  890,  891,  892,  893,  894,  895,  879,  896,  896,
      680,  897,  881,  898,  898,  680,  899,  883,  900,  900,
      680,  680,  901,  902,  903,  680,  904,  680,  905,  680,
      680,  680,  680,  680,  680,  680,  906,  680,  907,  680,
      908,  680,  909,  680,  910,  911,  904,  912,  912,  680,
      907,  913,  913,  680,  914,  909,  915,  915,  680,  680,
      916,  680,  917,  680,  680,  918,  680,  919,  680,  917,
      920,  920,  680,  919,  921,  921,  680,  680,  680,    0,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680
    } ;

static yyconst short int yy_nxt[3968] =
    {   0,
        8,    9,   10,   11,    8,    8,    8,   12,   13,   13,
       14,   15,   15,   15,   15,   15,   16,   17,   18,    8,
       19,   19,   19,   20,   21,   21,   21,   21,   22,   21,
       23,   24,   26,   26,   27,   27,   29,   30,   29,   30,
       48,   63,   63,   49,   54,   54,   55,  120,  120,  680,
       51,   52,  680,   31,   48,   31,   34,   49,   35,   35,
       35,   35,   35,   35,   35,   35,   36,   53,   37,  668,
       37,   37,   37,   37,   34,  508,   38,   38,   38,   38,
       38,   39,   40,   40,   36,  510,   37,  663,   37,   37,
       37,   37,   40,   40,   40,   40,   40,   40,   42,  643,

       42,   42,  508,   43,   43,   43,   43,   43,   43,   43,
       43,   36,  510,   37,  639,   43,   43,   43,   43,   42,
       42,   42,   42,   42,   42,   34,  680,   57,   57,   57,
       57,   57,   57,   57,   57,   58,  510,   59,  627,   59,
       59,   59,   59,   34,  508,   62,   62,   62,   62,   62,
       62,   62,   62,   58,  510,   59,  589,   59,   59,   59,
       59,   34,  585,   63,   63,   63,   63,   63,   63,   63,
       63,   58,  581,   59,  561,   59,   59,   59,   59,   64,
       65,   65,   66,   67,   67,   67,   67,   67,   64,  498,
       68,   64,   68,   68,   68,   68,   42,   90,   42,   42,

      108,   69,   69,   69,   69,   69,   69,   69,   69,   58,
      494,   59,  490,   69,   69,   69,   69,   42,   42,   42,
       42,   42,   42,   51,   52,   98,   98,   99,   72,  114,
      114,  115,  116,  116,  117,  380,  680,  680,  141,  141,
       53,   72,  376,   74,   74,   74,   74,   74,   75,   76,
       76,   34,  372,   77,   77,   77,   77,   77,   77,   77,
       77,   36,  279,   78,  275,   78,   78,   78,   78,   64,
       82,   82,   83,   84,   84,   84,   84,   84,  190,  190,
       85,  271,   85,   85,   85,   85,   88,   64,   89,   89,
       89,   89,   89,   89,   89,   89,   90,  188,   91,  184,

       91,   91,   91,   91,   92,   92,   92,   92,   92,   93,
       94,   94,   94,   94,   94,   94,   94,   94,   42,  163,
       42,   42,  147,   95,   95,   95,   95,   95,   95,   95,
       95,   36,  118,   78,  113,   95,   95,   95,   95,   42,
       42,   42,   42,   42,   42,   88,   64,  107,  107,  107,
      107,  107,  107,  107,  107,  108,  100,  109,   86,  109,
      109,  109,  109,  110,  110,  110,  110,  110,  111,  112,
      112,  112,  112,  112,  112,  112,  112,   88,   64,  119,
      119,  119,  119,  119,  119,  119,  119,   90,   56,  120,
       64,  120,  120,  120,  120,  121,  121,  122,  123,  123,

      123,  123,  123,   64,   64,  124,   64,  124,  124,  124,
      124,   64,   90,  125,  125,  125,  125,  125,  125,  125,
      125,   88,   64,   64,   64,  161,  161,  162,  182,  182,
      183,   90,  127,  108,  129,  129,  129,  129,  129,  130,
      131,  131,   64,  136,  136,  137,  138,  138,  138,  138,
      138,  210,  210,  139,   64,  139,  139,  139,  139,   88,
       64,  140,  140,  140,  140,  140,  140,  140,  140,  108,
       64,  141,   64,  141,  141,  141,  141,  142,  142,  143,
      144,  144,  144,  144,  144,  217,  217,  145,  655,  145,
      145,  145,  145,  146,  146,  146,  146,  146,  146,  146,

      146,   88,   64,   88,   64,  186,  186,  187,  269,  269,
      270,  108,  148,   90,  150,  150,  150,  150,  150,  151,
      152,  152,  680,   64,  273,  273,  274,  277,  277,  278,
      281,  281,   90,  154,   64,  155,  155,  155,  155,  155,
      155,  155,  155,  156,   64,  157,   64,  157,  157,  157,
      157,  158,  158,  158,  158,  158,  159,  160,  160,  160,
      160,  160,  160,  160,  160,   64,   64,  127,  243,  243,
      243,  243,  296,  296,  156,  680,  680,   88,   64,  169,
      169,  169,  169,  169,  169,  169,  169,  170,  646,  171,
       64,  171,  171,  171,  171,  172,  172,  172,  172,  172,

      173,  174,  174,  174,  174,  174,  174,  174,  174,   64,
       88,   64,  680,   64,  243,  243,  243,   64,  170,   64,
      108,  655,  108,  154,   64,  176,  176,  176,  176,  176,
      176,  176,  176,  177,  655,  178,  655,  178,  178,  178,
      178,  179,  179,  179,  179,  179,  180,  181,  181,  181,
      181,  181,  181,  181,  181,   64,   64,  148,   64,  303,
      303,  310,  310,   64,  177,  680,  680,   90,  154,   64,
      189,  189,  189,  189,  189,  189,  189,  189,  156,   64,
      190,  646,  190,  190,  190,  190,  191,  191,  192,  193,
      193,  193,  193,  193,   64,  646,  194,  646,  194,  194,

      194,  194,   64,  156,  195,  195,  195,  195,  195,  195,
      195,  195,  154,   64,  370,  370,  371,  374,  374,  375,
      382,  382,  156,  196,  198,  198,  198,  198,  198,  199,
      200,  200,   64,  205,  205,  206,  207,  207,  207,  207,
      207,  397,  397,  208,  617,  208,  208,  208,  208,   88,
       64,  209,  209,  209,  209,  209,  209,  209,  209,  170,
      655,  210,  655,  210,  210,  210,  210,  211,  211,  212,
      213,  213,  213,  213,  213,   64,  612,  214,   64,  214,
      214,  214,  214,   64,  170,  215,  215,  215,  215,  215,
      215,  215,  215,   88,   64,   64,  378,  378,  379,  404,

      404,  411,  411,  170,  108,  154,   64,  216,  216,  216,
      216,  216,  216,  216,  216,  177,   64,  217,   64,  217,
      217,  217,  217,  218,  218,  219,  220,  220,  220,  220,
      220,   64,   64,  221,   64,  221,  221,  221,  221,   64,
      177,  222,  222,  222,  222,  222,  222,  222,  222,  154,
       64,  154,   64,  418,  418,  488,  488,  489,   64,  177,
      223,  156,  225,  225,  225,  225,  225,  226,  227,  227,
      228,   64,  230,  230,  230,  230,  230,  231,  232,  232,
      680,   64,  492,  492,  493,  496,  496,  497,  500,  500,
      156,  234,   64,  235,  235,  235,  235,  235,  235,  235,

      235,  236,   64,  237,  595,  237,  237,  237,  237,  238,
      238,  238,  238,  238,  239,  240,  240,  240,  240,  240,
      240,  240,  240,   64,  517,  517,  521,  521,  525,  525,
      529,  529,  236,  241,  241,  241,  242,  243,  243,  243,
      243,  196,  533,  533,  559,  559,  560,  646,  680,  680,
       88,   64,  249,  249,  249,  249,  249,  249,  249,  249,
      250,  646,  251,  391,  251,  251,  251,  251,  252,  252,
      252,  252,  252,  253,  254,  254,  254,  254,  254,  254,
      254,  254,   64,   88,   64,  680,   64,  563,  563,  591,
      591,  250,   64,  170,  617,  170,  154,   64,  256,  256,

      256,  256,  256,  256,  256,  256,  257,  617,  258,  617,
      258,  258,  258,  258,  259,  259,  259,  259,  259,  260,
      261,  261,  261,  261,  261,  261,  261,  261,   64,  154,
       64,  680,   64,  579,  579,  580,  612,  257,  612,  177,
      612,  177,  234,   64,  263,  263,  263,  263,  263,  263,
      263,  263,  264,   64,  265,   64,  265,  265,  265,  265,
      266,  266,  266,  266,  266,  267,  268,  268,  268,  268,
      268,  268,  268,  268,   64,   64,  223,   64,  228,   64,
      583,  583,  584,  264,  680,  680,  680,  680,  156,  234,
       64,  280,  280,  280,  280,  280,  280,  280,  280,  236,

       64,  281,   64,  281,  281,  281,  281,  282,  282,  283,
      284,  284,  284,  284,  284,   64,   64,  285,   64,  285,
      285,  285,  285,   64,  236,  286,  286,  286,  286,  286,
      286,  286,  286,  234,   64,  587,  587,  588,  625,  625,
      626,   64,  510,  236,   64,  291,  291,  292,  293,  293,
      293,  293,  293,  595,  595,  294,  595,  294,  294,  294,
      294,   88,   64,  295,  295,  295,  295,  295,  295,  295,
      295,  250,  391,  296,  551,  296,  296,  296,  296,  297,
      297,  298,  299,  299,  299,  299,  299,   64,   64,  300,
      617,  300,  300,  300,  300,  617,  250,  301,  301,  301,

      301,  301,  301,  301,  301,   88,   64,   64,  637,  637,
      638,  641,  641,  642,  545,  250,  170,  154,   64,  302,
      302,  302,  302,  302,  302,  302,  302,  257,  612,  303,
      612,  303,  303,  303,  303,  304,  304,  305,  306,  306,
      306,  306,  306,   64,  540,  307,   64,  307,  307,  307,
      307,   64,  257,  308,  308,  308,  308,  308,  308,  308,
      308,  154,   64,   64,  661,  661,  662,  666,  666,  667,
       64,  257,  177,  234,   64,  309,  309,  309,  309,  309,
      309,  309,  309,  264,   64,  310,   64,  310,  310,  310,
      310,  311,  311,  312,  313,  313,  313,  313,  313,   64,

       64,  314,   64,  314,  314,  314,  314,   64,  264,  315,
      315,  315,  315,  315,  315,  315,  315,  234,   64,   64,
       64,   64,  595,  595,  341,  545,  545,  264,   64,  317,
      317,  317,  317,  317,  318,  319,  319,  320,  545,  322,
      322,  322,  322,  322,  323,  324,  324,  325,  540,  327,
      327,  327,  327,  327,  328,  329,  329,  234,   64,  680,
       64,  540,  540,   64,   64,   64,  439,  236,   64,  236,
      331,   64,  332,  332,  332,  332,  332,  332,  332,  332,
      333,  331,  334,   64,  334,  334,  334,  334,  335,  335,
      335,  335,  335,  336,  337,  337,  337,  337,  337,  337,

      337,  337,   64,  234,   64,  154,   64,   88,   64,   64,
      510,  333,   88,   64,  342,  342,  342,  342,  342,  342,
      342,  342,  343,  565,  344,  391,  344,  344,  344,  344,
      345,  345,  345,  345,  345,  346,  347,  347,  347,  347,
      347,  347,  347,  347,   64,   88,   64,  680,   64,  558,
      439,  545,  545,  343,  433,  250,  540,  250,  154,   64,
      349,  349,  349,  349,  349,  349,  349,  349,  350,  540,
      351,  428,  351,  351,  351,  351,  352,  352,  352,  352,
      352,  353,  354,  354,  354,  354,  354,  354,  354,  354,
       64,  154,   64,  680,   64,   64,   64,   64,  510,  350,

       64,  257,  391,  257,  234,   64,  356,  356,  356,  356,
      356,  356,  356,  356,  357,  290,  358,  433,  358,  358,
      358,  358,  359,  359,  359,  359,  359,  360,  361,  361,
      361,  361,  361,  361,  361,  361,   64,  234,   64,  680,
       64,  433,  433,  428,  428,  357,  428,  264,   64,  264,
      331,   64,  363,  363,  363,  363,  363,  363,  363,  363,
      364,   64,  365,   64,  365,  365,  365,  365,  366,  366,
      366,  366,  366,  367,  368,  368,  368,  368,  368,  368,
      368,  368,   64,  331,  234,   64,  320,  154,  325,   64,
       88,  364,  680,  680,  680,  680,  680,  680,  236,  331,

       64,  381,  381,  381,  381,  381,  381,  381,  381,  333,
      391,  382,  290,  382,  382,  382,  382,  383,  383,  384,
      385,  385,  385,  385,  385,   64,  248,  386,  331,  386,
      386,  386,  386,  433,  333,  387,  387,  387,  387,  387,
      387,  387,  387,  331,   64,  433,  325,  428,  428,  320,
       64,   64,   64,  333,   64,  392,  392,  393,  394,  394,
      394,  394,  394,  391,  290,  395,  388,  395,  395,  395,
      395,   88,   64,  396,  396,  396,  396,  396,  396,  396,
      396,  343,  325,  397,  325,  397,  397,  397,  397,  398,
      398,  399,  400,  400,  400,  400,  400,   64,  325,  401,

      320,  401,  401,  401,  401,  320,  343,  402,  402,  402,
      402,  402,  402,  402,  402,   88,   64,   64,  320,   64,
       64,   64,  234,  154,   88,  343,  250,  154,   64,  403,
      403,  403,  403,  403,  403,  403,  403,  350,  341,  404,
      290,  404,  404,  404,  404,  405,  405,  406,  407,  407,
      407,  407,  407,   64,  204,  408,  204,  408,  408,  408,
      408,  234,  350,  409,  409,  409,  409,  409,  409,  409,
      409,  154,   64,   64,  325,  325,  228,  320,  320,  223,
       64,  350,  257,  234,   64,  410,  410,  410,  410,  410,
      410,  410,  410,  357,   64,  411,  290,  411,  411,  411,

      411,  412,  412,  413,  414,  414,  414,  414,  414,   64,
      204,  415,  168,  415,  415,  415,  415,  196,  357,  416,
      416,  416,  416,  416,  416,  416,  416,  234,   64,   64,
      228,  228,  228,  223,  223,  223,  154,  357,  264,  331,
       64,  417,  417,  417,  417,  417,  417,  417,  417,  364,
       88,  418,  248,  418,  418,  418,  418,  419,  419,  420,
      421,  421,  421,  421,  421,   64,  204,  422,  135,  422,
      422,  422,  422,  245,  364,  423,  423,  423,  423,  423,
      423,  423,  423,  331,   64,  196,  196,  196,  154,  228,
      228,  148,  223,  364,   64,  425,  425,  425,  425,  425,

      426,  427,  427,  428,  223,  430,  430,  430,  430,  430,
      431,  432,  432,  433,  204,  435,  435,  435,  435,  435,
      436,  437,  437,  331,   64,  680,   64,  135,  135,  127,
      196,  196,  148,  333,  148,  333,  439,   64,  440,  440,
      440,  440,  440,  440,  440,  440,  441,  148,  442,   88,
      442,  442,  442,  442,  443,  443,  443,  443,  443,  444,
      445,  445,  445,  445,  445,  445,  445,  445,   64,  168,
      135,   81,  106,  127,  127,  127,   88,  441,  448,  448,
      449,  450,  450,  450,  450,  450,  451,  148,  452,  148,
      452,  452,  452,  452,   88,   64,  453,  453,  453,  453,

      453,  453,  453,  453,  454,  680,  455,  135,  455,  455,
      455,  455,  456,  456,  456,  456,  456,  457,  458,  458,
      458,  458,  458,  458,  458,  458,   64,   88,   64,  680,
       64,   81,  132,  680,   72,  454,  127,  343,  127,  343,
      154,   64,  460,  460,  460,  460,  460,  460,  460,  460,
      461,  126,  462,   36,  462,  462,  462,  462,  463,  463,
      463,  463,  463,  464,  465,  465,  465,  465,  465,  465,
      465,  465,   64,  154,   64,  680,   64,  106,   81,   81,
       36,  461,   36,  350,   72,  350,  234,   64,  467,  467,
      467,  467,  467,  467,  467,  467,  468,   72,  469,   72,

      469,  469,  469,  469,  470,  470,  470,  470,  470,  471,
      472,  472,  472,  472,  472,  472,  472,  472,   64,  234,
       64,  680,   64,   97,   96,   87,  680,  468,   81,  357,
       36,  357,  331,   64,  474,  474,  474,  474,  474,  474,
      474,  474,  475,   61,  476,   72,  476,  476,  476,  476,
      477,  477,  477,  477,  477,  478,  479,  479,  479,  479,
      479,  479,  479,  479,   64,  331,   64,  680,   64,   72,
       71,   70,   58,  475,   61,  364,   32,  364,  439,   64,
      481,  481,  481,  481,  481,  481,  481,  481,  482,   45,
      483,   44,  483,  483,  483,  483,  484,  484,  484,  484,

      484,  485,  486,  486,  486,  486,  486,  486,  486,  486,
       64,   36,   41,   64,  428,   33,  433,   64,   32,  482,
      680,  680,  680,  680,  680,  680,  333,  439,   64,  499,
      499,  499,  499,  499,  499,  499,  499,  441,  680,  500,
      680,  500,  500,  500,  500,  501,  501,  502,  503,  503,
      503,  503,  503,   64,  680,  504,  680,  504,  504,  504,
      504,  680,  441,  505,  505,  505,  505,  505,  505,  505,
      505,  439,   64,  680,   64,  680,  680,  680,  680,  680,
      680,  441,  508,  454,  509,  509,  509,  509,  509,  509,
      509,  509,  510,  680,  511,  680,  511,  511,  511,  511,

      508,  680,  512,  512,  512,  512,  512,  513,  514,  514,
      510,  680,  511,  680,  511,  511,  511,  511,  514,  514,
      514,  514,  514,  514,   88,   64,  516,  516,  516,  516,
      516,  516,  516,  516,  454,  680,  517,  680,  517,  517,
      517,  517,  519,  519,  519,  519,  519,  519,  519,  519,
       88,   64,   64,  680,  680,  680,  680,  680,  680,  680,
      454,  343,  154,   64,  520,  520,  520,  520,  520,  520,
      520,  520,  461,   64,  521,  680,  521,  521,  521,  521,
      680,  680,  461,  523,  523,  523,  523,  523,  523,  523,
      523,  154,   64,   64,  680,  680,  680,  680,  680,  680,

      680,  461,  350,  234,   64,  524,  524,  524,  524,  524,
      524,  524,  524,  468,   64,  525,  680,  525,  525,  525,
      525,  680,  680,  468,  527,  527,  527,  527,  527,  527,
      527,  527,  234,   64,   64,  680,  680,  680,  680,  680,
      680,  680,  468,  357,  331,   64,  528,  528,  528,  528,
      528,  528,  528,  528,  475,   64,  529,  680,  529,  529,
      529,  529,  680,  680,  475,  531,  531,  531,  531,  531,
      531,  531,  531,  331,   64,   64,  680,  680,  680,  680,
      680,  680,  680,  475,  364,  439,   64,  532,  532,  532,
      532,  532,  532,  532,  532,  482,   64,  533,  680,  533,

      533,  533,  533,  680,  680,  482,  535,  535,  535,  535,
      535,  535,  535,  535,  439,   64,  680,  680,  680,  680,
      680,  680,  680,  680,  482,   64,  537,  537,  537,  537,
      537,  538,  539,  539,  540,  680,  542,  542,  542,  542,
      542,  543,  544,  544,  545,  680,  547,  547,  547,  547,
      547,  548,  549,  549,  439,   64,  680,   64,  680,  680,
      680,  680,  680,  680,  441,  680,  441,  551,   64,  552,
      552,  552,  552,  552,  552,  552,  552,  553,  680,  554,
      680,  554,  554,  554,  554,  555,  555,  555,  555,  555,
      556,  557,  557,  557,  557,  557,  557,  557,  557,   64,

       88,   64,  680,  680,  680,  680,  680,  680,  553,  508,
      454,  562,  562,  562,  562,  562,  562,  562,  562,  510,
      680,  563,  680,  563,  563,  563,  563,  508,  680,  566,
      566,  566,  566,  566,  566,  566,  566,  510,  680,  563,
      680,  563,  563,  563,  563,  680,   64,  154,   64,  680,
       64,  234,   64,  680,   64,  454,  680,  461,  680,  461,
      680,  468,  680,  468,  331,   64,  680,   64,  439,   64,
      680,   64,   64,  680,  475,   64,  475,  540,  482,  545,
      482,  441,  680,  680,  680,  680,  680,  680,  680,  551,
       64,  590,  590,  590,  590,  590,  590,  590,  590,  553,

       64,  591,  680,  591,  591,  591,  591,  680,  680,  553,
      593,  593,  593,  593,  593,  593,  593,  593,  551,   64,
      680,   64,  680,  680,  680,  680,  680,  680,  553,  595,
      454,  597,  597,  597,  597,  597,  598,  599,  599,   64,
       64,   64,   64,  680,  680,  680,  680,  680,  461,  468,
      475,  482,   64,  609,  609,  609,  609,  609,  610,  611,
      611,  612,  680,  614,  614,  614,  614,  614,  615,  616,
      616,  617,  680,  619,  619,  619,  619,  619,  620,  621,
      621,  551,   64,  680,   64,  680,  595,  680,  680,   64,
      612,  553,  617,  553,  680,  680,  680,  680,  680,  680,

      680,  680,   64,  680,  680,  680,  680,  680,  680,  680,
      680,  553,  646,  680,  648,  648,  648,  648,  648,  649,
      650,  650,   64,  652,  652,  652,  652,  652,  653,  654,
      654,  655,  680,  657,  657,  657,  657,  657,  658,  659,
      659,  646,  680,  680,   64,  655,  680,  680,  680,  680,
      680,  680,  680,  680,  680,   64,  671,  671,  671,  671,
      671,  672,  673,  673,   64,  675,  675,  675,  675,  675,
      676,  677,  677,   64,  680,   64,  680,  680,  680,  680,
      680,  680,  680,  680,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   37,   37,
       37,  680,   37,   42,  680,   42,   42,  680,   42,  680,
      680,  680,   42,   46,  680,   46,  680,   46,   46,   46,
       46,   46,   46,   46,   46,   47,  680,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   50,  680,  680,
       50,   50,   50,   50,   50,   50,   50,  680,   50,   60,
       60,   60,  680,   60,   59,   59,   59,  680,   59,   73,
      680,   73,   76,  680,   76,   79,   79,   79,  680,   79,
       78,   78,   78,  680,   78,   80,   80,   80,  680,   80,
       91,   91,   91,   91,  680,   91,  101,  680,  101,  102,

      102,  103,  103,  103,  680,  103,  104,  104,  104,  680,
      104,  105,  105,  105,  680,  105,  109,  109,  109,  109,
      680,  109,  120,  120,  120,  120,  680,  120,  128,  680,
      128,  131,  680,  131,  133,  133,  133,  680,  133,  134,
      134,  134,  680,  134,  141,  141,  141,  141,  680,  141,
      149,  680,  149,  152,  680,  152,  153,  153,  153,  153,
      153,  680,  153,  157,  157,  157,  157,  680,  157,  164,
      680,  164,  165,  165,  165,  680,  165,  166,  166,  166,
      680,  166,  167,  167,  167,  680,  167,  171,  171,  171,
      171,  680,  171,  175,  175,  175,  175,  175,  680,  175,

      178,  178,  178,  178,  680,  178,  185,  680,  185,  190,
      190,  190,  190,  680,  190,  197,  197,  200,  200,  201,
      201,  201,  680,  201,  202,  202,  202,  680,  202,  203,
      203,  203,  680,  203,  210,  210,  210,  210,  680,  210,
      217,  217,  217,  217,  680,  217,  224,  680,  224,  227,
      680,  227,  229,  680,  229,  232,  680,  232,  233,  233,
      233,  233,  233,  680,  233,  237,  237,  237,  237,  680,
      237,  244,  244,  166,  166,  166,  680,  166,  246,  246,
      246,  680,  246,  247,  247,  247,  680,  247,  251,  251,
      251,  251,  680,  251,  255,  255,  255,  255,  255,  680,

      255,  258,  258,  258,  258,  680,  258,  262,  262,  262,
      262,  262,  680,  262,  265,  265,  265,  265,  680,  265,
      272,  680,  272,  276,  680,  276,  281,  281,  281,  281,
      680,  281,  287,  287,  287,  680,  287,  288,  288,  288,
      680,  288,  289,  289,  289,  680,  289,  296,  296,  296,
      296,  680,  296,  303,  303,  303,  303,  680,  303,  310,
      310,  310,  310,  680,  310,  316,  316,  319,  319,  321,
      680,  321,  324,  680,  324,  326,  680,  326,  329,  680,
      329,  330,  330,  330,  330,  330,  680,  330,  334,  334,
      334,  334,  680,  334,  338,  338,  338,  680,  338,  339,

      339,  339,  680,  339,  340,  340,  340,  680,  340,  344,
      344,  344,  344,  680,  344,  348,  348,  348,  348,  348,
      680,  348,  351,  351,  351,  351,  680,  351,  355,  355,
      355,  355,  355,  680,  355,  358,  358,  358,  358,  680,
      358,  362,  362,  362,  362,  362,  680,  362,  365,  365,
      365,  365,  680,  365,  369,  369,  373,  680,  373,  377,
      680,  377,  382,  382,  382,  382,  680,  382,  246,  246,
      246,  680,  246,  389,  389,  389,  680,  389,  390,  390,
      390,  680,  390,  397,  397,  397,  397,  680,  397,  404,
      404,  404,  404,  680,  404,  411,  411,  411,  411,  680,

      411,  418,  418,  418,  418,  680,  418,  424,  424,  427,
      427,  429,  680,  429,  432,  680,  432,  434,  680,  434,
      437,  680,  437,  438,  438,  438,  438,  438,  680,  438,
      442,  442,  442,  442,  680,  442,  446,  446,  446,  680,
      446,  447,  447,  447,  680,  447,  455,  455,  455,  455,
      680,  455,  459,  459,  459,  459,  459,  680,  459,  462,
      462,  462,  462,  680,  462,  466,  466,  466,  466,  466,
      680,  466,  469,  469,  469,  469,  680,  469,  473,  473,
      473,  473,  473,  680,  473,  476,  476,  476,  476,  680,
      476,  480,  480,  480,  480,  480,  680,  480,  483,  483,

      483,  483,  680,  483,  487,  487,  491,  680,  491,  495,
      680,  495,  500,  500,  500,  500,  680,  500,  506,  506,
      506,  680,  506,  507,  507,  507,  680,  507,  515,  515,
      680,  515,  680,  515,  511,  511,  511,  680,  511,  518,
      680,  518,  680,  518,  517,  517,  517,  517,  680,  517,
      522,  680,  522,  680,  522,  521,  521,  521,  521,  680,
      521,  526,  680,  526,  680,  526,  525,  525,  525,  525,
      680,  525,  530,  680,  530,  680,  530,  529,  529,  529,
      529,  680,  529,  534,  680,  534,  680,  534,  533,  533,
      533,  533,  680,  533,  536,  536,  539,  539,  541,  680,

      541,  544,  680,  544,  546,  680,  546,  549,  680,  549,
      550,  550,  550,  550,  550,  680,  550,  554,  554,  554,
      554,  680,  554,  339,  339,  339,  680,  339,  564,  564,
      564,  680,  564,  563,  563,  563,  680,  563,  567,  567,
      680,  567,  680,  567,  568,  568,  568,  568,  568,  680,
      568,  569,  569,  680,  569,  680,  569,  570,  570,  570,
      570,  570,  680,  570,  571,  571,  680,  571,  680,  571,
      572,  572,  572,  572,  572,  680,  572,  573,  573,  680,
      573,  680,  573,  574,  574,  574,  574,  574,  680,  574,
      575,  575,  680,  575,  680,  575,  576,  576,  576,  576,

      576,  680,  576,  577,  577,  680,  577,  680,  577,  578,
      578,  582,  680,  582,  586,  680,  586,  592,  680,  592,
      680,  592,  591,  591,  591,  591,  680,  591,  594,  594,
      594,  680,  594,  596,  680,  596,  599,  680,  599,  600,
      680,  600,  600,  600,  680,  600,  601,  601,  680,  601,
      680,  601,  602,  602,  680,  602,  680,  602,  603,  603,
      680,  603,  680,  603,  604,  604,  680,  604,  680,  604,
      605,  605,  680,  605,  680,  605,  606,  606,  680,  606,
      680,  606,  607,  607,  680,  607,  680,  607,  608,  608,
      611,  611,  613,  680,  613,  616,  680,  616,  618,  680,

      618,  621,  680,  621,  622,  622,  622,  622,  622,  680,
      622,  623,  623,  680,  623,  680,  623,  624,  624,  624,
      680,  624,  628,  680,  628,  629,  629,  680,  629,  680,
      629,  630,  630,  680,  630,  680,  630,  631,  631,  680,
      631,  680,  631,  632,  632,  680,  632,  680,  632,  633,
      633,  680,  633,  680,  633,  634,  634,  680,  634,  680,
      634,  635,  635,  680,  635,  680,  635,  636,  636,  640,
      680,  640,  644,  680,  644,  645,  645,  680,  645,  680,
      645,  447,  447,  447,  680,  447,  647,  680,  647,  650,
      680,  650,  565,  565,  680,  565,  680,  565,  651,  651,

      654,  654,  656,  680,  656,  659,  680,  659,  660,  660,
      680,  660,  680,  660,  664,  680,  664,  665,  665,  669,
      680,  669,  670,  670,  673,  673,  674,  674,  677,  677,
      678,  678,  679,  679,    7,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680
    } ;

static yyconst short int yy_chk[3968] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    3,    4,    5,    5,    6,    6,
       27,   39,   39,   27,   34,   34,   34,   93,   93,   47,
       31,   31,   47,    5,   48,    6,   13,   48,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   31,   13,  914,
       13,   13,   13,   13,   14,  514,   14,   14,   14,   14,
       14,   14,   14,   14,   14,  514,   14,  911,   14,   14,
       14,   14,   15,   15,   15,   15,   15,   15,   19,  899,

       19,   19,  562,   19,   19,   19,   19,   19,   19,   19,
       19,   19,  562,   19,  897,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   35,  563,   35,   35,   35,
       35,   35,   35,   35,   35,   35,  563,   35,  887,   35,
       35,   35,   35,   38,  566,   38,   38,   38,   38,   38,
       38,   38,   38,   38,  566,   38,  864,   38,   38,   38,
       38,   40,  862,   40,   40,   40,   40,   40,   40,   40,
       40,   40,  860,   40,  845,   40,   40,   40,   40,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   68,  820,
       41,   85,   41,   41,   41,   41,   43,   68,   43,   43,

       85,   43,   43,   43,   43,   43,   43,   43,   43,   43,
      818,   43,  816,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   53,   53,   72,   72,   72,   75,   87,
       87,   87,   88,   88,   88,  787,   75,   75,  111,  111,
       53,   55,  785,   55,   55,   55,   55,   55,   55,   55,
       55,   57,  783,   57,   57,   57,   57,   57,   57,   57,
       57,   57,  756,   57,  754,   57,   57,   57,   57,   61,
       61,   61,   61,   61,   61,   61,   61,   61,  159,  159,
       61,  752,   61,   61,   61,   61,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,  728,   65,  726,

       65,   65,   65,   65,   66,   66,   66,   66,   66,   66,
       66,   66,   67,   67,   67,   67,   67,   67,   69,  718,
       69,   69,  713,   69,   69,   69,   69,   69,   69,   69,
       69,   69,  706,   69,  705,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,  698,   82,  696,   82,
       82,   82,   82,   83,   83,   83,   83,   83,   83,   83,
       83,   84,   84,   84,   84,   84,   84,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,  688,   89,
      679,   89,   89,   89,   89,   90,   90,   90,   90,   90,

       90,   90,   90,   91,  678,   90,  677,   90,   90,   90,
       90,  675,   91,   92,   92,   92,   92,   92,   92,   92,
       92,   94,   94,  674,  109,  127,  127,  127,  148,  148,
      148,   94,   99,  109,   99,   99,   99,   99,   99,   99,
       99,   99,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  173,  173,  106,  673,  106,  106,  106,  106,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      671,  107,  670,  107,  107,  107,  107,  108,  108,  108,
      108,  108,  108,  108,  108,  180,  180,  108,  669,  108,
      108,  108,  108,  110,  110,  110,  110,  110,  110,  110,

      110,  112,  112,  119,  119,  154,  154,  154,  223,  223,
      223,  112,  117,  119,  117,  117,  117,  117,  117,  117,
      117,  117,  120,  120,  228,  228,  228,  234,  234,  234,
      239,  239,  120,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  668,  121,  666,  121,  121,  121,
      121,  122,  122,  122,  122,  122,  122,  122,  122,  123,
      123,  123,  123,  123,  123,  124,  665,  130,  241,  241,
      241,  241,  253,  253,  124,  130,  130,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  664,  136,
      663,  136,  136,  136,  136,  137,  137,  137,  137,  137,

      137,  137,  137,  138,  138,  138,  138,  138,  138,  139,
      140,  140,  141,  141,  242,  242,  242,  661,  139,  660,
      140,  659,  141,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  657,  142,  656,  142,  142,  142,
      142,  143,  143,  143,  143,  143,  143,  143,  143,  144,
      144,  144,  144,  144,  144,  145,  654,  151,  153,  260,
      260,  267,  267,  652,  145,  151,  151,  153,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  651,
      155,  650,  155,  155,  155,  155,  156,  156,  156,  156,
      156,  156,  156,  156,  157,  648,  156,  647,  156,  156,

      156,  156,  645,  157,  158,  158,  158,  158,  158,  158,
      158,  158,  160,  160,  320,  320,  320,  325,  325,  325,
      336,  336,  160,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  346,  346,  168,  644,  168,  168,  168,  168,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      643,  169,  641,  169,  169,  169,  169,  170,  170,  170,
      170,  170,  170,  170,  170,  171,  640,  170,  639,  170,
      170,  170,  170,  637,  171,  172,  172,  172,  172,  172,
      172,  172,  172,  174,  174,  175,  331,  331,  331,  353,

      353,  360,  360,  174,  175,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  636,  176,  635,  176,
      176,  176,  176,  177,  177,  177,  177,  177,  177,  177,
      177,  178,  634,  177,  633,  177,  177,  177,  177,  632,
      178,  179,  179,  179,  179,  179,  179,  179,  179,  181,
      181,  189,  189,  367,  367,  428,  428,  428,  631,  181,
      183,  189,  183,  183,  183,  183,  183,  183,  183,  183,
      187,  630,  187,  187,  187,  187,  187,  187,  187,  187,
      190,  190,  433,  433,  433,  439,  439,  439,  444,  444,
      190,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  629,  191,  628,  191,  191,  191,  191,  192,
      192,  192,  192,  192,  192,  192,  192,  193,  193,  193,
      193,  193,  193,  194,  457,  457,  464,  464,  471,  471,
      478,  478,  194,  196,  196,  196,  196,  196,  196,  196,
      196,  199,  485,  485,  508,  508,  508,  627,  199,  199,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  625,  205,  624,  205,  205,  205,  205,  206,  206,
      206,  206,  206,  206,  206,  206,  207,  207,  207,  207,
      207,  207,  208,  209,  209,  210,  210,  513,  513,  556,
      556,  208,  623,  209,  621,  210,  211,  211,  211,  211,

      211,  211,  211,  211,  211,  211,  211,  619,  211,  618,
      211,  211,  211,  211,  212,  212,  212,  212,  212,  212,
      212,  212,  213,  213,  213,  213,  213,  213,  214,  216,
      216,  217,  217,  540,  540,  540,  616,  214,  614,  216,
      613,  217,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  611,  218,  609,  218,  218,  218,  218,
      219,  219,  219,  219,  219,  219,  219,  219,  220,  220,
      220,  220,  220,  220,  221,  608,  226,  607,  231,  233,
      545,  545,  545,  221,  226,  226,  231,  231,  233,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,

      606,  235,  605,  235,  235,  235,  235,  236,  236,  236,
      236,  236,  236,  236,  236,  237,  604,  236,  603,  236,
      236,  236,  236,  602,  237,  238,  238,  238,  238,  238,
      238,  238,  238,  240,  240,  551,  551,  551,  595,  595,
      595,  601,  600,  240,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  599,  597,  248,  596,  248,  248,  248,
      248,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  594,  249,  593,  249,  249,  249,  249,  250,
      250,  250,  250,  250,  250,  250,  250,  251,  592,  250,
      589,  250,  250,  250,  250,  587,  251,  252,  252,  252,

      252,  252,  252,  252,  252,  254,  254,  255,  612,  612,
      612,  617,  617,  617,  586,  254,  255,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  585,  256,
      583,  256,  256,  256,  256,  257,  257,  257,  257,  257,
      257,  257,  257,  258,  582,  257,  581,  257,  257,  257,
      257,  579,  258,  259,  259,  259,  259,  259,  259,  259,
      259,  261,  261,  262,  646,  646,  646,  655,  655,  655,
      578,  261,  262,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  577,  263,  575,  263,  263,  263,
      263,  264,  264,  264,  264,  264,  264,  264,  264,  265,

      573,  264,  571,  264,  264,  264,  264,  569,  265,  266,
      266,  266,  266,  266,  266,  266,  266,  268,  268,  567,
      565,  564,  561,  559,  558,  549,  547,  268,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  274,  546,  274,
      274,  274,  274,  274,  274,  274,  274,  278,  544,  278,
      278,  278,  278,  278,  278,  278,  278,  280,  280,  281,
      281,  542,  541,  539,  537,  536,  535,  280,  534,  281,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  531,  282,  530,  282,  282,  282,  282,  283,  283,
      283,  283,  283,  283,  283,  283,  284,  284,  284,  284,

      284,  284,  285,  527,  526,  523,  522,  519,  518,  515,
      511,  285,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  510,  291,  507,  291,  291,  291,  291,
      292,  292,  292,  292,  292,  292,  292,  292,  293,  293,
      293,  293,  293,  293,  294,  295,  295,  296,  296,  506,
      505,  498,  496,  294,  495,  295,  494,  296,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  492,
      297,  491,  297,  297,  297,  297,  298,  298,  298,  298,
      298,  298,  298,  298,  299,  299,  299,  299,  299,  299,
      300,  302,  302,  303,  303,  490,  488,  487,  452,  300,

      451,  302,  447,  303,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  446,  304,  437,  304,  304,
      304,  304,  305,  305,  305,  305,  305,  305,  305,  305,
      306,  306,  306,  306,  306,  306,  307,  309,  309,  310,
      310,  435,  434,  432,  430,  307,  429,  309,  427,  310,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  425,  311,  424,  311,  311,  311,  311,  312,  312,
      312,  312,  312,  312,  312,  312,  313,  313,  313,  313,
      313,  313,  314,  423,  416,  318,  323,  409,  328,  330,
      402,  314,  318,  318,  323,  323,  328,  328,  330,  332,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      390,  332,  389,  332,  332,  332,  332,  333,  333,  333,
      333,  333,  333,  333,  333,  334,  388,  333,  387,  333,
      333,  333,  333,  380,  334,  335,  335,  335,  335,  335,
      335,  335,  335,  337,  337,  378,  377,  376,  374,  373,
      372,  370,  369,  337,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  340,  339,  341,  338,  341,  341,  341,
      341,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  329,  342,  327,  342,  342,  342,  342,  343,
      343,  343,  343,  343,  343,  343,  343,  344,  326,  343,

      324,  343,  343,  343,  343,  322,  344,  345,  345,  345,
      345,  345,  345,  345,  345,  347,  347,  348,  321,  319,
      317,  316,  315,  308,  301,  347,  348,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  290,  349,
      289,  349,  349,  349,  349,  350,  350,  350,  350,  350,
      350,  350,  350,  351,  288,  350,  287,  350,  350,  350,
      350,  286,  351,  352,  352,  352,  352,  352,  352,  352,
      352,  354,  354,  355,  279,  277,  276,  275,  273,  272,
      271,  354,  355,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  269,  356,  247,  356,  356,  356,

      356,  357,  357,  357,  357,  357,  357,  357,  357,  358,
      246,  357,  245,  357,  357,  357,  357,  244,  358,  359,
      359,  359,  359,  359,  359,  359,  359,  361,  361,  362,
      232,  230,  229,  227,  225,  224,  222,  361,  362,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      215,  363,  204,  363,  363,  363,  363,  364,  364,  364,
      364,  364,  364,  364,  364,  365,  203,  364,  202,  364,
      364,  364,  364,  201,  365,  366,  366,  366,  366,  366,
      366,  366,  366,  368,  368,  200,  198,  197,  195,  188,
      186,  185,  184,  368,  371,  371,  371,  371,  371,  371,

      371,  371,  371,  375,  182,  375,  375,  375,  375,  375,
      375,  375,  375,  379,  167,  379,  379,  379,  379,  379,
      379,  379,  379,  381,  381,  382,  382,  166,  165,  164,
      163,  161,  152,  381,  150,  382,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  149,  383,  146,
      383,  383,  383,  383,  384,  384,  384,  384,  384,  384,
      384,  384,  385,  385,  385,  385,  385,  385,  386,  135,
      134,  133,  132,  131,  129,  128,  125,  386,  391,  391,
      391,  391,  391,  391,  391,  391,  391,  118,  391,  116,
      391,  391,  391,  391,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  115,  392,  105,  392,  392,
      392,  392,  393,  393,  393,  393,  393,  393,  393,  393,
      394,  394,  394,  394,  394,  394,  395,  396,  396,  397,
      397,  104,  103,  102,  101,  395,  100,  396,   98,  397,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
      398,   96,  398,   95,  398,  398,  398,  398,  399,  399,
      399,  399,  399,  399,  399,  399,  400,  400,  400,  400,
      400,  400,  401,  403,  403,  404,  404,   81,   80,   79,
       78,  401,   77,  403,   76,  404,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,   74,  405,   73,

      405,  405,  405,  405,  406,  406,  406,  406,  406,  406,
      406,  406,  407,  407,  407,  407,  407,  407,  408,  410,
      410,  411,  411,   71,   70,   64,   63,  408,   60,  410,
       59,  411,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,   58,  412,   56,  412,  412,  412,  412,
      413,  413,  413,  413,  413,  413,  413,  413,  414,  414,
      414,  414,  414,  414,  415,  417,  417,  418,  418,   54,
       45,   44,   37,  415,   36,  417,   32,  418,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,   22,
      419,   20,  419,  419,  419,  419,  420,  420,  420,  420,

      420,  420,  420,  420,  421,  421,  421,  421,  421,  421,
      422,   18,   16,  426,  431,   12,  436,  438,    9,  422,
      426,  426,  431,  431,  436,  436,  438,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,    7,  440,
        0,  440,  440,  440,  440,  441,  441,  441,  441,  441,
      441,  441,  441,  442,    0,  441,    0,  441,  441,  441,
      441,    0,  442,  443,  443,  443,  443,  443,  443,  443,
      443,  445,  445,    0,  455,    0,    0,    0,    0,    0,
        0,  445,  448,  455,  448,  448,  448,  448,  448,  448,
      448,  448,  448,    0,  448,    0,  448,  448,  448,  448,

      449,    0,  449,  449,  449,  449,  449,  449,  449,  449,
      449,    0,  449,    0,  449,  449,  449,  449,  450,  450,
      450,  450,  450,  450,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,    0,  453,    0,  453,  453,
      453,  453,  456,  456,  456,  456,  456,  456,  456,  456,
      458,  458,  459,    0,    0,    0,    0,    0,    0,    0,
      458,  459,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  462,  460,    0,  460,  460,  460,  460,
        0,    0,  462,  463,  463,  463,  463,  463,  463,  463,
      463,  465,  465,  466,    0,    0,    0,    0,    0,    0,

        0,  465,  466,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  469,  467,    0,  467,  467,  467,
      467,    0,    0,  469,  470,  470,  470,  470,  470,  470,
      470,  470,  472,  472,  473,    0,    0,    0,    0,    0,
        0,    0,  472,  473,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  476,  474,    0,  474,  474,
      474,  474,    0,    0,  476,  477,  477,  477,  477,  477,
      477,  477,  477,  479,  479,  480,    0,    0,    0,    0,
        0,    0,    0,  479,  480,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  483,  481,    0,  481,

      481,  481,  481,    0,    0,  483,  484,  484,  484,  484,
      484,  484,  484,  484,  486,  486,    0,    0,    0,    0,
        0,    0,    0,    0,  486,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  493,    0,  493,  493,  493,  493,
      493,  493,  493,  493,  497,    0,  497,  497,  497,  497,
      497,  497,  497,  497,  499,  499,  500,  500,    0,    0,
        0,    0,    0,    0,  499,    0,  500,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,    0,  501,
        0,  501,  501,  501,  501,  502,  502,  502,  502,  502,
      502,  502,  502,  503,  503,  503,  503,  503,  503,  504,

      516,  516,    0,    0,    0,    0,    0,    0,  504,  509,
      516,  509,  509,  509,  509,  509,  509,  509,  509,  509,
        0,  509,    0,  509,  509,  509,  509,  512,    0,  512,
      512,  512,  512,  512,  512,  512,  512,  512,    0,  512,
        0,  512,  512,  512,  512,  517,  517,  520,  520,  521,
      521,  524,  524,  525,  525,  517,    0,  520,    0,  521,
        0,  524,    0,  525,  528,  528,  529,  529,  532,  532,
      533,  533,  550,    0,  528,  538,  529,  543,  532,  548,
      533,  550,  538,  538,    0,  543,  543,  548,  548,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,

      554,  552,    0,  552,  552,  552,  552,    0,    0,  554,
      555,  555,  555,  555,  555,  555,  555,  555,  557,  557,
        0,  568,    0,    0,    0,    0,    0,    0,  557,  560,
      568,  560,  560,  560,  560,  560,  560,  560,  560,  570,
      572,  574,  576,    0,    0,    0,    0,    0,  570,  572,
      574,  576,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  584,    0,  584,  584,  584,  584,  584,  584,  584,
      584,  588,    0,  588,  588,  588,  588,  588,  588,  588,
      588,  590,  590,  591,  591,    0,  598,    0,    0,  610,
      615,  590,  620,  591,  598,  598,  610,  610,  615,  615,

      620,  620,  622,    0,    0,    0,    0,    0,    0,    0,
        0,  622,  626,    0,  626,  626,  626,  626,  626,  626,
      626,  626,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  642,    0,  642,  642,  642,  642,  642,  642,  642,
      642,  649,    0,    0,  653,  658,    0,    0,    0,  649,
      649,  653,  653,  658,  658,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  672,    0,  676,    0,    0,    0,    0,
      672,  672,  676,  676,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  682,  682,  682,  682,

      682,  682,  682,  682,  682,  682,  682,  682,  683,  683,
      683,    0,  683,  684,    0,  684,  684,    0,  684,    0,
        0,    0,  684,  685,    0,  685,    0,  685,  685,  685,
      685,  685,  685,  685,  685,  686,    0,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  687,    0,    0,
      687,  687,  687,  687,  687,  687,  687,    0,  687,  689,
      689,  689,    0,  689,  690,  690,  690,    0,  690,  691,
        0,  691,  692,    0,  692,  693,  693,  693,    0,  693,
      694,  694,  694,    0,  694,  695,  695,  695,    0,  695,
      697,  697,  697,  697,    0,  697,  699,    0,  699,  700,

      700,  701,  701,  701,    0,  701,  702,  702,  702,    0,
      702,  703,  703,  703,    0,  703,  704,  704,  704,  704,
        0,  704,  707,  707,  707,  707,    0,  707,  708,    0,
      708,  709,    0,  709,  710,  710,  710,    0,  710,  711,
      711,  711,    0,  711,  712,  712,  712,  712,    0,  712,
      714,    0,  714,  715,    0,  715,  716,  716,  716,  716,
      716,    0,  716,  717,  717,  717,  717,    0,  717,  719,
        0,  719,  720,  720,  720,    0,  720,  721,  721,  721,
        0,  721,  722,  722,  722,    0,  722,  723,  723,  723,
      723,    0,  723,  724,  724,  724,  724,  724,    0,  724,

      725,  725,  725,  725,    0,  725,  727,    0,  727,  729,
      729,  729,  729,    0,  729,  730,  730,  731,  731,  732,
      732,  732,    0,  732,  733,  733,  733,    0,  733,  734,
      734,  734,    0,  734,  735,  735,  735,  735,    0,  735,
      736,  736,  736,  736,    0,  736,  737,    0,  737,  738,
        0,  738,  739,    0,  739,  740,    0,  740,  741,  741,
      741,  741,  741,    0,  741,  742,  742,  742,  742,    0,
      742,  743,  743,  744,  744,  744,    0,  744,  745,  745,
      745,    0,  745,  746,  746,  746,    0,  746,  747,  747,
      747,  747,    0,  747,  748,  748,  748,  748,  748,    0,

      748,  749,  749,  749,  749,    0,  749,  750,  750,  750,
      750,  750,    0,  750,  751,  751,  751,  751,    0,  751,
      753,    0,  753,  755,    0,  755,  757,  757,  757,  757,
        0,  757,  758,  758,  758,    0,  758,  759,  759,  759,
        0,  759,  760,  760,  760,    0,  760,  761,  761,  761,
      761,    0,  761,  762,  762,  762,  762,    0,  762,  763,
      763,  763,  763,    0,  763,  764,  764,  765,  765,  766,
        0,  766,  767,    0,  767,  768,    0,  768,  769,    0,
      769,  770,  770,  770,  770,  770,    0,  770,  771,  771,
      771,  771,    0,  771,  772,  772,  772,    0,  772,  773,

      773,  773,    0,  773,  774,  774,  774,    0,  774,  775,
      775,  775,  775,    0,  775,  776,  776,  776,  776,  776,
        0,  776,  777,  777,  777,  777,    0,  777,  778,  778,
      778,  778,  778,    0,  778,  779,  779,  779,  779,    0,
      779,  780,  780,  780,  780,  780,    0,  780,  781,  781,
      781,  781,    0,  781,  782,  782,  784,    0,  784,  786,
        0,  786,  788,  788,  788,  788,    0,  788,  789,  789,
      789,    0,  789,  790,  790,  790,    0,  790,  791,  791,
      791,    0,  791,  792,  792,  792,  792,    0,  792,  793,
      793,  793,  793,    0,  793,  794,  794,  794,  794,    0,

      794,  795,  795,  795,  795,    0,  795,  796,  796,  797,
      797,  798,    0,  798,  799,    0,  799,  800,    0,  800,
      801,    0,  801,  802,  802,  802,  802,  802,    0,  802,
      803,  803,  803,  803,    0,  803,  804,  804,  804,    0,
      804,  805,  805,  805,    0,  805,  806,  806,  806,  806,
        0,  806,  807,  807,  807,  807,  807,    0,  807,  808,
      808,  808,  808,    0,  808,  809,  809,  809,  809,  809,
        0,  809,  810,  810,  810,  810,    0,  810,  811,  811,
      811,  811,  811,    0,  811,  812,  812,  812,  812,    0,
      812,  813,  813,  813,  813,  813,    0,  813,  814,  814,

      814,  814,    0,  814,  815,  815,  817,    0,  817,  819,
        0,  819,  821,  821,  821,  821,    0,  821,  822,  822,
      822,    0,  822,  823,  823,  823,    0,  823,  824,  824,
        0,  824,    0,  824,  825,  825,  825,    0,  825,  826,
        0,  826,    0,  826,  827,  827,  827,  827,    0,  827,
      828,    0,  828,    0,  828,  829,  829,  829,  829,    0,
      829,  830,    0,  830,    0,  830,  831,  831,  831,  831,
        0,  831,  832,    0,  832,    0,  832,  833,  833,  833,
      833,    0,  833,  834,    0,  834,    0,  834,  835,  835,
      835,  835,    0,  835,  836,  836,  837,  837,  838,    0,

      838,  839,    0,  839,  840,    0,  840,  841,    0,  841,
      842,  842,  842,  842,  842,    0,  842,  843,  843,  843,
      843,    0,  843,  844,  844,  844,    0,  844,  846,  846,
      846,    0,  846,  847,  847,  847,    0,  847,  848,  848,
        0,  848,    0,  848,  849,  849,  849,  849,  849,    0,
      849,  850,  850,    0,  850,    0,  850,  851,  851,  851,
      851,  851,    0,  851,  852,  852,    0,  852,    0,  852,
      853,  853,  853,  853,  853,    0,  853,  854,  854,    0,
      854,    0,  854,  855,  855,  855,  855,  855,    0,  855,
      856,  856,    0,  856,    0,  856,  857,  857,  857,  857,

      857,    0,  857,  858,  858,    0,  858,    0,  858,  859,
      859,  861,    0,  861,  863,    0,  863,  865,    0,  865,
        0,  865,  866,  866,  866,  866,    0,  866,  867,  867,
      867,    0,  867,  868,    0,  868,  869,    0,  869,  870,
        0,  870,  870,  870,    0,  870,  871,  871,    0,  871,
        0,  871,  872,  872,    0,  872,    0,  872,  873,  873,
        0,  873,    0,  873,  874,  874,    0,  874,    0,  874,
      875,  875,    0,  875,    0,  875,  876,  876,    0,  876,
        0,  876,  877,  877,    0,  877,    0,  877,  878,  878,
      879,  879,  880,    0,  880,  881,    0,  881,  882,    0,

      882,  883,    0,  883,  884,  884,  884,  884,  884,    0,
      884,  885,  885,    0,  885,    0,  885,  886,  886,  886,
        0,  886,  888,    0,  888,  889,  889,    0,  889,    0,
      889,  890,  890,    0,  890,    0,  890,  891,  891,    0,
      891,    0,  891,  892,  892,    0,  892,    0,  892,  893,
      893,    0,  893,    0,  893,  894,  894,    0,  894,    0,
      894,  895,  895,    0,  895,    0,  895,  896,  896,  898,
        0,  898,  900,    0,  900,  901,  901,    0,  901,    0,
      901,  902,  902,  902,    0,  902,  903,    0,  903,  904,
        0,  904,  905,  905,    0,  905,    0,  905,  906,  906,

      907,  907,  908,    0,  908,  909,    0,  909,  910,  910,
        0,  910,    0,  910,  912,    0,  912,  913,  913,  915,
        0,  915,  916,  916,  917,  917,  918,  918,  919,  919,
      920,  920,  921,  921,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "boot.ll"
#define INITIAL 0
#line 2 "boot.ll"
#include "libxorp/xorp.h"
#include "y.boot_tab.h"
int boot_linenum = 1;
extern char* bootlval;
string parsebuf;
#define YY_NO_UNPUT 1
#define comment 1

#define string 2

/*
 * IPv6 address representation in Augmented Backus-Naur Form (ABNF).
 * Representation taken from email by Roy T. Fielding <roy.fielding@day.com>
 * to uri@w3.org mailing list on 05 Dec 2002:
 *   http://lists.w3.org/Archives/Public/uri/2002Dec/0000.html
 *
 *    IPv6address   = (                          6( h4 ":" ) ls32 )
 *                  / (                     "::" 5( h4 ":" ) ls32 )
 *                  / ( [              h4 ] "::" 4( h4 ":" ) ls32 )
 *                  / ( [ *1( h4 ":" ) h4 ] "::" 3( h4 ":" ) ls32 )
 *                  / ( [ *2( h4 ":" ) h4 ] "::" 2( h4 ":" ) ls32 )
 *                  / ( [ *3( h4 ":" ) h4 ] "::"    h4 ":"   ls32 )
 *                  / ( [ *4( h4 ":" ) h4 ] "::"             ls32 )
 *                  / ( [ *5( h4 ":" ) h4 ] "::"             h4   )
 *                  / ( [ *6( h4 ":" ) h4 ] "::"                  )
 *
 *    ls32          = ( h4 ":" h4 ) / IPv4address
 *                  ; least-significant 32 bits of address
 *    h4            = 1*4HEXDIG
 *    IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet
 *    dec-octet     = 1*2DIGIT                      ; 0-9, 00-99
 *                  / ( "0" / "1" ) 2DIGIT          ; 000-199
 *                  / "2" %x30-34 DIGIT             ; 200-249
 *                  / "25" %x30-35                  ; 250-255
 *
 */
#line 1570 "lex.boot.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 63 "boot.ll"


#line 1724 "lex.boot.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 681 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3935 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 65 "boot.ll"
{
	return UPLEVEL;
	}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 69 "boot.ll"
{
	return DOWNLEVEL;
	}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "boot.ll"
/* whitespace */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "boot.ll"
{
	boot_linenum++;
	return END;
	}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "boot.ll"
{
	return END;
	}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 84 "boot.ll"
{
	return ASSIGN_OPERATOR;
	}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 88 "boot.ll"
{
	bootlval = strdup(boottext);
	return BOOL_VALUE;
	}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 93 "boot.ll"
{
	bootlval = strdup(boottext);
	return BOOL_VALUE;
	}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 98 "boot.ll"
{
	bootlval = strdup(boottext);
	return UINT_VALUE;
	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 103 "boot.ll"
{
	bootlval = strdup(boottext);
	return IPV4_VALUE;
	}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 108 "boot.ll"
{
	bootlval = strdup(boottext);
	return IPV4NET_VALUE;
	}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 113 "boot.ll"
{
	bootlval = strdup(boottext);
	return IPV6_VALUE;
	}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 118 "boot.ll"
{
	bootlval = strdup(boottext);
	return IPV6NET_VALUE;
	}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 123 "boot.ll"
{
	bootlval = strdup(boottext);
	return MACADDR_VALUE;
	}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 128 "boot.ll"
{
	bootlval = strdup(boottext);
	return LITERAL;
	}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 133 "boot.ll"
{
			BEGIN(string);
			parsebuf="";
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 138 "boot.ll"
/* normal text */ {
			parsebuf += boottext;
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 142 "boot.ll"
/* allow quoted quotes */ {
			parsebuf += "\"";
			}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 146 "boot.ll"
/* allow quoted backslash */ {
			parsebuf += "\\";
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 150 "boot.ll"
/* allow unquoted newlines */ {
			boot_linenum++;
			parsebuf += "\n";
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 155 "boot.ll"
/* allow quoted newlines */ {
			boot_linenum++;
			parsebuf += "\n";
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 160 "boot.ll"
{
			BEGIN(INITIAL);
			bootlval = strdup(parsebuf.c_str());
			return STRING;
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 166 "boot.ll"
BEGIN(comment);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 168 "boot.ll"
/* eat up anything that's not a '*' */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 170 "boot.ll"
/* eat up '*'s not followed by "/"s */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 172 "boot.ll"
boot_linenum++;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 174 "boot.ll"
BEGIN(INITIAL);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 176 "boot.ll"
{
	/* everything else is a syntax error */
	return SYNTAX_ERROR;
	}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 182 "boot.ll"
ECHO;
	YY_BREAK
#line 2012 "lex.boot.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(string):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 681 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 681 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 680);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 182 "boot.ll"

