/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 *
 * $XORP: xorp/xrl/targets/bgp4_mib_base.hh,v 1.7 2003/08/06 23:48:08 atanu Exp $
 */


#ifndef __XRL_INTERFACES_BGP4_MIB_BASE_HH__
#define __XRL_INTERFACES_BGP4_MIB_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlBgp4MibTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_cmd_map.hh"

class XrlBgp4MibTargetBase {
protected:
    XrlCmdMap* _cmds;

public:
    /**
     * Constructor.
     *
     * @param cmds an XrlCmdMap that the commands associated with the target
     *		   should be added to.  This is typically the XrlRouter
     *		   associated with the target.
     */
    XrlBgp4MibTargetBase(XrlCmdMap* cmds = 0);

    /**
     * Destructor.
     *
     * Dissociates instance commands from command map.
     */
    virtual ~XrlBgp4MibTargetBase();

    /**
     * Set command map.
     *
     * @param cmds pointer to command map to associate commands with.  This
     * argument is typically a pointer to the XrlRouter associated with the
     * target.
     *
     * @return true on success, false if cmds is null or a command map has
     * already been supplied.
     */
    bool set_command_map(XrlCmdMap* cmds);

    /**
     * Get Xrl instance name associated with command map.
     */
    inline const string& name() const { return _cmds->name(); }

    /**
     * Get version string of instance.
     */
    inline const char* version() const { return "bgp4_mib/0.0"; }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get name of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_target_name(
	// Output values,
	string&	name) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get version string from Xrl Target
     */
    virtual XrlCmdError common_0_1_get_version(
	// Output values,
	string&	version) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get status of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_status(
	// Output values,
	uint32_t&	status,
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request clean shutdown of Xrl Target
     */
    virtual XrlCmdError common_0_1_shutdown() = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Send bgpEstablished trap
     */
    virtual XrlCmdError bgp_mib_traps_0_1_send_bgp_established_trap(
	// Input values,
	const string&	bgp_last_error,
	const uint32_t&	bgp_state) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Send bgpBackwardTransition trap
     */
    virtual XrlCmdError bgp_mib_traps_0_1_send_bgp_backward_transition_trap(
	// Input values,
	const string&	bgp_last_error,
	const uint32_t&	bgp_state) = 0;

private:
    const XrlCmdError handle_common_0_1_get_target_name(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_common_0_1_get_version(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_common_0_1_get_status(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_common_0_1_shutdown(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_bgp_mib_traps_0_1_send_bgp_established_trap(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_bgp_mib_traps_0_1_send_bgp_backward_transition_trap(const XrlArgs& in, XrlArgs* out);

    void add_handlers()
    {
	if (_cmds->add_handler("common/0.1/get_target_name",
	    callback(this, &XrlBgp4MibTargetBase::handle_common_0_1_get_target_name)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://bgp4_mib/common/0.1/get_target_name");
	}
	if (_cmds->add_handler("common/0.1/get_version",
	    callback(this, &XrlBgp4MibTargetBase::handle_common_0_1_get_version)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://bgp4_mib/common/0.1/get_version");
	}
	if (_cmds->add_handler("common/0.1/get_status",
	    callback(this, &XrlBgp4MibTargetBase::handle_common_0_1_get_status)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://bgp4_mib/common/0.1/get_status");
	}
	if (_cmds->add_handler("common/0.1/shutdown",
	    callback(this, &XrlBgp4MibTargetBase::handle_common_0_1_shutdown)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://bgp4_mib/common/0.1/shutdown");
	}
	if (_cmds->add_handler("bgp_mib_traps/0.1/send_bgp_established_trap",
	    callback(this, &XrlBgp4MibTargetBase::handle_bgp_mib_traps_0_1_send_bgp_established_trap)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://bgp4_mib/bgp_mib_traps/0.1/send_bgp_established_trap");
	}
	if (_cmds->add_handler("bgp_mib_traps/0.1/send_bgp_backward_transition_trap",
	    callback(this, &XrlBgp4MibTargetBase::handle_bgp_mib_traps_0_1_send_bgp_backward_transition_trap)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://bgp4_mib/bgp_mib_traps/0.1/send_bgp_backward_transition_trap");
	}
	_cmds->finalize();
    }

    void remove_handlers()
    {
	_cmds->remove_handler("common/0.1/get_target_name");
	_cmds->remove_handler("common/0.1/get_version");
	_cmds->remove_handler("common/0.1/get_status");
	_cmds->remove_handler("common/0.1/shutdown");
	_cmds->remove_handler("bgp_mib_traps/0.1/send_bgp_established_trap");
	_cmds->remove_handler("bgp_mib_traps/0.1/send_bgp_backward_transition_trap");
    }
};

#endif /* __XRL_INTERFACES_BGP4_MIB_BASE_HH__ */
