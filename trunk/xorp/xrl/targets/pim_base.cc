/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/tgt-gen'.
 */

#ident "$XORP: xorp/xrl/targets/pim_base.cc,v 1.2 2003/01/07 01:43:04 pavlin Exp $"


#include "pim_base.hh"

const XrlCmdError
XrlPimTargetBase::handle_common_0_1_get_target_name(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling common/0.1/get_target_name", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string name; 
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_target_name failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("name", name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_common_0_1_get_version(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling common/0.1/get_version", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string version; 
    try {
	XrlCmdError e = common_0_1_get_version(
	    version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_version failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("version", version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_cli_processor_0_1_process_command(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling cli_processor/0.1/process_command", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string ret_processor_name; 
    string ret_cli_term_name; 
    uint32_t ret_cli_session_id; 
    string ret_command_output; 
    try {
	XrlCmdError e = cli_processor_0_1_process_command(
	    xrl.const_args().get_string("processor_name"), 
	    xrl.const_args().get_string("cli_term_name"), 
	    xrl.const_args().get_uint32("cli_session_id"), 
	    xrl.const_args().get_string("command_name"), 
	    xrl.const_args().get_string("command_args"), 
	    ret_processor_name, 
	    ret_cli_term_name, 
	    ret_cli_session_id, 
	    ret_command_output);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_processor/0.1/process_command failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("ret_processor_name", ret_processor_name);
	args->add("ret_cli_term_name", ret_cli_term_name);
	args->add("ret_cli_session_id", ret_cli_session_id);
	args->add("ret_command_output", ret_command_output);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_new_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling mfea_client/0.1/new_vif", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_new_vif(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/new_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_delete_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling mfea_client/0.1/delete_vif", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_delete_vif(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/delete_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_add_vif_addr4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 6) { 
	XLOG_ERROR("Wrong number of arguments (%d != 6) handling mfea_client/0.1/add_vif_addr4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_add_vif_addr4(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv4("addr"), 
	    xrl.const_args().get_ipv4net("subnet"), 
	    xrl.const_args().get_ipv4("broadcast"), 
	    xrl.const_args().get_ipv4("peer"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/add_vif_addr4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_add_vif_addr6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 6) { 
	XLOG_ERROR("Wrong number of arguments (%d != 6) handling mfea_client/0.1/add_vif_addr6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_add_vif_addr6(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv6("addr"), 
	    xrl.const_args().get_ipv6net("subnet"), 
	    xrl.const_args().get_ipv6("broadcast"), 
	    xrl.const_args().get_ipv6("peer"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/add_vif_addr6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_delete_vif_addr4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling mfea_client/0.1/delete_vif_addr4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_delete_vif_addr4(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv4("addr"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/delete_vif_addr4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_delete_vif_addr6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling mfea_client/0.1/delete_vif_addr6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_delete_vif_addr6(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv6("addr"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/delete_vif_addr6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_set_vif_flags(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 8) { 
	XLOG_ERROR("Wrong number of arguments (%d != 8) handling mfea_client/0.1/set_vif_flags", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_set_vif_flags(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_bool("is_pim_register"), 
	    xrl.const_args().get_bool("is_p2p"), 
	    xrl.const_args().get_bool("is_loopback"), 
	    xrl.const_args().get_bool("is_multicast"), 
	    xrl.const_args().get_bool("is_broadcast"), 
	    xrl.const_args().get_bool("is_up"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/set_vif_flags failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_set_vif_done(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling mfea_client/0.1/set_vif_done", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_set_vif_done(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/set_vif_done failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_set_all_vifs_done(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling mfea_client/0.1/set_all_vifs_done", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_set_all_vifs_done(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/set_all_vifs_done failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_is_vif_setup_completed(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling mfea_client/0.1/is_vif_setup_completed", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool is_completed; 
    try {
	XrlCmdError e = mfea_client_0_1_is_vif_setup_completed(
	    is_completed);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/is_vif_setup_completed failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("is_completed", is_completed);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_recv_protocol_message4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 11) { 
	XLOG_ERROR("Wrong number of arguments (%d != 11) handling mfea_client/0.1/recv_protocol_message4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_recv_protocol_message4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv4("source_address"), 
	    xrl.const_args().get_ipv4("dest_address"), 
	    xrl.const_args().get_int32("ip_ttl"), 
	    xrl.const_args().get_int32("ip_tos"), 
	    xrl.const_args().get_bool("is_router_alert"), 
	    xrl.const_args().get_binary("protocol_message"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_protocol_message4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_recv_protocol_message6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 11) { 
	XLOG_ERROR("Wrong number of arguments (%d != 11) handling mfea_client/0.1/recv_protocol_message6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_recv_protocol_message6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv6("source_address"), 
	    xrl.const_args().get_ipv6("dest_address"), 
	    xrl.const_args().get_int32("ip_ttl"), 
	    xrl.const_args().get_int32("ip_tos"), 
	    xrl.const_args().get_bool("is_router_alert"), 
	    xrl.const_args().get_binary("protocol_message"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_protocol_message6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_recv_kernel_signal_message4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 9) { 
	XLOG_ERROR("Wrong number of arguments (%d != 9) handling mfea_client/0.1/recv_kernel_signal_message4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_recv_kernel_signal_message4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_uint32("message_type"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv4("source_address"), 
	    xrl.const_args().get_ipv4("dest_address"), 
	    xrl.const_args().get_binary("protocol_message"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_kernel_signal_message4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_recv_kernel_signal_message6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 9) { 
	XLOG_ERROR("Wrong number of arguments (%d != 9) handling mfea_client/0.1/recv_kernel_signal_message6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_recv_kernel_signal_message6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_uint32("message_type"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv6("source_address"), 
	    xrl.const_args().get_ipv6("dest_address"), 
	    xrl.const_args().get_binary("protocol_message"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_kernel_signal_message6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_add_mrib4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 7) { 
	XLOG_ERROR("Wrong number of arguments (%d != 7) handling mfea_client/0.1/add_mrib4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_add_mrib4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv4net("dest_prefix"), 
	    xrl.const_args().get_ipv4("next_hop_router_addr"), 
	    xrl.const_args().get_string("next_hop_vif_name"), 
	    xrl.const_args().get_uint32("next_hop_vif_index"), 
	    xrl.const_args().get_uint32("metric"), 
	    xrl.const_args().get_uint32("metric_preference"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/add_mrib4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_add_mrib6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 7) { 
	XLOG_ERROR("Wrong number of arguments (%d != 7) handling mfea_client/0.1/add_mrib6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_add_mrib6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv6net("dest_prefix"), 
	    xrl.const_args().get_ipv6("next_hop_router_addr"), 
	    xrl.const_args().get_string("next_hop_vif_name"), 
	    xrl.const_args().get_uint32("next_hop_vif_index"), 
	    xrl.const_args().get_uint32("metric"), 
	    xrl.const_args().get_uint32("metric_preference"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/add_mrib6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_delete_mrib4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling mfea_client/0.1/delete_mrib4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_delete_mrib4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv4net("dest_prefix"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/delete_mrib4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_delete_mrib6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling mfea_client/0.1/delete_mrib6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_delete_mrib6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv6net("dest_prefix"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/delete_mrib6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_set_mrib_done(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling mfea_client/0.1/set_mrib_done", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_set_mrib_done(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/set_mrib_done failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_recv_dataflow_signal4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 15) { 
	XLOG_ERROR("Wrong number of arguments (%d != 15) handling mfea_client/0.1/recv_dataflow_signal4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_recv_dataflow_signal4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv4("source_address"), 
	    xrl.const_args().get_ipv4("group_address"), 
	    xrl.const_args().get_uint32("threshold_interval_sec"), 
	    xrl.const_args().get_uint32("threshold_interval_usec"), 
	    xrl.const_args().get_uint32("measured_interval_sec"), 
	    xrl.const_args().get_uint32("measured_interval_usec"), 
	    xrl.const_args().get_uint32("threshold_packets"), 
	    xrl.const_args().get_uint32("threshold_bytes"), 
	    xrl.const_args().get_uint32("measured_packets"), 
	    xrl.const_args().get_uint32("measured_bytes"), 
	    xrl.const_args().get_bool("is_threshold_in_packets"), 
	    xrl.const_args().get_bool("is_threshold_in_bytes"), 
	    xrl.const_args().get_bool("is_geq_upcall"), 
	    xrl.const_args().get_bool("is_leq_upcall"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_dataflow_signal4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_recv_dataflow_signal6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 15) { 
	XLOG_ERROR("Wrong number of arguments (%d != 15) handling mfea_client/0.1/recv_dataflow_signal6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_recv_dataflow_signal6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv6("source_address"), 
	    xrl.const_args().get_ipv6("group_address"), 
	    xrl.const_args().get_uint32("threshold_interval_sec"), 
	    xrl.const_args().get_uint32("threshold_interval_usec"), 
	    xrl.const_args().get_uint32("measured_interval_sec"), 
	    xrl.const_args().get_uint32("measured_interval_usec"), 
	    xrl.const_args().get_uint32("threshold_packets"), 
	    xrl.const_args().get_uint32("threshold_bytes"), 
	    xrl.const_args().get_uint32("measured_packets"), 
	    xrl.const_args().get_uint32("measured_bytes"), 
	    xrl.const_args().get_bool("is_threshold_in_packets"), 
	    xrl.const_args().get_bool("is_threshold_in_bytes"), 
	    xrl.const_args().get_bool("is_geq_upcall"), 
	    xrl.const_args().get_bool("is_leq_upcall"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_dataflow_signal6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mld6igmp_client_0_1_add_membership4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling mld6igmp_client/0.1/add_membership4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_client_0_1_add_membership4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv4("source"), 
	    xrl.const_args().get_ipv4("group"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp_client/0.1/add_membership4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mld6igmp_client_0_1_add_membership6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling mld6igmp_client/0.1/add_membership6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_client_0_1_add_membership6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv6("source"), 
	    xrl.const_args().get_ipv6("group"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp_client/0.1/add_membership6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mld6igmp_client_0_1_delete_membership4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling mld6igmp_client/0.1/delete_membership4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_client_0_1_delete_membership4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv4("source"), 
	    xrl.const_args().get_ipv4("group"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp_client/0.1/delete_membership4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mld6igmp_client_0_1_delete_membership6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling mld6igmp_client/0.1/delete_membership6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_client_0_1_delete_membership6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv6("source"), 
	    xrl.const_args().get_ipv6("group"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp_client/0.1/delete_membership6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_enable_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/enable_vif", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_enable_vif(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/enable_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_disable_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/disable_vif", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_disable_vif(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/disable_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_start_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/start_vif", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_start_vif(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/start_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_stop_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/stop_vif", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_stop_vif(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/stop_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_enable_all_vifs(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/enable_all_vifs", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_enable_all_vifs(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/enable_all_vifs failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_disable_all_vifs(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/disable_all_vifs", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_disable_all_vifs(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/disable_all_vifs failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_start_all_vifs(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/start_all_vifs", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_start_all_vifs(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/start_all_vifs failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_stop_all_vifs(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/stop_all_vifs", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_stop_all_vifs(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/stop_all_vifs failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_enable_pim(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/enable_pim", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_enable_pim(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/enable_pim failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_disable_pim(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/disable_pim", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_disable_pim(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/disable_pim failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_enable_cli(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/enable_cli", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_enable_cli(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/enable_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_disable_cli(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/disable_cli", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_disable_cli(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/disable_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_start_pim(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/start_pim", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_start_pim(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/start_pim failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_stop_pim(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/stop_pim", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_stop_pim(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/stop_pim failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_start_cli(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/start_cli", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_start_cli(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/start_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_stop_cli(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/stop_cli", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_stop_cli(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/stop_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_enable_bsr(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/enable_bsr", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_enable_bsr(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/enable_bsr failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_disable_bsr(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/disable_bsr", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_disable_bsr(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/disable_bsr failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_start_bsr(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/start_bsr", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_start_bsr(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/start_bsr failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_stop_bsr(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/stop_bsr", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_stop_bsr(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/stop_bsr failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_bsr_by_vif_name4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling pim/0.1/add_config_cand_bsr_by_vif_name4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_add_config_cand_bsr_by_vif_name4(
	    xrl.const_args().get_bool("is_admin_scope_zone"), 
	    xrl.const_args().get_ipv4net("admin_scope_zone_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("bsr_priority"), 
	    xrl.const_args().get_uint32("hash_masklen"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_bsr_by_vif_name4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_bsr_by_vif_name6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling pim/0.1/add_config_cand_bsr_by_vif_name6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_add_config_cand_bsr_by_vif_name6(
	    xrl.const_args().get_bool("is_admin_scope_zone"), 
	    xrl.const_args().get_ipv6net("admin_scope_zone_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("bsr_priority"), 
	    xrl.const_args().get_uint32("hash_masklen"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_bsr_by_vif_name6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_bsr_by_addr4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling pim/0.1/add_config_cand_bsr_by_addr4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_add_config_cand_bsr_by_addr4(
	    xrl.const_args().get_bool("is_admin_scope_zone"), 
	    xrl.const_args().get_ipv4net("admin_scope_zone_id"), 
	    xrl.const_args().get_ipv4("cand_bsr_addr"), 
	    xrl.const_args().get_uint32("bsr_priority"), 
	    xrl.const_args().get_uint32("hash_masklen"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_bsr_by_addr4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_bsr_by_addr6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling pim/0.1/add_config_cand_bsr_by_addr6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_add_config_cand_bsr_by_addr6(
	    xrl.const_args().get_bool("is_admin_scope_zone"), 
	    xrl.const_args().get_ipv6net("admin_scope_zone_id"), 
	    xrl.const_args().get_ipv6("cand_bsr_addr"), 
	    xrl.const_args().get_uint32("bsr_priority"), 
	    xrl.const_args().get_uint32("hash_masklen"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_bsr_by_addr6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_cand_bsr4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling pim/0.1/delete_config_cand_bsr4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_delete_config_cand_bsr4(
	    xrl.const_args().get_bool("is_admin_scope_zone"), 
	    xrl.const_args().get_ipv4net("admin_scope_zone_id"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_cand_bsr4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_cand_bsr6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling pim/0.1/delete_config_cand_bsr6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_delete_config_cand_bsr6(
	    xrl.const_args().get_bool("is_admin_scope_zone"), 
	    xrl.const_args().get_ipv6net("admin_scope_zone_id"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_cand_bsr6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_rp_by_vif_name4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling pim/0.1/add_config_cand_rp_by_vif_name4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_add_config_cand_rp_by_vif_name4(
	    xrl.const_args().get_bool("is_admin_scope_zone"), 
	    xrl.const_args().get_ipv4net("group_prefix"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("rp_priority"), 
	    xrl.const_args().get_uint32("rp_holdtime"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_rp_by_vif_name4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_rp_by_vif_name6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling pim/0.1/add_config_cand_rp_by_vif_name6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_add_config_cand_rp_by_vif_name6(
	    xrl.const_args().get_bool("is_admin_scope_zone"), 
	    xrl.const_args().get_ipv6net("group_prefix"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("rp_priority"), 
	    xrl.const_args().get_uint32("rp_holdtime"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_rp_by_vif_name6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_rp_by_addr4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling pim/0.1/add_config_cand_rp_by_addr4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_add_config_cand_rp_by_addr4(
	    xrl.const_args().get_bool("is_admin_scope_zone"), 
	    xrl.const_args().get_ipv4net("group_prefix"), 
	    xrl.const_args().get_ipv4("cand_rp_addr"), 
	    xrl.const_args().get_uint32("rp_priority"), 
	    xrl.const_args().get_uint32("rp_holdtime"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_rp_by_addr4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_rp_by_addr6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%d != 5) handling pim/0.1/add_config_cand_rp_by_addr6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_add_config_cand_rp_by_addr6(
	    xrl.const_args().get_bool("is_admin_scope_zone"), 
	    xrl.const_args().get_ipv6net("group_prefix"), 
	    xrl.const_args().get_ipv6("cand_rp_addr"), 
	    xrl.const_args().get_uint32("rp_priority"), 
	    xrl.const_args().get_uint32("rp_holdtime"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_rp_by_addr6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_cand_rp_by_vif_name4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling pim/0.1/delete_config_cand_rp_by_vif_name4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_delete_config_cand_rp_by_vif_name4(
	    xrl.const_args().get_bool("is_admin_scope_zone"), 
	    xrl.const_args().get_ipv4net("group_prefix"), 
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_cand_rp_by_vif_name4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_cand_rp_by_vif_name6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling pim/0.1/delete_config_cand_rp_by_vif_name6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_delete_config_cand_rp_by_vif_name6(
	    xrl.const_args().get_bool("is_admin_scope_zone"), 
	    xrl.const_args().get_ipv6net("group_prefix"), 
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_cand_rp_by_vif_name6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_cand_rp_by_addr4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling pim/0.1/delete_config_cand_rp_by_addr4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_delete_config_cand_rp_by_addr4(
	    xrl.const_args().get_bool("is_admin_scope_zone"), 
	    xrl.const_args().get_ipv4net("group_prefix"), 
	    xrl.const_args().get_ipv4("cand_rp_addr"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_cand_rp_by_addr4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_cand_rp_by_addr6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%d != 3) handling pim/0.1/delete_config_cand_rp_by_addr6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_delete_config_cand_rp_by_addr6(
	    xrl.const_args().get_bool("is_admin_scope_zone"), 
	    xrl.const_args().get_ipv6net("group_prefix"), 
	    xrl.const_args().get_ipv6("cand_rp_addr"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_cand_rp_by_addr6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_rp4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%d != 4) handling pim/0.1/add_config_rp4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_add_config_rp4(
	    xrl.const_args().get_ipv4net("group_prefix"), 
	    xrl.const_args().get_ipv4("rp_addr"), 
	    xrl.const_args().get_uint32("rp_priority"), 
	    xrl.const_args().get_uint32("hash_masklen"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_rp4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_rp6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 4) { 
	XLOG_ERROR("Wrong number of arguments (%d != 4) handling pim/0.1/add_config_rp6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_add_config_rp6(
	    xrl.const_args().get_ipv6net("group_prefix"), 
	    xrl.const_args().get_ipv6("rp_addr"), 
	    xrl.const_args().get_uint32("rp_priority"), 
	    xrl.const_args().get_uint32("hash_masklen"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_rp6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_rp4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling pim/0.1/delete_config_rp4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_delete_config_rp4(
	    xrl.const_args().get_ipv4net("group_prefix"), 
	    xrl.const_args().get_ipv4("rp_addr"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_rp4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_rp6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling pim/0.1/delete_config_rp6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_delete_config_rp6(
	    xrl.const_args().get_ipv6net("group_prefix"), 
	    xrl.const_args().get_ipv6("rp_addr"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_rp6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_config_rp_done(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/config_rp_done", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_config_rp_done(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/config_rp_done failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_proto_version(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/get_vif_proto_version", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t proto_version; 
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_get_vif_proto_version(
	    xrl.const_args().get_string("vif_name"), 
	    proto_version, 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_proto_version failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("proto_version", proto_version);
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_proto_version(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling pim/0.1/set_vif_proto_version", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_set_vif_proto_version(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("proto_version"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_proto_version failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_proto_version(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/reset_vif_proto_version", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_reset_vif_proto_version(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_proto_version failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_hello_triggered_delay(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/get_vif_hello_triggered_delay", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t hello_triggered_delay; 
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_get_vif_hello_triggered_delay(
	    xrl.const_args().get_string("vif_name"), 
	    hello_triggered_delay, 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_hello_triggered_delay failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("hello_triggered_delay", hello_triggered_delay);
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_hello_triggered_delay(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling pim/0.1/set_vif_hello_triggered_delay", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_set_vif_hello_triggered_delay(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("hello_triggered_delay"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_hello_triggered_delay failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_hello_triggered_delay(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/reset_vif_hello_triggered_delay", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_reset_vif_hello_triggered_delay(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_hello_triggered_delay failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_hello_period(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/get_vif_hello_period", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t hello_period; 
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_get_vif_hello_period(
	    xrl.const_args().get_string("vif_name"), 
	    hello_period, 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_hello_period failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("hello_period", hello_period);
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_hello_period(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling pim/0.1/set_vif_hello_period", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_set_vif_hello_period(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("hello_period"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_hello_period failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_hello_period(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/reset_vif_hello_period", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_reset_vif_hello_period(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_hello_period failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_hello_holdtime(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/get_vif_hello_holdtime", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t hello_holdtime; 
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_get_vif_hello_holdtime(
	    xrl.const_args().get_string("vif_name"), 
	    hello_holdtime, 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_hello_holdtime failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("hello_holdtime", hello_holdtime);
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_hello_holdtime(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling pim/0.1/set_vif_hello_holdtime", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_set_vif_hello_holdtime(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("hello_holdtime"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_hello_holdtime failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_hello_holdtime(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/reset_vif_hello_holdtime", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_reset_vif_hello_holdtime(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_hello_holdtime failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_dr_priority(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/get_vif_dr_priority", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t dr_priority; 
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_get_vif_dr_priority(
	    xrl.const_args().get_string("vif_name"), 
	    dr_priority, 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_dr_priority failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("dr_priority", dr_priority);
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_dr_priority(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling pim/0.1/set_vif_dr_priority", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_set_vif_dr_priority(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("dr_priority"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_dr_priority failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_dr_priority(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/reset_vif_dr_priority", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_reset_vif_dr_priority(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_dr_priority failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_lan_delay(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/get_vif_lan_delay", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t lan_delay; 
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_get_vif_lan_delay(
	    xrl.const_args().get_string("vif_name"), 
	    lan_delay, 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_lan_delay failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("lan_delay", lan_delay);
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_lan_delay(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling pim/0.1/set_vif_lan_delay", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_set_vif_lan_delay(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("lan_delay"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_lan_delay failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_lan_delay(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/reset_vif_lan_delay", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_reset_vif_lan_delay(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_lan_delay failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_override_interval(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/get_vif_override_interval", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t override_interval; 
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_get_vif_override_interval(
	    xrl.const_args().get_string("vif_name"), 
	    override_interval, 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_override_interval failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("override_interval", override_interval);
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_override_interval(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling pim/0.1/set_vif_override_interval", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_set_vif_override_interval(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("override_interval"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_override_interval failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_override_interval(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/reset_vif_override_interval", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_reset_vif_override_interval(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_override_interval failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_is_tracking_support_disabled(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/get_vif_is_tracking_support_disabled", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool is_tracking_support_disabled; 
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_get_vif_is_tracking_support_disabled(
	    xrl.const_args().get_string("vif_name"), 
	    is_tracking_support_disabled, 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_is_tracking_support_disabled failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("is_tracking_support_disabled", is_tracking_support_disabled);
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_is_tracking_support_disabled(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling pim/0.1/set_vif_is_tracking_support_disabled", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_set_vif_is_tracking_support_disabled(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_bool("is_tracking_support_disabled"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_is_tracking_support_disabled failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_is_tracking_support_disabled(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/reset_vif_is_tracking_support_disabled", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_reset_vif_is_tracking_support_disabled(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_is_tracking_support_disabled failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_accept_nohello_neighbors(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/get_vif_accept_nohello_neighbors", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool accept_nohello_neighbors; 
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_get_vif_accept_nohello_neighbors(
	    xrl.const_args().get_string("vif_name"), 
	    accept_nohello_neighbors, 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_accept_nohello_neighbors failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("accept_nohello_neighbors", accept_nohello_neighbors);
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_accept_nohello_neighbors(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling pim/0.1/set_vif_accept_nohello_neighbors", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_set_vif_accept_nohello_neighbors(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_bool("accept_nohello_neighbors"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_accept_nohello_neighbors failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_accept_nohello_neighbors(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/reset_vif_accept_nohello_neighbors", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_reset_vif_accept_nohello_neighbors(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_accept_nohello_neighbors failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_join_prune_period(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/get_vif_join_prune_period", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t join_prune_period; 
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_get_vif_join_prune_period(
	    xrl.const_args().get_string("vif_name"), 
	    join_prune_period, 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_join_prune_period failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("join_prune_period", join_prune_period);
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_join_prune_period(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%d != 2) handling pim/0.1/set_vif_join_prune_period", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_set_vif_join_prune_period(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("join_prune_period"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_join_prune_period failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_join_prune_period(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/reset_vif_join_prune_period", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_reset_vif_join_prune_period(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_join_prune_period failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_enable_log_trace(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/enable_log_trace", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_enable_log_trace(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/enable_log_trace failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_disable_log_trace(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%d != 0) handling pim/0.1/disable_log_trace", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_disable_log_trace(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/disable_log_trace failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_test_jp_entry4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 7) { 
	XLOG_ERROR("Wrong number of arguments (%d != 7) handling pim/0.1/add_test_jp_entry4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_add_test_jp_entry4(
	    xrl.const_args().get_ipv4("source_addr"), 
	    xrl.const_args().get_ipv4("group_addr"), 
	    xrl.const_args().get_uint32("group_masklen"), 
	    xrl.const_args().get_string("mrt_entry_type"), 
	    xrl.const_args().get_string("action_jp"), 
	    xrl.const_args().get_uint32("holdtime"), 
	    xrl.const_args().get_bool("new_group_bool"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_test_jp_entry4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_test_jp_entry6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 7) { 
	XLOG_ERROR("Wrong number of arguments (%d != 7) handling pim/0.1/add_test_jp_entry6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_add_test_jp_entry6(
	    xrl.const_args().get_ipv6("source_addr"), 
	    xrl.const_args().get_ipv6("group_addr"), 
	    xrl.const_args().get_uint32("group_masklen"), 
	    xrl.const_args().get_string("mrt_entry_type"), 
	    xrl.const_args().get_string("action_jp"), 
	    xrl.const_args().get_uint32("holdtime"), 
	    xrl.const_args().get_bool("new_group_bool"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_test_jp_entry6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_send_test_jp_entry4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/send_test_jp_entry4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_send_test_jp_entry4(
	    xrl.const_args().get_ipv4("nbr_addr"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/send_test_jp_entry4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_send_test_jp_entry6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%d != 1) handling pim/0.1/send_test_jp_entry6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_send_test_jp_entry6(
	    xrl.const_args().get_ipv6("nbr_addr"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/send_test_jp_entry6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_send_test_assert4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 6) { 
	XLOG_ERROR("Wrong number of arguments (%d != 6) handling pim/0.1/send_test_assert4", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_send_test_assert4(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_ipv4("source_addr"), 
	    xrl.const_args().get_ipv4("group_addr"), 
	    xrl.const_args().get_bool("rpt_bit"), 
	    xrl.const_args().get_uint32("metric_preference"), 
	    xrl.const_args().get_uint32("metric"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/send_test_assert4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_send_test_assert6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 6) { 
	XLOG_ERROR("Wrong number of arguments (%d != 6) handling pim/0.1/send_test_assert6", xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = pim_0_1_send_test_assert6(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_ipv6("source_addr"), 
	    xrl.const_args().get_ipv6("group_addr"), 
	    xrl.const_args().get_bool("rpt_bit"), 
	    xrl.const_args().get_uint32("metric_preference"), 
	    xrl.const_args().get_uint32("metric"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/send_test_assert6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

