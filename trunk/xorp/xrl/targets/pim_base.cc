/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */

#ident "$XORP: xorp/xrl/targets/pim_base.cc,v 1.27 2003/09/30 18:27:08 pavlin Exp $"


#include "pim_base.hh"


XrlPimTargetBase::XrlPimTargetBase(XrlCmdMap* cmds)
    : _cmds(cmds)
{
    if (_cmds)
	add_handlers();
}

XrlPimTargetBase::~XrlPimTargetBase()
{
    if (_cmds)
	remove_handlers();
}

bool
XrlPimTargetBase::set_command_map(XrlCmdMap* cmds)
{
    if (_cmds || cmds == 0)
	return false;
    _cmds = cmds;
    return true;
}
const XrlCmdError
XrlPimTargetBase::handle_common_0_1_get_target_name(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/get_target_name",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string name;
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_target_name failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("name", name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_common_0_1_get_version(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/get_version",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string version;
    try {
	XrlCmdError e = common_0_1_get_version(
	    version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_version failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("version", version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_common_0_1_get_status(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/get_status",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t status;
    string reason;
    try {
	XrlCmdError e = common_0_1_get_status(
	    status,
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_status failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("status", status);
	pxa_outputs->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_common_0_1_shutdown(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/shutdown",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_shutdown();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/shutdown failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_cli_processor_0_1_process_command(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling cli_processor/0.1/process_command",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string ret_processor_name;
    string ret_cli_term_name;
    uint32_t ret_cli_session_id;
    string ret_command_output;
    try {
	XrlCmdError e = cli_processor_0_1_process_command(
	    xa_inputs.get_string("processor_name"),
	    xa_inputs.get_string("cli_term_name"),
	    xa_inputs.get_uint32("cli_session_id"),
	    xa_inputs.get_string("command_name"),
	    xa_inputs.get_string("command_args"),
	    ret_processor_name,
	    ret_cli_term_name,
	    ret_cli_session_id,
	    ret_command_output);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_processor/0.1/process_command failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("ret_processor_name", ret_processor_name);
	pxa_outputs->add("ret_cli_term_name", ret_cli_term_name);
	pxa_outputs->add("ret_cli_session_id", ret_cli_session_id);
	pxa_outputs->add("ret_command_output", ret_command_output);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_new_vif(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling mfea_client/0.1/new_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_new_vif(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/new_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_delete_vif(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mfea_client/0.1/delete_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_delete_vif(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/delete_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_add_vif_addr4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mfea_client/0.1/add_vif_addr4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_add_vif_addr4(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_ipv4("addr"),
	    xa_inputs.get_ipv4net("subnet"),
	    xa_inputs.get_ipv4("broadcast"),
	    xa_inputs.get_ipv4("peer"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/add_vif_addr4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_add_vif_addr6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mfea_client/0.1/add_vif_addr6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_add_vif_addr6(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_ipv6("addr"),
	    xa_inputs.get_ipv6net("subnet"),
	    xa_inputs.get_ipv6("broadcast"),
	    xa_inputs.get_ipv6("peer"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/add_vif_addr6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_delete_vif_addr4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling mfea_client/0.1/delete_vif_addr4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_delete_vif_addr4(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_ipv4("addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/delete_vif_addr4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_delete_vif_addr6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling mfea_client/0.1/delete_vif_addr6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_delete_vif_addr6(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_ipv6("addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/delete_vif_addr6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_set_vif_flags(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != 7) handling mfea_client/0.1/set_vif_flags",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_set_vif_flags(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_bool("is_pim_register"),
	    xa_inputs.get_bool("is_p2p"),
	    xa_inputs.get_bool("is_loopback"),
	    xa_inputs.get_bool("is_multicast"),
	    xa_inputs.get_bool("is_broadcast"),
	    xa_inputs.get_bool("is_up"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/set_vif_flags failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_set_all_vifs_done(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea_client/0.1/set_all_vifs_done",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_set_all_vifs_done();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/set_all_vifs_done failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_is_vif_setup_completed(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea_client/0.1/is_vif_setup_completed",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool is_completed;
    try {
	XrlCmdError e = mfea_client_0_1_is_vif_setup_completed(
	    is_completed);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/is_vif_setup_completed failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("is_completed", is_completed);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_recv_protocol_message4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 11) {
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea_client/0.1/recv_protocol_message4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_recv_protocol_message4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"),
	    xa_inputs.get_ipv4("source_address"),
	    xa_inputs.get_ipv4("dest_address"),
	    xa_inputs.get_int32("ip_ttl"),
	    xa_inputs.get_int32("ip_tos"),
	    xa_inputs.get_bool("is_router_alert"),
	    xa_inputs.get_binary("protocol_message"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_protocol_message4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_recv_protocol_message6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 11) {
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea_client/0.1/recv_protocol_message6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_recv_protocol_message6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"),
	    xa_inputs.get_ipv6("source_address"),
	    xa_inputs.get_ipv6("dest_address"),
	    xa_inputs.get_int32("ip_ttl"),
	    xa_inputs.get_int32("ip_tos"),
	    xa_inputs.get_bool("is_router_alert"),
	    xa_inputs.get_binary("protocol_message"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_protocol_message6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_recv_kernel_signal_message4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 9) {
	XLOG_ERROR("Wrong number of arguments (%u != 9) handling mfea_client/0.1/recv_kernel_signal_message4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_recv_kernel_signal_message4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_uint32("message_type"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"),
	    xa_inputs.get_ipv4("source_address"),
	    xa_inputs.get_ipv4("dest_address"),
	    xa_inputs.get_binary("protocol_message"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_kernel_signal_message4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_recv_kernel_signal_message6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 9) {
	XLOG_ERROR("Wrong number of arguments (%u != 9) handling mfea_client/0.1/recv_kernel_signal_message6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_recv_kernel_signal_message6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_uint32("message_type"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"),
	    xa_inputs.get_ipv6("source_address"),
	    xa_inputs.get_ipv6("dest_address"),
	    xa_inputs.get_binary("protocol_message"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_kernel_signal_message6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_add_mrib4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != 7) handling mfea_client/0.1/add_mrib4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_add_mrib4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv4net("dest_prefix"),
	    xa_inputs.get_ipv4("next_hop_router_addr"),
	    xa_inputs.get_string("next_hop_vif_name"),
	    xa_inputs.get_uint32("next_hop_vif_index"),
	    xa_inputs.get_uint32("metric_preference"),
	    xa_inputs.get_uint32("metric"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/add_mrib4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_add_mrib6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != 7) handling mfea_client/0.1/add_mrib6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_add_mrib6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv6net("dest_prefix"),
	    xa_inputs.get_ipv6("next_hop_router_addr"),
	    xa_inputs.get_string("next_hop_vif_name"),
	    xa_inputs.get_uint32("next_hop_vif_index"),
	    xa_inputs.get_uint32("metric_preference"),
	    xa_inputs.get_uint32("metric"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/add_mrib6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_delete_mrib4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling mfea_client/0.1/delete_mrib4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_delete_mrib4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv4net("dest_prefix"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/delete_mrib4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_delete_mrib6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling mfea_client/0.1/delete_mrib6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_delete_mrib6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv6net("dest_prefix"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/delete_mrib6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_set_mrib_done(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mfea_client/0.1/set_mrib_done",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_set_mrib_done(
	    xa_inputs.get_string("xrl_sender_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/set_mrib_done failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_recv_dataflow_signal4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 15) {
	XLOG_ERROR("Wrong number of arguments (%u != 15) handling mfea_client/0.1/recv_dataflow_signal4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_recv_dataflow_signal4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv4("source_address"),
	    xa_inputs.get_ipv4("group_address"),
	    xa_inputs.get_uint32("threshold_interval_sec"),
	    xa_inputs.get_uint32("threshold_interval_usec"),
	    xa_inputs.get_uint32("measured_interval_sec"),
	    xa_inputs.get_uint32("measured_interval_usec"),
	    xa_inputs.get_uint32("threshold_packets"),
	    xa_inputs.get_uint32("threshold_bytes"),
	    xa_inputs.get_uint32("measured_packets"),
	    xa_inputs.get_uint32("measured_bytes"),
	    xa_inputs.get_bool("is_threshold_in_packets"),
	    xa_inputs.get_bool("is_threshold_in_bytes"),
	    xa_inputs.get_bool("is_geq_upcall"),
	    xa_inputs.get_bool("is_leq_upcall"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_dataflow_signal4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mfea_client_0_1_recv_dataflow_signal6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 15) {
	XLOG_ERROR("Wrong number of arguments (%u != 15) handling mfea_client/0.1/recv_dataflow_signal6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_client_0_1_recv_dataflow_signal6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv6("source_address"),
	    xa_inputs.get_ipv6("group_address"),
	    xa_inputs.get_uint32("threshold_interval_sec"),
	    xa_inputs.get_uint32("threshold_interval_usec"),
	    xa_inputs.get_uint32("measured_interval_sec"),
	    xa_inputs.get_uint32("measured_interval_usec"),
	    xa_inputs.get_uint32("threshold_packets"),
	    xa_inputs.get_uint32("threshold_bytes"),
	    xa_inputs.get_uint32("measured_packets"),
	    xa_inputs.get_uint32("measured_bytes"),
	    xa_inputs.get_bool("is_threshold_in_packets"),
	    xa_inputs.get_bool("is_threshold_in_bytes"),
	    xa_inputs.get_bool("is_geq_upcall"),
	    xa_inputs.get_bool("is_leq_upcall"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_dataflow_signal6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_start_transaction(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling fti/0.2/start_transaction",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t tid;
    try {
	XrlCmdError e = fti_0_2_start_transaction(
	    tid);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/start_transaction failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("tid", tid);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_commit_transaction(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling fti/0.2/commit_transaction",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_2_commit_transaction(
	    xa_inputs.get_uint32("tid"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/commit_transaction failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_abort_transaction(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling fti/0.2/abort_transaction",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_2_abort_transaction(
	    xa_inputs.get_uint32("tid"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/abort_transaction failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_add_entry4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 8) {
	XLOG_ERROR("Wrong number of arguments (%u != 8) handling fti/0.2/add_entry4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_2_add_entry4(
	    xa_inputs.get_uint32("tid"),
	    xa_inputs.get_ipv4net("dst"),
	    xa_inputs.get_ipv4("gateway"),
	    xa_inputs.get_string("ifname"),
	    xa_inputs.get_string("vifname"),
	    xa_inputs.get_uint32("metric"),
	    xa_inputs.get_uint32("admin_distance"),
	    xa_inputs.get_string("protocol_origin"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/add_entry4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_add_entry6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 8) {
	XLOG_ERROR("Wrong number of arguments (%u != 8) handling fti/0.2/add_entry6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_2_add_entry6(
	    xa_inputs.get_uint32("tid"),
	    xa_inputs.get_ipv6net("dst"),
	    xa_inputs.get_ipv6("gateway"),
	    xa_inputs.get_string("ifname"),
	    xa_inputs.get_string("vifname"),
	    xa_inputs.get_uint32("metric"),
	    xa_inputs.get_uint32("admin_distance"),
	    xa_inputs.get_string("protocol_origin"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/add_entry6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_delete_entry4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling fti/0.2/delete_entry4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_2_delete_entry4(
	    xa_inputs.get_uint32("tid"),
	    xa_inputs.get_ipv4net("dst"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/delete_entry4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_delete_entry6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling fti/0.2/delete_entry6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_2_delete_entry6(
	    xa_inputs.get_uint32("tid"),
	    xa_inputs.get_ipv6net("dst"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/delete_entry6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_delete_all_entries(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling fti/0.2/delete_all_entries",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_2_delete_all_entries(
	    xa_inputs.get_uint32("tid"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/delete_all_entries failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_delete_all_entries4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling fti/0.2/delete_all_entries4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_2_delete_all_entries4(
	    xa_inputs.get_uint32("tid"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/delete_all_entries4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_delete_all_entries6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling fti/0.2/delete_all_entries6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_2_delete_all_entries6(
	    xa_inputs.get_uint32("tid"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/delete_all_entries6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_lookup_route4(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling fti/0.2/lookup_route4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    IPv4Net netmask;
    IPv4 gateway;
    string ifname;
    string vifname;
    uint32_t metric;
    uint32_t admin_distance;
    string protocol_origin;
    try {
	XrlCmdError e = fti_0_2_lookup_route4(
	    xa_inputs.get_ipv4("dst"),
	    netmask,
	    gateway,
	    ifname,
	    vifname,
	    metric,
	    admin_distance,
	    protocol_origin);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/lookup_route4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("netmask", netmask);
	pxa_outputs->add("gateway", gateway);
	pxa_outputs->add("ifname", ifname);
	pxa_outputs->add("vifname", vifname);
	pxa_outputs->add("metric", metric);
	pxa_outputs->add("admin_distance", admin_distance);
	pxa_outputs->add("protocol_origin", protocol_origin);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_lookup_route6(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling fti/0.2/lookup_route6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    IPv6Net netmask;
    IPv6 gateway;
    string ifname;
    string vifname;
    uint32_t metric;
    uint32_t admin_distance;
    string protocol_origin;
    try {
	XrlCmdError e = fti_0_2_lookup_route6(
	    xa_inputs.get_ipv6("dst"),
	    netmask,
	    gateway,
	    ifname,
	    vifname,
	    metric,
	    admin_distance,
	    protocol_origin);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/lookup_route6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("netmask", netmask);
	pxa_outputs->add("gateway", gateway);
	pxa_outputs->add("ifname", ifname);
	pxa_outputs->add("vifname", vifname);
	pxa_outputs->add("metric", metric);
	pxa_outputs->add("admin_distance", admin_distance);
	pxa_outputs->add("protocol_origin", protocol_origin);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_lookup_entry4(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling fti/0.2/lookup_entry4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    IPv4 gateway;
    string ifname;
    string vifname;
    uint32_t metric;
    uint32_t admin_distance;
    string protocol_origin;
    try {
	XrlCmdError e = fti_0_2_lookup_entry4(
	    xa_inputs.get_ipv4net("dst"),
	    gateway,
	    ifname,
	    vifname,
	    metric,
	    admin_distance,
	    protocol_origin);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/lookup_entry4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("gateway", gateway);
	pxa_outputs->add("ifname", ifname);
	pxa_outputs->add("vifname", vifname);
	pxa_outputs->add("metric", metric);
	pxa_outputs->add("admin_distance", admin_distance);
	pxa_outputs->add("protocol_origin", protocol_origin);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_lookup_entry6(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling fti/0.2/lookup_entry6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    IPv6 gateway;
    string ifname;
    string vifname;
    uint32_t metric;
    uint32_t admin_distance;
    string protocol_origin;
    try {
	XrlCmdError e = fti_0_2_lookup_entry6(
	    xa_inputs.get_ipv6net("dst"),
	    gateway,
	    ifname,
	    vifname,
	    metric,
	    admin_distance,
	    protocol_origin);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/lookup_entry6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("gateway", gateway);
	pxa_outputs->add("ifname", ifname);
	pxa_outputs->add("vifname", vifname);
	pxa_outputs->add("metric", metric);
	pxa_outputs->add("admin_distance", admin_distance);
	pxa_outputs->add("protocol_origin", protocol_origin);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_have_ipv4(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling fti/0.2/have_ipv4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool result;
    try {
	XrlCmdError e = fti_0_2_have_ipv4(
	    result);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/have_ipv4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("result", result);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_have_ipv6(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling fti/0.2/have_ipv6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool result;
    try {
	XrlCmdError e = fti_0_2_have_ipv6(
	    result);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/have_ipv6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("result", result);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_get_unicast_forwarding_enabled4(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling fti/0.2/get_unicast_forwarding_enabled4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool enabled;
    try {
	XrlCmdError e = fti_0_2_get_unicast_forwarding_enabled4(
	    enabled);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/get_unicast_forwarding_enabled4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("enabled", enabled);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_get_unicast_forwarding_enabled6(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling fti/0.2/get_unicast_forwarding_enabled6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool enabled;
    try {
	XrlCmdError e = fti_0_2_get_unicast_forwarding_enabled6(
	    enabled);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/get_unicast_forwarding_enabled6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("enabled", enabled);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_set_unicast_forwarding_enabled4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling fti/0.2/set_unicast_forwarding_enabled4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_2_set_unicast_forwarding_enabled4(
	    xa_inputs.get_bool("enabled"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/set_unicast_forwarding_enabled4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_fti_0_2_set_unicast_forwarding_enabled6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling fti/0.2/set_unicast_forwarding_enabled6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fti_0_2_set_unicast_forwarding_enabled6(
	    xa_inputs.get_bool("enabled"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fti/0.2/set_unicast_forwarding_enabled6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mld6igmp_client_0_1_add_membership4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mld6igmp_client/0.1/add_membership4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_client_0_1_add_membership4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"),
	    xa_inputs.get_ipv4("source"),
	    xa_inputs.get_ipv4("group"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp_client/0.1/add_membership4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mld6igmp_client_0_1_add_membership6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mld6igmp_client/0.1/add_membership6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_client_0_1_add_membership6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"),
	    xa_inputs.get_ipv6("source"),
	    xa_inputs.get_ipv6("group"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp_client/0.1/add_membership6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mld6igmp_client_0_1_delete_membership4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mld6igmp_client/0.1/delete_membership4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_client_0_1_delete_membership4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"),
	    xa_inputs.get_ipv4("source"),
	    xa_inputs.get_ipv4("group"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp_client/0.1/delete_membership4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_mld6igmp_client_0_1_delete_membership6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mld6igmp_client/0.1/delete_membership6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mld6igmp_client_0_1_delete_membership6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"),
	    xa_inputs.get_ipv6("source"),
	    xa_inputs.get_ipv6("group"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp_client/0.1/delete_membership6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_enable_vif(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/enable_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_enable_vif(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/enable_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_disable_vif(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/disable_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_disable_vif(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/disable_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_start_vif(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/start_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_start_vif(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/start_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_stop_vif(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/stop_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_stop_vif(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/stop_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_enable_all_vifs(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/enable_all_vifs",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_enable_all_vifs();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/enable_all_vifs failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_disable_all_vifs(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/disable_all_vifs",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_disable_all_vifs();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/disable_all_vifs failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_start_all_vifs(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/start_all_vifs",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_start_all_vifs();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/start_all_vifs failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_stop_all_vifs(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/stop_all_vifs",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_stop_all_vifs();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/stop_all_vifs failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_enable_pim(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/enable_pim",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_enable_pim();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/enable_pim failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_disable_pim(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/disable_pim",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_disable_pim();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/disable_pim failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_enable_cli(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/enable_cli",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_enable_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/enable_cli failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_disable_cli(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/disable_cli",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_disable_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/disable_cli failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_start_pim(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/start_pim",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_start_pim();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/start_pim failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_stop_pim(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/stop_pim",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_stop_pim();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/stop_pim failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_start_cli(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/start_cli",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_start_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/start_cli failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_stop_cli(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/stop_cli",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_stop_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/stop_cli failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_enable_bsr(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/enable_bsr",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_enable_bsr();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/enable_bsr failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_disable_bsr(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/disable_bsr",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_disable_bsr();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/disable_bsr failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_start_bsr(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/start_bsr",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_start_bsr();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/start_bsr failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_stop_bsr(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/stop_bsr",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_stop_bsr();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/stop_bsr failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_scope_zone_by_vif_name4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/add_config_scope_zone_by_vif_name4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_config_scope_zone_by_vif_name4(
	    xa_inputs.get_ipv4net("scope_zone_id"),
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_scope_zone_by_vif_name4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_scope_zone_by_vif_name6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/add_config_scope_zone_by_vif_name6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_config_scope_zone_by_vif_name6(
	    xa_inputs.get_ipv6net("scope_zone_id"),
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_scope_zone_by_vif_name6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_scope_zone_by_vif_addr4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/add_config_scope_zone_by_vif_addr4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_config_scope_zone_by_vif_addr4(
	    xa_inputs.get_ipv4net("scope_zone_id"),
	    xa_inputs.get_ipv4("vif_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_scope_zone_by_vif_addr4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_scope_zone_by_vif_addr6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/add_config_scope_zone_by_vif_addr6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_config_scope_zone_by_vif_addr6(
	    xa_inputs.get_ipv6net("scope_zone_id"),
	    xa_inputs.get_ipv6("vif_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_scope_zone_by_vif_addr6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_scope_zone_by_vif_name4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/delete_config_scope_zone_by_vif_name4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_delete_config_scope_zone_by_vif_name4(
	    xa_inputs.get_ipv4net("scope_zone_id"),
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_scope_zone_by_vif_name4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_scope_zone_by_vif_name6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/delete_config_scope_zone_by_vif_name6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_delete_config_scope_zone_by_vif_name6(
	    xa_inputs.get_ipv6net("scope_zone_id"),
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_scope_zone_by_vif_name6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_scope_zone_by_vif_addr4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/delete_config_scope_zone_by_vif_addr4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_delete_config_scope_zone_by_vif_addr4(
	    xa_inputs.get_ipv4net("scope_zone_id"),
	    xa_inputs.get_ipv4("vif_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_scope_zone_by_vif_addr4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_scope_zone_by_vif_addr6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/delete_config_scope_zone_by_vif_addr6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_delete_config_scope_zone_by_vif_addr6(
	    xa_inputs.get_ipv6net("scope_zone_id"),
	    xa_inputs.get_ipv6("vif_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_scope_zone_by_vif_addr6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_bsr_by_vif_name4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling pim/0.1/add_config_cand_bsr_by_vif_name4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_config_cand_bsr_by_vif_name4(
	    xa_inputs.get_ipv4net("scope_zone_id"),
	    xa_inputs.get_bool("is_scope_zone"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("bsr_priority"),
	    xa_inputs.get_uint32("hash_mask_len"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_bsr_by_vif_name4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_bsr_by_vif_name6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling pim/0.1/add_config_cand_bsr_by_vif_name6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_config_cand_bsr_by_vif_name6(
	    xa_inputs.get_ipv6net("scope_zone_id"),
	    xa_inputs.get_bool("is_scope_zone"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("bsr_priority"),
	    xa_inputs.get_uint32("hash_mask_len"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_bsr_by_vif_name6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_bsr_by_addr4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling pim/0.1/add_config_cand_bsr_by_addr4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_config_cand_bsr_by_addr4(
	    xa_inputs.get_ipv4net("scope_zone_id"),
	    xa_inputs.get_bool("is_scope_zone"),
	    xa_inputs.get_ipv4("cand_bsr_addr"),
	    xa_inputs.get_uint32("bsr_priority"),
	    xa_inputs.get_uint32("hash_mask_len"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_bsr_by_addr4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_bsr_by_addr6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling pim/0.1/add_config_cand_bsr_by_addr6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_config_cand_bsr_by_addr6(
	    xa_inputs.get_ipv6net("scope_zone_id"),
	    xa_inputs.get_bool("is_scope_zone"),
	    xa_inputs.get_ipv6("cand_bsr_addr"),
	    xa_inputs.get_uint32("bsr_priority"),
	    xa_inputs.get_uint32("hash_mask_len"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_bsr_by_addr6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_cand_bsr4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/delete_config_cand_bsr4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_delete_config_cand_bsr4(
	    xa_inputs.get_ipv4net("scope_zone_id"),
	    xa_inputs.get_bool("is_scope_zone"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_cand_bsr4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_cand_bsr6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/delete_config_cand_bsr6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_delete_config_cand_bsr6(
	    xa_inputs.get_ipv6net("scope_zone_id"),
	    xa_inputs.get_bool("is_scope_zone"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_cand_bsr6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_rp_by_vif_name4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling pim/0.1/add_config_cand_rp_by_vif_name4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_config_cand_rp_by_vif_name4(
	    xa_inputs.get_ipv4net("group_prefix"),
	    xa_inputs.get_bool("is_scope_zone"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("rp_priority"),
	    xa_inputs.get_uint32("rp_holdtime"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_rp_by_vif_name4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_rp_by_vif_name6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling pim/0.1/add_config_cand_rp_by_vif_name6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_config_cand_rp_by_vif_name6(
	    xa_inputs.get_ipv6net("group_prefix"),
	    xa_inputs.get_bool("is_scope_zone"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("rp_priority"),
	    xa_inputs.get_uint32("rp_holdtime"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_rp_by_vif_name6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_rp_by_addr4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling pim/0.1/add_config_cand_rp_by_addr4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_config_cand_rp_by_addr4(
	    xa_inputs.get_ipv4net("group_prefix"),
	    xa_inputs.get_bool("is_scope_zone"),
	    xa_inputs.get_ipv4("cand_rp_addr"),
	    xa_inputs.get_uint32("rp_priority"),
	    xa_inputs.get_uint32("rp_holdtime"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_rp_by_addr4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_cand_rp_by_addr6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling pim/0.1/add_config_cand_rp_by_addr6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_config_cand_rp_by_addr6(
	    xa_inputs.get_ipv6net("group_prefix"),
	    xa_inputs.get_bool("is_scope_zone"),
	    xa_inputs.get_ipv6("cand_rp_addr"),
	    xa_inputs.get_uint32("rp_priority"),
	    xa_inputs.get_uint32("rp_holdtime"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_cand_rp_by_addr6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_cand_rp_by_vif_name4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling pim/0.1/delete_config_cand_rp_by_vif_name4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_delete_config_cand_rp_by_vif_name4(
	    xa_inputs.get_ipv4net("group_prefix"),
	    xa_inputs.get_bool("is_scope_zone"),
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_cand_rp_by_vif_name4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_cand_rp_by_vif_name6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling pim/0.1/delete_config_cand_rp_by_vif_name6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_delete_config_cand_rp_by_vif_name6(
	    xa_inputs.get_ipv6net("group_prefix"),
	    xa_inputs.get_bool("is_scope_zone"),
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_cand_rp_by_vif_name6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_cand_rp_by_addr4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling pim/0.1/delete_config_cand_rp_by_addr4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_delete_config_cand_rp_by_addr4(
	    xa_inputs.get_ipv4net("group_prefix"),
	    xa_inputs.get_bool("is_scope_zone"),
	    xa_inputs.get_ipv4("cand_rp_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_cand_rp_by_addr4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_cand_rp_by_addr6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling pim/0.1/delete_config_cand_rp_by_addr6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_delete_config_cand_rp_by_addr6(
	    xa_inputs.get_ipv6net("group_prefix"),
	    xa_inputs.get_bool("is_scope_zone"),
	    xa_inputs.get_ipv6("cand_rp_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_cand_rp_by_addr6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_static_rp4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling pim/0.1/add_config_static_rp4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_config_static_rp4(
	    xa_inputs.get_ipv4net("group_prefix"),
	    xa_inputs.get_ipv4("rp_addr"),
	    xa_inputs.get_uint32("rp_priority"),
	    xa_inputs.get_uint32("hash_mask_len"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_static_rp4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_config_static_rp6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling pim/0.1/add_config_static_rp6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_config_static_rp6(
	    xa_inputs.get_ipv6net("group_prefix"),
	    xa_inputs.get_ipv6("rp_addr"),
	    xa_inputs.get_uint32("rp_priority"),
	    xa_inputs.get_uint32("hash_mask_len"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_config_static_rp6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_static_rp4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/delete_config_static_rp4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_delete_config_static_rp4(
	    xa_inputs.get_ipv4net("group_prefix"),
	    xa_inputs.get_ipv4("rp_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_static_rp4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_delete_config_static_rp6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/delete_config_static_rp6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_delete_config_static_rp6(
	    xa_inputs.get_ipv6net("group_prefix"),
	    xa_inputs.get_ipv6("rp_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/delete_config_static_rp6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_config_static_rp_done(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/config_static_rp_done",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_config_static_rp_done();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/config_static_rp_done failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_proto_version(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/get_vif_proto_version",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t proto_version;
    try {
	XrlCmdError e = pim_0_1_get_vif_proto_version(
	    xa_inputs.get_string("vif_name"),
	    proto_version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_proto_version failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("proto_version", proto_version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_proto_version(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/set_vif_proto_version",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_set_vif_proto_version(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("proto_version"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_proto_version failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_proto_version(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/reset_vif_proto_version",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_reset_vif_proto_version(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_proto_version failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_hello_triggered_delay(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/get_vif_hello_triggered_delay",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t hello_triggered_delay;
    try {
	XrlCmdError e = pim_0_1_get_vif_hello_triggered_delay(
	    xa_inputs.get_string("vif_name"),
	    hello_triggered_delay);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_hello_triggered_delay failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("hello_triggered_delay", hello_triggered_delay);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_hello_triggered_delay(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/set_vif_hello_triggered_delay",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_set_vif_hello_triggered_delay(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("hello_triggered_delay"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_hello_triggered_delay failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_hello_triggered_delay(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/reset_vif_hello_triggered_delay",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_reset_vif_hello_triggered_delay(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_hello_triggered_delay failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_hello_period(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/get_vif_hello_period",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t hello_period;
    try {
	XrlCmdError e = pim_0_1_get_vif_hello_period(
	    xa_inputs.get_string("vif_name"),
	    hello_period);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_hello_period failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("hello_period", hello_period);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_hello_period(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/set_vif_hello_period",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_set_vif_hello_period(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("hello_period"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_hello_period failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_hello_period(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/reset_vif_hello_period",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_reset_vif_hello_period(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_hello_period failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_hello_holdtime(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/get_vif_hello_holdtime",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t hello_holdtime;
    try {
	XrlCmdError e = pim_0_1_get_vif_hello_holdtime(
	    xa_inputs.get_string("vif_name"),
	    hello_holdtime);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_hello_holdtime failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("hello_holdtime", hello_holdtime);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_hello_holdtime(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/set_vif_hello_holdtime",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_set_vif_hello_holdtime(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("hello_holdtime"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_hello_holdtime failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_hello_holdtime(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/reset_vif_hello_holdtime",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_reset_vif_hello_holdtime(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_hello_holdtime failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_dr_priority(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/get_vif_dr_priority",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t dr_priority;
    try {
	XrlCmdError e = pim_0_1_get_vif_dr_priority(
	    xa_inputs.get_string("vif_name"),
	    dr_priority);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_dr_priority failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("dr_priority", dr_priority);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_dr_priority(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/set_vif_dr_priority",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_set_vif_dr_priority(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("dr_priority"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_dr_priority failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_dr_priority(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/reset_vif_dr_priority",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_reset_vif_dr_priority(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_dr_priority failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_lan_delay(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/get_vif_lan_delay",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t lan_delay;
    try {
	XrlCmdError e = pim_0_1_get_vif_lan_delay(
	    xa_inputs.get_string("vif_name"),
	    lan_delay);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_lan_delay failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("lan_delay", lan_delay);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_lan_delay(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/set_vif_lan_delay",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_set_vif_lan_delay(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("lan_delay"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_lan_delay failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_lan_delay(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/reset_vif_lan_delay",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_reset_vif_lan_delay(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_lan_delay failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_override_interval(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/get_vif_override_interval",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t override_interval;
    try {
	XrlCmdError e = pim_0_1_get_vif_override_interval(
	    xa_inputs.get_string("vif_name"),
	    override_interval);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_override_interval failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("override_interval", override_interval);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_override_interval(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/set_vif_override_interval",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_set_vif_override_interval(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("override_interval"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_override_interval failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_override_interval(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/reset_vif_override_interval",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_reset_vif_override_interval(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_override_interval failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_is_tracking_support_disabled(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/get_vif_is_tracking_support_disabled",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool is_tracking_support_disabled;
    try {
	XrlCmdError e = pim_0_1_get_vif_is_tracking_support_disabled(
	    xa_inputs.get_string("vif_name"),
	    is_tracking_support_disabled);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_is_tracking_support_disabled failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("is_tracking_support_disabled", is_tracking_support_disabled);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_is_tracking_support_disabled(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/set_vif_is_tracking_support_disabled",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_set_vif_is_tracking_support_disabled(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_bool("is_tracking_support_disabled"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_is_tracking_support_disabled failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_is_tracking_support_disabled(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/reset_vif_is_tracking_support_disabled",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_reset_vif_is_tracking_support_disabled(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_is_tracking_support_disabled failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_accept_nohello_neighbors(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/get_vif_accept_nohello_neighbors",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool accept_nohello_neighbors;
    try {
	XrlCmdError e = pim_0_1_get_vif_accept_nohello_neighbors(
	    xa_inputs.get_string("vif_name"),
	    accept_nohello_neighbors);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_accept_nohello_neighbors failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("accept_nohello_neighbors", accept_nohello_neighbors);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_accept_nohello_neighbors(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/set_vif_accept_nohello_neighbors",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_set_vif_accept_nohello_neighbors(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_bool("accept_nohello_neighbors"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_accept_nohello_neighbors failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_accept_nohello_neighbors(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/reset_vif_accept_nohello_neighbors",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_reset_vif_accept_nohello_neighbors(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_accept_nohello_neighbors failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_vif_join_prune_period(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/get_vif_join_prune_period",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t join_prune_period;
    try {
	XrlCmdError e = pim_0_1_get_vif_join_prune_period(
	    xa_inputs.get_string("vif_name"),
	    join_prune_period);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_vif_join_prune_period failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("join_prune_period", join_prune_period);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_vif_join_prune_period(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/set_vif_join_prune_period",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_set_vif_join_prune_period(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("join_prune_period"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_vif_join_prune_period failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_vif_join_prune_period(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/reset_vif_join_prune_period",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_reset_vif_join_prune_period(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_vif_join_prune_period failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_get_switch_to_spt_threshold(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/get_switch_to_spt_threshold",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool is_enabled;
    uint32_t interval_sec;
    uint32_t bytes;
    try {
	XrlCmdError e = pim_0_1_get_switch_to_spt_threshold(
	    is_enabled,
	    interval_sec,
	    bytes);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/get_switch_to_spt_threshold failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("is_enabled", is_enabled);
	pxa_outputs->add("interval_sec", interval_sec);
	pxa_outputs->add("bytes", bytes);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_set_switch_to_spt_threshold(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling pim/0.1/set_switch_to_spt_threshold",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_set_switch_to_spt_threshold(
	    xa_inputs.get_bool("is_enabled"),
	    xa_inputs.get_uint32("interval_sec"),
	    xa_inputs.get_uint32("bytes"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/set_switch_to_spt_threshold failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_reset_switch_to_spt_threshold(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/reset_switch_to_spt_threshold",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_reset_switch_to_spt_threshold();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/reset_switch_to_spt_threshold failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_enable_log_trace(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/enable_log_trace",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_enable_log_trace();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/enable_log_trace failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_disable_log_trace(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/disable_log_trace",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_disable_log_trace();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/disable_log_trace failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_test_jp_entry4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != 7) handling pim/0.1/add_test_jp_entry4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_test_jp_entry4(
	    xa_inputs.get_ipv4("source_addr"),
	    xa_inputs.get_ipv4("group_addr"),
	    xa_inputs.get_uint32("group_mask_len"),
	    xa_inputs.get_string("mrt_entry_type"),
	    xa_inputs.get_string("action_jp"),
	    xa_inputs.get_uint32("holdtime"),
	    xa_inputs.get_bool("new_group_bool"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_test_jp_entry4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_test_jp_entry6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != 7) handling pim/0.1/add_test_jp_entry6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_test_jp_entry6(
	    xa_inputs.get_ipv6("source_addr"),
	    xa_inputs.get_ipv6("group_addr"),
	    xa_inputs.get_uint32("group_mask_len"),
	    xa_inputs.get_string("mrt_entry_type"),
	    xa_inputs.get_string("action_jp"),
	    xa_inputs.get_uint32("holdtime"),
	    xa_inputs.get_bool("new_group_bool"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_test_jp_entry6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_send_test_jp_entry4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/send_test_jp_entry4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_send_test_jp_entry4(
	    xa_inputs.get_ipv4("nbr_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/send_test_jp_entry4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_send_test_jp_entry6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/send_test_jp_entry6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_send_test_jp_entry6(
	    xa_inputs.get_ipv6("nbr_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/send_test_jp_entry6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_send_test_assert4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling pim/0.1/send_test_assert4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_send_test_assert4(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_ipv4("source_addr"),
	    xa_inputs.get_ipv4("group_addr"),
	    xa_inputs.get_bool("rpt_bit"),
	    xa_inputs.get_uint32("metric_preference"),
	    xa_inputs.get_uint32("metric"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/send_test_assert4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_send_test_assert6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling pim/0.1/send_test_assert6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_send_test_assert6(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_ipv6("source_addr"),
	    xa_inputs.get_ipv6("group_addr"),
	    xa_inputs.get_bool("rpt_bit"),
	    xa_inputs.get_uint32("metric_preference"),
	    xa_inputs.get_uint32("metric"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/send_test_assert6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_test_bsr_zone4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling pim/0.1/add_test_bsr_zone4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_test_bsr_zone4(
	    xa_inputs.get_ipv4net("zone_id_scope_zone_prefix"),
	    xa_inputs.get_bool("zone_id_is_scope_zone"),
	    xa_inputs.get_ipv4("bsr_addr"),
	    xa_inputs.get_uint32("bsr_priority"),
	    xa_inputs.get_uint32("hash_mask_len"),
	    xa_inputs.get_uint32("fragment_tag"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_test_bsr_zone4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_test_bsr_zone6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling pim/0.1/add_test_bsr_zone6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_test_bsr_zone6(
	    xa_inputs.get_ipv6net("zone_id_scope_zone_prefix"),
	    xa_inputs.get_bool("zone_id_is_scope_zone"),
	    xa_inputs.get_ipv6("bsr_addr"),
	    xa_inputs.get_uint32("bsr_priority"),
	    xa_inputs.get_uint32("hash_mask_len"),
	    xa_inputs.get_uint32("fragment_tag"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_test_bsr_zone6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_test_bsr_group_prefix4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling pim/0.1/add_test_bsr_group_prefix4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_test_bsr_group_prefix4(
	    xa_inputs.get_ipv4net("zone_id_scope_zone_prefix"),
	    xa_inputs.get_bool("zone_id_is_scope_zone"),
	    xa_inputs.get_ipv4net("group_prefix"),
	    xa_inputs.get_bool("is_scope_zone"),
	    xa_inputs.get_uint32("expected_rp_count"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_test_bsr_group_prefix4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_test_bsr_group_prefix6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling pim/0.1/add_test_bsr_group_prefix6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_test_bsr_group_prefix6(
	    xa_inputs.get_ipv6net("zone_id_scope_zone_prefix"),
	    xa_inputs.get_bool("zone_id_is_scope_zone"),
	    xa_inputs.get_ipv6net("group_prefix"),
	    xa_inputs.get_bool("is_scope_zone"),
	    xa_inputs.get_uint32("expected_rp_count"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_test_bsr_group_prefix6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_test_bsr_rp4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling pim/0.1/add_test_bsr_rp4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_test_bsr_rp4(
	    xa_inputs.get_ipv4net("zone_id_scope_zone_prefix"),
	    xa_inputs.get_bool("zone_id_is_scope_zone"),
	    xa_inputs.get_ipv4net("group_prefix"),
	    xa_inputs.get_ipv4("rp_addr"),
	    xa_inputs.get_uint32("rp_priority"),
	    xa_inputs.get_uint32("rp_holdtime"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_test_bsr_rp4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_add_test_bsr_rp6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling pim/0.1/add_test_bsr_rp6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_add_test_bsr_rp6(
	    xa_inputs.get_ipv6net("zone_id_scope_zone_prefix"),
	    xa_inputs.get_bool("zone_id_is_scope_zone"),
	    xa_inputs.get_ipv6net("group_prefix"),
	    xa_inputs.get_ipv6("rp_addr"),
	    xa_inputs.get_uint32("rp_priority"),
	    xa_inputs.get_uint32("rp_holdtime"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/add_test_bsr_rp6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_send_test_bootstrap(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/send_test_bootstrap",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_send_test_bootstrap(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/send_test_bootstrap failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_send_test_bootstrap_by_dest4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/send_test_bootstrap_by_dest4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_send_test_bootstrap_by_dest4(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_ipv4("dest_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/send_test_bootstrap_by_dest4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_send_test_bootstrap_by_dest6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling pim/0.1/send_test_bootstrap_by_dest6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_send_test_bootstrap_by_dest6(
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_ipv6("dest_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/send_test_bootstrap_by_dest6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_send_test_cand_rp_adv(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/send_test_cand_rp_adv",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_send_test_cand_rp_adv();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/send_test_cand_rp_adv failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_neighbors4(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_neighbors4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t nbrs_number;
    XrlAtomList vifs;
    XrlAtomList addresses;
    XrlAtomList pim_versions;
    XrlAtomList dr_priorities;
    XrlAtomList holdtimes;
    XrlAtomList timeouts;
    XrlAtomList uptimes;
    try {
	XrlCmdError e = pim_0_1_pimstat_neighbors4(
	    nbrs_number,
	    vifs,
	    addresses,
	    pim_versions,
	    dr_priorities,
	    holdtimes,
	    timeouts,
	    uptimes);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_neighbors4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("nbrs_number", nbrs_number);
	pxa_outputs->add("vifs", vifs);
	pxa_outputs->add("addresses", addresses);
	pxa_outputs->add("pim_versions", pim_versions);
	pxa_outputs->add("dr_priorities", dr_priorities);
	pxa_outputs->add("holdtimes", holdtimes);
	pxa_outputs->add("timeouts", timeouts);
	pxa_outputs->add("uptimes", uptimes);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_neighbors6(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_neighbors6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t nbrs_number;
    XrlAtomList vifs;
    XrlAtomList addresses;
    XrlAtomList pim_versions;
    XrlAtomList dr_priorities;
    XrlAtomList holdtimes;
    XrlAtomList timeouts;
    XrlAtomList uptimes;
    try {
	XrlCmdError e = pim_0_1_pimstat_neighbors6(
	    nbrs_number,
	    vifs,
	    addresses,
	    pim_versions,
	    dr_priorities,
	    holdtimes,
	    timeouts,
	    uptimes);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_neighbors6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("nbrs_number", nbrs_number);
	pxa_outputs->add("vifs", vifs);
	pxa_outputs->add("addresses", addresses);
	pxa_outputs->add("pim_versions", pim_versions);
	pxa_outputs->add("dr_priorities", dr_priorities);
	pxa_outputs->add("holdtimes", holdtimes);
	pxa_outputs->add("timeouts", timeouts);
	pxa_outputs->add("uptimes", uptimes);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_interface4(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_interface4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t pim_version;
    bool is_dr;
    uint32_t dr_priority;
    IPv4 dr_address;
    uint32_t pim_nbrs_number;
    try {
	XrlCmdError e = pim_0_1_pimstat_interface4(
	    xa_inputs.get_string("vif_name"),
	    pim_version,
	    is_dr,
	    dr_priority,
	    dr_address,
	    pim_nbrs_number);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_interface4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("pim_version", pim_version);
	pxa_outputs->add("is_dr", is_dr);
	pxa_outputs->add("dr_priority", dr_priority);
	pxa_outputs->add("dr_address", dr_address);
	pxa_outputs->add("pim_nbrs_number", pim_nbrs_number);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_interface6(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_interface6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t pim_version;
    bool is_dr;
    uint32_t dr_priority;
    IPv6 dr_address;
    uint32_t pim_nbrs_number;
    try {
	XrlCmdError e = pim_0_1_pimstat_interface6(
	    xa_inputs.get_string("vif_name"),
	    pim_version,
	    is_dr,
	    dr_priority,
	    dr_address,
	    pim_nbrs_number);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_interface6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("pim_version", pim_version);
	pxa_outputs->add("is_dr", is_dr);
	pxa_outputs->add("dr_priority", dr_priority);
	pxa_outputs->add("dr_address", dr_address);
	pxa_outputs->add("pim_nbrs_number", pim_nbrs_number);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rps4(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rps4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t rps_number;
    XrlAtomList addresses;
    XrlAtomList types;
    XrlAtomList priorities;
    XrlAtomList holdtimes;
    XrlAtomList timeouts;
    XrlAtomList group_prefixes;
    try {
	XrlCmdError e = pim_0_1_pimstat_rps4(
	    rps_number,
	    addresses,
	    types,
	    priorities,
	    holdtimes,
	    timeouts,
	    group_prefixes);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rps4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("rps_number", rps_number);
	pxa_outputs->add("addresses", addresses);
	pxa_outputs->add("types", types);
	pxa_outputs->add("priorities", priorities);
	pxa_outputs->add("holdtimes", holdtimes);
	pxa_outputs->add("timeouts", timeouts);
	pxa_outputs->add("group_prefixes", group_prefixes);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rps6(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rps6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t rps_number;
    XrlAtomList addresses;
    XrlAtomList types;
    XrlAtomList priorities;
    XrlAtomList holdtimes;
    XrlAtomList timeouts;
    XrlAtomList group_prefixes;
    try {
	XrlCmdError e = pim_0_1_pimstat_rps6(
	    rps_number,
	    addresses,
	    types,
	    priorities,
	    holdtimes,
	    timeouts,
	    group_prefixes);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rps6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("rps_number", rps_number);
	pxa_outputs->add("addresses", addresses);
	pxa_outputs->add("types", types);
	pxa_outputs->add("priorities", priorities);
	pxa_outputs->add("holdtimes", holdtimes);
	pxa_outputs->add("timeouts", timeouts);
	pxa_outputs->add("group_prefixes", group_prefixes);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_clear_pim_statistics(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/clear_pim_statistics",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_clear_pim_statistics();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/clear_pim_statistics failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_clear_pim_statistics_per_vif(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/clear_pim_statistics_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = pim_0_1_clear_pim_statistics_per_vif(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/clear_pim_statistics_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_hello_messages_received(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_hello_messages_received",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_hello_messages_received(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_hello_messages_received failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_hello_messages_sent(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_hello_messages_sent",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_hello_messages_sent(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_hello_messages_sent failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_hello_messages_rx_errors(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_hello_messages_rx_errors",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_hello_messages_rx_errors(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_hello_messages_rx_errors failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_register_messages_received(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_register_messages_received",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_register_messages_received(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_register_messages_received failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_register_messages_sent(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_register_messages_sent",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_register_messages_sent(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_register_messages_sent failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_register_messages_rx_errors(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_register_messages_rx_errors",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_register_messages_rx_errors(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_register_messages_rx_errors failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_register_stop_messages_received(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_register_stop_messages_received",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_register_stop_messages_received(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_register_stop_messages_received failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_register_stop_messages_sent(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_register_stop_messages_sent",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_register_stop_messages_sent(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_register_stop_messages_sent failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_register_stop_messages_rx_errors(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_register_stop_messages_rx_errors",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_register_stop_messages_rx_errors(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_register_stop_messages_rx_errors failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_join_prune_messages_received(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_join_prune_messages_received",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_join_prune_messages_received(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_join_prune_messages_received failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_join_prune_messages_sent(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_join_prune_messages_sent",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_join_prune_messages_sent(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_join_prune_messages_sent failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_join_prune_messages_rx_errors(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_join_prune_messages_rx_errors",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_join_prune_messages_rx_errors(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_join_prune_messages_rx_errors failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_bootstrap_messages_received(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_bootstrap_messages_received",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_bootstrap_messages_received(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_bootstrap_messages_received failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_bootstrap_messages_sent(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_bootstrap_messages_sent",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_bootstrap_messages_sent(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_bootstrap_messages_sent failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_bootstrap_messages_rx_errors(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_bootstrap_messages_rx_errors",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_bootstrap_messages_rx_errors(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_bootstrap_messages_rx_errors failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_assert_messages_received(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_assert_messages_received",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_assert_messages_received(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_assert_messages_received failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_assert_messages_sent(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_assert_messages_sent",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_assert_messages_sent(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_assert_messages_sent failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_assert_messages_rx_errors(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_assert_messages_rx_errors",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_assert_messages_rx_errors(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_assert_messages_rx_errors failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_graft_messages_received(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_graft_messages_received",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_graft_messages_received(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_graft_messages_received failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_graft_messages_sent(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_graft_messages_sent",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_graft_messages_sent(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_graft_messages_sent failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_graft_messages_rx_errors(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_graft_messages_rx_errors",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_graft_messages_rx_errors(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_graft_messages_rx_errors failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_graft_ack_messages_received(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_graft_ack_messages_received",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_graft_ack_messages_received(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_graft_ack_messages_received failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_graft_ack_messages_sent(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_graft_ack_messages_sent",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_graft_ack_messages_sent(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_graft_ack_messages_sent failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_graft_ack_messages_rx_errors(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_graft_ack_messages_rx_errors",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_graft_ack_messages_rx_errors(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_graft_ack_messages_rx_errors failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_candidate_rp_messages_received(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_candidate_rp_messages_received",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_candidate_rp_messages_received(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_candidate_rp_messages_received failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_candidate_rp_messages_sent(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_candidate_rp_messages_sent",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_candidate_rp_messages_sent(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_candidate_rp_messages_sent failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_candidate_rp_messages_rx_errors(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_candidate_rp_messages_rx_errors",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_candidate_rp_messages_rx_errors(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_candidate_rp_messages_rx_errors failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_unknown_type_messages(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_unknown_type_messages",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_unknown_type_messages(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_unknown_type_messages failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_unknown_version_messages(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_unknown_version_messages",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_unknown_version_messages(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_unknown_version_messages failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_neighbor_unknown_messages(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_neighbor_unknown_messages",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_neighbor_unknown_messages(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_neighbor_unknown_messages failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_bad_length_messages(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_bad_length_messages",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_bad_length_messages(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_bad_length_messages failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_bad_checksum_messages(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_bad_checksum_messages",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_bad_checksum_messages(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_bad_checksum_messages failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_bad_receive_interface_messages(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_bad_receive_interface_messages",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_bad_receive_interface_messages(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_bad_receive_interface_messages failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_interface_disabled_messages(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_interface_disabled_messages",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_interface_disabled_messages(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_interface_disabled_messages failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_register_not_rp(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_register_not_rp",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_register_not_rp(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_register_not_rp failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rp_filtered_source(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rp_filtered_source",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rp_filtered_source(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rp_filtered_source failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_unknown_register_stop(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_unknown_register_stop",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_unknown_register_stop(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_unknown_register_stop failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_join_prune_no_state(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_join_prune_no_state",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_join_prune_no_state(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_join_prune_no_state failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_graft_graft_ack_no_state(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_graft_graft_ack_no_state",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_graft_graft_ack_no_state(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_graft_graft_ack_no_state failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_graft_on_upstream_interface(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_graft_on_upstream_interface",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_graft_on_upstream_interface(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_graft_on_upstream_interface failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_candidate_rp_not_bsr(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_candidate_rp_not_bsr",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_candidate_rp_not_bsr(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_candidate_rp_not_bsr failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_bsr_when_bsr(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_bsr_when_bsr",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_bsr_when_bsr(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_bsr_when_bsr failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_bsr_not_rpf_interface(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_bsr_not_rpf_interface",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_bsr_not_rpf_interface(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_bsr_not_rpf_interface failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_unknown_hello_option(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_unknown_hello_option",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_unknown_hello_option(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_unknown_hello_option failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_data_no_state(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_data_no_state",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_data_no_state(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_data_no_state failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_rp_no_state(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_rp_no_state",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_rp_no_state(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_rp_no_state failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_aggregate(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_aggregate",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_aggregate(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_aggregate failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_malformed_packet(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_malformed_packet",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_malformed_packet(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_malformed_packet failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_no_rp(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_no_rp",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_no_rp(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_no_rp failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_no_route_upstream(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_no_route_upstream",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_no_route_upstream(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_no_route_upstream failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rp_mismatch(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rp_mismatch",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rp_mismatch(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rp_mismatch failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rpf_neighbor_unknown(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rpf_neighbor_unknown",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rpf_neighbor_unknown(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rpf_neighbor_unknown failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_join_rp(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_join_rp",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_join_rp(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_join_rp failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_prune_rp(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_prune_rp",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_prune_rp(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_prune_rp failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_join_wc(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_join_wc",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_join_wc(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_join_wc failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_prune_wc(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_prune_wc",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_prune_wc(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_prune_wc failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_join_sg(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_join_sg",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_join_sg(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_join_sg failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_prune_sg(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_prune_sg",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_prune_sg(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_prune_sg failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_join_sg_rpt(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_join_sg_rpt",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_join_sg_rpt(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_join_sg_rpt failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_prune_sg_rpt(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling pim/0.1/pimstat_rx_prune_sg_rpt",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_prune_sg_rpt(
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_prune_sg_rpt failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_hello_messages_received_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_hello_messages_received_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_hello_messages_received_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_hello_messages_received_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_hello_messages_sent_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_hello_messages_sent_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_hello_messages_sent_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_hello_messages_sent_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_hello_messages_rx_errors_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_hello_messages_rx_errors_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_hello_messages_rx_errors_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_hello_messages_rx_errors_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_register_messages_received_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_register_messages_received_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_register_messages_received_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_register_messages_received_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_register_messages_sent_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_register_messages_sent_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_register_messages_sent_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_register_messages_sent_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_register_messages_rx_errors_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_register_messages_rx_errors_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_register_messages_rx_errors_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_register_messages_rx_errors_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_register_stop_messages_received_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_register_stop_messages_received_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_register_stop_messages_received_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_register_stop_messages_received_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_register_stop_messages_sent_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_register_stop_messages_sent_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_register_stop_messages_sent_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_register_stop_messages_sent_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_register_stop_messages_rx_errors_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_register_stop_messages_rx_errors_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_register_stop_messages_rx_errors_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_register_stop_messages_rx_errors_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_join_prune_messages_received_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_join_prune_messages_received_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_join_prune_messages_received_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_join_prune_messages_received_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_join_prune_messages_sent_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_join_prune_messages_sent_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_join_prune_messages_sent_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_join_prune_messages_sent_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_join_prune_messages_rx_errors_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_join_prune_messages_rx_errors_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_join_prune_messages_rx_errors_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_join_prune_messages_rx_errors_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_bootstrap_messages_received_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_bootstrap_messages_received_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_bootstrap_messages_received_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_bootstrap_messages_received_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_bootstrap_messages_sent_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_bootstrap_messages_sent_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_bootstrap_messages_sent_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_bootstrap_messages_sent_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_bootstrap_messages_rx_errors_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_bootstrap_messages_rx_errors_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_bootstrap_messages_rx_errors_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_bootstrap_messages_rx_errors_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_assert_messages_received_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_assert_messages_received_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_assert_messages_received_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_assert_messages_received_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_assert_messages_sent_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_assert_messages_sent_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_assert_messages_sent_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_assert_messages_sent_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_assert_messages_rx_errors_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_assert_messages_rx_errors_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_assert_messages_rx_errors_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_assert_messages_rx_errors_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_graft_messages_received_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_graft_messages_received_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_graft_messages_received_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_graft_messages_received_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_graft_messages_sent_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_graft_messages_sent_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_graft_messages_sent_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_graft_messages_sent_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_graft_messages_rx_errors_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_graft_messages_rx_errors_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_graft_messages_rx_errors_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_graft_messages_rx_errors_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_graft_ack_messages_received_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_graft_ack_messages_received_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_graft_ack_messages_received_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_graft_ack_messages_received_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_graft_ack_messages_sent_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_graft_ack_messages_sent_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_graft_ack_messages_sent_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_graft_ack_messages_sent_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_graft_ack_messages_rx_errors_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_graft_ack_messages_rx_errors_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_graft_ack_messages_rx_errors_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_graft_ack_messages_rx_errors_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_candidate_rp_messages_received_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_candidate_rp_messages_received_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_candidate_rp_messages_received_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_candidate_rp_messages_received_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_candidate_rp_messages_sent_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_candidate_rp_messages_sent_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_candidate_rp_messages_sent_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_candidate_rp_messages_sent_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_candidate_rp_messages_rx_errors_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_candidate_rp_messages_rx_errors_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_candidate_rp_messages_rx_errors_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_candidate_rp_messages_rx_errors_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_unknown_type_messages_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_unknown_type_messages_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_unknown_type_messages_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_unknown_type_messages_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_unknown_version_messages_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_unknown_version_messages_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_unknown_version_messages_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_unknown_version_messages_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_neighbor_unknown_messages_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_neighbor_unknown_messages_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_neighbor_unknown_messages_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_neighbor_unknown_messages_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_bad_length_messages_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_bad_length_messages_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_bad_length_messages_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_bad_length_messages_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_bad_checksum_messages_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_bad_checksum_messages_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_bad_checksum_messages_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_bad_checksum_messages_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_bad_receive_interface_messages_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_bad_receive_interface_messages_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_bad_receive_interface_messages_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_bad_receive_interface_messages_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_interface_disabled_messages_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_interface_disabled_messages_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_interface_disabled_messages_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_interface_disabled_messages_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_register_not_rp_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_register_not_rp_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_register_not_rp_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_register_not_rp_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rp_filtered_source_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rp_filtered_source_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rp_filtered_source_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rp_filtered_source_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_unknown_register_stop_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_unknown_register_stop_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_unknown_register_stop_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_unknown_register_stop_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_join_prune_no_state_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_join_prune_no_state_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_join_prune_no_state_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_join_prune_no_state_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_graft_graft_ack_no_state_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_graft_graft_ack_no_state_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_graft_graft_ack_no_state_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_graft_graft_ack_no_state_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_graft_on_upstream_interface_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_graft_on_upstream_interface_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_graft_on_upstream_interface_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_graft_on_upstream_interface_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_candidate_rp_not_bsr_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_candidate_rp_not_bsr_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_candidate_rp_not_bsr_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_candidate_rp_not_bsr_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_bsr_when_bsr_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_bsr_when_bsr_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_bsr_when_bsr_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_bsr_when_bsr_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_bsr_not_rpf_interface_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_bsr_not_rpf_interface_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_bsr_not_rpf_interface_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_bsr_not_rpf_interface_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_unknown_hello_option_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_unknown_hello_option_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_unknown_hello_option_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_unknown_hello_option_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_data_no_state_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_data_no_state_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_data_no_state_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_data_no_state_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_rp_no_state_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_rp_no_state_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_rp_no_state_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_rp_no_state_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_aggregate_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_aggregate_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_aggregate_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_aggregate_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_malformed_packet_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_malformed_packet_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_malformed_packet_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_malformed_packet_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_no_rp_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_no_rp_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_no_rp_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_no_rp_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_no_route_upstream_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_no_route_upstream_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_no_route_upstream_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_no_route_upstream_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rp_mismatch_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rp_mismatch_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rp_mismatch_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rp_mismatch_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rpf_neighbor_unknown_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rpf_neighbor_unknown_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rpf_neighbor_unknown_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rpf_neighbor_unknown_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_join_rp_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_join_rp_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_join_rp_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_join_rp_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_prune_rp_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_prune_rp_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_prune_rp_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_prune_rp_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_join_wc_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_join_wc_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_join_wc_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_join_wc_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_prune_wc_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_prune_wc_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_prune_wc_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_prune_wc_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_join_sg_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_join_sg_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_join_sg_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_join_sg_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_prune_sg_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_prune_sg_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_prune_sg_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_prune_sg_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_join_sg_rpt_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_join_sg_rpt_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_join_sg_rpt_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_join_sg_rpt_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlPimTargetBase::handle_pim_0_1_pimstat_rx_prune_sg_rpt_per_vif(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling pim/0.1/pimstat_rx_prune_sg_rpt_per_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t value;
    try {
	XrlCmdError e = pim_0_1_pimstat_rx_prune_sg_rpt_per_vif(
	    xa_inputs.get_string("vif_name"),
	    value);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for pim/0.1/pimstat_rx_prune_sg_rpt_per_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("value", value);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

