/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/tgt-gen'.
 *
 * $XORP: xorp/xrl/targets/coord_base.hh,v 1.1.1.1 2002/12/11 23:56:18 hodson Exp $
 */


#ifndef __XRL_INTERFACES_COORD_BASE_HH__
#define __XRL_INTERFACES_COORD_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlCoordTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_router.hh"

class XrlCoordTargetBase {
protected:
    XrlCmdMap* _router;
    
public:
    XrlCoordTargetBase(XrlCmdMap* r) : _router(r) { add_handlers(); }
    virtual ~XrlCoordTargetBase() { remove_handlers(); }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Get name of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_target_name(
	// Output values, 
	string&	name) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Get version string from Xrl Target
     */
    virtual XrlCmdError common_0_1_get_version(
	// Output values, 
	string&	version) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Command to be executed by the coordinating process.
     *  
     *  @param command to be sent to the coordinator.
     */
    virtual XrlCmdError coord_0_1_command(
	// Input values, 
	const string&	command) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  If there are still any outstanding commands pending will return true.
     *  Can be used to poll the coordinating process to verify that the
     *  previous command has completed.
     */
    virtual XrlCmdError coord_0_1_pending(
	// Output values, 
	bool&	pending) = 0;

    virtual XrlCmdError datain_0_1_receive(
	// Input values, 
	const string&	peer, 
	const bool&	status, 
	const uint32_t&	secs, 
	const uint32_t&	micro, 
	const vector<uint8_t>&	data) = 0;

    virtual XrlCmdError datain_0_1_error(
	// Input values, 
	const string&	peer, 
	const string&	reason) = 0;

    virtual XrlCmdError datain_0_1_closed(
	// Input values, 
	const string&	peer) = 0;

private:
    const XrlCmdError handle_common_0_1_get_target_name(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_common_0_1_get_version(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_coord_0_1_command(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_coord_0_1_pending(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_datain_0_1_receive(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_datain_0_1_error(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_datain_0_1_closed(const Xrl& x, XrlArgs* a);

    void add_handlers()
    {
	if (_router->add_handler("common/0.1/get_target_name", 
	    callback(this, &XrlCoordTargetBase::handle_common_0_1_get_target_name)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://coord/common/0.1/get_target_name");
	}
	if (_router->add_handler("common/0.1/get_version", 
	    callback(this, &XrlCoordTargetBase::handle_common_0_1_get_version)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://coord/common/0.1/get_version");
	}
	if (_router->add_handler("coord/0.1/command", 
	    callback(this, &XrlCoordTargetBase::handle_coord_0_1_command)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://coord/coord/0.1/command");
	}
	if (_router->add_handler("coord/0.1/pending", 
	    callback(this, &XrlCoordTargetBase::handle_coord_0_1_pending)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://coord/coord/0.1/pending");
	}
	if (_router->add_handler("datain/0.1/receive", 
	    callback(this, &XrlCoordTargetBase::handle_datain_0_1_receive)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://coord/datain/0.1/receive");
	}
	if (_router->add_handler("datain/0.1/error", 
	    callback(this, &XrlCoordTargetBase::handle_datain_0_1_error)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://coord/datain/0.1/error");
	}
	if (_router->add_handler("datain/0.1/closed", 
	    callback(this, &XrlCoordTargetBase::handle_datain_0_1_closed)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://coord/datain/0.1/closed");
	}
    }

    void remove_handlers()
    {
	_router->remove_handler("common/0.1/get_target_name");
	_router->remove_handler("common/0.1/get_version");
	_router->remove_handler("coord/0.1/command");
	_router->remove_handler("coord/0.1/pending");
	_router->remove_handler("datain/0.1/receive");
	_router->remove_handler("datain/0.1/error");
	_router->remove_handler("datain/0.1/closed");
    }
};

#endif /* __XRL_INTERFACES_COORD_BASE_HH__ */
