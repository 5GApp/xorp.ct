/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 *
 * $XORP$
 */


#ifndef __XRL_INTERFACES_FIB2MRIB_BASE_HH__
#define __XRL_INTERFACES_FIB2MRIB_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlFib2mribTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_cmd_map.hh"

class XrlFib2mribTargetBase {
protected:
    XrlCmdMap* _cmds;

public:
    /**
     * Constructor.
     *
     * @param cmds an XrlCmdMap that the commands associated with the target
     *		   should be added to.  This is typically the XrlRouter
     *		   associated with the target.
     */
    XrlFib2mribTargetBase(XrlCmdMap* cmds = 0);

    /**
     * Destructor.
     *
     * Dissociates instance commands from command map.
     */
    virtual ~XrlFib2mribTargetBase();

    /**
     * Set command map.
     *
     * @param cmds pointer to command map to associate commands with.  This
     * argument is typically a pointer to the XrlRouter associated with the
     * target.
     *
     * @return true on success, false if cmds is null or a command map has
     * already been supplied.
     */
    bool set_command_map(XrlCmdMap* cmds);

    /**
     * Get Xrl instance name associated with command map.
     */
    inline const string& name() const { return _cmds->name(); }

    /**
     * Get version string of instance.
     */
    inline const char* version() const { return "fib2mrib/0.0"; }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get name of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_target_name(
	// Output values,
	string&	name) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get version string from Xrl Target
     */
    virtual XrlCmdError common_0_1_get_version(
	// Output values,
	string&	version) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Get status of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_status(
	// Output values,
	uint32_t&	status,
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Request clean shutdown of Xrl Target
     */
    virtual XrlCmdError common_0_1_shutdown() = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Enable/disable/start/stop Fib2mrib.
     *
     *  @param enable if true, then enable Fib2mrib, otherwise disable it.
     */
    virtual XrlCmdError fib2mrib_0_1_enable_fib2mrib(
	// Input values,
	const bool&	enable) = 0;

    virtual XrlCmdError fib2mrib_0_1_start_fib2mrib() = 0;

    virtual XrlCmdError fib2mrib_0_1_stop_fib2mrib() = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Add/replace/delete a route.
     *
     *  @param unicast if true, then the route would be used for unicast
     *  routing.
     *
     *  @param multicast if true, then the route would be used in the MRIB
     *  (Multicast Routing Information Base) for multicast purpose (e.g.,
     *  computing the Reverse-Path Forwarding information).
     *
     *  @param network the network address prefix this route applies to.
     *
     *  @param nexthop the address of the next-hop router for this route.
     *
     *  @param metric the metric distance for this route.
     */
    virtual XrlCmdError fib2mrib_0_1_add_route4(
	// Input values,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const uint32_t&	metric) = 0;

    virtual XrlCmdError fib2mrib_0_1_add_route6(
	// Input values,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const uint32_t&	metric) = 0;

    virtual XrlCmdError fib2mrib_0_1_replace_route4(
	// Input values,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4Net&	network,
	const IPv4&	nexthop,
	const uint32_t&	metric) = 0;

    virtual XrlCmdError fib2mrib_0_1_replace_route6(
	// Input values,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6Net&	network,
	const IPv6&	nexthop,
	const uint32_t&	metric) = 0;

    virtual XrlCmdError fib2mrib_0_1_delete_route4(
	// Input values,
	const bool&	unicast,
	const bool&	multicast,
	const IPv4Net&	network) = 0;

    virtual XrlCmdError fib2mrib_0_1_delete_route6(
	// Input values,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6Net&	network) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *
     *  Enable/disable the Fib2mrib trace log for all operations.
     *
     *  @param enable if true, then enable the trace log, otherwise disable it.
     */
    virtual XrlCmdError fib2mrib_0_1_enable_log_trace_all(
	// Input values,
	const bool&	enable) = 0;

private:
    const XrlCmdError handle_common_0_1_get_target_name(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_common_0_1_get_version(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_common_0_1_get_status(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_common_0_1_shutdown(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fib2mrib_0_1_enable_fib2mrib(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fib2mrib_0_1_start_fib2mrib(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fib2mrib_0_1_stop_fib2mrib(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fib2mrib_0_1_add_route4(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fib2mrib_0_1_add_route6(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fib2mrib_0_1_replace_route4(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fib2mrib_0_1_replace_route6(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fib2mrib_0_1_delete_route4(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fib2mrib_0_1_delete_route6(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fib2mrib_0_1_enable_log_trace_all(const XrlArgs& in, XrlArgs* out);

    void add_handlers()
    {
	if (_cmds->add_handler("common/0.1/get_target_name",
	    callback(this, &XrlFib2mribTargetBase::handle_common_0_1_get_target_name)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fib2mrib/common/0.1/get_target_name");
	}
	if (_cmds->add_handler("common/0.1/get_version",
	    callback(this, &XrlFib2mribTargetBase::handle_common_0_1_get_version)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fib2mrib/common/0.1/get_version");
	}
	if (_cmds->add_handler("common/0.1/get_status",
	    callback(this, &XrlFib2mribTargetBase::handle_common_0_1_get_status)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fib2mrib/common/0.1/get_status");
	}
	if (_cmds->add_handler("common/0.1/shutdown",
	    callback(this, &XrlFib2mribTargetBase::handle_common_0_1_shutdown)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fib2mrib/common/0.1/shutdown");
	}
	if (_cmds->add_handler("fib2mrib/0.1/enable_fib2mrib",
	    callback(this, &XrlFib2mribTargetBase::handle_fib2mrib_0_1_enable_fib2mrib)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fib2mrib/fib2mrib/0.1/enable_fib2mrib");
	}
	if (_cmds->add_handler("fib2mrib/0.1/start_fib2mrib",
	    callback(this, &XrlFib2mribTargetBase::handle_fib2mrib_0_1_start_fib2mrib)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fib2mrib/fib2mrib/0.1/start_fib2mrib");
	}
	if (_cmds->add_handler("fib2mrib/0.1/stop_fib2mrib",
	    callback(this, &XrlFib2mribTargetBase::handle_fib2mrib_0_1_stop_fib2mrib)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fib2mrib/fib2mrib/0.1/stop_fib2mrib");
	}
	if (_cmds->add_handler("fib2mrib/0.1/add_route4",
	    callback(this, &XrlFib2mribTargetBase::handle_fib2mrib_0_1_add_route4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fib2mrib/fib2mrib/0.1/add_route4");
	}
	if (_cmds->add_handler("fib2mrib/0.1/add_route6",
	    callback(this, &XrlFib2mribTargetBase::handle_fib2mrib_0_1_add_route6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fib2mrib/fib2mrib/0.1/add_route6");
	}
	if (_cmds->add_handler("fib2mrib/0.1/replace_route4",
	    callback(this, &XrlFib2mribTargetBase::handle_fib2mrib_0_1_replace_route4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fib2mrib/fib2mrib/0.1/replace_route4");
	}
	if (_cmds->add_handler("fib2mrib/0.1/replace_route6",
	    callback(this, &XrlFib2mribTargetBase::handle_fib2mrib_0_1_replace_route6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fib2mrib/fib2mrib/0.1/replace_route6");
	}
	if (_cmds->add_handler("fib2mrib/0.1/delete_route4",
	    callback(this, &XrlFib2mribTargetBase::handle_fib2mrib_0_1_delete_route4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fib2mrib/fib2mrib/0.1/delete_route4");
	}
	if (_cmds->add_handler("fib2mrib/0.1/delete_route6",
	    callback(this, &XrlFib2mribTargetBase::handle_fib2mrib_0_1_delete_route6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fib2mrib/fib2mrib/0.1/delete_route6");
	}
	if (_cmds->add_handler("fib2mrib/0.1/enable_log_trace_all",
	    callback(this, &XrlFib2mribTargetBase::handle_fib2mrib_0_1_enable_log_trace_all)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fib2mrib/fib2mrib/0.1/enable_log_trace_all");
	}
	_cmds->finalize();
    }

    void remove_handlers()
    {
	_cmds->remove_handler("common/0.1/get_target_name");
	_cmds->remove_handler("common/0.1/get_version");
	_cmds->remove_handler("common/0.1/get_status");
	_cmds->remove_handler("common/0.1/shutdown");
	_cmds->remove_handler("fib2mrib/0.1/enable_fib2mrib");
	_cmds->remove_handler("fib2mrib/0.1/start_fib2mrib");
	_cmds->remove_handler("fib2mrib/0.1/stop_fib2mrib");
	_cmds->remove_handler("fib2mrib/0.1/add_route4");
	_cmds->remove_handler("fib2mrib/0.1/add_route6");
	_cmds->remove_handler("fib2mrib/0.1/replace_route4");
	_cmds->remove_handler("fib2mrib/0.1/replace_route6");
	_cmds->remove_handler("fib2mrib/0.1/delete_route4");
	_cmds->remove_handler("fib2mrib/0.1/delete_route6");
	_cmds->remove_handler("fib2mrib/0.1/enable_log_trace_all");
    }
};

#endif /* __XRL_INTERFACES_FIB2MRIB_BASE_HH__ */
