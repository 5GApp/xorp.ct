/*
 * Copyright (c) 2001-2004 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 *
 * $XORP$
 */


#ifndef __XRL_INTERFACES_RIPNG_BASE_HH__
#define __XRL_INTERFACES_RIPNG_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlRipngTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_cmd_map.hh"

class XrlRipngTargetBase {
protected:
    XrlCmdMap* _cmds;

public:
    /**
     * Constructor.
     *
     * @param cmds an XrlCmdMap that the commands associated with the target
     *		   should be added to.  This is typically the XrlRouter
     *		   associated with the target.
     */
    XrlRipngTargetBase(XrlCmdMap* cmds = 0);

    /**
     * Destructor.
     *
     * Dissociates instance commands from command map.
     */
    virtual ~XrlRipngTargetBase();

    /**
     * Set command map.
     *
     * @param cmds pointer to command map to associate commands with.  This
     * argument is typically a pointer to the XrlRouter associated with the
     * target.
     *
     * @return true on success, false if cmds is null or a command map has
     * already been supplied.
     */
    bool set_command_map(XrlCmdMap* cmds);

    /**
     * Get Xrl instance name associated with command map.
     */
    inline const string& name() const { return _cmds->name(); }

    /**
     * Get version string of instance.
     */
    inline const char* version() const { return "ripng/0.0"; }

protected:

    virtual XrlCmdError common_0_1_get_target_name(
	// Output values,
	string&	name) = 0;

    virtual XrlCmdError common_0_1_get_version(
	// Output values,
	string&	version) = 0;

    virtual XrlCmdError common_0_1_get_status(
	// Output values,
	uint32_t&	status,
	string&	reason) = 0;

    virtual XrlCmdError common_0_1_shutdown() = 0;

    virtual XrlCmdError finder_event_observer_0_1_xrl_target_birth(
	// Input values,
	const string&	target_class,
	const string&	target_instance) = 0;

    virtual XrlCmdError finder_event_observer_0_1_xrl_target_death(
	// Input values,
	const string&	target_class,
	const string&	target_instance) = 0;

    virtual XrlCmdError policy_backend_0_1_configure(
	// Input values,
	const uint32_t&	filter,
	const string&	conf) = 0;

    virtual XrlCmdError policy_backend_0_1_reset(
	// Input values,
	const uint32_t&	filter) = 0;

    virtual XrlCmdError policy_backend_0_1_push_routes() = 0;

    virtual XrlCmdError policy_redist6_0_1_add_route6(
	// Input values,
	const IPv6Net&	network,
	const bool&	unicast,
	const bool&	multicast,
	const IPv6&	nexthop,
	const uint32_t&	metric,
	const XrlAtomList&	policytags) = 0;

    virtual XrlCmdError policy_redist6_0_1_delete_route6(
	// Input values,
	const IPv6Net&	network,
	const bool&	unicast,
	const bool&	multicast) = 0;

    virtual XrlCmdError redist6_0_1_add_route(
	// Input values,
	const IPv6Net&	dst,
	const IPv6&	nexthop,
	const string&	ifname,
	const string&	vifname,
	const uint32_t&	metric,
	const uint32_t&	admin_distance,
	const string&	cookie) = 0;

    virtual XrlCmdError redist6_0_1_delete_route(
	// Input values,
	const IPv6Net&	network,
	const string&	cookie) = 0;

    virtual XrlCmdError redist6_0_1_starting_route_dump(
	// Input values,
	const string&	cookie) = 0;

    virtual XrlCmdError redist6_0_1_finishing_route_dump(
	// Input values,
	const string&	cookie) = 0;

    virtual XrlCmdError ripng_0_1_add_rip_address(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr) = 0;

    virtual XrlCmdError ripng_0_1_remove_rip_address(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr) = 0;

    virtual XrlCmdError ripng_0_1_set_rip_address_enabled(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const bool&	enabled) = 0;

    virtual XrlCmdError ripng_0_1_rip_address_enabled(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	bool&	enabled) = 0;

    virtual XrlCmdError ripng_0_1_set_cost(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const uint32_t&	cost) = 0;

    virtual XrlCmdError ripng_0_1_cost(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	uint32_t&	cost) = 0;

    virtual XrlCmdError ripng_0_1_set_horizon(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const string&	horizon) = 0;

    virtual XrlCmdError ripng_0_1_horizon(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	string&	horizon) = 0;

    virtual XrlCmdError ripng_0_1_set_passive(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const bool&	passive) = 0;

    virtual XrlCmdError ripng_0_1_passive(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	bool&	passive) = 0;

    virtual XrlCmdError ripng_0_1_set_accept_non_rip_requests(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const bool&	accept) = 0;

    virtual XrlCmdError ripng_0_1_accept_non_rip_requests(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	bool&	accept) = 0;

    virtual XrlCmdError ripng_0_1_set_accept_default_route(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const bool&	accept) = 0;

    virtual XrlCmdError ripng_0_1_accept_default_route(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	bool&	accept) = 0;

    virtual XrlCmdError ripng_0_1_set_advertise_default_route(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const bool&	advertise) = 0;

    virtual XrlCmdError ripng_0_1_advertise_default_route(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	bool&	advertise) = 0;

    virtual XrlCmdError ripng_0_1_set_route_expiry_seconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const uint32_t&	t_secs) = 0;

    virtual XrlCmdError ripng_0_1_route_expiry_seconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	uint32_t&	t_secs) = 0;

    virtual XrlCmdError ripng_0_1_set_route_deletion_seconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const uint32_t&	t_secs) = 0;

    virtual XrlCmdError ripng_0_1_route_deletion_seconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	uint32_t&	t_secs) = 0;

    virtual XrlCmdError ripng_0_1_set_table_request_seconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const uint32_t&	t_secs) = 0;

    virtual XrlCmdError ripng_0_1_table_request_seconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	uint32_t&	t_secs) = 0;

    virtual XrlCmdError ripng_0_1_set_unsolicited_response_min_seconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const uint32_t&	t_secs) = 0;

    virtual XrlCmdError ripng_0_1_unsolicited_response_min_seconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	uint32_t&	t_secs) = 0;

    virtual XrlCmdError ripng_0_1_set_unsolicited_response_max_seconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const uint32_t&	t_secs) = 0;

    virtual XrlCmdError ripng_0_1_unsolicited_response_max_seconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	uint32_t&	t_secs) = 0;

    virtual XrlCmdError ripng_0_1_set_triggered_update_min_seconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const uint32_t&	t_secs) = 0;

    virtual XrlCmdError ripng_0_1_triggered_update_min_seconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	uint32_t&	t_secs) = 0;

    virtual XrlCmdError ripng_0_1_set_triggered_update_max_seconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const uint32_t&	t_secs) = 0;

    virtual XrlCmdError ripng_0_1_triggered_update_max_seconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	uint32_t&	t_secs) = 0;

    virtual XrlCmdError ripng_0_1_set_interpacket_delay_milliseconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const uint32_t&	t_msecs) = 0;

    virtual XrlCmdError ripng_0_1_interpacket_delay_milliseconds(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	uint32_t&	t_msecs) = 0;

    virtual XrlCmdError ripng_0_1_rip_address_status(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	string&	status) = 0;

    virtual XrlCmdError ripng_0_1_get_all_addresses(
	// Output values,
	XrlAtomList&	ifnames,
	XrlAtomList&	vifnames,
	XrlAtomList&	addrs) = 0;

    virtual XrlCmdError ripng_0_1_get_counters(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	XrlAtomList&	counter_descriptions,
	XrlAtomList&	counter_values) = 0;

    virtual XrlCmdError ripng_0_1_get_peers(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	// Output values,
	XrlAtomList&	peers) = 0;

    virtual XrlCmdError ripng_0_1_get_all_peers(
	// Output values,
	XrlAtomList&	peers,
	XrlAtomList&	ifnames,
	XrlAtomList&	vifnames,
	XrlAtomList&	addrs) = 0;

    virtual XrlCmdError ripng_0_1_get_peer_counters(
	// Input values,
	const string&	ifname,
	const string&	vifname,
	const IPv6&	addr,
	const IPv6&	peer,
	// Output values,
	XrlAtomList&	counter_descriptions,
	XrlAtomList&	counter_values,
	uint32_t&	peer_last_active) = 0;

    virtual XrlCmdError ripng_0_1_redist_protocol_routes(
	// Input values,
	const string&	protocol_name,
	const uint32_t&	cost,
	const uint32_t&	tag) = 0;

    virtual XrlCmdError ripng_0_1_no_redist_protocol_routes(
	// Input values,
	const string&	protocol_name) = 0;

    virtual XrlCmdError socket6_user_0_1_recv_event(
	// Input values,
	const string&	sockid,
	const IPv6&	src_host,
	const uint32_t&	src_port,
	const vector<uint8_t>&	data) = 0;

    virtual XrlCmdError socket6_user_0_1_connect_event(
	// Input values,
	const string&	sockid,
	const IPv6&	src_host,
	const uint32_t&	src_port,
	const string&	new_sockid,
	// Output values,
	bool&	accept) = 0;

    virtual XrlCmdError socket6_user_0_1_error_event(
	// Input values,
	const string&	sockid,
	const string&	error,
	const bool&	fatal) = 0;

    virtual XrlCmdError socket6_user_0_1_close_event(
	// Input values,
	const string&	sockid,
	const string&	reason) = 0;

private:
    const XrlCmdError handle_common_0_1_get_target_name(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_common_0_1_get_version(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_common_0_1_get_status(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_common_0_1_shutdown(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_finder_event_observer_0_1_xrl_target_birth(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_finder_event_observer_0_1_xrl_target_death(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_policy_backend_0_1_configure(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_policy_backend_0_1_reset(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_policy_backend_0_1_push_routes(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_policy_redist6_0_1_add_route6(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_policy_redist6_0_1_delete_route6(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_redist6_0_1_add_route(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_redist6_0_1_delete_route(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_redist6_0_1_starting_route_dump(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_redist6_0_1_finishing_route_dump(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_add_rip_address(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_remove_rip_address(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_set_rip_address_enabled(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_rip_address_enabled(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_set_cost(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_cost(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_set_horizon(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_horizon(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_set_passive(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_passive(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_set_accept_non_rip_requests(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_accept_non_rip_requests(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_set_accept_default_route(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_accept_default_route(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_set_advertise_default_route(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_advertise_default_route(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_set_route_expiry_seconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_route_expiry_seconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_set_route_deletion_seconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_route_deletion_seconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_set_table_request_seconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_table_request_seconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_set_unsolicited_response_min_seconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_unsolicited_response_min_seconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_set_unsolicited_response_max_seconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_unsolicited_response_max_seconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_set_triggered_update_min_seconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_triggered_update_min_seconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_set_triggered_update_max_seconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_triggered_update_max_seconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_set_interpacket_delay_milliseconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_interpacket_delay_milliseconds(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_rip_address_status(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_get_all_addresses(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_get_counters(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_get_peers(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_get_all_peers(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_get_peer_counters(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_redist_protocol_routes(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_ripng_0_1_no_redist_protocol_routes(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_socket6_user_0_1_recv_event(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_socket6_user_0_1_connect_event(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_socket6_user_0_1_error_event(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_socket6_user_0_1_close_event(const XrlArgs& in, XrlArgs* out);

    void add_handlers();
    void remove_handlers();
};

#endif /* __XRL_INTERFACES_RIPNG_BASE_HH__ */
