/*
 * Copyright (c) 2001-2004 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 *
 * $XORP: xorp/xrl/targets/ripng.xrls,v 1.18 2004/09/17 14:05:13 abittau Exp $
 */

/**
 *  Get name of Xrl Target
 */
finder://ripng/common/0.1/get_target_name->name:txt

/**
 *  Get version string from Xrl Target
 */
finder://ripng/common/0.1/get_version->version:txt

/**
 *  Get status of Xrl Target
 */
finder://ripng/common/0.1/get_status->status:u32&reason:txt

/**
 *  Request clean shutdown of Xrl Target
 */
finder://ripng/common/0.1/shutdown

/**
 *  Announce target birth.
 */
finder://ripng/finder_event_observer/0.1/xrl_target_birth?target_class:txt&target_instance:txt

/**
 *  Announce target death.
 */
finder://ripng/finder_event_observer/0.1/xrl_target_death?target_class:txt&target_instance:txt

/**
 *  Configure a policy filter.
 *
 *  @param filter the identifier of the filter to configure.
 *
 *  @param conf the configuration of the filter.
 */
finder://ripng/policy_backend/0.1/configure?filter:u32&conf:txt

/**
 *  Reset a policy filter.
 *
 *  @param filter the identifier of the filter to reset.
 */
finder://ripng/policy_backend/0.1/reset?filter:u32

/**
 *  Push all available routes through all filters for re-filtering.
 */
finder://ripng/policy_backend/0.1/push_routes

/**
 *  Start route redistribution for an IPv6 route.
 *
 *  @param network the route to advertise.
 *
 *  @param unicast whether the route is unicast.
 *
 *  @param multicast whether the route is multicast.
 *
 *  @param nexthop the nexthop of the route.
 *
 *  @param metric the metric of the route.
 *
 *  @param policytags the set of policy-tags associated with the route.
 */
finder://ripng/policy_redist6/0.1/add_route6?network:ipv6net&unicast:bool&multicast:bool&nexthop:ipv6&metric:u32&policytags:list

/**
 *  Terminate route redistribution for an IPv6 route.
 *
 *  @param network the route for which advertisements should cease.
 *
 *  @param unicast whether the route is unicast.
 *
 *  @param multicast whether the route is multicast.
 */
finder://ripng/policy_redist6/0.1/delete_route6?network:ipv6net&unicast:bool&multicast:bool

/**
 *
 *  @param dst destination network.
 *
 *  @param nexthop nexthop router address.
 *
 *  @param ifname interface name associated with nexthop.
 *
 *  @param vifname virtual interface name with nexthop.
 *
 *  @param metric origin routing protocol metric for route.
 *
 *  @param admin_distance administrative distance of origin routing protocol.
 *
 *  @param cookie value set by the requestor to identify redistribution source.
 *  Typical value is the originating protocol name.
 */
finder://ripng/redist6/0.1/add_route?dst:ipv6net&nexthop:ipv6&ifname:txt&vifname:txt&metric:u32&admin_distance:u32&cookie:txt

finder://ripng/redist6/0.1/delete_route?network:ipv6net&cookie:txt

/**
 *  When route redistribution begins, the receiver is sent the existing list of
 *  routes. This message marks the beginning of the routes being sent.
 *
 *  @param cookie value set by the requestor to identify redistribution source.
 *  Typical value is the originating protocol name.
 */
finder://ripng/redist6/0.1/starting_route_dump?cookie:txt

/**
 *  When route redistribution begins, the receiver is sent the existing list of
 *  routes. This message marks the end of the existing routes being sent.
 *
 *  @param cookie value set by the requestor to identify redistribution source.
 *  Typical value is the originating protocol name.
 */
finder://ripng/redist6/0.1/finishing_route_dump?cookie:txt

/**
 *  Add an address to run RIP process on. The addition of address is not
 *  instantaneous, RIP has to instantiate state in the FEA to send and receive
 *  packets. Once instantiated the address must be explicitly enabled with
 *  set_rip_address_enabled.
 *
 *  @param ifname the interface that owns vif that has address.
 *
 *  @param vifname virtual interface owning address.
 *
 *  @param addr the address to be added.
 */
finder://ripng/ripng/0.1/add_rip_address?ifname:txt&vifname:txt&addr:ipv6

/**
 *  Remove an address RIP process is running on.
 *
 *  @param ifname the interface that owns vif that has address.
 *
 *  @param vifname virtual interface owning address.
 *
 *  @param addr the address to be removed.
 */
finder://ripng/ripng/0.1/remove_rip_address?ifname:txt&vifname:txt&addr:ipv6

finder://ripng/ripng/0.1/set_rip_address_enabled?ifname:txt&vifname:txt&addr:ipv6&enabled:bool

finder://ripng/ripng/0.1/rip_address_enabled?ifname:txt&vifname:txt&addr:ipv6->enabled:bool

/**
 *  Set cost metric associated with address.
 */
finder://ripng/ripng/0.1/set_cost?ifname:txt&vifname:txt&addr:ipv6&cost:u32

/**
 *  Get cost metric associated with address.
 */
finder://ripng/ripng/0.1/cost?ifname:txt&vifname:txt&addr:ipv6->cost:u32

/**
 *  Set horizon type applied to routes advertised from address.
 *
 *  @param horizon name of horizon type. Permitted values: "none",
 *  "poison-reverse" "split-horizon-poison-reverse"
 */
finder://ripng/ripng/0.1/set_horizon?ifname:txt&vifname:txt&addr:ipv6&horizon:txt

/**
 *  Get horizon type applied to routes advertised from address.
 */
finder://ripng/ripng/0.1/horizon?ifname:txt&vifname:txt&addr:ipv6->horizon:txt

/**
 *  Make RIP passive (receive only) on interface/vif/address.
 */
finder://ripng/ripng/0.1/set_passive?ifname:txt&vifname:txt&addr:ipv6&passive:bool

/**
 *  Get value indicating whether RIP is passive (receive only) on
 *  interface/vif/address.
 */
finder://ripng/ripng/0.1/passive?ifname:txt&vifname:txt&addr:ipv6->passive:bool

/**
 *  Accept and respond to non-RIP requests.
 */
finder://ripng/ripng/0.1/set_accept_non_rip_requests?ifname:txt&vifname:txt&addr:ipv6&accept:bool

/**
 *  Get value indicating whether non-RIP requests are accepted and responded to
 *  on interface/vif/address.
 */
finder://ripng/ripng/0.1/accept_non_rip_requests?ifname:txt&vifname:txt&addr:ipv6->accept:bool

/**
 *  Accept default route from peers.
 */
finder://ripng/ripng/0.1/set_accept_default_route?ifname:txt&vifname:txt&addr:ipv6&accept:bool

/**
 *  Accessor for whether default route is accepted from peers.
 */
finder://ripng/ripng/0.1/accept_default_route?ifname:txt&vifname:txt&addr:ipv6->accept:bool

/**
 *  Advertise default route (if present).
 */
finder://ripng/ripng/0.1/set_advertise_default_route?ifname:txt&vifname:txt&addr:ipv6&advertise:bool

/**
 *  Accessor for whether default route is advertised.
 */
finder://ripng/ripng/0.1/advertise_default_route?ifname:txt&vifname:txt&addr:ipv6->advertise:bool

/**
 *  Set period that routes associated with reception address will expire in the
 *  absence of updates.
 */
finder://ripng/ripng/0.1/set_route_expiry_seconds?ifname:txt&vifname:txt&addr:ipv6&t_secs:u32

/**
 *  Get period that routes associated with reception address will expire in the
 *  absence of updates.
 */
finder://ripng/ripng/0.1/route_expiry_seconds?ifname:txt&vifname:txt&addr:ipv6->t_secs:u32

/**
 *  Set period that routes associated with reception address will be deleted
 *  after they've expired.
 */
finder://ripng/ripng/0.1/set_route_deletion_seconds?ifname:txt&vifname:txt&addr:ipv6&t_secs:u32

/**
 *  Get period that routes associated with reception address will be deleted
 *  after they've expired.
 */
finder://ripng/ripng/0.1/route_deletion_seconds?ifname:txt&vifname:txt&addr:ipv6->t_secs:u32

/**
 *  Set period that route table requests should be sent from address when no
 *  peers are associated with it.
 */
finder://ripng/ripng/0.1/set_table_request_seconds?ifname:txt&vifname:txt&addr:ipv6&t_secs:u32

/**
 *  Set period that route table requests should be sent from address when no
 *  peers are associated with it.
 */
finder://ripng/ripng/0.1/table_request_seconds?ifname:txt&vifname:txt&addr:ipv6->t_secs:u32

/**
 *  Set minimum period between the unsolicited sending of the routing table
 *  from address.
 */
finder://ripng/ripng/0.1/set_unsolicited_response_min_seconds?ifname:txt&vifname:txt&addr:ipv6&t_secs:u32

/**
 *  Get minimum period between the unsolicited sending of the routing table
 *  from address.
 */
finder://ripng/ripng/0.1/unsolicited_response_min_seconds?ifname:txt&vifname:txt&addr:ipv6->t_secs:u32

/**
 *  Set maximum period between the unsolicited sending of the routing table
 *  from address.
 */
finder://ripng/ripng/0.1/set_unsolicited_response_max_seconds?ifname:txt&vifname:txt&addr:ipv6&t_secs:u32

/**
 *  Get maximum period between the unsolicited sending of the routing table
 *  from address.
 */
finder://ripng/ripng/0.1/unsolicited_response_max_seconds?ifname:txt&vifname:txt&addr:ipv6->t_secs:u32

/**
 *  Set minimum period between sending triggered updates from address.
 */
finder://ripng/ripng/0.1/set_triggered_update_min_seconds?ifname:txt&vifname:txt&addr:ipv6&t_secs:u32

/**
 *  Get minimum period between sending triggered updates from address.
 */
finder://ripng/ripng/0.1/triggered_update_min_seconds?ifname:txt&vifname:txt&addr:ipv6->t_secs:u32

/**
 *  Set maximum period between sending triggered updates from address.
 */
finder://ripng/ripng/0.1/set_triggered_update_max_seconds?ifname:txt&vifname:txt&addr:ipv6&t_secs:u32

/**
 *  Get maximum period between sending triggered updates from address.
 */
finder://ripng/ripng/0.1/triggered_update_max_seconds?ifname:txt&vifname:txt&addr:ipv6->t_secs:u32

/**
 *  Set the inter-packet delay between the output of packets from address.
 */
finder://ripng/ripng/0.1/set_interpacket_delay_milliseconds?ifname:txt&vifname:txt&addr:ipv6&t_msecs:u32

/**
 *  Get the inter-packet delay between the output of packets from address.
 */
finder://ripng/ripng/0.1/interpacket_delay_milliseconds?ifname:txt&vifname:txt&addr:ipv6->t_msecs:u32

/**
 *  Get a textual description of the status of address RIP is running upon.
 *
 *  @param ifname the interface that owns vif that has the address.
 *
 *  @param vifname virtual interface owns the address.
 *
 *  @param addr the address to query.
 */
finder://ripng/ripng/0.1/rip_address_status?ifname:txt&vifname:txt&addr:ipv6->status:txt

/**
 *  Get addresses running RIP.
 */
finder://ripng/ripng/0.1/get_all_addresses->ifnames:list&vifnames:list&addrs:list

/**
 *  Get counters associated with interface / vif /address.
 */
finder://ripng/ripng/0.1/get_counters?ifname:txt&vifname:txt&addr:ipv6->counter_descriptions:list&counter_values:list

/**
 *  Get the list of peers associated with interface / vif / address.
 */
finder://ripng/ripng/0.1/get_peers?ifname:txt&vifname:txt&addr:ipv6->peers:list

/**
 *  Get list of all peers known to RIP. There is a 1-to-1 correspondence
 *  between the items in the lists of peers, ifnames, vifnames, addrs.
 */
finder://ripng/ripng/0.1/get_all_peers->peers:list&ifnames:list&vifnames:list&addrs:list

/**
 *  Get counters associated with peer of interface / vif /address.
 *
 *  @param counter_descriptions textual descriptions of counters.
 *
 *  @param counter_values values associated with counters.
 *
 *  @param peer_last_active is the number of seconds since TimeVal(0,0).
 */
finder://ripng/ripng/0.1/get_peer_counters?ifname:txt&vifname:txt&addr:ipv6&peer:ipv6->counter_descriptions:list&counter_values:list&peer_last_active:u32

/**
 *  Configure protocol route redistribution.
 *
 *  @param protocol_name name of protocol to redistribute routes from.
 *
 *  @param cost RIP cost metric to assign to protocol routes.
 *
 *  @param tag RIP tag to associate with protocol routes.
 */
finder://ripng/ripng/0.1/redist_protocol_routes?protocol_name:txt&cost:u32&tag:u32

/**
 *  Remove protocol route redistribution.
 *
 *  @param protocol_name name of protocol to stop redistribution of routes
 *  from.
 */
finder://ripng/ripng/0.1/no_redist_protocol_routes?protocol_name:txt

/**
 *  Method invoked by target implementing socket6/0.1 when a packet arrives
 *  from an IPv6 source.
 *
 *  @param sockid the identifier associated with socket where error occurred.
 *
 *  @param src_host the originating host.
 *
 *  @param src_port the originating IP port.
 *
 *  @param data the data received.
 */
finder://ripng/socket6_user/0.1/recv_event?sockid:txt&src_host:ipv6&src_port:u32&data:binary

/**
 *  Method invoked by target implementing socket6/0.1 when a connection request
 *  is received from an IPv6 source.
 */
finder://ripng/socket6_user/0.1/connect_event?sockid:txt&src_host:ipv6&src_port:u32&new_sockid:txt->accept:bool

/**
 *  Method invoked by target implementing socket6/0.1 when an error occurs.
 *
 *  @param sockid the identifier associated with socket where error occurred.
 *
 *  @param error a textual description of the error.
 *
 *  @param fatal indication of whether socket is shutdown because of error.
 */
finder://ripng/socket6_user/0.1/error_event?sockid:txt&error:txt&fatal:bool

/**
 *  Method invoked by target implementing socket6/0.1 when a socket is forcibly
 *  closed. This would typically happen when the address the socket is bound to
 *  is removed from an interface. This method is not called if the socket is
 *  closed through socket/0.1/close.
 */
finder://ripng/socket6_user/0.1/close_event?sockid:txt&reason:txt

