/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/tgt-gen'.
 *
 * $XORP: xorp/xrl/targets/pim_base.hh,v 1.3 2003/01/07 01:43:04 pavlin Exp $
 */


#ifndef __XRL_INTERFACES_PIM_BASE_HH__
#define __XRL_INTERFACES_PIM_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlPimTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_router.hh"

class XrlPimTargetBase {
protected:
    XrlCmdMap* _router;
    
public:
    XrlPimTargetBase(XrlCmdMap* r) : _router(r) { add_handlers(); }
    virtual ~XrlPimTargetBase() { remove_handlers(); }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Get name of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_target_name(
	// Output values, 
	string&	name) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Get version string from Xrl Target
     */
    virtual XrlCmdError common_0_1_get_version(
	// Output values, 
	string&	version) = 0;

    virtual XrlCmdError cli_processor_0_1_process_command(
	// Input values, 
	const string&	processor_name, 
	const string&	cli_term_name, 
	const uint32_t&	cli_session_id, 
	const string&	command_name, 
	const string&	command_args, 
	// Output values, 
	string&	ret_processor_name, 
	string&	ret_cli_term_name, 
	uint32_t&	ret_cli_session_id, 
	string&	ret_command_output) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Add a new vif.
     *  
     *  @param vif_name the name of the new vif.
     *  
     *  @param vif_index the index of the new vif.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError mfea_client_0_1_new_vif(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Delete an existing vif.
     *  
     *  @param vif_name the name of the vif to delete.
     *  
     *  @param vif_index the index of the vif to delete.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError mfea_client_0_1_delete_vif(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Add an address to a vif.
     *  
     *  @param vif_name the name of the vif.
     *  
     *  @param vif_index the index of the vif.
     *  
     *  @param addr the unicast address to add.
     *  
     *  @param subnet the subnet address to add.
     *  
     *  @param broadcast the broadcast address (when applicable).
     *  
     *  @param peer the peer address (when applicable).
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError mfea_client_0_1_add_vif_addr4(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv4&	addr, 
	const IPv4Net&	subnet, 
	const IPv4&	broadcast, 
	const IPv4&	peer, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError mfea_client_0_1_add_vif_addr6(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv6&	addr, 
	const IPv6Net&	subnet, 
	const IPv6&	broadcast, 
	const IPv6&	peer, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Delete an address from a vif.
     *  
     *  @param vif_name the name of the vif.
     *  
     *  @param vif_index the index of the vif.
     *  
     *  @param addr the unicast address to delete.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError mfea_client_0_1_delete_vif_addr4(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv4&	addr, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError mfea_client_0_1_delete_vif_addr6(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv6&	addr, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Set flags to a vif.
     *  
     *  @param vif_name the name of the vif.
     *  
     *  @param vif_index the index of the vif.
     *  
     *  @param is_pim_register true if this is a PIM Register vif.
     *  
     *  @param is_p2p true if this is a point-to-point vif.
     *  
     *  @param is_loopback true if this is a loopback interface.
     *  
     *  @param is_multicast true if the vif is multicast-capable.
     *  
     *  @param is_broadcast true if the vif is broadcast-capable.
     *  
     *  @param is_up true if the vif is UP and running.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError mfea_client_0_1_set_vif_flags(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const bool&	is_pim_register, 
	const bool&	is_p2p, 
	const bool&	is_loopback, 
	const bool&	is_multicast, 
	const bool&	is_broadcast, 
	const bool&	is_up, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Complete a transaction with vif information.
     *  
     *  @param vif_name the name of the vif.
     *  
     *  @param vif_index the index of the vif.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError mfea_client_0_1_set_vif_done(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Complete all transactions with vif information.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError mfea_client_0_1_set_all_vifs_done(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Test if the vif setup is completed.
     *  
     *  @param is_completed if true the vif setup is completed.
     */
    virtual XrlCmdError mfea_client_0_1_is_vif_setup_completed(
	// Output values, 
	bool&	is_completed) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Receive a protocol message from the MFEA.
     *  
     *  @param xrl_sender_name the XRL name of the originator of this XRL.
     *  
     *  @param protocol_name the name of the protocol that sends a message.
     *  
     *  @param protocol_id the ID of the protocol that sends a message (both
     *  sides must agree on the particular values).
     *  
     *  @param vif_name the name of the vif the message was received on.
     *  
     *  @param vif_index the index of the vif the message was received on.
     *  
     *  @param source_address the address of the sender.
     *  
     *  @param dest_address the destination address.
     *  
     *  @param ip_ttl the TTL of the received IP packet. If it has a negative
     *  value, it should be ignored.
     *  
     *  @param ip_tos the TOS of the received IP packet. If it has a negative
     *  value, it should be ignored.
     *  
     *  @param is_router_alert if true, the IP Router Alert option in the IP
     *  packet was set (when applicable).
     *  
     *  @param protocol_message the protocol message.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError mfea_client_0_1_recv_protocol_message4(
	// Input values, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv4&	source_address, 
	const IPv4&	dest_address, 
	const int32_t&	ip_ttl, 
	const int32_t&	ip_tos, 
	const bool&	is_router_alert, 
	const vector<uint8_t>&	protocol_message, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError mfea_client_0_1_recv_protocol_message6(
	// Input values, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv6&	source_address, 
	const IPv6&	dest_address, 
	const int32_t&	ip_ttl, 
	const int32_t&	ip_tos, 
	const bool&	is_router_alert, 
	const vector<uint8_t>&	protocol_message, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Receive a kernel signal message from the MFEA.
     *  
     *  @param xrl_sender_name the XRL name of the originator of this XRL.
     *  
     *  @param protocol_name the name of the protocol that sends a message.
     *  
     *  @param protocol_id the ID of the protocol that sends a message (both
     *  sides must agree on the particular values).
     *  
     *  @param message_type the type of the kernel signal message (TODO:
     *  integer for now: the particular types are well-known by both sides).
     *  
     *  @param vif_name the name of the vif the message was received on.
     *  
     *  @param vif_index the index of the vif the message was received on.
     *  
     *  @param source_address the address of the sender.
     *  
     *  @param dest_address the destination address.
     *  
     *  @param protocol_message the protocol message.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError mfea_client_0_1_recv_kernel_signal_message4(
	// Input values, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const uint32_t&	message_type, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv4&	source_address, 
	const IPv4&	dest_address, 
	const vector<uint8_t>&	protocol_message, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError mfea_client_0_1_recv_kernel_signal_message6(
	// Input values, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const uint32_t&	message_type, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv6&	source_address, 
	const IPv6&	dest_address, 
	const vector<uint8_t>&	protocol_message, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Add Multicast Routing Information Base information.
     *  
     *  @param xrl_sender_name the XRL name of the originator of this XRL.
     *  
     *  @param dest_prefix the destination prefix to add.
     *  
     *  @param next_hop_router_addr the address of the next-hop router toward
     *  the destination prefix.
     *  
     *  @param next_hop_vif_name the name of the vif toward the destination
     *  prefix.
     *  
     *  @param next_hop_vif_index the index of the vif toward the destination
     *  prefix.
     *  
     *  @param metric the routing metric for this entry.
     *  
     *  @param metric_preference the routing metric preference for this entry.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError mfea_client_0_1_add_mrib4(
	// Input values, 
	const string&	xrl_sender_name, 
	const IPv4Net&	dest_prefix, 
	const IPv4&	next_hop_router_addr, 
	const string&	next_hop_vif_name, 
	const uint32_t&	next_hop_vif_index, 
	const uint32_t&	metric, 
	const uint32_t&	metric_preference, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError mfea_client_0_1_add_mrib6(
	// Input values, 
	const string&	xrl_sender_name, 
	const IPv6Net&	dest_prefix, 
	const IPv6&	next_hop_router_addr, 
	const string&	next_hop_vif_name, 
	const uint32_t&	next_hop_vif_index, 
	const uint32_t&	metric, 
	const uint32_t&	metric_preference, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Delete Multicast Routing Information Base information.
     *  
     *  @param xrl_sender_name the XRL name of the originator of this XRL.
     *  
     *  @param dest_prefix the destination prefix to delete.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError mfea_client_0_1_delete_mrib4(
	// Input values, 
	const string&	xrl_sender_name, 
	const IPv4Net&	dest_prefix, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError mfea_client_0_1_delete_mrib6(
	// Input values, 
	const string&	xrl_sender_name, 
	const IPv6Net&	dest_prefix, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Complete a transaction with MRIB information.
     *  
     *  @param xrl_sender_name the XRL name of the originator of this XRL.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError mfea_client_0_1_set_mrib_done(
	// Input values, 
	const string&	xrl_sender_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  A signal that a dataflow-related pre-condition is true.
     *  
     *  @param xrl_sender_name the XRL name of the originator of this XRL.
     *  
     *  @param source_address the source address of the dataflow.
     *  
     *  @param group_address the group address of the dataflow.
     *  
     *  @param threshold_interval_sec the number of seconds in the interval
     *  requested for measurement.
     *  
     *  @param threshold_interval_usec the number of microseconds in the
     *  interval requested for measurement.
     *  
     *  @param measured_interval_sec the number of seconds in the last measured
     *  interval that has triggered the signal.
     *  
     *  @param measured_interval_usec the number of microseconds in the last
     *  measured interval that has triggered the signal.
     *  
     *  @param threshold_packets the threshold value to trigger a signal (in
     *  number of packets).
     *  
     *  @param threshold_bytes the threshold value to trigger a signal (in
     *  bytes).
     *  
     *  @param measured_packets the number of packets measured within the
     *  measured interval.
     *  
     *  @param measured_bytes the number of bytes measured within the measured
     *  interval.
     *  
     *  @param is_threshold_in_packets if true, threshold_packets is valid.
     *  
     *  @param is_threshold_in_bytes if true, threshold_bytes is valid.
     *  
     *  @param is_geq_upcall if true, the operation for comparison is ">=".
     *  
     *  @param is_leq_upcall if true, the operation for comparison is "<=".
     */
    virtual XrlCmdError mfea_client_0_1_recv_dataflow_signal4(
	// Input values, 
	const string&	xrl_sender_name, 
	const IPv4&	source_address, 
	const IPv4&	group_address, 
	const uint32_t&	threshold_interval_sec, 
	const uint32_t&	threshold_interval_usec, 
	const uint32_t&	measured_interval_sec, 
	const uint32_t&	measured_interval_usec, 
	const uint32_t&	threshold_packets, 
	const uint32_t&	threshold_bytes, 
	const uint32_t&	measured_packets, 
	const uint32_t&	measured_bytes, 
	const bool&	is_threshold_in_packets, 
	const bool&	is_threshold_in_bytes, 
	const bool&	is_geq_upcall, 
	const bool&	is_leq_upcall, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError mfea_client_0_1_recv_dataflow_signal6(
	// Input values, 
	const string&	xrl_sender_name, 
	const IPv6&	source_address, 
	const IPv6&	group_address, 
	const uint32_t&	threshold_interval_sec, 
	const uint32_t&	threshold_interval_usec, 
	const uint32_t&	measured_interval_sec, 
	const uint32_t&	measured_interval_usec, 
	const uint32_t&	threshold_packets, 
	const uint32_t&	threshold_bytes, 
	const uint32_t&	measured_packets, 
	const uint32_t&	measured_bytes, 
	const bool&	is_threshold_in_packets, 
	const bool&	is_threshold_in_bytes, 
	const bool&	is_geq_upcall, 
	const bool&	is_leq_upcall, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Add/delete membership information.
     *  
     *  @param xrl_sender_name the XRL name of the originator of this XRL.
     *  
     *  @param vif_name the name of the new vif.
     *  
     *  @param vif_index the index of the new vif.
     *  
     *  @param source the source address that has been joined/left.
     *  
     *  @param group the group address that has been joined/left.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError mld6igmp_client_0_1_add_membership4(
	// Input values, 
	const string&	xrl_sender_name, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv4&	source, 
	const IPv4&	group, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError mld6igmp_client_0_1_add_membership6(
	// Input values, 
	const string&	xrl_sender_name, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv6&	source, 
	const IPv6&	group, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError mld6igmp_client_0_1_delete_membership4(
	// Input values, 
	const string&	xrl_sender_name, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv4&	source, 
	const IPv4&	group, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError mld6igmp_client_0_1_delete_membership6(
	// Input values, 
	const string&	xrl_sender_name, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv6&	source, 
	const IPv6&	group, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Enable/disable/start/stop a PIM vif interface.
     *  
     *  @param vif_name the name of the vif to enable/disable/start/stop.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError pim_0_1_enable_vif(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_disable_vif(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_start_vif(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_stop_vif(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Enable/disable/start/stop all PIM vif interfaces.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError pim_0_1_enable_all_vifs(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_disable_all_vifs(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_start_all_vifs(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_stop_all_vifs(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Enable/disable/start/stop PIM protocol and PIM CLI access.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError pim_0_1_enable_pim(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_disable_pim(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_enable_cli(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_disable_cli(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_start_pim(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_stop_pim(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_start_cli(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_stop_cli(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Enable/disable/start/stop BSR.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError pim_0_1_enable_bsr(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_disable_bsr(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_start_bsr(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_stop_bsr(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Add/delete candidate-BSR configuration.
     *  
     *  @param is_admin_scope_zone true if configuring adminstratively scoped
     *  zone.
     *  
     *  @param admin_scope_zone_id the ID of the configured zone.
     *  
     *  @param vif_name the name of the vif to use its address as a
     *  candidate-BSR.
     *  
     *  @param bsr_priority the BSR priority (larger is better).
     *  
     *  @param hash_masklen the hash mask length.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError pim_0_1_add_config_cand_bsr_by_vif_name4(
	// Input values, 
	const bool&	is_admin_scope_zone, 
	const IPv4Net&	admin_scope_zone_id, 
	const string&	vif_name, 
	const uint32_t&	bsr_priority, 
	const uint32_t&	hash_masklen, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_add_config_cand_bsr_by_vif_name6(
	// Input values, 
	const bool&	is_admin_scope_zone, 
	const IPv6Net&	admin_scope_zone_id, 
	const string&	vif_name, 
	const uint32_t&	bsr_priority, 
	const uint32_t&	hash_masklen, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_add_config_cand_bsr_by_addr4(
	// Input values, 
	const bool&	is_admin_scope_zone, 
	const IPv4Net&	admin_scope_zone_id, 
	const IPv4&	cand_bsr_addr, 
	const uint32_t&	bsr_priority, 
	const uint32_t&	hash_masklen, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_add_config_cand_bsr_by_addr6(
	// Input values, 
	const bool&	is_admin_scope_zone, 
	const IPv6Net&	admin_scope_zone_id, 
	const IPv6&	cand_bsr_addr, 
	const uint32_t&	bsr_priority, 
	const uint32_t&	hash_masklen, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_delete_config_cand_bsr4(
	// Input values, 
	const bool&	is_admin_scope_zone, 
	const IPv4Net&	admin_scope_zone_id, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_delete_config_cand_bsr6(
	// Input values, 
	const bool&	is_admin_scope_zone, 
	const IPv6Net&	admin_scope_zone_id, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Add/delete Candidate-RP configuration.
     *  
     *  @param is_admin_scope_zone true if configuring adminstratively scoped
     *  zone.
     *  
     *  @param group_prefix the group prefix of the configured zone.
     *  
     *  @param vif_name the name of the vif to use its address as a
     *  candidate-RP.
     *  
     *  @param rp_priority the Cand-RP priority (smaller is better).
     *  
     *  @param rp_holdtime the Cand-RP holdtime (in seconds).
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError pim_0_1_add_config_cand_rp_by_vif_name4(
	// Input values, 
	const bool&	is_admin_scope_zone, 
	const IPv4Net&	group_prefix, 
	const string&	vif_name, 
	const uint32_t&	rp_priority, 
	const uint32_t&	rp_holdtime, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_add_config_cand_rp_by_vif_name6(
	// Input values, 
	const bool&	is_admin_scope_zone, 
	const IPv6Net&	group_prefix, 
	const string&	vif_name, 
	const uint32_t&	rp_priority, 
	const uint32_t&	rp_holdtime, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_add_config_cand_rp_by_addr4(
	// Input values, 
	const bool&	is_admin_scope_zone, 
	const IPv4Net&	group_prefix, 
	const IPv4&	cand_rp_addr, 
	const uint32_t&	rp_priority, 
	const uint32_t&	rp_holdtime, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_add_config_cand_rp_by_addr6(
	// Input values, 
	const bool&	is_admin_scope_zone, 
	const IPv6Net&	group_prefix, 
	const IPv6&	cand_rp_addr, 
	const uint32_t&	rp_priority, 
	const uint32_t&	rp_holdtime, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_delete_config_cand_rp_by_vif_name4(
	// Input values, 
	const bool&	is_admin_scope_zone, 
	const IPv4Net&	group_prefix, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_delete_config_cand_rp_by_vif_name6(
	// Input values, 
	const bool&	is_admin_scope_zone, 
	const IPv6Net&	group_prefix, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_delete_config_cand_rp_by_addr4(
	// Input values, 
	const bool&	is_admin_scope_zone, 
	const IPv4Net&	group_prefix, 
	const IPv4&	cand_rp_addr, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_delete_config_cand_rp_by_addr6(
	// Input values, 
	const bool&	is_admin_scope_zone, 
	const IPv6Net&	group_prefix, 
	const IPv6&	cand_rp_addr, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Add/delete/complete static RP configuration.
     *  
     *  @param group_prefix the group prefix for the RP.
     *  
     *  @param rp_addr the RP address.
     *  
     *  @param rp_priority the RP priority (smaller is better).
     *  
     *  @param hash_masklen the hash masklen used in computing an RP for a
     *  group. It should be same across all RPs. If set to zero, the default
     *  one will be used.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError pim_0_1_add_config_rp4(
	// Input values, 
	const IPv4Net&	group_prefix, 
	const IPv4&	rp_addr, 
	const uint32_t&	rp_priority, 
	const uint32_t&	hash_masklen, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_add_config_rp6(
	// Input values, 
	const IPv6Net&	group_prefix, 
	const IPv6&	rp_addr, 
	const uint32_t&	rp_priority, 
	const uint32_t&	hash_masklen, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_delete_config_rp4(
	// Input values, 
	const IPv4Net&	group_prefix, 
	const IPv4&	rp_addr, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_delete_config_rp6(
	// Input values, 
	const IPv6Net&	group_prefix, 
	const IPv6&	rp_addr, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_config_rp_done(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Configure PIM Hello-related metrics. The 'set_foo' XRLs set the
     *  particular values. The 'reset_foo' XRLs reset the metrics to their
     *  default values.
     *  
     *  @param vif_name the name of the vif to configure.
     *  
     *  @param proto_version the protocol version.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError pim_0_1_get_vif_proto_version(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	uint32_t&	proto_version, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_set_vif_proto_version(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	proto_version, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_reset_vif_proto_version(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_get_vif_hello_triggered_delay(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	uint32_t&	hello_triggered_delay, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_set_vif_hello_triggered_delay(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	hello_triggered_delay, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_reset_vif_hello_triggered_delay(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_get_vif_hello_period(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	uint32_t&	hello_period, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_set_vif_hello_period(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	hello_period, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_reset_vif_hello_period(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_get_vif_hello_holdtime(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	uint32_t&	hello_holdtime, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_set_vif_hello_holdtime(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	hello_holdtime, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_reset_vif_hello_holdtime(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_get_vif_dr_priority(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	uint32_t&	dr_priority, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_set_vif_dr_priority(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	dr_priority, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_reset_vif_dr_priority(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_get_vif_lan_delay(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	uint32_t&	lan_delay, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_set_vif_lan_delay(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	lan_delay, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_reset_vif_lan_delay(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_get_vif_override_interval(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	uint32_t&	override_interval, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_set_vif_override_interval(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	override_interval, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_reset_vif_override_interval(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_get_vif_is_tracking_support_disabled(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	is_tracking_support_disabled, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_set_vif_is_tracking_support_disabled(
	// Input values, 
	const string&	vif_name, 
	const bool&	is_tracking_support_disabled, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_reset_vif_is_tracking_support_disabled(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_get_vif_accept_nohello_neighbors(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	accept_nohello_neighbors, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_set_vif_accept_nohello_neighbors(
	// Input values, 
	const string&	vif_name, 
	const bool&	accept_nohello_neighbors, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_reset_vif_accept_nohello_neighbors(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_get_vif_join_prune_period(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	uint32_t&	join_prune_period, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_set_vif_join_prune_period(
	// Input values, 
	const string&	vif_name, 
	const uint32_t&	join_prune_period, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_reset_vif_join_prune_period(
	// Input values, 
	const string&	vif_name, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Enable/disable the PIM trace log.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError pim_0_1_enable_log_trace(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_disable_log_trace(
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Test-related methods: add Join/Prune entries, and send them to a
     *  neighbor.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError pim_0_1_add_test_jp_entry4(
	// Input values, 
	const IPv4&	source_addr, 
	const IPv4&	group_addr, 
	const uint32_t&	group_masklen, 
	const string&	mrt_entry_type, 
	const string&	action_jp, 
	const uint32_t&	holdtime, 
	const bool&	new_group_bool, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_add_test_jp_entry6(
	// Input values, 
	const IPv6&	source_addr, 
	const IPv6&	group_addr, 
	const uint32_t&	group_masklen, 
	const string&	mrt_entry_type, 
	const string&	action_jp, 
	const uint32_t&	holdtime, 
	const bool&	new_group_bool, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_send_test_jp_entry4(
	// Input values, 
	const IPv4&	nbr_addr, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_send_test_jp_entry6(
	// Input values, 
	const IPv6&	nbr_addr, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Test-related methods: send an Assert message on an interface.
     *  
     *  @param vif_name the name of the vif to send the Assert on.
     *  
     *  @param source_addr the source address inside the Assert message.
     *  
     *  @param group_addr the group address inside the Assert message.
     *  
     *  @param rpt_bit the RPT-bit inside the Assert message.
     *  
     *  @param metric_preference the metric preference inside the Assert
     *  message.
     *  
     *  @param metric the metric inside the Assert message.
     *  
     *  @param fail true if failure has occured.
     *  
     *  @param reason contains failure reason if it occured.
     */
    virtual XrlCmdError pim_0_1_send_test_assert4(
	// Input values, 
	const string&	vif_name, 
	const IPv4&	source_addr, 
	const IPv4&	group_addr, 
	const bool&	rpt_bit, 
	const uint32_t&	metric_preference, 
	const uint32_t&	metric, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

    virtual XrlCmdError pim_0_1_send_test_assert6(
	// Input values, 
	const string&	vif_name, 
	const IPv6&	source_addr, 
	const IPv6&	group_addr, 
	const bool&	rpt_bit, 
	const uint32_t&	metric_preference, 
	const uint32_t&	metric, 
	// Output values, 
	bool&	fail, 
	string&	reason) = 0;

private:
    const XrlCmdError handle_common_0_1_get_target_name(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_common_0_1_get_version(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_cli_processor_0_1_process_command(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_new_vif(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_delete_vif(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_add_vif_addr4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_add_vif_addr6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_delete_vif_addr4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_delete_vif_addr6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_set_vif_flags(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_set_vif_done(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_set_all_vifs_done(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_is_vif_setup_completed(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_recv_protocol_message4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_recv_protocol_message6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_recv_kernel_signal_message4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_recv_kernel_signal_message6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_add_mrib4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_add_mrib6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_delete_mrib4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_delete_mrib6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_set_mrib_done(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_recv_dataflow_signal4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mfea_client_0_1_recv_dataflow_signal6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mld6igmp_client_0_1_add_membership4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mld6igmp_client_0_1_add_membership6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mld6igmp_client_0_1_delete_membership4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_mld6igmp_client_0_1_delete_membership6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_enable_vif(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_disable_vif(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_start_vif(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_stop_vif(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_enable_all_vifs(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_disable_all_vifs(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_start_all_vifs(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_stop_all_vifs(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_enable_pim(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_disable_pim(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_enable_cli(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_disable_cli(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_start_pim(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_stop_pim(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_start_cli(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_stop_cli(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_enable_bsr(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_disable_bsr(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_start_bsr(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_stop_bsr(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_add_config_cand_bsr_by_vif_name4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_add_config_cand_bsr_by_vif_name6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_add_config_cand_bsr_by_addr4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_add_config_cand_bsr_by_addr6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_delete_config_cand_bsr4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_delete_config_cand_bsr6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_add_config_cand_rp_by_vif_name4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_add_config_cand_rp_by_vif_name6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_add_config_cand_rp_by_addr4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_add_config_cand_rp_by_addr6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_delete_config_cand_rp_by_vif_name4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_delete_config_cand_rp_by_vif_name6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_delete_config_cand_rp_by_addr4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_delete_config_cand_rp_by_addr6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_add_config_rp4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_add_config_rp6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_delete_config_rp4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_delete_config_rp6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_config_rp_done(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_get_vif_proto_version(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_set_vif_proto_version(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_reset_vif_proto_version(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_get_vif_hello_triggered_delay(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_set_vif_hello_triggered_delay(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_reset_vif_hello_triggered_delay(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_get_vif_hello_period(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_set_vif_hello_period(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_reset_vif_hello_period(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_get_vif_hello_holdtime(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_set_vif_hello_holdtime(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_reset_vif_hello_holdtime(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_get_vif_dr_priority(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_set_vif_dr_priority(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_reset_vif_dr_priority(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_get_vif_lan_delay(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_set_vif_lan_delay(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_reset_vif_lan_delay(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_get_vif_override_interval(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_set_vif_override_interval(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_reset_vif_override_interval(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_get_vif_is_tracking_support_disabled(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_set_vif_is_tracking_support_disabled(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_reset_vif_is_tracking_support_disabled(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_get_vif_accept_nohello_neighbors(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_set_vif_accept_nohello_neighbors(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_reset_vif_accept_nohello_neighbors(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_get_vif_join_prune_period(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_set_vif_join_prune_period(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_reset_vif_join_prune_period(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_enable_log_trace(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_disable_log_trace(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_add_test_jp_entry4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_add_test_jp_entry6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_send_test_jp_entry4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_send_test_jp_entry6(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_send_test_assert4(const Xrl& x, XrlArgs* a);

    const XrlCmdError handle_pim_0_1_send_test_assert6(const Xrl& x, XrlArgs* a);

    void add_handlers()
    {
	if (_router->add_handler("common/0.1/get_target_name", 
	    callback(this, &XrlPimTargetBase::handle_common_0_1_get_target_name)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/common/0.1/get_target_name");
	}
	if (_router->add_handler("common/0.1/get_version", 
	    callback(this, &XrlPimTargetBase::handle_common_0_1_get_version)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/common/0.1/get_version");
	}
	if (_router->add_handler("cli_processor/0.1/process_command", 
	    callback(this, &XrlPimTargetBase::handle_cli_processor_0_1_process_command)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/cli_processor/0.1/process_command");
	}
	if (_router->add_handler("mfea_client/0.1/new_vif", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_new_vif)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/new_vif");
	}
	if (_router->add_handler("mfea_client/0.1/delete_vif", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_delete_vif)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/delete_vif");
	}
	if (_router->add_handler("mfea_client/0.1/add_vif_addr4", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_add_vif_addr4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/add_vif_addr4");
	}
	if (_router->add_handler("mfea_client/0.1/add_vif_addr6", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_add_vif_addr6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/add_vif_addr6");
	}
	if (_router->add_handler("mfea_client/0.1/delete_vif_addr4", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_delete_vif_addr4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/delete_vif_addr4");
	}
	if (_router->add_handler("mfea_client/0.1/delete_vif_addr6", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_delete_vif_addr6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/delete_vif_addr6");
	}
	if (_router->add_handler("mfea_client/0.1/set_vif_flags", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_set_vif_flags)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/set_vif_flags");
	}
	if (_router->add_handler("mfea_client/0.1/set_vif_done", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_set_vif_done)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/set_vif_done");
	}
	if (_router->add_handler("mfea_client/0.1/set_all_vifs_done", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_set_all_vifs_done)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/set_all_vifs_done");
	}
	if (_router->add_handler("mfea_client/0.1/is_vif_setup_completed", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_is_vif_setup_completed)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/is_vif_setup_completed");
	}
	if (_router->add_handler("mfea_client/0.1/recv_protocol_message4", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_recv_protocol_message4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/recv_protocol_message4");
	}
	if (_router->add_handler("mfea_client/0.1/recv_protocol_message6", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_recv_protocol_message6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/recv_protocol_message6");
	}
	if (_router->add_handler("mfea_client/0.1/recv_kernel_signal_message4", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_recv_kernel_signal_message4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/recv_kernel_signal_message4");
	}
	if (_router->add_handler("mfea_client/0.1/recv_kernel_signal_message6", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_recv_kernel_signal_message6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/recv_kernel_signal_message6");
	}
	if (_router->add_handler("mfea_client/0.1/add_mrib4", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_add_mrib4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/add_mrib4");
	}
	if (_router->add_handler("mfea_client/0.1/add_mrib6", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_add_mrib6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/add_mrib6");
	}
	if (_router->add_handler("mfea_client/0.1/delete_mrib4", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_delete_mrib4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/delete_mrib4");
	}
	if (_router->add_handler("mfea_client/0.1/delete_mrib6", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_delete_mrib6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/delete_mrib6");
	}
	if (_router->add_handler("mfea_client/0.1/set_mrib_done", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_set_mrib_done)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/set_mrib_done");
	}
	if (_router->add_handler("mfea_client/0.1/recv_dataflow_signal4", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_recv_dataflow_signal4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/recv_dataflow_signal4");
	}
	if (_router->add_handler("mfea_client/0.1/recv_dataflow_signal6", 
	    callback(this, &XrlPimTargetBase::handle_mfea_client_0_1_recv_dataflow_signal6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mfea_client/0.1/recv_dataflow_signal6");
	}
	if (_router->add_handler("mld6igmp_client/0.1/add_membership4", 
	    callback(this, &XrlPimTargetBase::handle_mld6igmp_client_0_1_add_membership4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mld6igmp_client/0.1/add_membership4");
	}
	if (_router->add_handler("mld6igmp_client/0.1/add_membership6", 
	    callback(this, &XrlPimTargetBase::handle_mld6igmp_client_0_1_add_membership6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mld6igmp_client/0.1/add_membership6");
	}
	if (_router->add_handler("mld6igmp_client/0.1/delete_membership4", 
	    callback(this, &XrlPimTargetBase::handle_mld6igmp_client_0_1_delete_membership4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mld6igmp_client/0.1/delete_membership4");
	}
	if (_router->add_handler("mld6igmp_client/0.1/delete_membership6", 
	    callback(this, &XrlPimTargetBase::handle_mld6igmp_client_0_1_delete_membership6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/mld6igmp_client/0.1/delete_membership6");
	}
	if (_router->add_handler("pim/0.1/enable_vif", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_enable_vif)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/enable_vif");
	}
	if (_router->add_handler("pim/0.1/disable_vif", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_disable_vif)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/disable_vif");
	}
	if (_router->add_handler("pim/0.1/start_vif", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_start_vif)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/start_vif");
	}
	if (_router->add_handler("pim/0.1/stop_vif", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_stop_vif)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/stop_vif");
	}
	if (_router->add_handler("pim/0.1/enable_all_vifs", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_enable_all_vifs)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/enable_all_vifs");
	}
	if (_router->add_handler("pim/0.1/disable_all_vifs", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_disable_all_vifs)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/disable_all_vifs");
	}
	if (_router->add_handler("pim/0.1/start_all_vifs", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_start_all_vifs)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/start_all_vifs");
	}
	if (_router->add_handler("pim/0.1/stop_all_vifs", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_stop_all_vifs)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/stop_all_vifs");
	}
	if (_router->add_handler("pim/0.1/enable_pim", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_enable_pim)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/enable_pim");
	}
	if (_router->add_handler("pim/0.1/disable_pim", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_disable_pim)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/disable_pim");
	}
	if (_router->add_handler("pim/0.1/enable_cli", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_enable_cli)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/enable_cli");
	}
	if (_router->add_handler("pim/0.1/disable_cli", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_disable_cli)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/disable_cli");
	}
	if (_router->add_handler("pim/0.1/start_pim", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_start_pim)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/start_pim");
	}
	if (_router->add_handler("pim/0.1/stop_pim", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_stop_pim)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/stop_pim");
	}
	if (_router->add_handler("pim/0.1/start_cli", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_start_cli)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/start_cli");
	}
	if (_router->add_handler("pim/0.1/stop_cli", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_stop_cli)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/stop_cli");
	}
	if (_router->add_handler("pim/0.1/enable_bsr", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_enable_bsr)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/enable_bsr");
	}
	if (_router->add_handler("pim/0.1/disable_bsr", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_disable_bsr)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/disable_bsr");
	}
	if (_router->add_handler("pim/0.1/start_bsr", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_start_bsr)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/start_bsr");
	}
	if (_router->add_handler("pim/0.1/stop_bsr", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_stop_bsr)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/stop_bsr");
	}
	if (_router->add_handler("pim/0.1/add_config_cand_bsr_by_vif_name4", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_add_config_cand_bsr_by_vif_name4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/add_config_cand_bsr_by_vif_name4");
	}
	if (_router->add_handler("pim/0.1/add_config_cand_bsr_by_vif_name6", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_add_config_cand_bsr_by_vif_name6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/add_config_cand_bsr_by_vif_name6");
	}
	if (_router->add_handler("pim/0.1/add_config_cand_bsr_by_addr4", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_add_config_cand_bsr_by_addr4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/add_config_cand_bsr_by_addr4");
	}
	if (_router->add_handler("pim/0.1/add_config_cand_bsr_by_addr6", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_add_config_cand_bsr_by_addr6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/add_config_cand_bsr_by_addr6");
	}
	if (_router->add_handler("pim/0.1/delete_config_cand_bsr4", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_delete_config_cand_bsr4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/delete_config_cand_bsr4");
	}
	if (_router->add_handler("pim/0.1/delete_config_cand_bsr6", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_delete_config_cand_bsr6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/delete_config_cand_bsr6");
	}
	if (_router->add_handler("pim/0.1/add_config_cand_rp_by_vif_name4", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_add_config_cand_rp_by_vif_name4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/add_config_cand_rp_by_vif_name4");
	}
	if (_router->add_handler("pim/0.1/add_config_cand_rp_by_vif_name6", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_add_config_cand_rp_by_vif_name6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/add_config_cand_rp_by_vif_name6");
	}
	if (_router->add_handler("pim/0.1/add_config_cand_rp_by_addr4", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_add_config_cand_rp_by_addr4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/add_config_cand_rp_by_addr4");
	}
	if (_router->add_handler("pim/0.1/add_config_cand_rp_by_addr6", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_add_config_cand_rp_by_addr6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/add_config_cand_rp_by_addr6");
	}
	if (_router->add_handler("pim/0.1/delete_config_cand_rp_by_vif_name4", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_delete_config_cand_rp_by_vif_name4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/delete_config_cand_rp_by_vif_name4");
	}
	if (_router->add_handler("pim/0.1/delete_config_cand_rp_by_vif_name6", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_delete_config_cand_rp_by_vif_name6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/delete_config_cand_rp_by_vif_name6");
	}
	if (_router->add_handler("pim/0.1/delete_config_cand_rp_by_addr4", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_delete_config_cand_rp_by_addr4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/delete_config_cand_rp_by_addr4");
	}
	if (_router->add_handler("pim/0.1/delete_config_cand_rp_by_addr6", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_delete_config_cand_rp_by_addr6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/delete_config_cand_rp_by_addr6");
	}
	if (_router->add_handler("pim/0.1/add_config_rp4", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_add_config_rp4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/add_config_rp4");
	}
	if (_router->add_handler("pim/0.1/add_config_rp6", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_add_config_rp6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/add_config_rp6");
	}
	if (_router->add_handler("pim/0.1/delete_config_rp4", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_delete_config_rp4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/delete_config_rp4");
	}
	if (_router->add_handler("pim/0.1/delete_config_rp6", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_delete_config_rp6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/delete_config_rp6");
	}
	if (_router->add_handler("pim/0.1/config_rp_done", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_config_rp_done)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/config_rp_done");
	}
	if (_router->add_handler("pim/0.1/get_vif_proto_version", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_get_vif_proto_version)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/get_vif_proto_version");
	}
	if (_router->add_handler("pim/0.1/set_vif_proto_version", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_set_vif_proto_version)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/set_vif_proto_version");
	}
	if (_router->add_handler("pim/0.1/reset_vif_proto_version", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_reset_vif_proto_version)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/reset_vif_proto_version");
	}
	if (_router->add_handler("pim/0.1/get_vif_hello_triggered_delay", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_get_vif_hello_triggered_delay)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/get_vif_hello_triggered_delay");
	}
	if (_router->add_handler("pim/0.1/set_vif_hello_triggered_delay", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_set_vif_hello_triggered_delay)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/set_vif_hello_triggered_delay");
	}
	if (_router->add_handler("pim/0.1/reset_vif_hello_triggered_delay", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_reset_vif_hello_triggered_delay)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/reset_vif_hello_triggered_delay");
	}
	if (_router->add_handler("pim/0.1/get_vif_hello_period", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_get_vif_hello_period)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/get_vif_hello_period");
	}
	if (_router->add_handler("pim/0.1/set_vif_hello_period", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_set_vif_hello_period)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/set_vif_hello_period");
	}
	if (_router->add_handler("pim/0.1/reset_vif_hello_period", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_reset_vif_hello_period)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/reset_vif_hello_period");
	}
	if (_router->add_handler("pim/0.1/get_vif_hello_holdtime", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_get_vif_hello_holdtime)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/get_vif_hello_holdtime");
	}
	if (_router->add_handler("pim/0.1/set_vif_hello_holdtime", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_set_vif_hello_holdtime)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/set_vif_hello_holdtime");
	}
	if (_router->add_handler("pim/0.1/reset_vif_hello_holdtime", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_reset_vif_hello_holdtime)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/reset_vif_hello_holdtime");
	}
	if (_router->add_handler("pim/0.1/get_vif_dr_priority", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_get_vif_dr_priority)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/get_vif_dr_priority");
	}
	if (_router->add_handler("pim/0.1/set_vif_dr_priority", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_set_vif_dr_priority)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/set_vif_dr_priority");
	}
	if (_router->add_handler("pim/0.1/reset_vif_dr_priority", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_reset_vif_dr_priority)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/reset_vif_dr_priority");
	}
	if (_router->add_handler("pim/0.1/get_vif_lan_delay", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_get_vif_lan_delay)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/get_vif_lan_delay");
	}
	if (_router->add_handler("pim/0.1/set_vif_lan_delay", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_set_vif_lan_delay)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/set_vif_lan_delay");
	}
	if (_router->add_handler("pim/0.1/reset_vif_lan_delay", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_reset_vif_lan_delay)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/reset_vif_lan_delay");
	}
	if (_router->add_handler("pim/0.1/get_vif_override_interval", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_get_vif_override_interval)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/get_vif_override_interval");
	}
	if (_router->add_handler("pim/0.1/set_vif_override_interval", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_set_vif_override_interval)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/set_vif_override_interval");
	}
	if (_router->add_handler("pim/0.1/reset_vif_override_interval", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_reset_vif_override_interval)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/reset_vif_override_interval");
	}
	if (_router->add_handler("pim/0.1/get_vif_is_tracking_support_disabled", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_get_vif_is_tracking_support_disabled)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/get_vif_is_tracking_support_disabled");
	}
	if (_router->add_handler("pim/0.1/set_vif_is_tracking_support_disabled", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_set_vif_is_tracking_support_disabled)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/set_vif_is_tracking_support_disabled");
	}
	if (_router->add_handler("pim/0.1/reset_vif_is_tracking_support_disabled", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_reset_vif_is_tracking_support_disabled)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/reset_vif_is_tracking_support_disabled");
	}
	if (_router->add_handler("pim/0.1/get_vif_accept_nohello_neighbors", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_get_vif_accept_nohello_neighbors)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/get_vif_accept_nohello_neighbors");
	}
	if (_router->add_handler("pim/0.1/set_vif_accept_nohello_neighbors", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_set_vif_accept_nohello_neighbors)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/set_vif_accept_nohello_neighbors");
	}
	if (_router->add_handler("pim/0.1/reset_vif_accept_nohello_neighbors", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_reset_vif_accept_nohello_neighbors)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/reset_vif_accept_nohello_neighbors");
	}
	if (_router->add_handler("pim/0.1/get_vif_join_prune_period", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_get_vif_join_prune_period)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/get_vif_join_prune_period");
	}
	if (_router->add_handler("pim/0.1/set_vif_join_prune_period", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_set_vif_join_prune_period)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/set_vif_join_prune_period");
	}
	if (_router->add_handler("pim/0.1/reset_vif_join_prune_period", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_reset_vif_join_prune_period)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/reset_vif_join_prune_period");
	}
	if (_router->add_handler("pim/0.1/enable_log_trace", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_enable_log_trace)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/enable_log_trace");
	}
	if (_router->add_handler("pim/0.1/disable_log_trace", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_disable_log_trace)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/disable_log_trace");
	}
	if (_router->add_handler("pim/0.1/add_test_jp_entry4", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_add_test_jp_entry4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/add_test_jp_entry4");
	}
	if (_router->add_handler("pim/0.1/add_test_jp_entry6", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_add_test_jp_entry6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/add_test_jp_entry6");
	}
	if (_router->add_handler("pim/0.1/send_test_jp_entry4", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_send_test_jp_entry4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/send_test_jp_entry4");
	}
	if (_router->add_handler("pim/0.1/send_test_jp_entry6", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_send_test_jp_entry6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/send_test_jp_entry6");
	}
	if (_router->add_handler("pim/0.1/send_test_assert4", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_send_test_assert4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/send_test_assert4");
	}
	if (_router->add_handler("pim/0.1/send_test_assert6", 
	    callback(this, &XrlPimTargetBase::handle_pim_0_1_send_test_assert6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://pim/pim/0.1/send_test_assert6");
	}
    }

    void remove_handlers()
    {
	_router->remove_handler("common/0.1/get_target_name");
	_router->remove_handler("common/0.1/get_version");
	_router->remove_handler("cli_processor/0.1/process_command");
	_router->remove_handler("mfea_client/0.1/new_vif");
	_router->remove_handler("mfea_client/0.1/delete_vif");
	_router->remove_handler("mfea_client/0.1/add_vif_addr4");
	_router->remove_handler("mfea_client/0.1/add_vif_addr6");
	_router->remove_handler("mfea_client/0.1/delete_vif_addr4");
	_router->remove_handler("mfea_client/0.1/delete_vif_addr6");
	_router->remove_handler("mfea_client/0.1/set_vif_flags");
	_router->remove_handler("mfea_client/0.1/set_vif_done");
	_router->remove_handler("mfea_client/0.1/set_all_vifs_done");
	_router->remove_handler("mfea_client/0.1/is_vif_setup_completed");
	_router->remove_handler("mfea_client/0.1/recv_protocol_message4");
	_router->remove_handler("mfea_client/0.1/recv_protocol_message6");
	_router->remove_handler("mfea_client/0.1/recv_kernel_signal_message4");
	_router->remove_handler("mfea_client/0.1/recv_kernel_signal_message6");
	_router->remove_handler("mfea_client/0.1/add_mrib4");
	_router->remove_handler("mfea_client/0.1/add_mrib6");
	_router->remove_handler("mfea_client/0.1/delete_mrib4");
	_router->remove_handler("mfea_client/0.1/delete_mrib6");
	_router->remove_handler("mfea_client/0.1/set_mrib_done");
	_router->remove_handler("mfea_client/0.1/recv_dataflow_signal4");
	_router->remove_handler("mfea_client/0.1/recv_dataflow_signal6");
	_router->remove_handler("mld6igmp_client/0.1/add_membership4");
	_router->remove_handler("mld6igmp_client/0.1/add_membership6");
	_router->remove_handler("mld6igmp_client/0.1/delete_membership4");
	_router->remove_handler("mld6igmp_client/0.1/delete_membership6");
	_router->remove_handler("pim/0.1/enable_vif");
	_router->remove_handler("pim/0.1/disable_vif");
	_router->remove_handler("pim/0.1/start_vif");
	_router->remove_handler("pim/0.1/stop_vif");
	_router->remove_handler("pim/0.1/enable_all_vifs");
	_router->remove_handler("pim/0.1/disable_all_vifs");
	_router->remove_handler("pim/0.1/start_all_vifs");
	_router->remove_handler("pim/0.1/stop_all_vifs");
	_router->remove_handler("pim/0.1/enable_pim");
	_router->remove_handler("pim/0.1/disable_pim");
	_router->remove_handler("pim/0.1/enable_cli");
	_router->remove_handler("pim/0.1/disable_cli");
	_router->remove_handler("pim/0.1/start_pim");
	_router->remove_handler("pim/0.1/stop_pim");
	_router->remove_handler("pim/0.1/start_cli");
	_router->remove_handler("pim/0.1/stop_cli");
	_router->remove_handler("pim/0.1/enable_bsr");
	_router->remove_handler("pim/0.1/disable_bsr");
	_router->remove_handler("pim/0.1/start_bsr");
	_router->remove_handler("pim/0.1/stop_bsr");
	_router->remove_handler("pim/0.1/add_config_cand_bsr_by_vif_name4");
	_router->remove_handler("pim/0.1/add_config_cand_bsr_by_vif_name6");
	_router->remove_handler("pim/0.1/add_config_cand_bsr_by_addr4");
	_router->remove_handler("pim/0.1/add_config_cand_bsr_by_addr6");
	_router->remove_handler("pim/0.1/delete_config_cand_bsr4");
	_router->remove_handler("pim/0.1/delete_config_cand_bsr6");
	_router->remove_handler("pim/0.1/add_config_cand_rp_by_vif_name4");
	_router->remove_handler("pim/0.1/add_config_cand_rp_by_vif_name6");
	_router->remove_handler("pim/0.1/add_config_cand_rp_by_addr4");
	_router->remove_handler("pim/0.1/add_config_cand_rp_by_addr6");
	_router->remove_handler("pim/0.1/delete_config_cand_rp_by_vif_name4");
	_router->remove_handler("pim/0.1/delete_config_cand_rp_by_vif_name6");
	_router->remove_handler("pim/0.1/delete_config_cand_rp_by_addr4");
	_router->remove_handler("pim/0.1/delete_config_cand_rp_by_addr6");
	_router->remove_handler("pim/0.1/add_config_rp4");
	_router->remove_handler("pim/0.1/add_config_rp6");
	_router->remove_handler("pim/0.1/delete_config_rp4");
	_router->remove_handler("pim/0.1/delete_config_rp6");
	_router->remove_handler("pim/0.1/config_rp_done");
	_router->remove_handler("pim/0.1/get_vif_proto_version");
	_router->remove_handler("pim/0.1/set_vif_proto_version");
	_router->remove_handler("pim/0.1/reset_vif_proto_version");
	_router->remove_handler("pim/0.1/get_vif_hello_triggered_delay");
	_router->remove_handler("pim/0.1/set_vif_hello_triggered_delay");
	_router->remove_handler("pim/0.1/reset_vif_hello_triggered_delay");
	_router->remove_handler("pim/0.1/get_vif_hello_period");
	_router->remove_handler("pim/0.1/set_vif_hello_period");
	_router->remove_handler("pim/0.1/reset_vif_hello_period");
	_router->remove_handler("pim/0.1/get_vif_hello_holdtime");
	_router->remove_handler("pim/0.1/set_vif_hello_holdtime");
	_router->remove_handler("pim/0.1/reset_vif_hello_holdtime");
	_router->remove_handler("pim/0.1/get_vif_dr_priority");
	_router->remove_handler("pim/0.1/set_vif_dr_priority");
	_router->remove_handler("pim/0.1/reset_vif_dr_priority");
	_router->remove_handler("pim/0.1/get_vif_lan_delay");
	_router->remove_handler("pim/0.1/set_vif_lan_delay");
	_router->remove_handler("pim/0.1/reset_vif_lan_delay");
	_router->remove_handler("pim/0.1/get_vif_override_interval");
	_router->remove_handler("pim/0.1/set_vif_override_interval");
	_router->remove_handler("pim/0.1/reset_vif_override_interval");
	_router->remove_handler("pim/0.1/get_vif_is_tracking_support_disabled");
	_router->remove_handler("pim/0.1/set_vif_is_tracking_support_disabled");
	_router->remove_handler("pim/0.1/reset_vif_is_tracking_support_disabled");
	_router->remove_handler("pim/0.1/get_vif_accept_nohello_neighbors");
	_router->remove_handler("pim/0.1/set_vif_accept_nohello_neighbors");
	_router->remove_handler("pim/0.1/reset_vif_accept_nohello_neighbors");
	_router->remove_handler("pim/0.1/get_vif_join_prune_period");
	_router->remove_handler("pim/0.1/set_vif_join_prune_period");
	_router->remove_handler("pim/0.1/reset_vif_join_prune_period");
	_router->remove_handler("pim/0.1/enable_log_trace");
	_router->remove_handler("pim/0.1/disable_log_trace");
	_router->remove_handler("pim/0.1/add_test_jp_entry4");
	_router->remove_handler("pim/0.1/add_test_jp_entry6");
	_router->remove_handler("pim/0.1/send_test_jp_entry4");
	_router->remove_handler("pim/0.1/send_test_jp_entry6");
	_router->remove_handler("pim/0.1/send_test_assert4");
	_router->remove_handler("pim/0.1/send_test_assert6");
    }
};

#endif /* __XRL_INTERFACES_PIM_BASE_HH__ */
