/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 *
 * $XORP: xorp/xrl/targets/rip4.xrls,v 1.4 2004/01/09 00:17:05 hodson Exp $
 */

/**
 *  Get name of Xrl Target
 */
finder://rip4/common/0.1/get_target_name->name:txt

/**
 *  Get version string from Xrl Target
 */
finder://rip4/common/0.1/get_version->version:txt

/**
 *  Get status of Xrl Target
 */
finder://rip4/common/0.1/get_status->status:u32&reason:txt

/**
 *  Request clean shutdown of Xrl Target
 */
finder://rip4/common/0.1/shutdown

/**
 *  Announce target birth.
 */
finder://rip4/finder_event_observer/0.1/xrl_target_birth?target_class:txt&target_instance:txt

/**
 *  Announce target death.
 */
finder://rip4/finder_event_observer/0.1/xrl_target_death?target_class:txt&target_instance:txt

/**
 *  Add an address to run RIP process on. The addition of address is not
 *  instantaneous, RIP has to instantiate state in the FEA to send and receive
 *  packets. Once instantiated the address must be explicitly enabled with
 *  set_rip_address_enabled.
 *
 *  @param ifname the interface that owns vif that has address.
 *
 *  @param vifname virtual interface owning address.
 *
 *  @param addr the address to be added.
 */
finder://rip4/rip4/0.1/add_rip_address?ifname:txt&vifname:txt&addr:ipv4

/**
 *  Remove an address RIP process is running on.
 *
 *  @param ifname the interface that owns vif that has address.
 *
 *  @param vifname virtual interface owning address.
 *
 *  @param addr the address to be removed.
 */
finder://rip4/rip4/0.1/remove_rip_address?ifname:txt&vifname:txt&addr:ipv4

finder://rip4/rip4/0.1/set_rip_address_enabled?ifname:txt&vifname:txt&addr:ipv4&enabled:bool

finder://rip4/rip4/0.1/get_rip_address_enabled?ifname:txt&vifname:txt&addr:ipv4->enabled:bool

/**
 *  Get a textual description of the status of address RIP is running upon.
 *
 *  @param ifname the interface that owns vif that has the address.
 *
 *  @param vifname virtual interface owns the address.
 *
 *  @param addr the address to query.
 */
finder://rip4/rip4/0.1/get_rip_address_status?ifname:txt&vifname:txt&addr:ipv4->status:txt

/**
 *  Add a static route.
 *
 *  @param network route target.
 *
 *  @param nexthop path to direct packets for
 *
 *  @param cost RIP cost [0--15].
 *
 *  @ref network to.
 */
finder://rip4/rip4/0.1/add_static_route?network:ipv4net&nexthop:ipv4&cost:u32

/**
 *  Remove static route.
 *
 *  @param network route target. This method will fail if network was not
 *  previously added with add_static_route.
 */
finder://rip4/rip4/0.1/delete_static_route?network:ipv4net

/**
 *  Method invoked by target implementing socket4/0.1 when a packet arrives
 *  from an IPv4 source.
 *
 *  @param sockid the identifier associated with socket where error occurred.
 *
 *  @param src_host the originating host.
 *
 *  @param src_port the originating IP port.
 *
 *  @param data the data received.
 */
finder://rip4/socket4_user/0.1/recv_event?sockid:txt&src_host:ipv4&src_port:u32&data:binary

/**
 *  Method invoked by target implementing socket4/0.1 when a connection request
 *  is received from an IPv4 source.
 */
finder://rip4/socket4_user/0.1/connect_event?sockid:txt&src_host:ipv4&src_port:u32&new_sockid:txt->accept:bool

/**
 *  Method invoked by target implementing socket4/0.1 when an error occurs.
 *
 *  @param sockid the identifier associated with socket where error occurred.
 *
 *  @param error a textual description of the error.
 *
 *  @param fatal indication of whether socket is shutdown because of error.
 */
finder://rip4/socket4_user/0.1/error_event?sockid:txt&error:txt&fatal:bool

/**
 *  Method invoked by target implementing socket4/0.1 when a socket is forcibly
 *  closed. This would typically happen when the address the socket is bound to
 *  is removed from an interface. This method is not called if the socket is
 *  closed through socket/0.1/close.
 */
finder://rip4/socket4_user/0.1/close_event?sockid:txt&reason:txt

