/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/tgt-gen'.
 */

#ident "$XORP: xorp/xrl/targets/cli_base.cc,v 1.4 2003/03/10 23:01:32 hodson Exp $"


#include "cli_base.hh"

const XrlCmdError
XrlCliTargetBase::handle_common_0_1_get_target_name(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/get_target_name", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string name; 
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_target_name failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("name", name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlCliTargetBase::handle_common_0_1_get_version(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/get_version", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string version; 
    try {
	XrlCmdError e = common_0_1_get_version(
	    version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_version failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("version", version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlCliTargetBase::handle_cli_manager_0_1_enable_cli(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling cli_manager/0.1/enable_cli", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_enable_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_manager/0.1/enable_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlCliTargetBase::handle_cli_manager_0_1_disable_cli(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling cli_manager/0.1/disable_cli", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_disable_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_manager/0.1/disable_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlCliTargetBase::handle_cli_manager_0_1_start_cli(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling cli_manager/0.1/start_cli", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_start_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_manager/0.1/start_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlCliTargetBase::handle_cli_manager_0_1_stop_cli(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling cli_manager/0.1/stop_cli", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_stop_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_manager/0.1/stop_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlCliTargetBase::handle_cli_manager_0_1_add_enable_cli_access_from_subnet4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling cli_manager/0.1/add_enable_cli_access_from_subnet4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_add_enable_cli_access_from_subnet4(
	    xrl.const_args().get_ipv4net("subnet_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_manager/0.1/add_enable_cli_access_from_subnet4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlCliTargetBase::handle_cli_manager_0_1_add_enable_cli_access_from_subnet6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling cli_manager/0.1/add_enable_cli_access_from_subnet6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_add_enable_cli_access_from_subnet6(
	    xrl.const_args().get_ipv6net("subnet_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_manager/0.1/add_enable_cli_access_from_subnet6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlCliTargetBase::handle_cli_manager_0_1_delete_enable_cli_access_from_subnet4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling cli_manager/0.1/delete_enable_cli_access_from_subnet4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_delete_enable_cli_access_from_subnet4(
	    xrl.const_args().get_ipv4net("subnet_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_manager/0.1/delete_enable_cli_access_from_subnet4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlCliTargetBase::handle_cli_manager_0_1_delete_enable_cli_access_from_subnet6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling cli_manager/0.1/delete_enable_cli_access_from_subnet6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_delete_enable_cli_access_from_subnet6(
	    xrl.const_args().get_ipv6net("subnet_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_manager/0.1/delete_enable_cli_access_from_subnet6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlCliTargetBase::handle_cli_manager_0_1_add_disable_cli_access_from_subnet4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling cli_manager/0.1/add_disable_cli_access_from_subnet4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_add_disable_cli_access_from_subnet4(
	    xrl.const_args().get_ipv4net("subnet_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_manager/0.1/add_disable_cli_access_from_subnet4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlCliTargetBase::handle_cli_manager_0_1_add_disable_cli_access_from_subnet6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling cli_manager/0.1/add_disable_cli_access_from_subnet6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_add_disable_cli_access_from_subnet6(
	    xrl.const_args().get_ipv6net("subnet_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_manager/0.1/add_disable_cli_access_from_subnet6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlCliTargetBase::handle_cli_manager_0_1_delete_disable_cli_access_from_subnet4(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling cli_manager/0.1/delete_disable_cli_access_from_subnet4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_delete_disable_cli_access_from_subnet4(
	    xrl.const_args().get_ipv4net("subnet_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_manager/0.1/delete_disable_cli_access_from_subnet4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlCliTargetBase::handle_cli_manager_0_1_delete_disable_cli_access_from_subnet6(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling cli_manager/0.1/delete_disable_cli_access_from_subnet6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_delete_disable_cli_access_from_subnet6(
	    xrl.const_args().get_ipv6net("subnet_addr"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_manager/0.1/delete_disable_cli_access_from_subnet6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlCliTargetBase::handle_cli_manager_0_1_add_cli_command(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 6) { 
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling cli_manager/0.1/add_cli_command", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_add_cli_command(
	    xrl.const_args().get_string("processor_name"), 
	    xrl.const_args().get_string("command_name"), 
	    xrl.const_args().get_string("command_help"), 
	    xrl.const_args().get_bool("is_command_cd"), 
	    xrl.const_args().get_string("command_cd_prompt"), 
	    xrl.const_args().get_bool("is_command_processor"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_manager/0.1/add_cli_command failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlCliTargetBase::handle_cli_manager_0_1_delete_cli_command(const Xrl& xrl, XrlArgs* /* args */)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling cli_manager/0.1/delete_cli_command", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = cli_manager_0_1_delete_cli_command(
	    xrl.const_args().get_string("processor_name"), 
	    xrl.const_args().get_string("command_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_manager/0.1/delete_cli_command failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

