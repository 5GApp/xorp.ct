/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */

#ident "$XORP: xorp/xrl/targets/mfea_base.cc,v 1.11 2003/06/19 00:44:46 hodson Exp $"


#include "mfea_base.hh"

const XrlCmdError
XrlMfeaTargetBase::handle_common_0_1_get_target_name(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/get_target_name",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string name;
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_target_name failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("name", name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_common_0_1_get_version(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/get_version",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string version;
    try {
	XrlCmdError e = common_0_1_get_version(
	    version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_version failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("version", version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_common_0_1_get_status(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/get_status",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t status;
    string reason;
    try {
	XrlCmdError e = common_0_1_get_status(
	    status,
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_status failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("status", status);
	pxa_outputs->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_common_0_1_shutdown(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/shutdown",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_shutdown();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/shutdown failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_cli_processor_0_1_process_command(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling cli_processor/0.1/process_command",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string ret_processor_name;
    string ret_cli_term_name;
    uint32_t ret_cli_session_id;
    string ret_command_output;
    try {
	XrlCmdError e = cli_processor_0_1_process_command(
	    xa_inputs.get_string("processor_name"),
	    xa_inputs.get_string("cli_term_name"),
	    xa_inputs.get_uint32("cli_session_id"),
	    xa_inputs.get_string("command_name"),
	    xa_inputs.get_string("command_args"),
	    ret_processor_name,
	    ret_cli_term_name,
	    ret_cli_session_id,
	    ret_command_output);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_processor/0.1/process_command failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("ret_processor_name", ret_processor_name);
	pxa_outputs->add("ret_cli_term_name", ret_cli_term_name);
	pxa_outputs->add("ret_cli_session_id", ret_cli_session_id);
	pxa_outputs->add("ret_command_output", ret_command_output);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_have_multicast_routing4(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/have_multicast_routing4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool result;
    try {
	XrlCmdError e = mfea_0_1_have_multicast_routing4(
	    result);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/have_multicast_routing4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("result", result);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_have_multicast_routing6(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/have_multicast_routing6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool result;
    try {
	XrlCmdError e = mfea_0_1_have_multicast_routing6(
	    result);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/have_multicast_routing6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("result", result);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_add_protocol4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/add_protocol4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_add_protocol4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/add_protocol4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_add_protocol6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/add_protocol6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_add_protocol6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/add_protocol6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_protocol4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/delete_protocol4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_delete_protocol4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_protocol4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_protocol6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/delete_protocol6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_delete_protocol6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_protocol6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_start_protocol_vif4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mfea/0.1/start_protocol_vif4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_start_protocol_vif4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/start_protocol_vif4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_start_protocol_vif6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mfea/0.1/start_protocol_vif6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_start_protocol_vif6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/start_protocol_vif6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_stop_protocol_vif4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mfea/0.1/stop_protocol_vif4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_stop_protocol_vif4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/stop_protocol_vif4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_stop_protocol_vif6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mfea/0.1/stop_protocol_vif6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_stop_protocol_vif6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/stop_protocol_vif6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_allow_signal_messages(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling mfea/0.1/allow_signal_messages",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_allow_signal_messages(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_bool("is_allow"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/allow_signal_messages failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_allow_mrib_messages(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling mfea/0.1/allow_mrib_messages",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_allow_mrib_messages(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_bool("is_allow"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/allow_mrib_messages failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_join_multicast_group4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling mfea/0.1/join_multicast_group4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_join_multicast_group4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"),
	    xa_inputs.get_ipv4("group_address"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/join_multicast_group4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_join_multicast_group6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling mfea/0.1/join_multicast_group6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_join_multicast_group6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"),
	    xa_inputs.get_ipv6("group_address"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/join_multicast_group6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_leave_multicast_group4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling mfea/0.1/leave_multicast_group4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_leave_multicast_group4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"),
	    xa_inputs.get_ipv4("group_address"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/leave_multicast_group4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_leave_multicast_group6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 6) {
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling mfea/0.1/leave_multicast_group6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_leave_multicast_group6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"),
	    xa_inputs.get_ipv6("group_address"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/leave_multicast_group6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_add_mfc4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 8) {
	XLOG_ERROR("Wrong number of arguments (%u != 8) handling mfea/0.1/add_mfc4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_add_mfc4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv4("source_address"),
	    xa_inputs.get_ipv4("group_address"),
	    xa_inputs.get_uint32("iif_vif_index"),
	    xa_inputs.get_binary("oiflist"),
	    xa_inputs.get_binary("oiflist_disable_wrongvif"),
	    xa_inputs.get_uint32("max_vifs_oiflist"),
	    xa_inputs.get_ipv4("rp_address"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/add_mfc4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_add_mfc6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 8) {
	XLOG_ERROR("Wrong number of arguments (%u != 8) handling mfea/0.1/add_mfc6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_add_mfc6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv6("source_address"),
	    xa_inputs.get_ipv6("group_address"),
	    xa_inputs.get_uint32("iif_vif_index"),
	    xa_inputs.get_binary("oiflist"),
	    xa_inputs.get_binary("oiflist_disable_wrongvif"),
	    xa_inputs.get_uint32("max_vifs_oiflist"),
	    xa_inputs.get_ipv6("rp_address"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/add_mfc6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_mfc4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/delete_mfc4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_delete_mfc4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv4("source_address"),
	    xa_inputs.get_ipv4("group_address"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_mfc4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_mfc6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/delete_mfc6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_delete_mfc6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv6("source_address"),
	    xa_inputs.get_ipv6("group_address"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_mfc6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_send_protocol_message4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 11) {
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea/0.1/send_protocol_message4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_send_protocol_message4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"),
	    xa_inputs.get_ipv4("source_address"),
	    xa_inputs.get_ipv4("dest_address"),
	    xa_inputs.get_int32("ip_ttl"),
	    xa_inputs.get_int32("ip_tos"),
	    xa_inputs.get_bool("is_router_alert"),
	    xa_inputs.get_binary("protocol_message"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/send_protocol_message4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_send_protocol_message6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 11) {
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea/0.1/send_protocol_message6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_send_protocol_message6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_string("protocol_name"),
	    xa_inputs.get_uint32("protocol_id"),
	    xa_inputs.get_string("vif_name"),
	    xa_inputs.get_uint32("vif_index"),
	    xa_inputs.get_ipv6("source_address"),
	    xa_inputs.get_ipv6("dest_address"),
	    xa_inputs.get_int32("ip_ttl"),
	    xa_inputs.get_int32("ip_tos"),
	    xa_inputs.get_bool("is_router_alert"),
	    xa_inputs.get_binary("protocol_message"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/send_protocol_message6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_add_dataflow_monitor4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 11) {
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea/0.1/add_dataflow_monitor4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_add_dataflow_monitor4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv4("source_address"),
	    xa_inputs.get_ipv4("group_address"),
	    xa_inputs.get_uint32("threshold_interval_sec"),
	    xa_inputs.get_uint32("threshold_interval_usec"),
	    xa_inputs.get_uint32("threshold_packets"),
	    xa_inputs.get_uint32("threshold_bytes"),
	    xa_inputs.get_bool("is_threshold_in_packets"),
	    xa_inputs.get_bool("is_threshold_in_bytes"),
	    xa_inputs.get_bool("is_geq_upcall"),
	    xa_inputs.get_bool("is_leq_upcall"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/add_dataflow_monitor4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_add_dataflow_monitor6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 11) {
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea/0.1/add_dataflow_monitor6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_add_dataflow_monitor6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv6("source_address"),
	    xa_inputs.get_ipv6("group_address"),
	    xa_inputs.get_uint32("threshold_interval_sec"),
	    xa_inputs.get_uint32("threshold_interval_usec"),
	    xa_inputs.get_uint32("threshold_packets"),
	    xa_inputs.get_uint32("threshold_bytes"),
	    xa_inputs.get_bool("is_threshold_in_packets"),
	    xa_inputs.get_bool("is_threshold_in_bytes"),
	    xa_inputs.get_bool("is_geq_upcall"),
	    xa_inputs.get_bool("is_leq_upcall"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/add_dataflow_monitor6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_dataflow_monitor4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 11) {
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea/0.1/delete_dataflow_monitor4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_delete_dataflow_monitor4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv4("source_address"),
	    xa_inputs.get_ipv4("group_address"),
	    xa_inputs.get_uint32("threshold_interval_sec"),
	    xa_inputs.get_uint32("threshold_interval_usec"),
	    xa_inputs.get_uint32("threshold_packets"),
	    xa_inputs.get_uint32("threshold_bytes"),
	    xa_inputs.get_bool("is_threshold_in_packets"),
	    xa_inputs.get_bool("is_threshold_in_bytes"),
	    xa_inputs.get_bool("is_geq_upcall"),
	    xa_inputs.get_bool("is_leq_upcall"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_dataflow_monitor4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_dataflow_monitor6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 11) {
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea/0.1/delete_dataflow_monitor6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_delete_dataflow_monitor6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv6("source_address"),
	    xa_inputs.get_ipv6("group_address"),
	    xa_inputs.get_uint32("threshold_interval_sec"),
	    xa_inputs.get_uint32("threshold_interval_usec"),
	    xa_inputs.get_uint32("threshold_packets"),
	    xa_inputs.get_uint32("threshold_bytes"),
	    xa_inputs.get_bool("is_threshold_in_packets"),
	    xa_inputs.get_bool("is_threshold_in_bytes"),
	    xa_inputs.get_bool("is_geq_upcall"),
	    xa_inputs.get_bool("is_leq_upcall"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_dataflow_monitor6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_all_dataflow_monitor4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/delete_all_dataflow_monitor4",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_delete_all_dataflow_monitor4(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv4("source_address"),
	    xa_inputs.get_ipv4("group_address"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_all_dataflow_monitor4 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_delete_all_dataflow_monitor6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea/0.1/delete_all_dataflow_monitor6",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_delete_all_dataflow_monitor6(
	    xa_inputs.get_string("xrl_sender_name"),
	    xa_inputs.get_ipv6("source_address"),
	    xa_inputs.get_ipv6("group_address"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/delete_all_dataflow_monitor6 failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_enable_vif(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mfea/0.1/enable_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_enable_vif(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/enable_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_disable_vif(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mfea/0.1/disable_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_disable_vif(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/disable_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_start_vif(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mfea/0.1/start_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_start_vif(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/start_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_stop_vif(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mfea/0.1/stop_vif",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_stop_vif(
	    xa_inputs.get_string("vif_name"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/stop_vif failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_enable_all_vifs(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/enable_all_vifs",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_enable_all_vifs();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/enable_all_vifs failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_disable_all_vifs(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/disable_all_vifs",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_disable_all_vifs();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/disable_all_vifs failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_start_all_vifs(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/start_all_vifs",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_start_all_vifs();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/start_all_vifs failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_stop_all_vifs(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/stop_all_vifs",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_stop_all_vifs();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/stop_all_vifs failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_enable_mfea(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/enable_mfea",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_enable_mfea();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/enable_mfea failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_disable_mfea(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/disable_mfea",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_disable_mfea();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/disable_mfea failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_enable_cli(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/enable_cli",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_enable_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/enable_cli failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_disable_cli(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/disable_cli",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_disable_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/disable_cli failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_start_mfea(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/start_mfea",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_start_mfea();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/start_mfea failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_stop_mfea(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/stop_mfea",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_stop_mfea();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/stop_mfea failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_start_cli(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/start_cli",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_start_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/start_cli failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_stop_cli(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/stop_cli",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_stop_cli();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/stop_cli failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_enable_log_trace(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/enable_log_trace",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_enable_log_trace();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/enable_log_trace failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_disable_log_trace(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/disable_log_trace",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_disable_log_trace();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/disable_log_trace failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_get_mrib_table_default_metric_preference(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/get_mrib_table_default_metric_preference",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t metric_preference;
    try {
	XrlCmdError e = mfea_0_1_get_mrib_table_default_metric_preference(
	    metric_preference);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/get_mrib_table_default_metric_preference failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("metric_preference", metric_preference);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_set_mrib_table_default_metric_preference(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mfea/0.1/set_mrib_table_default_metric_preference",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_set_mrib_table_default_metric_preference(
	    xa_inputs.get_uint32("metric_preference"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/set_mrib_table_default_metric_preference failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_reset_mrib_table_default_metric_preference(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/reset_mrib_table_default_metric_preference",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_reset_mrib_table_default_metric_preference();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/reset_mrib_table_default_metric_preference failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_get_mrib_table_default_metric(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/get_mrib_table_default_metric",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t metric;
    try {
	XrlCmdError e = mfea_0_1_get_mrib_table_default_metric(
	    metric);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/get_mrib_table_default_metric failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("metric", metric);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_set_mrib_table_default_metric(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mfea/0.1/set_mrib_table_default_metric",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_set_mrib_table_default_metric(
	    xa_inputs.get_uint32("metric"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/set_mrib_table_default_metric failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_mfea_0_1_reset_mrib_table_default_metric(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea/0.1/reset_mrib_table_default_metric",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = mfea_0_1_reset_mrib_table_default_metric();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea/0.1/reset_mrib_table_default_metric failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_fea_ifmgr_client_0_1_interface_update(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling fea_ifmgr_client/0.1/interface_update",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_client_0_1_interface_update(
	    xa_inputs.get_string("ifname"),
	    xa_inputs.get_uint32("event"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fea_ifmgr_client/0.1/interface_update failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_fea_ifmgr_client_0_1_vif_update(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling fea_ifmgr_client/0.1/vif_update",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_client_0_1_vif_update(
	    xa_inputs.get_string("ifname"),
	    xa_inputs.get_string("vifname"),
	    xa_inputs.get_uint32("event"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fea_ifmgr_client/0.1/vif_update failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_fea_ifmgr_client_0_1_vifaddr4_update(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling fea_ifmgr_client/0.1/vifaddr4_update",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_client_0_1_vifaddr4_update(
	    xa_inputs.get_string("ifname"),
	    xa_inputs.get_string("vifname"),
	    xa_inputs.get_ipv4("addr"),
	    xa_inputs.get_uint32("event"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fea_ifmgr_client/0.1/vifaddr4_update failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMfeaTargetBase::handle_fea_ifmgr_client_0_1_vifaddr6_update(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != 4) handling fea_ifmgr_client/0.1/vifaddr6_update",
            (uint32_t)xa_inputs.size());
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_client_0_1_vifaddr6_update(
	    xa_inputs.get_string("ifname"),
	    xa_inputs.get_string("vifname"),
	    xa_inputs.get_ipv6("addr"),
	    xa_inputs.get_uint32("event"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for fea_ifmgr_client/0.1/vifaddr6_update failed: %s",
            		 e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

