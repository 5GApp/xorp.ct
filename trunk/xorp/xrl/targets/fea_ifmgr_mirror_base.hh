/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 *
 * $XORP: xorp/xrl/targets/fea_ifmgr_mirror_base.hh,v 1.3 2003/09/10 22:28:23 hodson Exp $
 */


#ifndef __XRL_INTERFACES_FEA_IFMGR_MIRROR_BASE_HH__
#define __XRL_INTERFACES_FEA_IFMGR_MIRROR_BASE_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XrlFeaIfmgrMirrorTarget"

#include "libxorp/xlog.h"
#include "libxipc/xrl_cmd_map.hh"

class XrlFeaIfmgrMirrorTargetBase {
protected:
    XrlCmdMap* _cmds;

public:
    XrlFeaIfmgrMirrorTargetBase(XrlCmdMap* cmds) : _cmds(cmds) { add_handlers(); }
    virtual ~XrlFeaIfmgrMirrorTargetBase() { remove_handlers(); }

    inline const string& name() const { return _cmds->name(); }
    inline const char* version() const { return "fea_ifmgr_mirror/0.0"; }

protected:

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Get name of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_target_name(
	// Output values, 
	string&	name) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Get version string from Xrl Target
     */
    virtual XrlCmdError common_0_1_get_version(
	// Output values, 
	string&	version) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Get status of Xrl Target
     */
    virtual XrlCmdError common_0_1_get_status(
	// Output values, 
	uint32_t&	status, 
	string&	reason) = 0;

    /**
     *  Pure-virtual function that needs to be implemented to:
     *  
     *  Request clean shutdown of Xrl Target
     */
    virtual XrlCmdError common_0_1_shutdown() = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_interface_add(
	// Input values, 
	const string&	ifname) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_interface_remove(
	// Input values, 
	const string&	ifname) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_interface_set_enabled(
	// Input values, 
	const string&	ifname, 
	const bool&	enabled) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_interface_set_mtu(
	// Input values, 
	const string&	ifname, 
	const uint32_t&	mtu_bytes) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_interface_set_mac(
	// Input values, 
	const string&	ifname, 
	const Mac&	mac) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_vif_add(
	// Input values, 
	const string&	ifname, 
	const string&	vifname) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_vif_remove(
	// Input values, 
	const string&	ifname, 
	const string&	vifname) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_vif_set_enabled(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const bool&	enabled) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_vif_set_multicast_capable(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const bool&	capable) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_vif_set_broadcast_capable(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const bool&	capable) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_vif_set_p2p_capable(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const bool&	capable) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_vif_set_loopback(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const bool&	loopback) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_vif_set_pif_index(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const uint32_t&	index) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_ipv4_add(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const IPv4&	addr) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_ipv4_remove(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const IPv4&	addr) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_ipv4_set_prefix(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const IPv4&	addr, 
	const uint32_t&	prefix_len) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_ipv4_set_enabled(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const IPv4&	addr, 
	const bool&	enabled) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_ipv4_set_multicast_capable(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const IPv4&	addr, 
	const bool&	capable) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_ipv4_set_loopback(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const IPv4&	addr, 
	const bool&	loopback) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_ipv4_set_broadcast(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const IPv4&	addr, 
	const IPv4&	oaddr) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_ipv4_set_endpoint(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const IPv4&	addr, 
	const IPv4&	oaddr) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_ipv6_add(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const IPv6&	addr) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_ipv6_remove(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const IPv6&	addr) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_ipv6_set_prefix(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const IPv6&	addr, 
	const uint32_t&	prefix_len) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_ipv6_set_enabled(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const IPv6&	addr, 
	const bool&	enabled) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_ipv6_set_loopback(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const IPv6&	addr, 
	const bool&	loopback) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_ipv6_set_multicast_capable(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const IPv6&	addr, 
	const bool&	capable) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_ipv6_set_endpoint(
	// Input values, 
	const string&	ifname, 
	const string&	vifname, 
	const IPv6&	addr, 
	const IPv6&	oaddr) = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_hint_tree_complete() = 0;

    virtual XrlCmdError fea_ifmgr_mirror_0_1_hint_updates_made() = 0;

private:
    const XrlCmdError handle_common_0_1_get_target_name(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_common_0_1_get_version(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_common_0_1_get_status(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_common_0_1_shutdown(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_interface_add(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_interface_remove(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_interface_set_enabled(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_interface_set_mtu(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_interface_set_mac(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_vif_add(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_vif_remove(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_vif_set_enabled(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_vif_set_multicast_capable(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_vif_set_broadcast_capable(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_vif_set_p2p_capable(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_vif_set_loopback(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_vif_set_pif_index(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_ipv4_add(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_ipv4_remove(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_ipv4_set_prefix(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_ipv4_set_enabled(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_ipv4_set_multicast_capable(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_ipv4_set_loopback(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_ipv4_set_broadcast(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_ipv4_set_endpoint(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_ipv6_add(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_ipv6_remove(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_ipv6_set_prefix(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_ipv6_set_enabled(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_ipv6_set_loopback(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_ipv6_set_multicast_capable(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_ipv6_set_endpoint(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_hint_tree_complete(const XrlArgs& in, XrlArgs* out);

    const XrlCmdError handle_fea_ifmgr_mirror_0_1_hint_updates_made(const XrlArgs& in, XrlArgs* out);

    void add_handlers()
    {
	if (_cmds->add_handler("common/0.1/get_target_name", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_get_target_name)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/common/0.1/get_target_name");
	}
	if (_cmds->add_handler("common/0.1/get_version", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_get_version)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/common/0.1/get_version");
	}
	if (_cmds->add_handler("common/0.1/get_status", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_get_status)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/common/0.1/get_status");
	}
	if (_cmds->add_handler("common/0.1/shutdown", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_shutdown)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/common/0.1/shutdown");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/interface_add", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_add)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/interface_add");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/interface_remove", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_remove)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/interface_remove");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/interface_set_enabled", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_enabled)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/interface_set_enabled");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/interface_set_mtu", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_mtu)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/interface_set_mtu");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/interface_set_mac", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_mac)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/interface_set_mac");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/vif_add", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_add)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/vif_add");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/vif_remove", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_remove)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/vif_remove");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/vif_set_enabled", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_enabled)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/vif_set_enabled");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/vif_set_multicast_capable", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_multicast_capable)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/vif_set_multicast_capable");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/vif_set_broadcast_capable", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_broadcast_capable)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/vif_set_broadcast_capable");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/vif_set_p2p_capable", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_p2p_capable)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/vif_set_p2p_capable");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/vif_set_loopback", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_loopback)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/vif_set_loopback");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/vif_set_pif_index", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_pif_index)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/vif_set_pif_index");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/ipv4_add", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_add)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/ipv4_add");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/ipv4_remove", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_remove)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/ipv4_remove");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/ipv4_set_prefix", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_prefix)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/ipv4_set_prefix");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/ipv4_set_enabled", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_enabled)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/ipv4_set_enabled");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/ipv4_set_multicast_capable", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_multicast_capable)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/ipv4_set_multicast_capable");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/ipv4_set_loopback", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_loopback)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/ipv4_set_loopback");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/ipv4_set_broadcast", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_broadcast)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/ipv4_set_broadcast");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/ipv4_set_endpoint", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_endpoint)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/ipv4_set_endpoint");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/ipv6_add", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_add)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/ipv6_add");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/ipv6_remove", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_remove)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/ipv6_remove");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/ipv6_set_prefix", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_prefix)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/ipv6_set_prefix");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/ipv6_set_enabled", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_enabled)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/ipv6_set_enabled");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/ipv6_set_loopback", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_loopback)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/ipv6_set_loopback");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/ipv6_set_multicast_capable", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_multicast_capable)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/ipv6_set_multicast_capable");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/ipv6_set_endpoint", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_endpoint)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/ipv6_set_endpoint");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/hint_tree_complete", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_hint_tree_complete)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/hint_tree_complete");
	}
	if (_cmds->add_handler("fea_ifmgr_mirror/0.1/hint_updates_made", 
	    callback(this, &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_hint_updates_made)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://fea_ifmgr_mirror/fea_ifmgr_mirror/0.1/hint_updates_made");
	}
	_cmds->finalize();
    }

    void remove_handlers()
    {
	_cmds->remove_handler("common/0.1/get_target_name");
	_cmds->remove_handler("common/0.1/get_version");
	_cmds->remove_handler("common/0.1/get_status");
	_cmds->remove_handler("common/0.1/shutdown");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/interface_add");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/interface_remove");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/interface_set_enabled");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/interface_set_mtu");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/interface_set_mac");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/vif_add");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/vif_remove");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/vif_set_enabled");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/vif_set_multicast_capable");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/vif_set_broadcast_capable");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/vif_set_p2p_capable");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/vif_set_loopback");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/vif_set_pif_index");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/ipv4_add");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/ipv4_remove");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/ipv4_set_prefix");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/ipv4_set_enabled");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/ipv4_set_multicast_capable");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/ipv4_set_loopback");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/ipv4_set_broadcast");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/ipv4_set_endpoint");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/ipv6_add");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/ipv6_remove");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/ipv6_set_prefix");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/ipv6_set_enabled");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/ipv6_set_loopback");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/ipv6_set_multicast_capable");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/ipv6_set_endpoint");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/hint_tree_complete");
	_cmds->remove_handler("fea_ifmgr_mirror/0.1/hint_updates_made");
    }
};

#endif /* __XRL_INTERFACES_FEA_IFMGR_MIRROR_BASE_HH__ */
