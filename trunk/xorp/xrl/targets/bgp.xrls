/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/tgt-gen'.
 *
 * $XORP: xorp/xrl/targets/bgp.xrls,v 1.14 2002/12/04 23:13:09 atanu Exp $
 */

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  Get name of Xrl Target
 */
finder://bgp/common/0.1/get_target_name->name:txt

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  Get version string from Xrl Target
 */
finder://bgp/common/0.1/get_version->version:txt

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  Get local config
 *  
 *  @param id our BGP ID.
 */
finder://bgp/bgp/0.2/local_config?as:u32&id:ipv4

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  Set the local AS number.
 *  
 *  @param as our AS number.
 */
finder://bgp/bgp/0.2/set_local_as?as:u32

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  Set the BGP id.
 *  
 *  @param id our BGP ID.
 */
finder://bgp/bgp/0.2/set_bgpid?id:ipv4

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  Add peer.
 *  
 *  @param as the peer's AS number.
 *  
 *  @param next_hop the local next hop.
 *  
 *  @param holdtime expects traffic in this time interval.
 */
finder://bgp/bgp/0.2/add_peer?local_ip:txt&local_port:u32&peer_ip:txt&peer_port:u32&as:u32&next_hop:ipv4&holdtime:u32

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  Delete peer.
 *  
 *  @param as the peer's AS number.
 */
finder://bgp/bgp/0.2/delete_peer?local_ip:txt&local_port:u32&peer_ip:txt&peer_port:u32&as:u32

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  Enable this peer.
 */
finder://bgp/bgp/0.2/enable_peer?local_ip:txt&local_port:u32&peer_ip:txt&peer_port:u32

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  Disable this peer.
 */
finder://bgp/bgp/0.2/disable_peer?local_ip:txt&local_port:u32&peer_ip:txt&peer_port:u32

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  Set the peer state enabled or disabled.
 *  
 *  @param toggle enabled or disabled.
 */
finder://bgp/bgp/0.2/set_peer_state?local_ip:txt&local_port:u32&peer_ip:txt&peer_port:u32&toggle:bool

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  Register rib.
 *  
 *  @param name rib name.
 */
finder://bgp/bgp/0.2/register_rib?name:txt

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  add route
 *  
 *  @param origin the origin of the path information.
 *  
 *  @param next_hop the border router that should be used as a detination for
 *  the nlri.
 *  
 *  @param nlri network level reachability information.
 */
finder://bgp/bgp/0.2/add_route?origin:i32&asnum:i32&next_hop:ipv4&nlri:ipv4net

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  delete route
 *  
 *  @param nlri network level reachability information.
 */
finder://bgp/bgp/0.2/delete_route?nlri:ipv4net

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  Terminate bgp process
 */
finder://bgp/bgp/0.2/terminate

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  Set which parameters we support per peer
 */
finder://bgp/bgp/0.2/set_parameter?local_ip:txt&local_port:u32&peer_ip:txt&peer_port:u32&parameter:txt

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  Route Info Changed route_info_changed is called by the RIB on the RIB
 *  client (typically a routing protocol) that had registered an interest in
 *  the routing of an address. This can be because the metric and/or nexthop
 *  changed.
 *  
 *  @param addr base address of the subnet that was registered
 *  
 *  @param prefix_len prefix length of the subnet that was registered
 */
finder://bgp/rib_client/0.1/route_info_changed4?addr:ipv4&prefix_len:u32&nexthop:ipv4&metric:u32

finder://bgp/rib_client/0.1/route_info_changed6?addr:ipv6&prefix_len:u32&nexthop:ipv6&metric:u32

/**
 *  Pure-virtual function that needs to be implemented to:
 *  
 *  Route Info Invalid route_info_invalid is called by the RIB on the RIB
 *  client (typically a routing protocol) that had registere d an interest in
 *  the routing of an address. This can be because the information previously
 *  reported as applying no longer applies for any number of reasons. When the
 *  RIB sends this message, it has automatically de-registered interest in the
 *  route, and the client will normally need to send a register_interest
 *  request again.
 */
finder://bgp/rib_client/0.1/route_info_invalid4?addr:ipv4&prefix_len:u32

finder://bgp/rib_client/0.1/route_info_invalid6?addr:ipv6&prefix_len:u32

