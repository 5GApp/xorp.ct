/*
 * Copyright (c) 2001-2009 XORP, Inc.
 * See the XORP LICENSE.lgpl file for licensing, conditions, and warranties
 * on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */




#include "fea_ifmgr_mirror_base.hh"


const struct XrlFeaIfmgrMirrorTargetBase::handler_table XrlFeaIfmgrMirrorTargetBase::handlers[] = {
    { "common/0.1/get_target_name",
      &XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_get_target_name },
    { "common/0.1/get_version",
      &XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_get_version },
    { "common/0.1/get_status",
      &XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_get_status },
    { "common/0.1/shutdown",
      &XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_shutdown },
    { "fea_ifmgr_mirror/0.1/interface_add",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_add },
    { "fea_ifmgr_mirror/0.1/interface_remove",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_remove },
    { "fea_ifmgr_mirror/0.1/interface_set_enabled",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_enabled },
    { "fea_ifmgr_mirror/0.1/interface_set_discard",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_discard },
    { "fea_ifmgr_mirror/0.1/interface_set_unreachable",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_unreachable },
    { "fea_ifmgr_mirror/0.1/interface_set_management",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_management },
    { "fea_ifmgr_mirror/0.1/interface_set_mtu",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_mtu },
    { "fea_ifmgr_mirror/0.1/interface_set_mac",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_mac },
    { "fea_ifmgr_mirror/0.1/interface_set_pif_index",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_pif_index },
    { "fea_ifmgr_mirror/0.1/interface_set_no_carrier",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_no_carrier },
    { "fea_ifmgr_mirror/0.1/interface_set_baudrate",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_baudrate },
    { "fea_ifmgr_mirror/0.1/vif_add",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_add },
    { "fea_ifmgr_mirror/0.1/vif_remove",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_remove },
    { "fea_ifmgr_mirror/0.1/vif_set_enabled",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_enabled },
    { "fea_ifmgr_mirror/0.1/vif_set_multicast_capable",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_multicast_capable },
    { "fea_ifmgr_mirror/0.1/vif_set_broadcast_capable",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_broadcast_capable },
    { "fea_ifmgr_mirror/0.1/vif_set_p2p_capable",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_p2p_capable },
    { "fea_ifmgr_mirror/0.1/vif_set_loopback",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_loopback },
    { "fea_ifmgr_mirror/0.1/vif_set_pim_register",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_pim_register },
    { "fea_ifmgr_mirror/0.1/vif_set_pif_index",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_pif_index },
    { "fea_ifmgr_mirror/0.1/vif_set_vif_index",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_vif_index },
    { "fea_ifmgr_mirror/0.1/vif_set_vlan",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_vlan },
    { "fea_ifmgr_mirror/0.1/vif_set_vlan_id",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_vlan_id },
    { "fea_ifmgr_mirror/0.1/ipv4_add",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_add },
    { "fea_ifmgr_mirror/0.1/ipv4_remove",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_remove },
    { "fea_ifmgr_mirror/0.1/ipv4_set_prefix",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_prefix },
    { "fea_ifmgr_mirror/0.1/ipv4_set_enabled",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_enabled },
    { "fea_ifmgr_mirror/0.1/ipv4_set_multicast_capable",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_multicast_capable },
    { "fea_ifmgr_mirror/0.1/ipv4_set_loopback",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_loopback },
    { "fea_ifmgr_mirror/0.1/ipv4_set_broadcast",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_broadcast },
    { "fea_ifmgr_mirror/0.1/ipv4_set_endpoint",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_endpoint },
    { "fea_ifmgr_mirror/0.1/ipv6_add",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_add },
    { "fea_ifmgr_mirror/0.1/ipv6_remove",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_remove },
    { "fea_ifmgr_mirror/0.1/ipv6_set_prefix",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_prefix },
    { "fea_ifmgr_mirror/0.1/ipv6_set_enabled",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_enabled },
    { "fea_ifmgr_mirror/0.1/ipv6_set_loopback",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_loopback },
    { "fea_ifmgr_mirror/0.1/ipv6_set_multicast_capable",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_multicast_capable },
    { "fea_ifmgr_mirror/0.1/ipv6_set_endpoint",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_endpoint },
    { "fea_ifmgr_mirror/0.1/hint_tree_complete",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_hint_tree_complete },
    { "fea_ifmgr_mirror/0.1/hint_updates_made",
      &XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_hint_updates_made },
};

const size_t XrlFeaIfmgrMirrorTargetBase::num_handlers = (sizeof(XrlFeaIfmgrMirrorTargetBase::handlers) / sizeof(XrlFeaIfmgrMirrorTargetBase::handlers[0]));


XrlFeaIfmgrMirrorTargetBase::XrlFeaIfmgrMirrorTargetBase(XrlCmdMap* cmds)
    : _cmds(cmds)
{
    if (_cmds)
	add_handlers();
}

XrlFeaIfmgrMirrorTargetBase::~XrlFeaIfmgrMirrorTargetBase()
{
    if (_cmds)
	remove_handlers();
}

bool
XrlFeaIfmgrMirrorTargetBase::set_command_map(XrlCmdMap* cmds)
{
    if (_cmds == 0 && cmds) {
        _cmds = cmds;
        add_handlers();
        return true;
    }
    if (_cmds && cmds == 0) {
	remove_handlers();
        _cmds = cmds;
        return true;
    }
    return false;
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_get_target_name(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_target_name");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string name;
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_target_name", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("name", name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_get_version(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_version");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string version;
    try {
	XrlCmdError e = common_0_1_get_version(
	    version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("version", version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_get_status(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/get_status");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t status;
    string reason;
    try {
	XrlCmdError e = common_0_1_get_status(
	    status,
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_status", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("status", status);
	pxa_outputs->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_common_0_1_shutdown(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "common/0.1/shutdown");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_shutdown();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/shutdown", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_add(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_add");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_add(
	    xa_inputs.get(0, "ifname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_add", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_remove(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(1), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_remove");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_remove(
	    xa_inputs.get(0, "ifname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_remove", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_enabled(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_enabled");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "enabled").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_enabled", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_discard(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_discard");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_discard(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "discard").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_discard", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_unreachable(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_unreachable");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_unreachable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "unreachable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_unreachable", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_management(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_management");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_management(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "management").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_management", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_mtu(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_mtu");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_mtu(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "mtu").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_mtu", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_mac(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_mac");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_mac(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "mac").mac());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_mac", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_pif_index(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_pif_index");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_pif_index(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "pif_index").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_pif_index", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_no_carrier(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_no_carrier");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_no_carrier(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "no_carrier").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_no_carrier", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_interface_set_baudrate(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/interface_set_baudrate");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_interface_set_baudrate(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "baudrate").uint64());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/interface_set_baudrate", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_add(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_add");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_add(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_add", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_remove(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(2), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_remove");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_remove(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_remove", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_enabled(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_enabled");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "enabled").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_enabled", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_multicast_capable(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_multicast_capable");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_multicast_capable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "capable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_multicast_capable", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_broadcast_capable(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_broadcast_capable");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_broadcast_capable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "capable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_broadcast_capable", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_p2p_capable(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_p2p_capable");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_p2p_capable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "capable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_p2p_capable", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_loopback(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_loopback");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_loopback(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "loopback").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_loopback", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_pim_register(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_pim_register");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_pim_register(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "pim_register").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_pim_register", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_pif_index(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_pif_index");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_pif_index(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "pif_index").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_pif_index", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_vif_index(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_vif_index");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_vif_index(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vif_index").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_vif_index", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_vlan(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_vlan");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_vlan(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "is_vlan").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_vlan", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_vif_set_vlan_id(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/vif_set_vlan_id");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_vif_set_vlan_id(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "vlan_id").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/vif_set_vlan_id", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_add(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_add");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_add(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_add", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_remove(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_remove");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_remove(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_remove", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_prefix(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_set_prefix");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_prefix(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "prefix_len").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_set_prefix", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_enabled(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_set_enabled");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "enabled").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_set_enabled", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_multicast_capable(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_set_multicast_capable");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_multicast_capable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "capable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_set_multicast_capable", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_loopback(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_set_loopback");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_loopback(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "loopback").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_set_loopback", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_broadcast(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_set_broadcast");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_broadcast(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "broadcast_addr").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_set_broadcast", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv4_set_endpoint(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv4_set_endpoint");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv4_set_endpoint(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv4(),
	    xa_inputs.get(3, "endpoint_addr").ipv4());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv4_set_endpoint", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_add(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv6_add");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_add(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv6_add", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_remove(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(3), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv6_remove");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_remove(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv6_remove", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_prefix(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv6_set_prefix");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_set_prefix(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "prefix_len").uint32());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv6_set_prefix", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_enabled(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv6_set_enabled");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_set_enabled(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "enabled").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv6_set_enabled", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_loopback(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv6_set_loopback");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_set_loopback(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "loopback").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv6_set_loopback", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_multicast_capable(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv6_set_multicast_capable");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_set_multicast_capable(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "capable").boolean());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv6_set_multicast_capable", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_ipv6_set_endpoint(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(4), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/ipv6_set_endpoint");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_ipv6_set_endpoint(
	    xa_inputs.get(0, "ifname").text(),
	    xa_inputs.get(1, "vifname").text(),
	    xa_inputs.get(2, "addr").ipv6(),
	    xa_inputs.get(3, "endpoint_addr").ipv6());
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/ipv6_set_endpoint", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_hint_tree_complete(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/hint_tree_complete");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_hint_tree_complete();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/hint_tree_complete", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFeaIfmgrMirrorTargetBase::handle_fea_ifmgr_mirror_0_1_hint_updates_made(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            XORP_UINT_CAST(0), XORP_UINT_CAST(xa_inputs.size()), "fea_ifmgr_mirror/0.1/hint_updates_made");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = fea_ifmgr_mirror_0_1_hint_updates_made();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "fea_ifmgr_mirror/0.1/hint_updates_made", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	return XrlCmdError::BAD_ARGS(e.str());
    }
    return XrlCmdError::OKAY();
}

void
XrlFeaIfmgrMirrorTargetBase::add_handlers()
{
    for (size_t i = 0; i < num_handlers; ++i) {
        if (!_cmds->add_handler(handlers[i].name,
                                callback(this, handlers[i].method))) {
            XLOG_ERROR("Failed to register xrl handler finder://%s/%s", "fea_ifmgr_mirror", handlers[i].name);
        }
    }
    _cmds->finalize();
}

void
XrlFeaIfmgrMirrorTargetBase::remove_handlers()
{
     for (size_t i = 0; i < num_handlers; ++i) {
         _cmds->remove_handler(handlers[i].name);
     }
}
