/*
 * Copyright (c) 2001-2004 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'tgt-gen'.
 */

#ident "$XORP$"


#include "firewall_base.hh"


XrlFirewallTargetBase::XrlFirewallTargetBase(XrlCmdMap* cmds)
    : _cmds(cmds)
{
    if (_cmds)
	add_handlers();
}

XrlFirewallTargetBase::~XrlFirewallTargetBase()
{
    if (_cmds)
	remove_handlers();
}

bool
XrlFirewallTargetBase::set_command_map(XrlCmdMap* cmds)
{
    if (_cmds == 0 && cmds) {
        _cmds = cmds;
        add_handlers();
        return true;
    }
    if (_cmds && cmds == 0) {
	remove_handlers();
        _cmds = cmds;
        return true;
    }
    return false;
}

const XrlCmdError
XrlFirewallTargetBase::handle_common_0_1_get_target_name(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            0, (uint32_t)xa_inputs.size(), "common/0.1/get_target_name");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string name;
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_target_name", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("name", name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_common_0_1_get_version(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            0, (uint32_t)xa_inputs.size(), "common/0.1/get_version");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string version;
    try {
	XrlCmdError e = common_0_1_get_version(
	    version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("version", version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_common_0_1_get_status(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            0, (uint32_t)xa_inputs.size(), "common/0.1/get_status");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t status;
    string reason;
    try {
	XrlCmdError e = common_0_1_get_status(
	    status,
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/get_status", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("status", status);
	pxa_outputs->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_common_0_1_shutdown(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            0, (uint32_t)xa_inputs.size(), "common/0.1/shutdown");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = common_0_1_shutdown();
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "common/0.1/shutdown", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_get_fw_enabled(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            0, (uint32_t)xa_inputs.size(), "firewall/0.1/get_fw_enabled");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool enabled;
    try {
	XrlCmdError e = firewall_0_1_get_fw_enabled(
	    enabled);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/get_fw_enabled", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("enabled", enabled);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_set_fw_enabled(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            1, (uint32_t)xa_inputs.size(), "firewall/0.1/set_fw_enabled");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = firewall_0_1_set_fw_enabled(
	    xa_inputs.get_bool("enabled"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/set_fw_enabled", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_get_fw_default_drop(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            0, (uint32_t)xa_inputs.size(), "firewall/0.1/get_fw_default_drop");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool drop;
    try {
	XrlCmdError e = firewall_0_1_get_fw_default_drop(
	    drop);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/get_fw_default_drop", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("drop", drop);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_set_fw_default_drop(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            1, (uint32_t)xa_inputs.size(), "firewall/0.1/set_fw_default_drop");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = firewall_0_1_set_fw_default_drop(
	    xa_inputs.get_bool("drop"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/set_fw_default_drop", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_get_fw_provider(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            0, (uint32_t)xa_inputs.size(), "firewall/0.1/get_fw_provider");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string provider;
    try {
	XrlCmdError e = firewall_0_1_get_fw_provider(
	    provider);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/get_fw_provider", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("provider", provider);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_set_fw_provider(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            1, (uint32_t)xa_inputs.size(), "firewall/0.1/set_fw_provider");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = firewall_0_1_set_fw_provider(
	    xa_inputs.get_string("provider"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/set_fw_provider", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_get_fw_version(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            0, (uint32_t)xa_inputs.size(), "firewall/0.1/get_fw_version");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string version;
    try {
	XrlCmdError e = firewall_0_1_get_fw_version(
	    version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/get_fw_version", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("version", version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_get_num_xorp_rules4(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            0, (uint32_t)xa_inputs.size(), "firewall/0.1/get_num_xorp_rules4");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t nrules;
    try {
	XrlCmdError e = firewall_0_1_get_num_xorp_rules4(
	    nrules);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/get_num_xorp_rules4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("nrules", nrules);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_get_num_provider_rules4(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            0, (uint32_t)xa_inputs.size(), "firewall/0.1/get_num_provider_rules4");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t nrules;
    try {
	XrlCmdError e = firewall_0_1_get_num_provider_rules4(
	    nrules);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/get_num_provider_rules4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("nrules", nrules);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_get_num_xorp_rules6(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            0, (uint32_t)xa_inputs.size(), "firewall/0.1/get_num_xorp_rules6");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t nrules;
    try {
	XrlCmdError e = firewall_0_1_get_num_xorp_rules6(
	    nrules);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/get_num_xorp_rules6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("nrules", nrules);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_get_num_provider_rules6(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            0, (uint32_t)xa_inputs.size(), "firewall/0.1/get_num_provider_rules6");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t nrules;
    try {
	XrlCmdError e = firewall_0_1_get_num_provider_rules6(
	    nrules);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/get_num_provider_rules6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("nrules", nrules);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_add_filter4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 8) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            8, (uint32_t)xa_inputs.size(), "firewall/0.1/add_filter4");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = firewall_0_1_add_filter4(
	    xa_inputs.get_string("ifname"),
	    xa_inputs.get_string("vifname"),
	    xa_inputs.get_ipv4net("src"),
	    xa_inputs.get_ipv4net("dst"),
	    xa_inputs.get_uint32("proto"),
	    xa_inputs.get_uint32("sport"),
	    xa_inputs.get_uint32("dport"),
	    xa_inputs.get_string("action"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/add_filter4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_add_filter6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 8) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            8, (uint32_t)xa_inputs.size(), "firewall/0.1/add_filter6");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = firewall_0_1_add_filter6(
	    xa_inputs.get_string("ifname"),
	    xa_inputs.get_string("vifname"),
	    xa_inputs.get_ipv6net("src"),
	    xa_inputs.get_ipv6net("dst"),
	    xa_inputs.get_uint32("proto"),
	    xa_inputs.get_uint32("sport"),
	    xa_inputs.get_uint32("dport"),
	    xa_inputs.get_string("action"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/add_filter6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_delete_filter4(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            7, (uint32_t)xa_inputs.size(), "firewall/0.1/delete_filter4");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = firewall_0_1_delete_filter4(
	    xa_inputs.get_string("ifname"),
	    xa_inputs.get_string("vifname"),
	    xa_inputs.get_ipv4net("src"),
	    xa_inputs.get_ipv4net("dst"),
	    xa_inputs.get_uint32("proto"),
	    xa_inputs.get_uint32("sport"),
	    xa_inputs.get_uint32("dport"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/delete_filter4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_delete_filter6(const XrlArgs& xa_inputs, XrlArgs* /* pxa_outputs */)
{
    if (xa_inputs.size() != 7) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            7, (uint32_t)xa_inputs.size(), "firewall/0.1/delete_filter6");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    try {
	XrlCmdError e = firewall_0_1_delete_filter6(
	    xa_inputs.get_string("ifname"),
	    xa_inputs.get_string("vifname"),
	    xa_inputs.get_ipv6net("src"),
	    xa_inputs.get_ipv6net("dst"),
	    xa_inputs.get_uint32("proto"),
	    xa_inputs.get_uint32("sport"),
	    xa_inputs.get_uint32("dport"));
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/delete_filter6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_get_filter_list_start4(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            0, (uint32_t)xa_inputs.size(), "firewall/0.1/get_filter_list_start4");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t token;
    bool more;
    try {
	XrlCmdError e = firewall_0_1_get_filter_list_start4(
	    token,
	    more);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/get_filter_list_start4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("token", token);
	pxa_outputs->add("more", more);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_get_filter_list_next4(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            1, (uint32_t)xa_inputs.size(), "firewall/0.1/get_filter_list_next4");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool more;
    string ifname;
    string vifname;
    IPv4Net src;
    IPv4Net dst;
    uint32_t proto;
    uint32_t sport;
    uint32_t dport;
    string action;
    try {
	XrlCmdError e = firewall_0_1_get_filter_list_next4(
	    xa_inputs.get_uint32("token"),
	    more,
	    ifname,
	    vifname,
	    src,
	    dst,
	    proto,
	    sport,
	    dport,
	    action);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/get_filter_list_next4", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("more", more);
	pxa_outputs->add("ifname", ifname);
	pxa_outputs->add("vifname", vifname);
	pxa_outputs->add("src", src);
	pxa_outputs->add("dst", dst);
	pxa_outputs->add("proto", proto);
	pxa_outputs->add("sport", sport);
	pxa_outputs->add("dport", dport);
	pxa_outputs->add("action", action);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_get_filter_list_start6(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            0, (uint32_t)xa_inputs.size(), "firewall/0.1/get_filter_list_start6");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    uint32_t token;
    bool more;
    try {
	XrlCmdError e = firewall_0_1_get_filter_list_start6(
	    token,
	    more);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/get_filter_list_start6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("token", token);
	pxa_outputs->add("more", more);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlFirewallTargetBase::handle_firewall_0_1_get_filter_list_next6(const XrlArgs& xa_inputs, XrlArgs* pxa_outputs)
{
    if (xa_inputs.size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u) handling %s",
            1, (uint32_t)xa_inputs.size(), "firewall/0.1/get_filter_list_next6");
	return XrlCmdError::BAD_ARGS();
    }

    if (pxa_outputs == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool more;
    string ifname;
    string vifname;
    IPv6Net src;
    IPv6Net dst;
    uint32_t proto;
    uint32_t sport;
    uint32_t dport;
    string action;
    try {
	XrlCmdError e = firewall_0_1_get_filter_list_next6(
	    xa_inputs.get_uint32("token"),
	    more,
	    ifname,
	    vifname,
	    src,
	    dst,
	    proto,
	    sport,
	    dport,
	    action);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for %s failed: %s",
            		 "firewall/0.1/get_filter_list_next6", e.str().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	pxa_outputs->add("more", more);
	pxa_outputs->add("ifname", ifname);
	pxa_outputs->add("vifname", vifname);
	pxa_outputs->add("src", src);
	pxa_outputs->add("dst", dst);
	pxa_outputs->add("proto", proto);
	pxa_outputs->add("sport", sport);
	pxa_outputs->add("dport", dport);
	pxa_outputs->add("action", action);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

void
XrlFirewallTargetBase::add_handlers()
{
	if (_cmds->add_handler("common/0.1/get_target_name",
	    callback(this, &XrlFirewallTargetBase::handle_common_0_1_get_target_name)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "common/0.1/get_target_name");
	}
	if (_cmds->add_handler("common/0.1/get_version",
	    callback(this, &XrlFirewallTargetBase::handle_common_0_1_get_version)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "common/0.1/get_version");
	}
	if (_cmds->add_handler("common/0.1/get_status",
	    callback(this, &XrlFirewallTargetBase::handle_common_0_1_get_status)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "common/0.1/get_status");
	}
	if (_cmds->add_handler("common/0.1/shutdown",
	    callback(this, &XrlFirewallTargetBase::handle_common_0_1_shutdown)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "common/0.1/shutdown");
	}
	if (_cmds->add_handler("firewall/0.1/get_fw_enabled",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_get_fw_enabled)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/get_fw_enabled");
	}
	if (_cmds->add_handler("firewall/0.1/set_fw_enabled",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_set_fw_enabled)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/set_fw_enabled");
	}
	if (_cmds->add_handler("firewall/0.1/get_fw_default_drop",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_get_fw_default_drop)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/get_fw_default_drop");
	}
	if (_cmds->add_handler("firewall/0.1/set_fw_default_drop",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_set_fw_default_drop)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/set_fw_default_drop");
	}
	if (_cmds->add_handler("firewall/0.1/get_fw_provider",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_get_fw_provider)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/get_fw_provider");
	}
	if (_cmds->add_handler("firewall/0.1/set_fw_provider",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_set_fw_provider)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/set_fw_provider");
	}
	if (_cmds->add_handler("firewall/0.1/get_fw_version",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_get_fw_version)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/get_fw_version");
	}
	if (_cmds->add_handler("firewall/0.1/get_num_xorp_rules4",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_get_num_xorp_rules4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/get_num_xorp_rules4");
	}
	if (_cmds->add_handler("firewall/0.1/get_num_provider_rules4",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_get_num_provider_rules4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/get_num_provider_rules4");
	}
	if (_cmds->add_handler("firewall/0.1/get_num_xorp_rules6",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_get_num_xorp_rules6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/get_num_xorp_rules6");
	}
	if (_cmds->add_handler("firewall/0.1/get_num_provider_rules6",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_get_num_provider_rules6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/get_num_provider_rules6");
	}
	if (_cmds->add_handler("firewall/0.1/add_filter4",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_add_filter4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/add_filter4");
	}
	if (_cmds->add_handler("firewall/0.1/add_filter6",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_add_filter6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/add_filter6");
	}
	if (_cmds->add_handler("firewall/0.1/delete_filter4",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_delete_filter4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/delete_filter4");
	}
	if (_cmds->add_handler("firewall/0.1/delete_filter6",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_delete_filter6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/delete_filter6");
	}
	if (_cmds->add_handler("firewall/0.1/get_filter_list_start4",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_get_filter_list_start4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/get_filter_list_start4");
	}
	if (_cmds->add_handler("firewall/0.1/get_filter_list_next4",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_get_filter_list_next4)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/get_filter_list_next4");
	}
	if (_cmds->add_handler("firewall/0.1/get_filter_list_start6",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_get_filter_list_start6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/get_filter_list_start6");
	}
	if (_cmds->add_handler("firewall/0.1/get_filter_list_next6",
	    callback(this, &XrlFirewallTargetBase::handle_firewall_0_1_get_filter_list_next6)) == false) {
	    XLOG_ERROR("Failed to xrl handler finder://%s/%s", "firewall", "firewall/0.1/get_filter_list_next6");
	}
	_cmds->finalize();
}

void
XrlFirewallTargetBase::remove_handlers()
{
	_cmds->remove_handler("common/0.1/get_target_name");
	_cmds->remove_handler("common/0.1/get_version");
	_cmds->remove_handler("common/0.1/get_status");
	_cmds->remove_handler("common/0.1/shutdown");
	_cmds->remove_handler("firewall/0.1/get_fw_enabled");
	_cmds->remove_handler("firewall/0.1/set_fw_enabled");
	_cmds->remove_handler("firewall/0.1/get_fw_default_drop");
	_cmds->remove_handler("firewall/0.1/set_fw_default_drop");
	_cmds->remove_handler("firewall/0.1/get_fw_provider");
	_cmds->remove_handler("firewall/0.1/set_fw_provider");
	_cmds->remove_handler("firewall/0.1/get_fw_version");
	_cmds->remove_handler("firewall/0.1/get_num_xorp_rules4");
	_cmds->remove_handler("firewall/0.1/get_num_provider_rules4");
	_cmds->remove_handler("firewall/0.1/get_num_xorp_rules6");
	_cmds->remove_handler("firewall/0.1/get_num_provider_rules6");
	_cmds->remove_handler("firewall/0.1/add_filter4");
	_cmds->remove_handler("firewall/0.1/add_filter6");
	_cmds->remove_handler("firewall/0.1/delete_filter4");
	_cmds->remove_handler("firewall/0.1/delete_filter6");
	_cmds->remove_handler("firewall/0.1/get_filter_list_start4");
	_cmds->remove_handler("firewall/0.1/get_filter_list_next4");
	_cmds->remove_handler("firewall/0.1/get_filter_list_start6");
	_cmds->remove_handler("firewall/0.1/get_filter_list_next6");
}
