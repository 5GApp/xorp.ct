/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/tgt-gen'.
 */

#ident "$XORP: xorp/xrl/targets/mld6igmp_base.cc,v 1.2 2003/01/13 20:40:24 pavlin Exp $"


#include "mld6igmp_base.hh"

const XrlCmdError
XrlMld6igmpTargetBase::handle_common_0_1_get_target_name(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/get_target_name", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string name; 
    try {
	XrlCmdError e = common_0_1_get_target_name(
	    name);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_target_name failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("name", name);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_common_0_1_get_version(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling common/0.1/get_version", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string version; 
    try {
	XrlCmdError e = common_0_1_get_version(
	    version);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for common/0.1/get_version failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("version", version);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_cli_processor_0_1_process_command(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling cli_processor/0.1/process_command", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    string ret_processor_name; 
    string ret_cli_term_name; 
    uint32_t ret_cli_session_id; 
    string ret_command_output; 
    try {
	XrlCmdError e = cli_processor_0_1_process_command(
	    xrl.const_args().get_string("processor_name"), 
	    xrl.const_args().get_string("cli_term_name"), 
	    xrl.const_args().get_uint32("cli_session_id"), 
	    xrl.const_args().get_string("command_name"), 
	    xrl.const_args().get_string("command_args"), 
	    ret_processor_name, 
	    ret_cli_term_name, 
	    ret_cli_session_id, 
	    ret_command_output);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for cli_processor/0.1/process_command failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("ret_processor_name", ret_processor_name);
	args->add("ret_cli_term_name", ret_cli_term_name);
	args->add("ret_cli_session_id", ret_cli_session_id);
	args->add("ret_command_output", ret_command_output);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_new_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling mfea_client/0.1/new_vif", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_new_vif(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/new_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_delete_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling mfea_client/0.1/delete_vif", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_delete_vif(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/delete_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_add_vif_addr4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 6) { 
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling mfea_client/0.1/add_vif_addr4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_add_vif_addr4(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv4("addr"), 
	    xrl.const_args().get_ipv4net("subnet"), 
	    xrl.const_args().get_ipv4("broadcast"), 
	    xrl.const_args().get_ipv4("peer"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/add_vif_addr4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_add_vif_addr6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 6) { 
	XLOG_ERROR("Wrong number of arguments (%u != 6) handling mfea_client/0.1/add_vif_addr6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_add_vif_addr6(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv6("addr"), 
	    xrl.const_args().get_ipv6net("subnet"), 
	    xrl.const_args().get_ipv6("broadcast"), 
	    xrl.const_args().get_ipv6("peer"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/add_vif_addr6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_delete_vif_addr4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea_client/0.1/delete_vif_addr4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_delete_vif_addr4(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv4("addr"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/delete_vif_addr4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_delete_vif_addr6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 3) { 
	XLOG_ERROR("Wrong number of arguments (%u != 3) handling mfea_client/0.1/delete_vif_addr6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_delete_vif_addr6(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv6("addr"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/delete_vif_addr6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_set_vif_flags(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 8) { 
	XLOG_ERROR("Wrong number of arguments (%u != 8) handling mfea_client/0.1/set_vif_flags", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_set_vif_flags(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_bool("is_pim_register"), 
	    xrl.const_args().get_bool("is_p2p"), 
	    xrl.const_args().get_bool("is_loopback"), 
	    xrl.const_args().get_bool("is_multicast"), 
	    xrl.const_args().get_bool("is_broadcast"), 
	    xrl.const_args().get_bool("is_up"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/set_vif_flags failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_set_vif_done(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling mfea_client/0.1/set_vif_done", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_set_vif_done(
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/set_vif_done failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_set_all_vifs_done(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea_client/0.1/set_all_vifs_done", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_set_all_vifs_done(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/set_all_vifs_done failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_is_vif_setup_completed(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mfea_client/0.1/is_vif_setup_completed", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool is_completed; 
    try {
	XrlCmdError e = mfea_client_0_1_is_vif_setup_completed(
	    is_completed);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/is_vif_setup_completed failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("is_completed", is_completed);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_recv_protocol_message4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 11) { 
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea_client/0.1/recv_protocol_message4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_recv_protocol_message4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv4("source_address"), 
	    xrl.const_args().get_ipv4("dest_address"), 
	    xrl.const_args().get_int32("ip_ttl"), 
	    xrl.const_args().get_int32("ip_tos"), 
	    xrl.const_args().get_bool("is_router_alert"), 
	    xrl.const_args().get_binary("protocol_message"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_protocol_message4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_recv_protocol_message6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 11) { 
	XLOG_ERROR("Wrong number of arguments (%u != 11) handling mfea_client/0.1/recv_protocol_message6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_recv_protocol_message6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv6("source_address"), 
	    xrl.const_args().get_ipv6("dest_address"), 
	    xrl.const_args().get_int32("ip_ttl"), 
	    xrl.const_args().get_int32("ip_tos"), 
	    xrl.const_args().get_bool("is_router_alert"), 
	    xrl.const_args().get_binary("protocol_message"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_protocol_message6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_recv_kernel_signal_message4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 9) { 
	XLOG_ERROR("Wrong number of arguments (%u != 9) handling mfea_client/0.1/recv_kernel_signal_message4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_recv_kernel_signal_message4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_uint32("message_type"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv4("source_address"), 
	    xrl.const_args().get_ipv4("dest_address"), 
	    xrl.const_args().get_binary("protocol_message"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_kernel_signal_message4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_recv_kernel_signal_message6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 9) { 
	XLOG_ERROR("Wrong number of arguments (%u != 9) handling mfea_client/0.1/recv_kernel_signal_message6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_recv_kernel_signal_message6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_uint32("message_type"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    xrl.const_args().get_ipv6("source_address"), 
	    xrl.const_args().get_ipv6("dest_address"), 
	    xrl.const_args().get_binary("protocol_message"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_kernel_signal_message6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_add_mrib4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 7) { 
	XLOG_ERROR("Wrong number of arguments (%u != 7) handling mfea_client/0.1/add_mrib4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_add_mrib4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv4net("dest_prefix"), 
	    xrl.const_args().get_ipv4("next_hop_router_addr"), 
	    xrl.const_args().get_string("next_hop_vif_name"), 
	    xrl.const_args().get_uint32("next_hop_vif_index"), 
	    xrl.const_args().get_uint32("metric_preference"), 
	    xrl.const_args().get_uint32("metric"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/add_mrib4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_add_mrib6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 7) { 
	XLOG_ERROR("Wrong number of arguments (%u != 7) handling mfea_client/0.1/add_mrib6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_add_mrib6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv6net("dest_prefix"), 
	    xrl.const_args().get_ipv6("next_hop_router_addr"), 
	    xrl.const_args().get_string("next_hop_vif_name"), 
	    xrl.const_args().get_uint32("next_hop_vif_index"), 
	    xrl.const_args().get_uint32("metric_preference"), 
	    xrl.const_args().get_uint32("metric"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/add_mrib6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_delete_mrib4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling mfea_client/0.1/delete_mrib4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_delete_mrib4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv4net("dest_prefix"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/delete_mrib4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_delete_mrib6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 2) { 
	XLOG_ERROR("Wrong number of arguments (%u != 2) handling mfea_client/0.1/delete_mrib6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_delete_mrib6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv6net("dest_prefix"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/delete_mrib6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_set_mrib_done(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mfea_client/0.1/set_mrib_done", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_set_mrib_done(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/set_mrib_done failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_recv_dataflow_signal4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 15) { 
	XLOG_ERROR("Wrong number of arguments (%u != 15) handling mfea_client/0.1/recv_dataflow_signal4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_recv_dataflow_signal4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv4("source_address"), 
	    xrl.const_args().get_ipv4("group_address"), 
	    xrl.const_args().get_uint32("threshold_interval_sec"), 
	    xrl.const_args().get_uint32("threshold_interval_usec"), 
	    xrl.const_args().get_uint32("measured_interval_sec"), 
	    xrl.const_args().get_uint32("measured_interval_usec"), 
	    xrl.const_args().get_uint32("threshold_packets"), 
	    xrl.const_args().get_uint32("threshold_bytes"), 
	    xrl.const_args().get_uint32("measured_packets"), 
	    xrl.const_args().get_uint32("measured_bytes"), 
	    xrl.const_args().get_bool("is_threshold_in_packets"), 
	    xrl.const_args().get_bool("is_threshold_in_bytes"), 
	    xrl.const_args().get_bool("is_geq_upcall"), 
	    xrl.const_args().get_bool("is_leq_upcall"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_dataflow_signal4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mfea_client_0_1_recv_dataflow_signal6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 15) { 
	XLOG_ERROR("Wrong number of arguments (%u != 15) handling mfea_client/0.1/recv_dataflow_signal6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mfea_client_0_1_recv_dataflow_signal6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_ipv6("source_address"), 
	    xrl.const_args().get_ipv6("group_address"), 
	    xrl.const_args().get_uint32("threshold_interval_sec"), 
	    xrl.const_args().get_uint32("threshold_interval_usec"), 
	    xrl.const_args().get_uint32("measured_interval_sec"), 
	    xrl.const_args().get_uint32("measured_interval_usec"), 
	    xrl.const_args().get_uint32("threshold_packets"), 
	    xrl.const_args().get_uint32("threshold_bytes"), 
	    xrl.const_args().get_uint32("measured_packets"), 
	    xrl.const_args().get_uint32("measured_bytes"), 
	    xrl.const_args().get_bool("is_threshold_in_packets"), 
	    xrl.const_args().get_bool("is_threshold_in_bytes"), 
	    xrl.const_args().get_bool("is_geq_upcall"), 
	    xrl.const_args().get_bool("is_leq_upcall"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mfea_client/0.1/recv_dataflow_signal6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_add_protocol4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mld6igmp/0.1/add_protocol4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_add_protocol4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/add_protocol4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_add_protocol6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mld6igmp/0.1/add_protocol6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_add_protocol6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/add_protocol6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_delete_protocol4(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mld6igmp/0.1/delete_protocol4", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_delete_protocol4(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/delete_protocol4 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_delete_protocol6(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 5) { 
	XLOG_ERROR("Wrong number of arguments (%u != 5) handling mld6igmp/0.1/delete_protocol6", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_delete_protocol6(
	    xrl.const_args().get_string("xrl_sender_name"), 
	    xrl.const_args().get_string("protocol_name"), 
	    xrl.const_args().get_uint32("protocol_id"), 
	    xrl.const_args().get_string("vif_name"), 
	    xrl.const_args().get_uint32("vif_index"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/delete_protocol6 failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_enable_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mld6igmp/0.1/enable_vif", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_enable_vif(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/enable_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_disable_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mld6igmp/0.1/disable_vif", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_disable_vif(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/disable_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_start_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mld6igmp/0.1/start_vif", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_start_vif(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/start_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_stop_vif(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 1) { 
	XLOG_ERROR("Wrong number of arguments (%u != 1) handling mld6igmp/0.1/stop_vif", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_stop_vif(
	    xrl.const_args().get_string("vif_name"), 
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/stop_vif failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_enable_all_vifs(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mld6igmp/0.1/enable_all_vifs", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_enable_all_vifs(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/enable_all_vifs failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_disable_all_vifs(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mld6igmp/0.1/disable_all_vifs", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_disable_all_vifs(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/disable_all_vifs failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_start_all_vifs(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mld6igmp/0.1/start_all_vifs", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_start_all_vifs(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/start_all_vifs failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_stop_all_vifs(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mld6igmp/0.1/stop_all_vifs", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_stop_all_vifs(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/stop_all_vifs failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_enable_mld6igmp(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mld6igmp/0.1/enable_mld6igmp", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_enable_mld6igmp(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/enable_mld6igmp failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_disable_mld6igmp(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mld6igmp/0.1/disable_mld6igmp", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_disable_mld6igmp(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/disable_mld6igmp failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_enable_cli(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mld6igmp/0.1/enable_cli", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_enable_cli(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/enable_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_disable_cli(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mld6igmp/0.1/disable_cli", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_disable_cli(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/disable_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_start_mld6igmp(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mld6igmp/0.1/start_mld6igmp", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_start_mld6igmp(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/start_mld6igmp failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_stop_mld6igmp(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mld6igmp/0.1/stop_mld6igmp", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_stop_mld6igmp(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/stop_mld6igmp failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_start_cli(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mld6igmp/0.1/start_cli", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_start_cli(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/start_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_stop_cli(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mld6igmp/0.1/stop_cli", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_stop_cli(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/stop_cli failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_enable_log_trace(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mld6igmp/0.1/enable_log_trace", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_enable_log_trace(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/enable_log_trace failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

const XrlCmdError
XrlMld6igmpTargetBase::handle_mld6igmp_0_1_disable_log_trace(const Xrl& xrl, XrlArgs* args)
{
    if (xrl.const_args().size() != 0) { 
	XLOG_ERROR("Wrong number of arguments (%u != 0) handling mld6igmp/0.1/disable_log_trace", (uint32_t)xrl.const_args().size());
	return XrlCmdError::BAD_ARGS();
    }

    if (args == 0) {
	XLOG_FATAL("Return list empty");
	return XrlCmdError::BAD_ARGS();
    }

    /* Return value declarations */
    bool fail; 
    string reason; 
    try {
	XrlCmdError e = mld6igmp_0_1_disable_log_trace(
	    fail, 
	    reason);
	if (e != XrlCmdError::OKAY()) {
	    XLOG_WARNING("Handling method for mld6igmp/0.1/disable_log_trace failed: %s \"%s\"",
            		 e.str().c_str(), e.note().c_str());
	    return e;
        }
    } catch (const XrlArgs::XrlAtomNotFound& e) {
	XLOG_ERROR("Argument not found");
	return XrlCmdError::BAD_ARGS();
    }

    /* Marshall return values */
    try {
	args->add("fail", fail);
	args->add("reason", reason);
    } catch (const XrlArgs::XrlAtomFound& ) {
	XLOG_FATAL("Duplicate atom name"); /* XXX Should never happen */
    }
    return XrlCmdError::OKAY();
}

