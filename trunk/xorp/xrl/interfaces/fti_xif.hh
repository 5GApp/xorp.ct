/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/clnt-gen'.
 *
 * $XORP$
 */

#ifndef __XRL_INTERFACES_FTI_XIF_HH__
#define __XRL_INTERFACES_FTI_XIF_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XifFti"

#include "libxorp/xlog.h"
#include "libxorp/callback.hh"

#include "libxipc/xrl.hh"
#include "libxipc/xrl_error.hh"
#include "libxipc/xrl_sender.hh"


class XrlFtiV0p2Client {
public:
    XrlFtiV0p2Client(XrlSender* s) : _sender(s) {}
    virtual ~XrlFtiV0p2Client() {}

    typedef XorpCallback2<void, const XrlError&, const uint32_t*>::RefPtr CB0;
    /**
     *  Send Xrl intended to:
     *  
     *  Start transaction.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_start_transaction(
	const char*	target_name, 
	const CB0&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB1;
    /**
     *  Send Xrl intended to:
     *  
     *  Commit transaction.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param tid the transaction ID of this transaction.
     */
    bool send_commit_transaction(
	const char*	target_name, 
	const uint32_t&	tid, 
	const CB1&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB2;
    /**
     *  Send Xrl intended to:
     *  
     *  Abort transaction.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param tid the transaction ID of this transaction.
     */
    bool send_abort_transaction(
	const char*	target_name, 
	const uint32_t&	tid, 
	const CB2&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB3;
    /**
     *  Send Xrl intended to:
     *  
     *  Add a routing entry.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param tid the transaction ID of this transaction.
     *  
     *  @param dst the destination subnet address of the entry.
     *  
     *  @param gateway the address of the next-hop router toward dst.
     *  
     *  @param ifname the name of the physical interface toward dst.
     *  
     *  @param vifname the name of the virtual interface toward dst.
     *  
     *  @param metric the routing metric toward dst.
     *  
     *  @param admin_distance the administratively defined distance toward dst.
     *  
     *  @param protocol_origin the name of the protocol that originated this
     *  entry.
     */
    bool send_add_entry4(
	const char*	target_name, 
	const uint32_t&	tid, 
	const IPv4Net&	dst, 
	const IPv4&	gateway, 
	const string&	ifname, 
	const string&	vifname, 
	const uint32_t&	metric, 
	const uint32_t&	admin_distance, 
	const string&	protocol_origin, 
	const CB3&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB4;
    /**
     *  Send Xrl intended to:
     *  
     *  Add a routing entry.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param tid the transaction ID of this transaction.
     *  
     *  @param dst the destination subnet address of the entry.
     *  
     *  @param gateway the address of the next-hop router toward dst.
     *  
     *  @param ifname the name of the physical interface toward dst.
     *  
     *  @param vifname the name of the virtual interface toward dst.
     *  
     *  @param metric the routing metric toward dst.
     *  
     *  @param admin_distance the administratively defined distance toward dst.
     *  
     *  @param protocol_origin the name of the protocol that originated this
     *  entry.
     */
    bool send_add_entry6(
	const char*	target_name, 
	const uint32_t&	tid, 
	const IPv6Net&	dst, 
	const IPv6&	gateway, 
	const string&	ifname, 
	const string&	vifname, 
	const uint32_t&	metric, 
	const uint32_t&	admin_distance, 
	const string&	protocol_origin, 
	const CB4&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB5;
    /**
     *  Send Xrl intended to:
     *  
     *  Delete a routing entry.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param tid the transaction ID of this transaction.
     *  
     *  @param dst the destination subnet address of the entry.
     */
    bool send_delete_entry4(
	const char*	target_name, 
	const uint32_t&	tid, 
	const IPv4Net&	dst, 
	const CB5&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB6;
    /**
     *  Send Xrl intended to:
     *  
     *  Delete a routing entry.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param tid the transaction ID of this transaction.
     *  
     *  @param dst the destination subnet address of the entry.
     */
    bool send_delete_entry6(
	const char*	target_name, 
	const uint32_t&	tid, 
	const IPv6Net&	dst, 
	const CB6&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB7;
    /**
     *  Send Xrl intended to:
     *  
     *  Delete all routing entries for all address families.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param tid the transaction ID of this transaction.
     */
    bool send_delete_all_entries(
	const char*	target_name, 
	const uint32_t&	tid, 
	const CB7&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB8;
    /**
     *  Send Xrl intended to:
     *  
     *  Delete all routing entries for the IPv4 address family.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param tid the transaction ID of this transaction.
     */
    bool send_delete_all_entries4(
	const char*	target_name, 
	const uint32_t&	tid, 
	const CB8&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB9;
    /**
     *  Send Xrl intended to:
     *  
     *  Delete all routing entries for the IPv6 address family.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param tid the transaction ID of this transaction.
     */
    bool send_delete_all_entries6(
	const char*	target_name, 
	const uint32_t&	tid, 
	const CB9&	cb
    );

    typedef XorpCallback8<void, const XrlError&, const IPv4Net*, const IPv4*, const string*, const string*, const uint32_t*, const uint32_t*, const string*>::RefPtr CB10;
    /**
     *  Send Xrl intended to:
     *  
     *  Lookup a route for a destination host address.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param dst the destination host address to lookup.
     */
    bool send_lookup_route4(
	const char*	target_name, 
	const IPv4&	dst, 
	const CB10&	cb
    );

    typedef XorpCallback8<void, const XrlError&, const IPv6Net*, const IPv6*, const string*, const string*, const uint32_t*, const uint32_t*, const string*>::RefPtr CB11;
    /**
     *  Send Xrl intended to:
     *  
     *  Lookup a route for a destination host address.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param dst the destination host address to lookup.
     */
    bool send_lookup_route6(
	const char*	target_name, 
	const IPv6&	dst, 
	const CB11&	cb
    );

    typedef XorpCallback7<void, const XrlError&, const IPv4*, const string*, const string*, const uint32_t*, const uint32_t*, const string*>::RefPtr CB12;
    /**
     *  Send Xrl intended to:
     *  
     *  Lookup a route for a destination subnet address.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param dst the destination subnet address to lookup.
     */
    bool send_lookup_entry4(
	const char*	target_name, 
	const IPv4Net&	dst, 
	const CB12&	cb
    );

    typedef XorpCallback7<void, const XrlError&, const IPv6*, const string*, const string*, const uint32_t*, const uint32_t*, const string*>::RefPtr CB13;
    /**
     *  Send Xrl intended to:
     *  
     *  Lookup a route for a destination subnet address.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param dst the destination subnet address to lookup.
     */
    bool send_lookup_entry6(
	const char*	target_name, 
	const IPv6Net&	dst, 
	const CB13&	cb
    );

protected:
    XrlSender* _sender;

private:
    void unmarshall0(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB0		cb
    );

    void unmarshall1(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB1		cb
    );

    void unmarshall2(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB2		cb
    );

    void unmarshall3(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB3		cb
    );

    void unmarshall4(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB4		cb
    );

    void unmarshall5(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB5		cb
    );

    void unmarshall6(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB6		cb
    );

    void unmarshall7(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB7		cb
    );

    void unmarshall8(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB8		cb
    );

    void unmarshall9(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB9		cb
    );

    void unmarshall10(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB10		cb
    );

    void unmarshall11(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB11		cb
    );

    void unmarshall12(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB12		cb
    );

    void unmarshall13(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB13		cb
    );

};

#endif /* __XRL_INTERFACES_FTI_XIF_HH__ */
