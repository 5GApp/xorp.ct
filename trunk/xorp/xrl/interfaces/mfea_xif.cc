/*
 * Copyright (c) 2001-2008 XORP, Inc.
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#ident "$XORP: xorp/xrl/interfaces/mfea_xif.cc,v 1.28 2008/07/23 11:55:16 bms Exp $"

#include "mfea_xif.hh"

bool
XrlMfeaV0p1Client::send_have_multicast_routing4(
	const char*	dst_xrl_target_name,
	const HaveMulticastRouting4CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/have_multicast_routing4");
    }

    x->set_target(dst_xrl_target_name);


    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_have_multicast_routing4, cb));
}


/* Unmarshall have_multicast_routing4 */
void
XrlMfeaV0p1Client::unmarshall_have_multicast_routing4(
	const XrlError&	e,
	XrlArgs*	a,
	HaveMulticastRouting4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(1));
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    bool result;
    try {
	a->get("result", result);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &result);
}

bool
XrlMfeaV0p1Client::send_have_multicast_routing6(
	const char*	dst_xrl_target_name,
	const HaveMulticastRouting6CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/have_multicast_routing6");
    }

    x->set_target(dst_xrl_target_name);


    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_have_multicast_routing6, cb));
}


/* Unmarshall have_multicast_routing6 */
void
XrlMfeaV0p1Client::unmarshall_have_multicast_routing6(
	const XrlError&	e,
	XrlArgs*	a,
	HaveMulticastRouting6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(1));
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    bool result;
    try {
	a->get("result", result);
    } catch (const XrlArgs::BadArgs& e) {
	XLOG_ERROR("Error decoding the arguments: %s", e.str().c_str());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &result);
}

bool
XrlMfeaV0p1Client::send_register_protocol4(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const string&	if_name,
	const string&	vif_name,
	const uint32_t&	ip_protocol,
	const RegisterProtocol4CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/register_protocol4");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(if_name));
        x->args().add(XrlAtom(vif_name));
        x->args().add(XrlAtom(ip_protocol));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, if_name);
    x->args().set_arg(2, vif_name);
    x->args().set_arg(3, ip_protocol);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_register_protocol4, cb));
}


/* Unmarshall register_protocol4 */
void
XrlMfeaV0p1Client::unmarshall_register_protocol4(
	const XrlError&	e,
	XrlArgs*	a,
	RegisterProtocol4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_register_protocol6(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const string&	if_name,
	const string&	vif_name,
	const uint32_t&	ip_protocol,
	const RegisterProtocol6CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/register_protocol6");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(if_name));
        x->args().add(XrlAtom(vif_name));
        x->args().add(XrlAtom(ip_protocol));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, if_name);
    x->args().set_arg(2, vif_name);
    x->args().set_arg(3, ip_protocol);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_register_protocol6, cb));
}


/* Unmarshall register_protocol6 */
void
XrlMfeaV0p1Client::unmarshall_register_protocol6(
	const XrlError&	e,
	XrlArgs*	a,
	RegisterProtocol6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_unregister_protocol4(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const string&	if_name,
	const string&	vif_name,
	const UnregisterProtocol4CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/unregister_protocol4");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(if_name));
        x->args().add(XrlAtom(vif_name));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, if_name);
    x->args().set_arg(2, vif_name);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_unregister_protocol4, cb));
}


/* Unmarshall unregister_protocol4 */
void
XrlMfeaV0p1Client::unmarshall_unregister_protocol4(
	const XrlError&	e,
	XrlArgs*	a,
	UnregisterProtocol4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_unregister_protocol6(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const string&	if_name,
	const string&	vif_name,
	const UnregisterProtocol6CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/unregister_protocol6");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(if_name));
        x->args().add(XrlAtom(vif_name));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, if_name);
    x->args().set_arg(2, vif_name);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_unregister_protocol6, cb));
}


/* Unmarshall unregister_protocol6 */
void
XrlMfeaV0p1Client::unmarshall_unregister_protocol6(
	const XrlError&	e,
	XrlArgs*	a,
	UnregisterProtocol6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_add_mfc4(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const IPv4&	source_address,
	const IPv4&	group_address,
	const uint32_t&	iif_vif_index,
	const vector<uint8_t>&	oiflist,
	const vector<uint8_t>&	oiflist_disable_wrongvif,
	const uint32_t&	max_vifs_oiflist,
	const IPv4&	rp_address,
	const AddMfc4CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/add_mfc4");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(source_address));
        x->args().add(XrlAtom(group_address));
        x->args().add(XrlAtom(iif_vif_index));
        x->args().add(XrlAtom(oiflist));
        x->args().add(XrlAtom(oiflist_disable_wrongvif));
        x->args().add(XrlAtom(max_vifs_oiflist));
        x->args().add(XrlAtom(rp_address));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, source_address);
    x->args().set_arg(2, group_address);
    x->args().set_arg(3, iif_vif_index);
    x->args().set_arg(4, oiflist);
    x->args().set_arg(5, oiflist_disable_wrongvif);
    x->args().set_arg(6, max_vifs_oiflist);
    x->args().set_arg(7, rp_address);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_add_mfc4, cb));
}


/* Unmarshall add_mfc4 */
void
XrlMfeaV0p1Client::unmarshall_add_mfc4(
	const XrlError&	e,
	XrlArgs*	a,
	AddMfc4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_add_mfc6(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const IPv6&	source_address,
	const IPv6&	group_address,
	const uint32_t&	iif_vif_index,
	const vector<uint8_t>&	oiflist,
	const vector<uint8_t>&	oiflist_disable_wrongvif,
	const uint32_t&	max_vifs_oiflist,
	const IPv6&	rp_address,
	const AddMfc6CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/add_mfc6");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(source_address));
        x->args().add(XrlAtom(group_address));
        x->args().add(XrlAtom(iif_vif_index));
        x->args().add(XrlAtom(oiflist));
        x->args().add(XrlAtom(oiflist_disable_wrongvif));
        x->args().add(XrlAtom(max_vifs_oiflist));
        x->args().add(XrlAtom(rp_address));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, source_address);
    x->args().set_arg(2, group_address);
    x->args().set_arg(3, iif_vif_index);
    x->args().set_arg(4, oiflist);
    x->args().set_arg(5, oiflist_disable_wrongvif);
    x->args().set_arg(6, max_vifs_oiflist);
    x->args().set_arg(7, rp_address);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_add_mfc6, cb));
}


/* Unmarshall add_mfc6 */
void
XrlMfeaV0p1Client::unmarshall_add_mfc6(
	const XrlError&	e,
	XrlArgs*	a,
	AddMfc6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_delete_mfc4(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const IPv4&	source_address,
	const IPv4&	group_address,
	const DeleteMfc4CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/delete_mfc4");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(source_address));
        x->args().add(XrlAtom(group_address));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, source_address);
    x->args().set_arg(2, group_address);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_delete_mfc4, cb));
}


/* Unmarshall delete_mfc4 */
void
XrlMfeaV0p1Client::unmarshall_delete_mfc4(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteMfc4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_delete_mfc6(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const IPv6&	source_address,
	const IPv6&	group_address,
	const DeleteMfc6CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/delete_mfc6");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(source_address));
        x->args().add(XrlAtom(group_address));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, source_address);
    x->args().set_arg(2, group_address);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_delete_mfc6, cb));
}


/* Unmarshall delete_mfc6 */
void
XrlMfeaV0p1Client::unmarshall_delete_mfc6(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteMfc6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_add_dataflow_monitor4(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const IPv4&	source_address,
	const IPv4&	group_address,
	const uint32_t&	threshold_interval_sec,
	const uint32_t&	threshold_interval_usec,
	const uint32_t&	threshold_packets,
	const uint32_t&	threshold_bytes,
	const bool&	is_threshold_in_packets,
	const bool&	is_threshold_in_bytes,
	const bool&	is_geq_upcall,
	const bool&	is_leq_upcall,
	const AddDataflowMonitor4CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/add_dataflow_monitor4");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(source_address));
        x->args().add(XrlAtom(group_address));
        x->args().add(XrlAtom(threshold_interval_sec));
        x->args().add(XrlAtom(threshold_interval_usec));
        x->args().add(XrlAtom(threshold_packets));
        x->args().add(XrlAtom(threshold_bytes));
        x->args().add(XrlAtom(is_threshold_in_packets));
        x->args().add(XrlAtom(is_threshold_in_bytes));
        x->args().add(XrlAtom(is_geq_upcall));
        x->args().add(XrlAtom(is_leq_upcall));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, source_address);
    x->args().set_arg(2, group_address);
    x->args().set_arg(3, threshold_interval_sec);
    x->args().set_arg(4, threshold_interval_usec);
    x->args().set_arg(5, threshold_packets);
    x->args().set_arg(6, threshold_bytes);
    x->args().set_arg(7, is_threshold_in_packets);
    x->args().set_arg(8, is_threshold_in_bytes);
    x->args().set_arg(9, is_geq_upcall);
    x->args().set_arg(10, is_leq_upcall);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_add_dataflow_monitor4, cb));
}


/* Unmarshall add_dataflow_monitor4 */
void
XrlMfeaV0p1Client::unmarshall_add_dataflow_monitor4(
	const XrlError&	e,
	XrlArgs*	a,
	AddDataflowMonitor4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_add_dataflow_monitor6(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const IPv6&	source_address,
	const IPv6&	group_address,
	const uint32_t&	threshold_interval_sec,
	const uint32_t&	threshold_interval_usec,
	const uint32_t&	threshold_packets,
	const uint32_t&	threshold_bytes,
	const bool&	is_threshold_in_packets,
	const bool&	is_threshold_in_bytes,
	const bool&	is_geq_upcall,
	const bool&	is_leq_upcall,
	const AddDataflowMonitor6CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/add_dataflow_monitor6");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(source_address));
        x->args().add(XrlAtom(group_address));
        x->args().add(XrlAtom(threshold_interval_sec));
        x->args().add(XrlAtom(threshold_interval_usec));
        x->args().add(XrlAtom(threshold_packets));
        x->args().add(XrlAtom(threshold_bytes));
        x->args().add(XrlAtom(is_threshold_in_packets));
        x->args().add(XrlAtom(is_threshold_in_bytes));
        x->args().add(XrlAtom(is_geq_upcall));
        x->args().add(XrlAtom(is_leq_upcall));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, source_address);
    x->args().set_arg(2, group_address);
    x->args().set_arg(3, threshold_interval_sec);
    x->args().set_arg(4, threshold_interval_usec);
    x->args().set_arg(5, threshold_packets);
    x->args().set_arg(6, threshold_bytes);
    x->args().set_arg(7, is_threshold_in_packets);
    x->args().set_arg(8, is_threshold_in_bytes);
    x->args().set_arg(9, is_geq_upcall);
    x->args().set_arg(10, is_leq_upcall);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_add_dataflow_monitor6, cb));
}


/* Unmarshall add_dataflow_monitor6 */
void
XrlMfeaV0p1Client::unmarshall_add_dataflow_monitor6(
	const XrlError&	e,
	XrlArgs*	a,
	AddDataflowMonitor6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_delete_dataflow_monitor4(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const IPv4&	source_address,
	const IPv4&	group_address,
	const uint32_t&	threshold_interval_sec,
	const uint32_t&	threshold_interval_usec,
	const uint32_t&	threshold_packets,
	const uint32_t&	threshold_bytes,
	const bool&	is_threshold_in_packets,
	const bool&	is_threshold_in_bytes,
	const bool&	is_geq_upcall,
	const bool&	is_leq_upcall,
	const DeleteDataflowMonitor4CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/delete_dataflow_monitor4");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(source_address));
        x->args().add(XrlAtom(group_address));
        x->args().add(XrlAtom(threshold_interval_sec));
        x->args().add(XrlAtom(threshold_interval_usec));
        x->args().add(XrlAtom(threshold_packets));
        x->args().add(XrlAtom(threshold_bytes));
        x->args().add(XrlAtom(is_threshold_in_packets));
        x->args().add(XrlAtom(is_threshold_in_bytes));
        x->args().add(XrlAtom(is_geq_upcall));
        x->args().add(XrlAtom(is_leq_upcall));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, source_address);
    x->args().set_arg(2, group_address);
    x->args().set_arg(3, threshold_interval_sec);
    x->args().set_arg(4, threshold_interval_usec);
    x->args().set_arg(5, threshold_packets);
    x->args().set_arg(6, threshold_bytes);
    x->args().set_arg(7, is_threshold_in_packets);
    x->args().set_arg(8, is_threshold_in_bytes);
    x->args().set_arg(9, is_geq_upcall);
    x->args().set_arg(10, is_leq_upcall);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_delete_dataflow_monitor4, cb));
}


/* Unmarshall delete_dataflow_monitor4 */
void
XrlMfeaV0p1Client::unmarshall_delete_dataflow_monitor4(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteDataflowMonitor4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_delete_dataflow_monitor6(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const IPv6&	source_address,
	const IPv6&	group_address,
	const uint32_t&	threshold_interval_sec,
	const uint32_t&	threshold_interval_usec,
	const uint32_t&	threshold_packets,
	const uint32_t&	threshold_bytes,
	const bool&	is_threshold_in_packets,
	const bool&	is_threshold_in_bytes,
	const bool&	is_geq_upcall,
	const bool&	is_leq_upcall,
	const DeleteDataflowMonitor6CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/delete_dataflow_monitor6");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(source_address));
        x->args().add(XrlAtom(group_address));
        x->args().add(XrlAtom(threshold_interval_sec));
        x->args().add(XrlAtom(threshold_interval_usec));
        x->args().add(XrlAtom(threshold_packets));
        x->args().add(XrlAtom(threshold_bytes));
        x->args().add(XrlAtom(is_threshold_in_packets));
        x->args().add(XrlAtom(is_threshold_in_bytes));
        x->args().add(XrlAtom(is_geq_upcall));
        x->args().add(XrlAtom(is_leq_upcall));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, source_address);
    x->args().set_arg(2, group_address);
    x->args().set_arg(3, threshold_interval_sec);
    x->args().set_arg(4, threshold_interval_usec);
    x->args().set_arg(5, threshold_packets);
    x->args().set_arg(6, threshold_bytes);
    x->args().set_arg(7, is_threshold_in_packets);
    x->args().set_arg(8, is_threshold_in_bytes);
    x->args().set_arg(9, is_geq_upcall);
    x->args().set_arg(10, is_leq_upcall);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_delete_dataflow_monitor6, cb));
}


/* Unmarshall delete_dataflow_monitor6 */
void
XrlMfeaV0p1Client::unmarshall_delete_dataflow_monitor6(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteDataflowMonitor6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_delete_all_dataflow_monitor4(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const IPv4&	source_address,
	const IPv4&	group_address,
	const DeleteAllDataflowMonitor4CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/delete_all_dataflow_monitor4");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(source_address));
        x->args().add(XrlAtom(group_address));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, source_address);
    x->args().set_arg(2, group_address);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_delete_all_dataflow_monitor4, cb));
}


/* Unmarshall delete_all_dataflow_monitor4 */
void
XrlMfeaV0p1Client::unmarshall_delete_all_dataflow_monitor4(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteAllDataflowMonitor4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_delete_all_dataflow_monitor6(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const IPv6&	source_address,
	const IPv6&	group_address,
	const DeleteAllDataflowMonitor6CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/delete_all_dataflow_monitor6");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(source_address));
        x->args().add(XrlAtom(group_address));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, source_address);
    x->args().set_arg(2, group_address);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_delete_all_dataflow_monitor6, cb));
}


/* Unmarshall delete_all_dataflow_monitor6 */
void
XrlMfeaV0p1Client::unmarshall_delete_all_dataflow_monitor6(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteAllDataflowMonitor6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_enable_vif(
	const char*	dst_xrl_target_name,
	const string&	vif_name,
	const bool&	enable,
	const EnableVifCB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/enable_vif");
        x->args().add(XrlAtom(vif_name));
        x->args().add(XrlAtom(enable));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, vif_name);
    x->args().set_arg(1, enable);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_enable_vif, cb));
}


/* Unmarshall enable_vif */
void
XrlMfeaV0p1Client::unmarshall_enable_vif(
	const XrlError&	e,
	XrlArgs*	a,
	EnableVifCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_start_vif(
	const char*	dst_xrl_target_name,
	const string&	vif_name,
	const StartVifCB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/start_vif");
        x->args().add(XrlAtom(vif_name));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, vif_name);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_start_vif, cb));
}


/* Unmarshall start_vif */
void
XrlMfeaV0p1Client::unmarshall_start_vif(
	const XrlError&	e,
	XrlArgs*	a,
	StartVifCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_stop_vif(
	const char*	dst_xrl_target_name,
	const string&	vif_name,
	const StopVifCB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/stop_vif");
        x->args().add(XrlAtom(vif_name));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, vif_name);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_stop_vif, cb));
}


/* Unmarshall stop_vif */
void
XrlMfeaV0p1Client::unmarshall_stop_vif(
	const XrlError&	e,
	XrlArgs*	a,
	StopVifCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_enable_all_vifs(
	const char*	dst_xrl_target_name,
	const bool&	enable,
	const EnableAllVifsCB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/enable_all_vifs");
        x->args().add(XrlAtom(enable));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, enable);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_enable_all_vifs, cb));
}


/* Unmarshall enable_all_vifs */
void
XrlMfeaV0p1Client::unmarshall_enable_all_vifs(
	const XrlError&	e,
	XrlArgs*	a,
	EnableAllVifsCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_start_all_vifs(
	const char*	dst_xrl_target_name,
	const StartAllVifsCB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/start_all_vifs");
    }

    x->set_target(dst_xrl_target_name);


    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_start_all_vifs, cb));
}


/* Unmarshall start_all_vifs */
void
XrlMfeaV0p1Client::unmarshall_start_all_vifs(
	const XrlError&	e,
	XrlArgs*	a,
	StartAllVifsCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_stop_all_vifs(
	const char*	dst_xrl_target_name,
	const StopAllVifsCB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/stop_all_vifs");
    }

    x->set_target(dst_xrl_target_name);


    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_stop_all_vifs, cb));
}


/* Unmarshall stop_all_vifs */
void
XrlMfeaV0p1Client::unmarshall_stop_all_vifs(
	const XrlError&	e,
	XrlArgs*	a,
	StopAllVifsCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_enable_mfea(
	const char*	dst_xrl_target_name,
	const bool&	enable,
	const EnableMfeaCB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/enable_mfea");
        x->args().add(XrlAtom(enable));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, enable);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_enable_mfea, cb));
}


/* Unmarshall enable_mfea */
void
XrlMfeaV0p1Client::unmarshall_enable_mfea(
	const XrlError&	e,
	XrlArgs*	a,
	EnableMfeaCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_start_mfea(
	const char*	dst_xrl_target_name,
	const StartMfeaCB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/start_mfea");
    }

    x->set_target(dst_xrl_target_name);


    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_start_mfea, cb));
}


/* Unmarshall start_mfea */
void
XrlMfeaV0p1Client::unmarshall_start_mfea(
	const XrlError&	e,
	XrlArgs*	a,
	StartMfeaCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_stop_mfea(
	const char*	dst_xrl_target_name,
	const StopMfeaCB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/stop_mfea");
    }

    x->set_target(dst_xrl_target_name);


    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_stop_mfea, cb));
}


/* Unmarshall stop_mfea */
void
XrlMfeaV0p1Client::unmarshall_stop_mfea(
	const XrlError&	e,
	XrlArgs*	a,
	StopMfeaCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_enable_cli(
	const char*	dst_xrl_target_name,
	const bool&	enable,
	const EnableCliCB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/enable_cli");
        x->args().add(XrlAtom(enable));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, enable);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_enable_cli, cb));
}


/* Unmarshall enable_cli */
void
XrlMfeaV0p1Client::unmarshall_enable_cli(
	const XrlError&	e,
	XrlArgs*	a,
	EnableCliCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_start_cli(
	const char*	dst_xrl_target_name,
	const StartCliCB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/start_cli");
    }

    x->set_target(dst_xrl_target_name);


    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_start_cli, cb));
}


/* Unmarshall start_cli */
void
XrlMfeaV0p1Client::unmarshall_start_cli(
	const XrlError&	e,
	XrlArgs*	a,
	StartCliCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_stop_cli(
	const char*	dst_xrl_target_name,
	const StopCliCB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/stop_cli");
    }

    x->set_target(dst_xrl_target_name);


    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_stop_cli, cb));
}


/* Unmarshall stop_cli */
void
XrlMfeaV0p1Client::unmarshall_stop_cli(
	const XrlError&	e,
	XrlArgs*	a,
	StopCliCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaV0p1Client::send_log_trace_all(
	const char*	dst_xrl_target_name,
	const bool&	enable,
	const LogTraceAllCB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea/0.1/log_trace_all");
        x->args().add(XrlAtom(enable));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, enable);

    return _sender->send(*x, callback(this, &XrlMfeaV0p1Client::unmarshall_log_trace_all, cb));
}


/* Unmarshall log_trace_all */
void
XrlMfeaV0p1Client::unmarshall_log_trace_all(
	const XrlError&	e,
	XrlArgs*	a,
	LogTraceAllCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}
