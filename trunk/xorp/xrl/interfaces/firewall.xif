/* $XORP$ */

/*
** IP filtering XRL interface.
*/
interface firewall/0.1 {
	/**
	 * Get global IP filter enable status.
	 */
	get_fw_enabled -> enabled:bool

	/**
	 * Set global IP filter enable status.
	 *
	 * @param enabled Enable or disable IP filtering.
	 */
	set_fw_enabled ? enabled:bool

	/**
	 * Get global IP filter default-to-drop status.
	 */
	get_fw_default_drop -> drop:bool

	/**
	 * Set global IP filter default-to-drop status.
	 *
	 * @param accept Drop all datagrams by default if true;
	 * otherwise, accept them.
	 */
	set_fw_default_drop ? drop:bool

	/**
	 * Get the underlying IP filter provider type in use.
	 */
	get_fw_provider -> provider:txt

	/**
	 * Set the underlying IP filter provider type in use.
	 * @param provider Name of an IP firewall provider to use on
	 * systems which have multiple IP filtering providers.
	 */
	set_fw_provider ? provider:txt

	/**
	 *  Get the underlying IP filter provider version in use.
	 */
	get_fw_version -> version:txt

	/**
	 * Get the number of IPv4 firewall rules installed by XORP.
	 */
	get_num_xorp_rules4 -> nrules:u32

	/**
	 * Get the number of IPv4 firewall rules actually visible to the
	 * underlying provider in the FEA.
	 */
	get_num_provider_rules4 -> nrules:u32

	/**
	 * Get the number of IPv6 firewall rules installed by XORP.
	 */
	get_num_xorp_rules6 -> nrules:u32

	/**
	 * Get the number of IPv6 firewall rules actually visible to the
	 * underlying provider in the FEA.
	 */
	get_num_provider_rules6 -> nrules:u32

	/**
	 * Add an IPv4 family filter rule.
	 *
	 * @param ifname Name of the interface where this filter is
	 * to be applied.
	 * @param vifname Name of the vif where this filter is
	 * to be applied.
	 * @param src Source IPv4 address with network prefix.
	 * @param dst Destination IPv4 address with network prefix.
	 * @param proto IP protocol number for match (0-255, 255 is wildcard).
	 * @param sport Source TCP/UDP port (0-65535, 0 is wildcard).
	 * @param dport Destination TCP/UDP port (0-65535, 0 is wildcard).
	 * @param action Action to take when this filter is matched.
	 */
	add_filter4 ? \
		ifname:txt & \
		vifname:txt & \
		src:ipv4net & \
		dst:ipv4net & \
		proto:u32 & \
		sport:u32 & \
		dport:u32 & \
		action:txt

	/**
	 * Add an IPv6 family filter rule.
	 *
	 * @param ifname Name of the interface where this filter is
	 * to be applied.
	 * @param vifname Name of the vif where this filter is
	 * to be applied.
	 * @param src Source IPv6 address with network prefix.
	 * @param dst Destination IPv6 address with network prefix.
	 * @param proto IP protocol number for match (0-255, 255 is wildcard).
	 * @param sport Source TCP/UDP port (0-65535, 0 is wildcard).
	 * @param dport Destination TCP/UDP port (0-65535, 0 is wildcard).
	 * @param action Action to take when this filter is matched.
	 */
	add_filter6 ? \
		ifname:txt & \
		vifname:txt & \
		src:ipv6net & \
		dst:ipv6net & \
		proto:u32 & \
		sport:u32 & \
		dport:u32 & \
		action:txt

	/**
	 * Delete an IPv4 family filter rule.
	 *
	 * @param ifname Name of the interface where this filter is
	 * to be deleted.
	 * @param vifname Name of the vif where this filter is
	 * to be deleted.
	 * @param src Source IPv4 address with network prefix.
	 * @param dst Destination IPv4 address with network prefix.
	 * @param proto IP protocol number for match (0-255, 255 is wildcard).
	 * @param sport Source TCP/UDP port (0-65535, 0 is wildcard).
	 * @param dport Destination TCP/UDP port (0-65535, 0 is wildcard).
	 */
	delete_filter4 ? \
		ifname:txt & \
		vifname:txt & \
		src:ipv4net & \
		dst:ipv4net & \
		proto:u32 & \
		sport:u32 & \
		dport:u32

	/**
	 * Delete an IPv6 family filter rule.
	 *
	 * @param ifname Name of the interface where this filter is
	 * to be deleted.
	 * @param vifname Name of the vif where this filter is
	 * to be deleted.
	 * @param src Source IPv6 address with network prefix.
	 * @param dst Destination IPv6 address with network prefix.
	 * @param proto IP protocol number for match (0-255, 255 is wildcard).
	 * @param sport Source TCP/UDP port (0-65535, 0 is wildcard).
	 * @param dport Destination TCP/UDP port (0-65535, 0 is wildcard).
	 */
	delete_filter6 ? \
		ifname:txt & \
		vifname:txt & \
		src:ipv6net & \
		dst:ipv6net & \
		proto:u32 & \
		sport:u32 & \
		dport:u32

	/**
	 * Get the first IPv4 family filter rule configured in the system.
	 *
	 * @param token returned token to be provided when calling
	 * get_filter_list_next4.
	 * @param more returned to indicate whether there are more
	 * list items remaining.
	 */
	get_filter_list_start4 -> \
		token:u32 \
		& more:bool

	/**
	 * Get the next IPv4 family filter rule configured in the system.
	 *
	 * @param token token from prior call to get_filter_list_start4.
	 * @param more returned to indicate whether there are more list
	 * items remaining.
	 */
	get_filter_list_next4 ? \
		token:u32 \
		-> \
		more:bool & \
		ifname:txt & \
		vifname:txt & \
		src:ipv4net & \
		dst:ipv4net & \
		proto:u32 & \
		sport:u32 & \
		dport:u32 & \
		action:txt

	/**
	 * Get the first IPv6 family filter rule configured in the system.
	 *
	 * @param token returned token to be provided when calling
	 * get_filter_list_next6.
	 * @param more returned to indicate whether there are more
	 * list items remaining.
	 */
	get_filter_list_start6 -> \
		token:u32 \
		& more:bool

	/**
	 * Get the next IPv6 family filter rule configured in the system.
	 *
	 * @param token token from prior call to get_filter_list_start6.
	 * @param more returned to indicate whether there are more
	 * list items remaining.
	 */
	get_filter_list_next6 ? \
		token:u32 \
		-> \
		more:bool & \
		ifname:txt & \
		vifname:txt & \
		src:ipv6net & \
		dst:ipv6net & \
		proto:u32 & \
		sport:u32 & \
		dport:u32 & \
		action:txt
}
