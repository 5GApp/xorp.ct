/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/clnt-gen'.
 */

#ident "$XORP: xorp/xrl/interfaces/mld6igmp_xif.cc,v 1.1.1.1 2002/12/11 23:56:17 hodson Exp $"

#include "mld6igmp_xif.hh"

bool
XrlMld6igmpV0p1Client::send_add_protocol4(
	const char*	the_tgt, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const CB0&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/add_protocol4");
    x.args().add("xrl_sender_name", xrl_sender_name);
    x.args().add("protocol_name", protocol_name);
    x.args().add("protocol_id", protocol_id);
    x.args().add("vif_name", vif_name);
    x.args().add("vif_index", vif_index);
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall0, cb));
}


/* Unmarshall add_protocol4 */
void
XrlMld6igmpV0p1Client::unmarshall0(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB0		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_add_protocol6(
	const char*	the_tgt, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const CB1&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/add_protocol6");
    x.args().add("xrl_sender_name", xrl_sender_name);
    x.args().add("protocol_name", protocol_name);
    x.args().add("protocol_id", protocol_id);
    x.args().add("vif_name", vif_name);
    x.args().add("vif_index", vif_index);
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall1, cb));
}


/* Unmarshall add_protocol6 */
void
XrlMld6igmpV0p1Client::unmarshall1(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB1		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_delete_protocol4(
	const char*	the_tgt, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const CB2&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/delete_protocol4");
    x.args().add("xrl_sender_name", xrl_sender_name);
    x.args().add("protocol_name", protocol_name);
    x.args().add("protocol_id", protocol_id);
    x.args().add("vif_name", vif_name);
    x.args().add("vif_index", vif_index);
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall2, cb));
}


/* Unmarshall delete_protocol4 */
void
XrlMld6igmpV0p1Client::unmarshall2(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB2		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_delete_protocol6(
	const char*	the_tgt, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const CB3&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/delete_protocol6");
    x.args().add("xrl_sender_name", xrl_sender_name);
    x.args().add("protocol_name", protocol_name);
    x.args().add("protocol_id", protocol_id);
    x.args().add("vif_name", vif_name);
    x.args().add("vif_index", vif_index);
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall3, cb));
}


/* Unmarshall delete_protocol6 */
void
XrlMld6igmpV0p1Client::unmarshall3(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB3		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_enable_vif(
	const char*	the_tgt, 
	const string&	vif_name, 
	const CB4&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/enable_vif");
    x.args().add("vif_name", vif_name);
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall4, cb));
}


/* Unmarshall enable_vif */
void
XrlMld6igmpV0p1Client::unmarshall4(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB4		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_disable_vif(
	const char*	the_tgt, 
	const string&	vif_name, 
	const CB5&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/disable_vif");
    x.args().add("vif_name", vif_name);
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall5, cb));
}


/* Unmarshall disable_vif */
void
XrlMld6igmpV0p1Client::unmarshall5(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB5		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_start_vif(
	const char*	the_tgt, 
	const string&	vif_name, 
	const CB6&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/start_vif");
    x.args().add("vif_name", vif_name);
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall6, cb));
}


/* Unmarshall start_vif */
void
XrlMld6igmpV0p1Client::unmarshall6(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB6		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_stop_vif(
	const char*	the_tgt, 
	const string&	vif_name, 
	const CB7&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/stop_vif");
    x.args().add("vif_name", vif_name);
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall7, cb));
}


/* Unmarshall stop_vif */
void
XrlMld6igmpV0p1Client::unmarshall7(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB7		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_enable_all_vifs(
	const char*	the_tgt, 
	const CB8&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/enable_all_vifs");
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall8, cb));
}


/* Unmarshall enable_all_vifs */
void
XrlMld6igmpV0p1Client::unmarshall8(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB8		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_disable_all_vifs(
	const char*	the_tgt, 
	const CB9&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/disable_all_vifs");
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall9, cb));
}


/* Unmarshall disable_all_vifs */
void
XrlMld6igmpV0p1Client::unmarshall9(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB9		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_start_all_vifs(
	const char*	the_tgt, 
	const CB10&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/start_all_vifs");
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall10, cb));
}


/* Unmarshall start_all_vifs */
void
XrlMld6igmpV0p1Client::unmarshall10(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB10		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_stop_all_vifs(
	const char*	the_tgt, 
	const CB11&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/stop_all_vifs");
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall11, cb));
}


/* Unmarshall stop_all_vifs */
void
XrlMld6igmpV0p1Client::unmarshall11(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB11		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_enable_mld6igmp(
	const char*	the_tgt, 
	const CB12&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/enable_mld6igmp");
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall12, cb));
}


/* Unmarshall enable_mld6igmp */
void
XrlMld6igmpV0p1Client::unmarshall12(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB12		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_disable_mld6igmp(
	const char*	the_tgt, 
	const CB13&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/disable_mld6igmp");
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall13, cb));
}


/* Unmarshall disable_mld6igmp */
void
XrlMld6igmpV0p1Client::unmarshall13(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB13		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_enable_cli(
	const char*	the_tgt, 
	const CB14&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/enable_cli");
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall14, cb));
}


/* Unmarshall enable_cli */
void
XrlMld6igmpV0p1Client::unmarshall14(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB14		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_disable_cli(
	const char*	the_tgt, 
	const CB15&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/disable_cli");
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall15, cb));
}


/* Unmarshall disable_cli */
void
XrlMld6igmpV0p1Client::unmarshall15(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB15		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_start_mld6igmp(
	const char*	the_tgt, 
	const CB16&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/start_mld6igmp");
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall16, cb));
}


/* Unmarshall start_mld6igmp */
void
XrlMld6igmpV0p1Client::unmarshall16(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB16		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_stop_mld6igmp(
	const char*	the_tgt, 
	const CB17&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/stop_mld6igmp");
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall17, cb));
}


/* Unmarshall stop_mld6igmp */
void
XrlMld6igmpV0p1Client::unmarshall17(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB17		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_start_cli(
	const char*	the_tgt, 
	const CB18&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/start_cli");
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall18, cb));
}


/* Unmarshall start_cli */
void
XrlMld6igmpV0p1Client::unmarshall18(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB18		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_stop_cli(
	const char*	the_tgt, 
	const CB19&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/stop_cli");
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall19, cb));
}


/* Unmarshall stop_cli */
void
XrlMld6igmpV0p1Client::unmarshall19(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB19		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_enable_log_trace(
	const char*	the_tgt, 
	const CB20&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/enable_log_trace");
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall20, cb));
}


/* Unmarshall enable_log_trace */
void
XrlMld6igmpV0p1Client::unmarshall20(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB20		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlMld6igmpV0p1Client::send_disable_log_trace(
	const char*	the_tgt, 
	const CB21&	cb
)
{
    Xrl x(the_tgt, "mld6igmp/0.1/disable_log_trace");
    return _router->send(x, callback(this, &XrlMld6igmpV0p1Client::unmarshall21, cb));
}


/* Unmarshall disable_log_trace */
void
XrlMld6igmpV0p1Client::unmarshall21(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB21		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}
