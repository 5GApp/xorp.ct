/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/clnt-gen'.
 */

#ident "$XORP: xorp/xrl/interfaces/test_xif.cc,v 1.1.1.1 2002/12/11 23:56:18 hodson Exp $"

#include "test_xif.hh"

bool
XrlTestV1p0Client::send_print_hello_world(
	const char*	the_tgt, 
	const CB0&	cb
)
{
    Xrl x(the_tgt, "test/1.0/print_hello_world");
    return _router->send(x, callback(this, &XrlTestV1p0Client::unmarshall0, cb));
}


/* Unmarshall print_hello_world */
void
XrlTestV1p0Client::unmarshall0(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB0		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlTestV1p0Client::send_print_hello_world_and_message(
	const char*	the_tgt, 
	const string&	msg, 
	const CB1&	cb
)
{
    Xrl x(the_tgt, "test/1.0/print_hello_world_and_message");
    x.args().add("msg", msg);
    return _router->send(x, callback(this, &XrlTestV1p0Client::unmarshall1, cb));
}


/* Unmarshall print_hello_world_and_message */
void
XrlTestV1p0Client::unmarshall1(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB1		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlTestV1p0Client::send_get_greeting_count(
	const char*	the_tgt, 
	const CB2&	cb
)
{
    Xrl x(the_tgt, "test/1.0/get_greeting_count");
    return _router->send(x, callback(this, &XrlTestV1p0Client::unmarshall2, cb));
}


/* Unmarshall get_greeting_count */
void
XrlTestV1p0Client::unmarshall2(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB2		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%d != 1)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    int32_t num_msgs;
    try {
	a->get("num_msgs", num_msgs);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &num_msgs);
}

bool
XrlTestV1p0Client::send_get_greeting(
	const char*	the_tgt, 
	const int32_t&	greeting_num, 
	const CB3&	cb
)
{
    Xrl x(the_tgt, "test/1.0/get_greeting");
    x.args().add("greeting_num", greeting_num);
    return _router->send(x, callback(this, &XrlTestV1p0Client::unmarshall3, cb));
}


/* Unmarshall get_greeting */
void
XrlTestV1p0Client::unmarshall3(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB3		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%d != 1)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    string greeting;
    try {
	a->get("greeting", greeting);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &greeting);
}

bool
XrlTestV1p0Client::send_shoot_foot(
	const char*	the_tgt, 
	const CB4&	cb
)
{
    Xrl x(the_tgt, "test/1.0/shoot_foot");
    return _router->send(x, callback(this, &XrlTestV1p0Client::unmarshall4, cb));
}


/* Unmarshall shoot_foot */
void
XrlTestV1p0Client::unmarshall4(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB4		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}
