/* $XORP: xorp/xrl/interfaces/fea_rawpkt6.xif,v 1.5 2006/06/15 06:02:43 pavlin Exp $ */

/*
 * Interface for sending IPv6 packets on a raw socket.
 * Typically implemented by the fea.
 */

interface raw_packet6/0.1 {
	/**
	 * Send an IPv6 packet on a raw socket.
	 *
         * @param if_name the interface to send the packet on. It is
	 *                essential for multicast. In the unicast case
	 *                this field may be empty.
         * @param vif_name the vif to send the packet on. It is
	 *                 essential for multicast. In the unicast case
	 *                 this field may be empty.
	 * @param src_address the IP source address.
	 * @param dst_address the IP destination address.
	 * @param ip_protocol the IP protocol number.
	 *                    It must be between 1 and 255.
	 * @param ip_ttl the IP TTL (hop-limit). If it has a negative value,
	 *               the TTL will be set internally before transmission.
	 * @param ip_tos the Type Of Service (IP traffic class for IPv6). If
	 *               it has a negative value, the TOS will be set
	 *               internally before transmission.
	 * @param ip_router_alert if true, then add the IP Router Alert option
	 *                        to the IP packet.
	 * @param ip_internet_control if true, then this is IP control traffic.
	 * @param ext_headers_type a list of u32 integers with the types
	 *                         of the optional extention headers.
	 * @param ext_headers_payload a list of payload data, one for each
	 *                            optional extention header. The number
	 *                            of entries must match ext_headers_type.
	 * @param payload the payload, everything after the IP header and
	 *                options.
	 */
	send	? if_name:txt  						\
		& vif_name:txt 						\
		& src_address:ipv6					\
		& dst_address:ipv6  					\
		& ip_protocol:u32  					\
		& ip_ttl:i32						\
		& ip_tos:i32						\
		& ip_router_alert:bool 					\
		& ip_internet_control:bool				\
		& ext_headers_type:list					\
		& ext_headers_payload:list				\
		& payload:binary

	/**
	 * Register to receive IPv6 packets.  The receiver is expected to
	 * support raw_packet6_client/0.1 interface.
	 *
	 * @param xrl_target_name the receiver's XRL target name.
         * @param if_name the interface through which packets should be
	 *                accepted.
         * @param vif_name the vif through which packets should be accepted.
	 * @param ip_protocol the IP protocol number that the receiver is
	 *                    interested in.
	 *                    It must be between 0 and 255.
	 *                    A protocol number of 0 is used to specify all
	 *                    protocols.
	 * @param enable_multicast_loopback if true then enable delivering
	 *                                  of multicast datagrams back to
	 *                                  this host (assuming the host is
	 *                                  a member of the same multicast
	 *                                  group.
	 */
	register_receiver	? xrl_target_name:txt			\
				& if_name:txt				\
				& vif_name:txt				\
				& ip_protocol:u32			\
				& enable_multicast_loopback:bool

	/**
	 * Unregister to receive IPv6 packets.
	 *
	 * @param xrl_target_name the receiver's XRL target name.
         * @param if_name the interface through which packets should not
	 *                be accepted.
         * @param vif_name the vif through which packets should not be
	 *                 accepted.
	 * @param ip_protocol the IP Protocol number that the receiver is
	 *                    not interested in anymore.
	 *                    It must be between 0 and 255.
	 *                    A protocol number of 0 is used to specify all
	 *                    protocols.
	 */
	unregister_receiver	? xrl_target_name:txt			\
				& if_name:txt				\
				& vif_name:txt				\
				& ip_protocol:u32

	/**
	 * Join an IPv6 multicast group.
	 *
	 * @param xrl_target_name the receiver's XRL target name.
         * @param if_name the interface through which packets should be
	 *                accepted.
         * @param vif_name the vif through which packets should be accepted.
	 * @param ip_protocol the IP protocol number that the receiver is
	 *                    interested in.
	 *                    It must be between 0 and 255.
	 *                    A protocol number of 0 is used to specify all
	 *                    protocols.
	 * @param group_address the multicast group address to join.
	 */
	join_multicast_group	? xrl_target_name:txt			\
				& if_name:txt				\
				& vif_name:txt				\
				& ip_protocol:u32			\
				& group_address:ipv6

	/**
	 * Leave an IPv6 multicast group.
	 *
	 * @param xrl_target_name the receiver's XRL target name.
         * @param if_name the interface through which packets should not be
	 *                accepted.
         * @param vif_name the vif through which packets should not be
	 *                 accepted.
	 * @param ip_protocol the IP protocol number that the receiver is
	 *                    not interested in anymore.
	 *                    It must be between 0 and 255.
	 *                    A protocol number of 0 is used to specify all
	 *                    protocols.
	 * @param group_address the multicast group address to leave.
	 */
	leave_multicast_group	? xrl_target_name:txt			\
				& if_name:txt				\
				& vif_name:txt				\
				& ip_protocol:u32			\
				& group_address:ipv6
}
