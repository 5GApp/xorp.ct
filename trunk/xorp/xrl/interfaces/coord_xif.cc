/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/clnt-gen'.
 */

#ident "$XORP: xorp/xrl/interfaces/coord_xif.cc,v 1.1.1.1 2002/12/11 23:56:17 hodson Exp $"

#include "coord_xif.hh"

bool
XrlCoordV0p1Client::send_command(
	const char*	the_tgt, 
	const string&	command, 
	const CB0&	cb
)
{
    Xrl x(the_tgt, "coord/0.1/command");
    x.args().add("command", command);
    return _router->send(x, callback(this, &XrlCoordV0p1Client::unmarshall0, cb));
}


/* Unmarshall command */
void
XrlCoordV0p1Client::unmarshall0(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB0		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%d != 0)", a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlCoordV0p1Client::send_pending(
	const char*	the_tgt, 
	const CB1&	cb
)
{
    Xrl x(the_tgt, "coord/0.1/pending");
    return _router->send(x, callback(this, &XrlCoordV0p1Client::unmarshall1, cb));
}


/* Unmarshall pending */
void
XrlCoordV0p1Client::unmarshall1(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB1		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%d != 1)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    bool pending;
    try {
	a->get("pending", pending);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &pending);
}
