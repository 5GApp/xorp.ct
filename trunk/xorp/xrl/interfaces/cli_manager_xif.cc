/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/clnt-gen'.
 */

#ident "$XORP: xorp/xrl/interfaces/cli_manager_xif.cc,v 1.5 2002/11/19 19:31:42 hodson Exp $"

#include "cli_manager_xif.hh"

bool
XrlCliManagerV0p1Client::send_add_cli_command(
	const char*	the_tgt, 
	const string&	processor_name, 
	const string&	command_name, 
	const string&	command_help, 
	const bool&	is_command_cd, 
	const string&	command_cd_prompt, 
	const bool&	is_command_processor, 
	const CB0&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/add_cli_command");
    x.args().add("processor_name", processor_name);
    x.args().add("command_name", command_name);
    x.args().add("command_help", command_help);
    x.args().add("is_command_cd", is_command_cd);
    x.args().add("command_cd_prompt", command_cd_prompt);
    x.args().add("is_command_processor", is_command_processor);
    return _router->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall0, cb));
}


/* Unmarshall add_cli_command */
void
XrlCliManagerV0p1Client::unmarshall0(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB0		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}

bool
XrlCliManagerV0p1Client::send_delete_cli_command(
	const char*	the_tgt, 
	const string&	processor_name, 
	const string&	command_name, 
	const CB1&	cb
)
{
    Xrl x(the_tgt, "cli_manager/0.1/delete_cli_command");
    x.args().add("processor_name", processor_name);
    x.args().add("command_name", command_name);
    return _router->send(x, callback(this, &XrlCliManagerV0p1Client::unmarshall1, cb));
}


/* Unmarshall delete_cli_command */
void
XrlCliManagerV0p1Client::unmarshall1(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB1		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%d != 2)", a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    bool fail;
    string reason;
    try {
	a->get("fail", fail);
	a->get("reason", reason);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &fail, &reason);
}
