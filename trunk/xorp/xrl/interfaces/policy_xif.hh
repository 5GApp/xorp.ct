/*
 * Copyright (c) 2001-2004 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 *
 * $XORP$
 */

#ifndef __XRL_INTERFACES_POLICY_XIF_HH__
#define __XRL_INTERFACES_POLICY_XIF_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XifPolicy"

#include "libxorp/xlog.h"
#include "libxorp/callback.hh"

#include "libxipc/xrl.hh"
#include "libxipc/xrl_error.hh"
#include "libxipc/xrl_sender.hh"


class XrlPolicyV0p1Client {
public:
    XrlPolicyV0p1Client(XrlSender* s) : _sender(s) {}
    virtual ~XrlPolicyV0p1Client() {}

    typedef XorpCallback1<void, const XrlError&>::RefPtr CreateTermCB;

    bool send_create_term(
	const char*	target_name,
	const string&	policy,
	const string&	term,
	const CreateTermCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeleteTermCB;

    bool send_delete_term(
	const char*	target_name,
	const string&	policy,
	const string&	term,
	const DeleteTermCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr UpdateTermSourceCB;

    bool send_update_term_source(
	const char*	target_name,
	const string&	policy,
	const string&	term,
	const string&	source,
	const UpdateTermSourceCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr UpdateTermDestCB;

    bool send_update_term_dest(
	const char*	target_name,
	const string&	policy,
	const string&	term,
	const string&	dest,
	const UpdateTermDestCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr UpdateTermActionCB;

    bool send_update_term_action(
	const char*	target_name,
	const string&	policy,
	const string&	term,
	const string&	action,
	const UpdateTermActionCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CreatePolicyCB;

    bool send_create_policy(
	const char*	target_name,
	const string&	policy,
	const CreatePolicyCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeletePolicyCB;

    bool send_delete_policy(
	const char*	target_name,
	const string&	policy,
	const DeletePolicyCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CreateSetCB;

    bool send_create_set(
	const char*	target_name,
	const string&	set,
	const CreateSetCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr UpdateSetCB;

    bool send_update_set(
	const char*	target_name,
	const string&	set,
	const string&	elements,
	const UpdateSetCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeleteSetCB;

    bool send_delete_set(
	const char*	target_name,
	const string&	set,
	const DeleteSetCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DoneGlobalPolicyConfCB;

    bool send_done_global_policy_conf(
	const char*	target_name,
	const DoneGlobalPolicyConfCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ImportCB;

    bool send_import(
	const char*	target_name,
	const string&	protocol,
	const string&	policies,
	const ImportCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ExportCB;

    bool send_export(
	const char*	target_name,
	const string&	protocol,
	const string&	policies,
	const ExportCB&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const string*>::RefPtr GetConfCB;

    bool send_get_conf(
	const char*	target_name,
	const GetConfCB&	cb
    );

protected:
    XrlSender* _sender;

private:
    void unmarshall_create_term(
	const XrlError&	e,
	XrlArgs*	a,
	CreateTermCB		cb
    );

    void unmarshall_delete_term(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteTermCB		cb
    );

    void unmarshall_update_term_source(
	const XrlError&	e,
	XrlArgs*	a,
	UpdateTermSourceCB		cb
    );

    void unmarshall_update_term_dest(
	const XrlError&	e,
	XrlArgs*	a,
	UpdateTermDestCB		cb
    );

    void unmarshall_update_term_action(
	const XrlError&	e,
	XrlArgs*	a,
	UpdateTermActionCB		cb
    );

    void unmarshall_create_policy(
	const XrlError&	e,
	XrlArgs*	a,
	CreatePolicyCB		cb
    );

    void unmarshall_delete_policy(
	const XrlError&	e,
	XrlArgs*	a,
	DeletePolicyCB		cb
    );

    void unmarshall_create_set(
	const XrlError&	e,
	XrlArgs*	a,
	CreateSetCB		cb
    );

    void unmarshall_update_set(
	const XrlError&	e,
	XrlArgs*	a,
	UpdateSetCB		cb
    );

    void unmarshall_delete_set(
	const XrlError&	e,
	XrlArgs*	a,
	DeleteSetCB		cb
    );

    void unmarshall_done_global_policy_conf(
	const XrlError&	e,
	XrlArgs*	a,
	DoneGlobalPolicyConfCB		cb
    );

    void unmarshall_import(
	const XrlError&	e,
	XrlArgs*	a,
	ImportCB		cb
    );

    void unmarshall_export(
	const XrlError&	e,
	XrlArgs*	a,
	ExportCB		cb
    );

    void unmarshall_get_conf(
	const XrlError&	e,
	XrlArgs*	a,
	GetConfCB		cb
    );

};

#endif /* __XRL_INTERFACES_POLICY_XIF_HH__ */
