/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 *
 * $XORP: xorp/xrl/interfaces/mld6igmp_xif.hh,v 1.7 2003/03/25 06:55:10 pavlin Exp $
 */

#ifndef __XRL_INTERFACES_MLD6IGMP_XIF_HH__
#define __XRL_INTERFACES_MLD6IGMP_XIF_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XifMld6igmp"

#include "libxorp/xlog.h"
#include "libxorp/callback.hh"

#include "libxipc/xrl.hh"
#include "libxipc/xrl_error.hh"
#include "libxipc/xrl_sender.hh"


class XrlMld6igmpV0p1Client {
public:
    XrlMld6igmpV0p1Client(XrlSender* s) : _sender(s) {}
    virtual ~XrlMld6igmpV0p1Client() {}

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB0;
    /**
     *  Send Xrl intended to:
     *  
     *  Enable/disable/start/stop a MLD6IGMP vif interface.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param vif_name the name of the vif to enable/disable/start/stop.
     */
    bool send_enable_vif(
	const char*	target_name, 
	const string&	vif_name, 
	const CB0&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB1;

    bool send_disable_vif(
	const char*	target_name, 
	const string&	vif_name, 
	const CB1&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB2;

    bool send_start_vif(
	const char*	target_name, 
	const string&	vif_name, 
	const CB2&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB3;

    bool send_stop_vif(
	const char*	target_name, 
	const string&	vif_name, 
	const CB3&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB4;
    /**
     *  Send Xrl intended to:
     *  
     *  Enable/disable/start/stop all MLD6IGMP vif interfaces.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_enable_all_vifs(
	const char*	target_name, 
	const CB4&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB5;

    bool send_disable_all_vifs(
	const char*	target_name, 
	const CB5&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB6;

    bool send_start_all_vifs(
	const char*	target_name, 
	const CB6&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB7;

    bool send_stop_all_vifs(
	const char*	target_name, 
	const CB7&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB8;
    /**
     *  Send Xrl intended to:
     *  
     *  Enable/disable/start/stop MLD6IGMP protocol and the MLD6IGMP CLI
     *  access.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_enable_mld6igmp(
	const char*	target_name, 
	const CB8&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB9;

    bool send_disable_mld6igmp(
	const char*	target_name, 
	const CB9&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB10;

    bool send_enable_cli(
	const char*	target_name, 
	const CB10&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB11;

    bool send_disable_cli(
	const char*	target_name, 
	const CB11&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB12;

    bool send_start_mld6igmp(
	const char*	target_name, 
	const CB12&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB13;

    bool send_stop_mld6igmp(
	const char*	target_name, 
	const CB13&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB14;

    bool send_start_cli(
	const char*	target_name, 
	const CB14&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB15;

    bool send_stop_cli(
	const char*	target_name, 
	const CB15&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const uint32_t*>::RefPtr CB16;
    /**
     *  Send Xrl intended to:
     *  
     *  Configure MLD6IGMP interface-related metrics. The 'set_foo' XRLs set
     *  the particular values. The 'reset_foo' XRLs reset the metrics to their
     *  default values.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param vif_name the name of the vif to configure.
     */
    bool send_get_vif_proto_version(
	const char*	target_name, 
	const string&	vif_name, 
	const CB16&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB17;

    bool send_set_vif_proto_version(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	proto_version, 
	const CB17&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB18;

    bool send_reset_vif_proto_version(
	const char*	target_name, 
	const string&	vif_name, 
	const CB18&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB19;
    /**
     *  Send Xrl intended to:
     *  
     *  Enable/disable the MLD6IGMP trace log.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_enable_log_trace(
	const char*	target_name, 
	const CB19&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB20;

    bool send_disable_log_trace(
	const char*	target_name, 
	const CB20&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB21;
    /**
     *  Send Xrl intended to:
     *  
     *  Add/delete a client protocol in the MLD/IGMP protocol.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param xrl_sender_name the XRL name of the originator of this XRL.
     *  
     *  @param protocol_name the name of the protocol to add/delete.
     *  
     *  @param protocol_id the ID of the protocol to add/delete (both sides
     *  must agree on the particular values).
     *  
     *  @param vif_name the name of the vif the protocol add/delete to apply
     *  to.
     *  
     *  @param vif_index the index of the vif the protocol add/delete to apply
     *  to. The added protocol will receive Join/Leave membership information
     *  about same-LAN members for the particular vif.
     */
    bool send_add_protocol4(
	const char*	target_name, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const CB21&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB22;

    bool send_add_protocol6(
	const char*	target_name, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const CB22&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB23;

    bool send_delete_protocol4(
	const char*	target_name, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const CB23&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB24;

    bool send_delete_protocol6(
	const char*	target_name, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const CB24&	cb
    );

protected:
    XrlSender* _sender;

private:
    void unmarshall0(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB0		cb
    );

    void unmarshall1(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB1		cb
    );

    void unmarshall2(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB2		cb
    );

    void unmarshall3(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB3		cb
    );

    void unmarshall4(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB4		cb
    );

    void unmarshall5(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB5		cb
    );

    void unmarshall6(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB6		cb
    );

    void unmarshall7(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB7		cb
    );

    void unmarshall8(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB8		cb
    );

    void unmarshall9(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB9		cb
    );

    void unmarshall10(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB10		cb
    );

    void unmarshall11(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB11		cb
    );

    void unmarshall12(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB12		cb
    );

    void unmarshall13(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB13		cb
    );

    void unmarshall14(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB14		cb
    );

    void unmarshall15(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB15		cb
    );

    void unmarshall16(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB16		cb
    );

    void unmarshall17(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB17		cb
    );

    void unmarshall18(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB18		cb
    );

    void unmarshall19(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB19		cb
    );

    void unmarshall20(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB20		cb
    );

    void unmarshall21(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB21		cb
    );

    void unmarshall22(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB22		cb
    );

    void unmarshall23(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB23		cb
    );

    void unmarshall24(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB24		cb
    );

};

#endif /* __XRL_INTERFACES_MLD6IGMP_XIF_HH__ */
