/* $XORP: xorp/xrl/interfaces/bgp.xif,v 1.16 2004/05/11 00:44:36 atanu Exp $ */

/*
** BGP protocol XRL interface.
*/
interface bgp/0.2 {
	/**
	 *  Get the BGP version currently running.
	 */
	get_bgp_version -> version:u32

	/**
	 * Get local config
	 *
	 * @param as_num our AS number.
	 * @param id our BGP ID.
	 */

	local_config \
		? \
		as:u32 \
		& id:ipv4

	/**
	 * Set the local AS number.
	 *
	 * @param as our AS number.
	 */
	
	set_local_as ? as:u32

	/**
	 *  Get the local AS number.
	 */
	get_local_as -> as:u32

	/**
         * Set the BGP id.
	 *
	 * @param id our BGP ID.
	 */

	set_bgp_id ? id:ipv4

	/**
	 *  Get the BGP id.
	 */
	get_bgp_id -> id:ipv4

	/** 
	 * Add peer.
	 *
	 * @param local IP address.
	 * @param local server port.
	 * @param peer IP address.
	 * @param peer port.
	 * @param as the peer's AS number.
	 * @param next_hop the local next hop.
	 * @param holdtime expects traffic in this time interval.
	 */
	add_peer \
		? \
		local_ip:txt \
	        & local_port:u32 \
		& peer_ip:txt \
		& peer_port:u32 \
		& as:u32 \
		& next_hop:ipv4 \
	        & holdtime:u32

	/**
	 * Delete peer.
	 *
	 * @param local IP address.
	 * @param local server port.
	 * @param peer IP address.
	 * @param peer port.
	 */
	delete_peer \
		? \
		local_ip:txt \
	        & local_port:u32 \
		& peer_ip:txt \
		& peer_port:u32

	/** 
	 * Enable this peer.
	 *
	 * @param local IP address.
	 * @param local server port.
	 * @param peer IP address.
	 * @param peer port.
	 */
	enable_peer \
		? \
		local_ip:txt \
	        & local_port:u32 \
		& peer_ip:txt \
		& peer_port:u32

	/**
	 * Disable this peer.
	 *
	 * @param local IP address.
	 * @param local server port.
	 * @param peer IP address.
	 * @param peer port.
	 */
	disable_peer \
		? \
		local_ip:txt \
	        & local_port:u32 \
		& peer_ip:txt \
		& peer_port:u32

	/**
         * Set the peer state enabled or disabled.
	 *
	 * @param local IP address.
	 * @param local server port.
	 * @param peer IP address.
	 * @param peer port.
         * @param toggle enabled or disabled.
	 */
	set_peer_state \
		? \
		local_ip:txt \
	        & local_port:u32 \
		& peer_ip:txt \
		& peer_port:u32 \
		& toggle:bool

	/**
         * Enable or disable the peering based on the peer state.
	 *
	 * @param local IP address.
	 * @param local server port.
	 * @param peer IP address.
	 * @param peer port.
	 */
	activate \
		? \
		local_ip:txt \
	        & local_port:u32 \
		& peer_ip:txt \
		& peer_port:u32

	/**
	 * Set which parameters we support per peer
	 */
         set_parameter \
		? \
		local_ip:txt \
	        & local_port:u32 \
		& peer_ip:txt \
		& peer_port:u32 \
		& parameter:txt

	/**
	 * Set next hop rewrite filter.
	 *
	 * XXX - This is a temporary hack until we get programmable filters.
	 * 
	 * @param local IP address.
	 * @param local server port.
	 * @param peer IP address.
	 * @param peer port.
	 * @param next hop IP value. A value of zero clears filter.
	 *
	 */
	 next_hop_rewrite_filter \
		? \
		local_ip:txt \
	        & local_port:u32 \
		& peer_ip:txt \
		& peer_port:u32 \
		& next_hop:ipv4

	/**
	 * Originate route IPv4
	 *
	 * @param nlri subnet to announce
	 * @param next_hop to forward to
	 * @param unicast if true install in unicast routing table
	 * @param multicast if true install in multicast routing table
	 */
	originate_route4 \
		? \
		nlri:ipv4net \
		& next_hop:ipv4 \
		& unicast:bool \
		& multicast:bool

	/**
	 * Originate route IPv6
	 *
	 * @param nlri subnet to announce
	 * @param next_hop to forward to
	 * @param unicast if true install in unicast routing table
	 * @param multicast if true install in multicast routing table
	 */
	originate_route6 \
		? \
		nlri:ipv6net \
		& next_hop:ipv6 \
		& unicast:bool \
		& multicast:bool

	/**
	 * Withdraw route IPv4
	 *
	 * @param nlri subnet to withdraw
	 * @param unicast if true withdraw from unicast routing table
	 * @param multicast if true withdraw from multicast routing table
	 */
	withdraw_route4 \
		? \
		nlri:ipv4net \
		& unicast:bool \
		& multicast:bool

	/**
	 * Withdraw route IPv6
	 *
	 * @param nlri subnet to withdraw
	 * @param unicast if true withdraw from unicast routing table
	 * @param multicast if true withdraw from multicast routing table
	 */
	withdraw_route6 \
		? \
		nlri:ipv6net \
		& unicast:bool \
		& multicast:bool

	/**
	 * Get the first item of a list of BGP peers
	 * See RFC 1657 (BGP MIB) for full definitions of return values.
	 *	
	 * @param token returned token to be provided when calling 
	 * get_peer_list_next.
	 * @param more returned to indicate whether there are more list items 
	 * remaining.
	 */	
	get_peer_list_start -> \
		token:u32 \
		& more:bool 

	/**
	 * Get the next item of a list of BGP peers
	 *
	 * @param token token from prior call to get_peer_list
	 * @param more returned to indicate whether there are more list items 
	 * remaining.
	 */	
	get_peer_list_next \
		? \
		token:u32 \
		-> \
		local_ip:ipv4 \
		& local_port:u32 \
		& peer_ip:ipv4 \
		& peer_port:u32 \
		& more:bool

         
	get_peer_id \
		? \
		local_ip:ipv4 \
		& local_port:u32 \
		& peer_ip:ipv4 \
		& peer_port:u32 \
		-> \
		peer_id:ipv4 

	get_peer_status \
		? \
		local_ip:ipv4 \
		& local_port:u32 \
		& peer_ip:ipv4 \
		& peer_port:u32 \
		-> \
		peer_state:u32 \
		& admin_status:u32

	get_peer_negotiated_version \
		? \
		local_ip:ipv4 \
		& local_port:u32 \
		& peer_ip:ipv4 \
		& peer_port:u32 \
		-> \
		neg_version:i32 

	get_peer_as \
		? \
		local_ip:ipv4 \
		& local_port:u32 \
		& peer_ip:ipv4 \
		& peer_port:u32 \
		-> \
		peer_as:u32 

	get_peer_msg_stats \
		? \
		local_ip:ipv4 \
		& local_port:u32 \
		& peer_ip:ipv4 \
		& peer_port:u32 \
		-> \
		in_updates:u32 \
		& out_updates:u32 \
		& in_msgs:u32 \
		& out_msgs:u32 \
		& last_error:u32 \
		& in_update_elapsed:u32

	get_peer_established_stats \
		? \
		local_ip:ipv4 \
		& local_port:u32 \
		& peer_ip:ipv4 \
		& peer_port:u32 \
		-> \
		transitions:u32 \
		& established_time:u32 


	get_peer_timer_config \
		? \
		local_ip:ipv4 \
		& local_port:u32 \
		& peer_ip:ipv4 \
		& peer_port:u32 \
		-> \
		retry_interval:u32 \
		& hold_time:u32 \
		& keep_alive:u32 \
		& hold_time_conf:u32 \
		& keep_alive_conf:u32 \
		& min_as_orgination_interval:u32 \
		& min_route_adv_interval:u32 

	/**
	 * Register rib.
	 *
	 * @param name rib name.
	 */
	register_rib \
		? \
		name:txt
	/**
	 * Get the first item of a list of BGP routes
	 * See RFC 1657 (BGP MIB) for full definitions of return values.
	 *	
	 * @param unicast
         * @param multicast
	 *
	 * @return token returned token to be provided when calling
	 * get_route_list_next. 
	 */	
	get_v4_route_list_start \
	        ? \
		unicast:bool \
		& multicast:bool \
		-> \
		token:u32

	/**
	 * Get the first item of a list of BGP routes
	 * See RFC 1657 (BGP MIB) for full definitions of return values.
	 *	
	 * @param unicast
         * @param multicast
	 *
	 * @return token returned token to be provided when calling
	 * get_route_list_next. 
	 */	
	get_v6_route_list_start \
	        ? \
		unicast:bool \
		& multicast:bool \
		-> \
		token:u32

	/**
         * Get the next route in the list
	 * See RFC 1657 (BGP MIB) for full definitions of return values.
         */
        get_v4_route_list_next \
		? \
		token:u32 \
		-> \
		peer_id:ipv4 \
		& net:ipv4net \
		& best_and_origin:u32 \
		& aspath:binary \
		& nexthop:ipv4 \
		& med:i32 \
		& localpref:i32 \
		& atomic_agg:i32 \
		& aggregator:binary \
		& calc_localpref:i32 \
		& attr_unknown:binary \
		& valid:bool \
	        & unicast:bool \
	        & multicast:bool

	/**
         * Get the next route in the list
	 * See RFC 1657 (BGP MIB) for full definitions of return values.
         */
        get_v6_route_list_next \
		? \
		token:u32 \
		-> \
		peer_id:ipv4 \
		& net:ipv6net \
		& best_and_origin:u32 \
		& aspath:binary \
		& nexthop:ipv6 \
		& med:i32 \
		& localpref:i32 \
		& atomic_agg:i32 \
		& aggregator:binary \
		& calc_localpref:i32 \
		& attr_unknown:binary \
		& valid:bool \
	        & unicast:bool \
	        & multicast:bool
}
