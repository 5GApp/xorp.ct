/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 *
 * $XORP$
 */

#ifndef __XRL_INTERFACES_PIM_XIF_HH__
#define __XRL_INTERFACES_PIM_XIF_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XifPim"

#include "libxorp/xlog.h"
#include "libxorp/callback.hh"

#include "libxipc/xrl.hh"
#include "libxipc/xrl_error.hh"
#include "libxipc/xrl_sender.hh"


class XrlPimV0p1Client {
public:
    XrlPimV0p1Client(XrlSender* s) : _sender(s) {}
    virtual ~XrlPimV0p1Client() {}

    typedef XorpCallback1<void, const XrlError&>::RefPtr EnableVifCB;
    /**
     *  Send Xrl intended to:
     *  
     *  Enable/disable/start/stop a PIM vif interface.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param vif_name the name of the vif to enable/disable/start/stop.
     */
    bool send_enable_vif(
	const char*	target_name, 
	const string&	vif_name, 
	const EnableVifCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DisableVifCB;

    bool send_disable_vif(
	const char*	target_name, 
	const string&	vif_name, 
	const DisableVifCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr StartVifCB;

    bool send_start_vif(
	const char*	target_name, 
	const string&	vif_name, 
	const StartVifCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr StopVifCB;

    bool send_stop_vif(
	const char*	target_name, 
	const string&	vif_name, 
	const StopVifCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr EnableAllVifsCB;
    /**
     *  Send Xrl intended to:
     *  
     *  Enable/disable/start/stop all PIM vif interfaces.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_enable_all_vifs(
	const char*	target_name, 
	const EnableAllVifsCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DisableAllVifsCB;

    bool send_disable_all_vifs(
	const char*	target_name, 
	const DisableAllVifsCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr StartAllVifsCB;

    bool send_start_all_vifs(
	const char*	target_name, 
	const StartAllVifsCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr StopAllVifsCB;

    bool send_stop_all_vifs(
	const char*	target_name, 
	const StopAllVifsCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr EnablePimCB;
    /**
     *  Send Xrl intended to:
     *  
     *  Enable/disable/start/stop PIM protocol and PIM CLI access.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_enable_pim(
	const char*	target_name, 
	const EnablePimCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DisablePimCB;

    bool send_disable_pim(
	const char*	target_name, 
	const DisablePimCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr EnableCliCB;

    bool send_enable_cli(
	const char*	target_name, 
	const EnableCliCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DisableCliCB;

    bool send_disable_cli(
	const char*	target_name, 
	const DisableCliCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr StartPimCB;

    bool send_start_pim(
	const char*	target_name, 
	const StartPimCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr StopPimCB;

    bool send_stop_pim(
	const char*	target_name, 
	const StopPimCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr StartCliCB;

    bool send_start_cli(
	const char*	target_name, 
	const StartCliCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr StopCliCB;

    bool send_stop_cli(
	const char*	target_name, 
	const StopCliCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr EnableBsrCB;
    /**
     *  Send Xrl intended to:
     *  
     *  Enable/disable/start/stop BSR.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_enable_bsr(
	const char*	target_name, 
	const EnableBsrCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DisableBsrCB;

    bool send_disable_bsr(
	const char*	target_name, 
	const DisableBsrCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr StartBsrCB;

    bool send_start_bsr(
	const char*	target_name, 
	const StartBsrCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr StopBsrCB;

    bool send_stop_bsr(
	const char*	target_name, 
	const StopBsrCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddConfigScopeZoneByVifName4CB;
    /**
     *  Send Xrl intended to:
     *  
     *  Add/delete scope zone.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param scope_zone_id the ID of the configured zone.
     *  
     *  @param vif_name the name of the vif to use as a bondary of the scope
     *  zone.
     */
    bool send_add_config_scope_zone_by_vif_name4(
	const char*	target_name, 
	const IPv4Net&	scope_zone_id, 
	const string&	vif_name, 
	const AddConfigScopeZoneByVifName4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddConfigScopeZoneByVifName6CB;

    bool send_add_config_scope_zone_by_vif_name6(
	const char*	target_name, 
	const IPv6Net&	scope_zone_id, 
	const string&	vif_name, 
	const AddConfigScopeZoneByVifName6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddConfigScopeZoneByVifAddr4CB;

    bool send_add_config_scope_zone_by_vif_addr4(
	const char*	target_name, 
	const IPv4Net&	scope_zone_id, 
	const IPv4&	vif_addr, 
	const AddConfigScopeZoneByVifAddr4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddConfigScopeZoneByVifAddr6CB;

    bool send_add_config_scope_zone_by_vif_addr6(
	const char*	target_name, 
	const IPv6Net&	scope_zone_id, 
	const IPv6&	vif_addr, 
	const AddConfigScopeZoneByVifAddr6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeleteConfigScopeZoneByVifName4CB;

    bool send_delete_config_scope_zone_by_vif_name4(
	const char*	target_name, 
	const IPv4Net&	scope_zone_id, 
	const string&	vif_name, 
	const DeleteConfigScopeZoneByVifName4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeleteConfigScopeZoneByVifName6CB;

    bool send_delete_config_scope_zone_by_vif_name6(
	const char*	target_name, 
	const IPv6Net&	scope_zone_id, 
	const string&	vif_name, 
	const DeleteConfigScopeZoneByVifName6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeleteConfigScopeZoneByVifAddr4CB;

    bool send_delete_config_scope_zone_by_vif_addr4(
	const char*	target_name, 
	const IPv4Net&	scope_zone_id, 
	const IPv4&	vif_addr, 
	const DeleteConfigScopeZoneByVifAddr4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeleteConfigScopeZoneByVifAddr6CB;

    bool send_delete_config_scope_zone_by_vif_addr6(
	const char*	target_name, 
	const IPv6Net&	scope_zone_id, 
	const IPv6&	vif_addr, 
	const DeleteConfigScopeZoneByVifAddr6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddConfigCandBsrByVifName4CB;
    /**
     *  Send Xrl intended to:
     *  
     *  Add/delete candidate-BSR configuration.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param scope_zone_id the ID of the configured zone.
     *  
     *  @param is_scope_zone true if configuring administratively scoped zone.
     *  
     *  @param vif_name the name of the vif to use its address as a
     *  candidate-BSR.
     *  
     *  @param bsr_priority the BSR priority (larger is better).
     *  
     *  @param hash_masklen the hash mask length.
     */
    bool send_add_config_cand_bsr_by_vif_name4(
	const char*	target_name, 
	const IPv4Net&	scope_zone_id, 
	const bool&	is_scope_zone, 
	const string&	vif_name, 
	const uint32_t&	bsr_priority, 
	const uint32_t&	hash_masklen, 
	const AddConfigCandBsrByVifName4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddConfigCandBsrByVifName6CB;

    bool send_add_config_cand_bsr_by_vif_name6(
	const char*	target_name, 
	const IPv6Net&	scope_zone_id, 
	const bool&	is_scope_zone, 
	const string&	vif_name, 
	const uint32_t&	bsr_priority, 
	const uint32_t&	hash_masklen, 
	const AddConfigCandBsrByVifName6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddConfigCandBsrByAddr4CB;

    bool send_add_config_cand_bsr_by_addr4(
	const char*	target_name, 
	const IPv4Net&	scope_zone_id, 
	const bool&	is_scope_zone, 
	const IPv4&	cand_bsr_addr, 
	const uint32_t&	bsr_priority, 
	const uint32_t&	hash_masklen, 
	const AddConfigCandBsrByAddr4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddConfigCandBsrByAddr6CB;

    bool send_add_config_cand_bsr_by_addr6(
	const char*	target_name, 
	const IPv6Net&	scope_zone_id, 
	const bool&	is_scope_zone, 
	const IPv6&	cand_bsr_addr, 
	const uint32_t&	bsr_priority, 
	const uint32_t&	hash_masklen, 
	const AddConfigCandBsrByAddr6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeleteConfigCandBsr4CB;

    bool send_delete_config_cand_bsr4(
	const char*	target_name, 
	const IPv4Net&	scope_zone_id, 
	const bool&	is_scope_zone, 
	const DeleteConfigCandBsr4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeleteConfigCandBsr6CB;

    bool send_delete_config_cand_bsr6(
	const char*	target_name, 
	const IPv6Net&	scope_zone_id, 
	const bool&	is_scope_zone, 
	const DeleteConfigCandBsr6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddConfigCandRpByVifName4CB;
    /**
     *  Send Xrl intended to:
     *  
     *  Add/delete Candidate-RP configuration.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param group_prefix the group prefix of the configured zone.
     *  
     *  @param is_scope_zone true if configuring administratively scoped zone.
     *  
     *  @param vif_name the name of the vif to use its address as a
     *  candidate-RP.
     *  
     *  @param rp_priority the Cand-RP priority (smaller is better).
     *  
     *  @param rp_holdtime the Cand-RP holdtime (in seconds).
     */
    bool send_add_config_cand_rp_by_vif_name4(
	const char*	target_name, 
	const IPv4Net&	group_prefix, 
	const bool&	is_scope_zone, 
	const string&	vif_name, 
	const uint32_t&	rp_priority, 
	const uint32_t&	rp_holdtime, 
	const AddConfigCandRpByVifName4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddConfigCandRpByVifName6CB;

    bool send_add_config_cand_rp_by_vif_name6(
	const char*	target_name, 
	const IPv6Net&	group_prefix, 
	const bool&	is_scope_zone, 
	const string&	vif_name, 
	const uint32_t&	rp_priority, 
	const uint32_t&	rp_holdtime, 
	const AddConfigCandRpByVifName6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddConfigCandRpByAddr4CB;

    bool send_add_config_cand_rp_by_addr4(
	const char*	target_name, 
	const IPv4Net&	group_prefix, 
	const bool&	is_scope_zone, 
	const IPv4&	cand_rp_addr, 
	const uint32_t&	rp_priority, 
	const uint32_t&	rp_holdtime, 
	const AddConfigCandRpByAddr4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddConfigCandRpByAddr6CB;

    bool send_add_config_cand_rp_by_addr6(
	const char*	target_name, 
	const IPv6Net&	group_prefix, 
	const bool&	is_scope_zone, 
	const IPv6&	cand_rp_addr, 
	const uint32_t&	rp_priority, 
	const uint32_t&	rp_holdtime, 
	const AddConfigCandRpByAddr6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeleteConfigCandRpByVifName4CB;

    bool send_delete_config_cand_rp_by_vif_name4(
	const char*	target_name, 
	const IPv4Net&	group_prefix, 
	const bool&	is_scope_zone, 
	const string&	vif_name, 
	const DeleteConfigCandRpByVifName4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeleteConfigCandRpByVifName6CB;

    bool send_delete_config_cand_rp_by_vif_name6(
	const char*	target_name, 
	const IPv6Net&	group_prefix, 
	const bool&	is_scope_zone, 
	const string&	vif_name, 
	const DeleteConfigCandRpByVifName6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeleteConfigCandRpByAddr4CB;

    bool send_delete_config_cand_rp_by_addr4(
	const char*	target_name, 
	const IPv4Net&	group_prefix, 
	const bool&	is_scope_zone, 
	const IPv4&	cand_rp_addr, 
	const DeleteConfigCandRpByAddr4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeleteConfigCandRpByAddr6CB;

    bool send_delete_config_cand_rp_by_addr6(
	const char*	target_name, 
	const IPv6Net&	group_prefix, 
	const bool&	is_scope_zone, 
	const IPv6&	cand_rp_addr, 
	const DeleteConfigCandRpByAddr6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddConfigStaticRp4CB;
    /**
     *  Send Xrl intended to:
     *  
     *  Add/delete/complete static RP configuration.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param group_prefix the group prefix for the RP.
     *  
     *  @param rp_addr the RP address.
     *  
     *  @param rp_priority the RP priority (smaller is better).
     *  
     *  @param hash_masklen the hash masklen used in computing an RP for a
     *  group. It should be same across all RPs. If set to zero, the default
     *  one will be used.
     */
    bool send_add_config_static_rp4(
	const char*	target_name, 
	const IPv4Net&	group_prefix, 
	const IPv4&	rp_addr, 
	const uint32_t&	rp_priority, 
	const uint32_t&	hash_masklen, 
	const AddConfigStaticRp4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddConfigStaticRp6CB;

    bool send_add_config_static_rp6(
	const char*	target_name, 
	const IPv6Net&	group_prefix, 
	const IPv6&	rp_addr, 
	const uint32_t&	rp_priority, 
	const uint32_t&	hash_masklen, 
	const AddConfigStaticRp6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeleteConfigStaticRp4CB;

    bool send_delete_config_static_rp4(
	const char*	target_name, 
	const IPv4Net&	group_prefix, 
	const IPv4&	rp_addr, 
	const DeleteConfigStaticRp4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DeleteConfigStaticRp6CB;

    bool send_delete_config_static_rp6(
	const char*	target_name, 
	const IPv6Net&	group_prefix, 
	const IPv6&	rp_addr, 
	const DeleteConfigStaticRp6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ConfigStaticRpDoneCB;

    bool send_config_static_rp_done(
	const char*	target_name, 
	const ConfigStaticRpDoneCB&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const uint32_t*>::RefPtr GetVifProtoVersionCB;
    /**
     *  Send Xrl intended to:
     *  
     *  Configure PIM Hello-related metrics. The 'set_foo' XRLs set the
     *  particular values. The 'reset_foo' XRLs reset the metrics to their
     *  default values.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param vif_name the name of the vif to configure.
     */
    bool send_get_vif_proto_version(
	const char*	target_name, 
	const string&	vif_name, 
	const GetVifProtoVersionCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SetVifProtoVersionCB;

    bool send_set_vif_proto_version(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	proto_version, 
	const SetVifProtoVersionCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ResetVifProtoVersionCB;

    bool send_reset_vif_proto_version(
	const char*	target_name, 
	const string&	vif_name, 
	const ResetVifProtoVersionCB&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const uint32_t*>::RefPtr GetVifHelloTriggeredDelayCB;

    bool send_get_vif_hello_triggered_delay(
	const char*	target_name, 
	const string&	vif_name, 
	const GetVifHelloTriggeredDelayCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SetVifHelloTriggeredDelayCB;

    bool send_set_vif_hello_triggered_delay(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	hello_triggered_delay, 
	const SetVifHelloTriggeredDelayCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ResetVifHelloTriggeredDelayCB;

    bool send_reset_vif_hello_triggered_delay(
	const char*	target_name, 
	const string&	vif_name, 
	const ResetVifHelloTriggeredDelayCB&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const uint32_t*>::RefPtr GetVifHelloPeriodCB;

    bool send_get_vif_hello_period(
	const char*	target_name, 
	const string&	vif_name, 
	const GetVifHelloPeriodCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SetVifHelloPeriodCB;

    bool send_set_vif_hello_period(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	hello_period, 
	const SetVifHelloPeriodCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ResetVifHelloPeriodCB;

    bool send_reset_vif_hello_period(
	const char*	target_name, 
	const string&	vif_name, 
	const ResetVifHelloPeriodCB&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const uint32_t*>::RefPtr GetVifHelloHoldtimeCB;

    bool send_get_vif_hello_holdtime(
	const char*	target_name, 
	const string&	vif_name, 
	const GetVifHelloHoldtimeCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SetVifHelloHoldtimeCB;

    bool send_set_vif_hello_holdtime(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	hello_holdtime, 
	const SetVifHelloHoldtimeCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ResetVifHelloHoldtimeCB;

    bool send_reset_vif_hello_holdtime(
	const char*	target_name, 
	const string&	vif_name, 
	const ResetVifHelloHoldtimeCB&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const uint32_t*>::RefPtr GetVifDrPriorityCB;

    bool send_get_vif_dr_priority(
	const char*	target_name, 
	const string&	vif_name, 
	const GetVifDrPriorityCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SetVifDrPriorityCB;

    bool send_set_vif_dr_priority(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	dr_priority, 
	const SetVifDrPriorityCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ResetVifDrPriorityCB;

    bool send_reset_vif_dr_priority(
	const char*	target_name, 
	const string&	vif_name, 
	const ResetVifDrPriorityCB&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const uint32_t*>::RefPtr GetVifLanDelayCB;

    bool send_get_vif_lan_delay(
	const char*	target_name, 
	const string&	vif_name, 
	const GetVifLanDelayCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SetVifLanDelayCB;

    bool send_set_vif_lan_delay(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	lan_delay, 
	const SetVifLanDelayCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ResetVifLanDelayCB;

    bool send_reset_vif_lan_delay(
	const char*	target_name, 
	const string&	vif_name, 
	const ResetVifLanDelayCB&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const uint32_t*>::RefPtr GetVifOverrideIntervalCB;

    bool send_get_vif_override_interval(
	const char*	target_name, 
	const string&	vif_name, 
	const GetVifOverrideIntervalCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SetVifOverrideIntervalCB;

    bool send_set_vif_override_interval(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	override_interval, 
	const SetVifOverrideIntervalCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ResetVifOverrideIntervalCB;

    bool send_reset_vif_override_interval(
	const char*	target_name, 
	const string&	vif_name, 
	const ResetVifOverrideIntervalCB&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const bool*>::RefPtr GetVifIsTrackingSupportDisabledCB;

    bool send_get_vif_is_tracking_support_disabled(
	const char*	target_name, 
	const string&	vif_name, 
	const GetVifIsTrackingSupportDisabledCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SetVifIsTrackingSupportDisabledCB;

    bool send_set_vif_is_tracking_support_disabled(
	const char*	target_name, 
	const string&	vif_name, 
	const bool&	is_tracking_support_disabled, 
	const SetVifIsTrackingSupportDisabledCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ResetVifIsTrackingSupportDisabledCB;

    bool send_reset_vif_is_tracking_support_disabled(
	const char*	target_name, 
	const string&	vif_name, 
	const ResetVifIsTrackingSupportDisabledCB&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const bool*>::RefPtr GetVifAcceptNohelloNeighborsCB;

    bool send_get_vif_accept_nohello_neighbors(
	const char*	target_name, 
	const string&	vif_name, 
	const GetVifAcceptNohelloNeighborsCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SetVifAcceptNohelloNeighborsCB;

    bool send_set_vif_accept_nohello_neighbors(
	const char*	target_name, 
	const string&	vif_name, 
	const bool&	accept_nohello_neighbors, 
	const SetVifAcceptNohelloNeighborsCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ResetVifAcceptNohelloNeighborsCB;

    bool send_reset_vif_accept_nohello_neighbors(
	const char*	target_name, 
	const string&	vif_name, 
	const ResetVifAcceptNohelloNeighborsCB&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const uint32_t*>::RefPtr GetVifJoinPrunePeriodCB;
    /**
     *  Send Xrl intended to:
     *  
     *  Configure PIM Join/Prune-related metrics. The 'set_foo' XRLs set the
     *  particular values. The 'reset_foo' XRLs reset the metrics to their
     *  default values.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param vif_name the name of the vif to configure.
     */
    bool send_get_vif_join_prune_period(
	const char*	target_name, 
	const string&	vif_name, 
	const GetVifJoinPrunePeriodCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SetVifJoinPrunePeriodCB;

    bool send_set_vif_join_prune_period(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	join_prune_period, 
	const SetVifJoinPrunePeriodCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ResetVifJoinPrunePeriodCB;

    bool send_reset_vif_join_prune_period(
	const char*	target_name, 
	const string&	vif_name, 
	const ResetVifJoinPrunePeriodCB&	cb
    );

    typedef XorpCallback4<void, const XrlError&, const bool*, const uint32_t*, const uint32_t*>::RefPtr GetSwitchToSptThresholdCB;
    /**
     *  Send Xrl intended to:
     *  
     *  Configure SPT-switch threshold. The 'set_foo' XRLs set the particular
     *  values. The 'reset_foo' XRLs reset the metrics to their default values.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_get_switch_to_spt_threshold(
	const char*	target_name, 
	const GetSwitchToSptThresholdCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SetSwitchToSptThresholdCB;

    bool send_set_switch_to_spt_threshold(
	const char*	target_name, 
	const bool&	is_enabled, 
	const uint32_t&	interval_sec, 
	const uint32_t&	bytes, 
	const SetSwitchToSptThresholdCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr ResetSwitchToSptThresholdCB;

    bool send_reset_switch_to_spt_threshold(
	const char*	target_name, 
	const ResetSwitchToSptThresholdCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr EnableLogTraceCB;
    /**
     *  Send Xrl intended to:
     *  
     *  Enable/disable the PIM trace log.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_enable_log_trace(
	const char*	target_name, 
	const EnableLogTraceCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr DisableLogTraceCB;

    bool send_disable_log_trace(
	const char*	target_name, 
	const DisableLogTraceCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddTestJpEntry4CB;
    /**
     *  Send Xrl intended to:
     *  
     *  Test-related methods: add Join/Prune entries, and send them to a
     *  neighbor.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_add_test_jp_entry4(
	const char*	target_name, 
	const IPv4&	source_addr, 
	const IPv4&	group_addr, 
	const uint32_t&	group_masklen, 
	const string&	mrt_entry_type, 
	const string&	action_jp, 
	const uint32_t&	holdtime, 
	const bool&	new_group_bool, 
	const AddTestJpEntry4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddTestJpEntry6CB;

    bool send_add_test_jp_entry6(
	const char*	target_name, 
	const IPv6&	source_addr, 
	const IPv6&	group_addr, 
	const uint32_t&	group_masklen, 
	const string&	mrt_entry_type, 
	const string&	action_jp, 
	const uint32_t&	holdtime, 
	const bool&	new_group_bool, 
	const AddTestJpEntry6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SendTestJpEntry4CB;

    bool send_send_test_jp_entry4(
	const char*	target_name, 
	const IPv4&	nbr_addr, 
	const SendTestJpEntry4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SendTestJpEntry6CB;

    bool send_send_test_jp_entry6(
	const char*	target_name, 
	const IPv6&	nbr_addr, 
	const SendTestJpEntry6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SendTestAssert4CB;
    /**
     *  Send Xrl intended to:
     *  
     *  Test-related methods: send an Assert message on an interface.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param vif_name the name of the vif to send the Assert on.
     *  
     *  @param source_addr the source address inside the Assert message.
     *  
     *  @param group_addr the group address inside the Assert message.
     *  
     *  @param rpt_bit the RPT-bit inside the Assert message.
     *  
     *  @param metric_preference the metric preference inside the Assert
     *  message.
     *  
     *  @param metric the metric inside the Assert message.
     */
    bool send_send_test_assert4(
	const char*	target_name, 
	const string&	vif_name, 
	const IPv4&	source_addr, 
	const IPv4&	group_addr, 
	const bool&	rpt_bit, 
	const uint32_t&	metric_preference, 
	const uint32_t&	metric, 
	const SendTestAssert4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SendTestAssert6CB;

    bool send_send_test_assert6(
	const char*	target_name, 
	const string&	vif_name, 
	const IPv6&	source_addr, 
	const IPv6&	group_addr, 
	const bool&	rpt_bit, 
	const uint32_t&	metric_preference, 
	const uint32_t&	metric, 
	const SendTestAssert6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddTestBsrZone4CB;
    /**
     *  Send Xrl intended to:
     *  
     *  Test-related methods: send Bootstrap and Cand-RP-Adv messages.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param zone_id_scope_zone_prefix the zone prefix of the zone ID.
     *  
     *  @param zone_id_is_scope_zone true if the zone is scoped.
     *  
     *  @param bsr_addr the address of the Bootstrap router.
     *  
     *  @param bsr_priority the priority of the Bootstrap router.
     *  
     *  @param hash_masklen the hash masklen inside the Bootstrap messages.
     *  
     *  @param fragment_tag the fragment tag inside the Bootstrap messages.
     */
    bool send_add_test_bsr_zone4(
	const char*	target_name, 
	const IPv4Net&	zone_id_scope_zone_prefix, 
	const bool&	zone_id_is_scope_zone, 
	const IPv4&	bsr_addr, 
	const uint32_t&	bsr_priority, 
	const uint32_t&	hash_masklen, 
	const uint32_t&	fragment_tag, 
	const AddTestBsrZone4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddTestBsrZone6CB;

    bool send_add_test_bsr_zone6(
	const char*	target_name, 
	const IPv6Net&	zone_id_scope_zone_prefix, 
	const bool&	zone_id_is_scope_zone, 
	const IPv6&	bsr_addr, 
	const uint32_t&	bsr_priority, 
	const uint32_t&	hash_masklen, 
	const uint32_t&	fragment_tag, 
	const AddTestBsrZone6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddTestBsrGroupPrefix4CB;

    bool send_add_test_bsr_group_prefix4(
	const char*	target_name, 
	const IPv4Net&	zone_id_scope_zone_prefix, 
	const bool&	zone_id_is_scope_zone, 
	const IPv4Net&	group_prefix, 
	const bool&	is_scope_zone, 
	const uint32_t&	expected_rp_count, 
	const AddTestBsrGroupPrefix4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddTestBsrGroupPrefix6CB;

    bool send_add_test_bsr_group_prefix6(
	const char*	target_name, 
	const IPv6Net&	zone_id_scope_zone_prefix, 
	const bool&	zone_id_is_scope_zone, 
	const IPv6Net&	group_prefix, 
	const bool&	is_scope_zone, 
	const uint32_t&	expected_rp_count, 
	const AddTestBsrGroupPrefix6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddTestBsrRp4CB;

    bool send_add_test_bsr_rp4(
	const char*	target_name, 
	const IPv4Net&	zone_id_scope_zone_prefix, 
	const bool&	zone_id_is_scope_zone, 
	const IPv4Net&	group_prefix, 
	const IPv4&	rp_addr, 
	const uint32_t&	rp_priority, 
	const uint32_t&	rp_holdtime, 
	const AddTestBsrRp4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr AddTestBsrRp6CB;

    bool send_add_test_bsr_rp6(
	const char*	target_name, 
	const IPv6Net&	zone_id_scope_zone_prefix, 
	const bool&	zone_id_is_scope_zone, 
	const IPv6Net&	group_prefix, 
	const IPv6&	rp_addr, 
	const uint32_t&	rp_priority, 
	const uint32_t&	rp_holdtime, 
	const AddTestBsrRp6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SendTestBootstrapCB;

    bool send_send_test_bootstrap(
	const char*	target_name, 
	const string&	vif_name, 
	const SendTestBootstrapCB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SendTestBootstrapByDest4CB;

    bool send_send_test_bootstrap_by_dest4(
	const char*	target_name, 
	const string&	vif_name, 
	const IPv4&	dest_addr, 
	const SendTestBootstrapByDest4CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SendTestBootstrapByDest6CB;

    bool send_send_test_bootstrap_by_dest6(
	const char*	target_name, 
	const string&	vif_name, 
	const IPv6&	dest_addr, 
	const SendTestBootstrapByDest6CB&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr SendTestCandRpAdvCB;

    bool send_send_test_cand_rp_adv(
	const char*	target_name, 
	const SendTestCandRpAdvCB&	cb
    );

protected:
    XrlSender* _sender;

private:
    void unmarshall_enable_vif(
	const XrlError&	e, 
	XrlArgs*	a, 
	EnableVifCB		cb
    );

    void unmarshall_disable_vif(
	const XrlError&	e, 
	XrlArgs*	a, 
	DisableVifCB		cb
    );

    void unmarshall_start_vif(
	const XrlError&	e, 
	XrlArgs*	a, 
	StartVifCB		cb
    );

    void unmarshall_stop_vif(
	const XrlError&	e, 
	XrlArgs*	a, 
	StopVifCB		cb
    );

    void unmarshall_enable_all_vifs(
	const XrlError&	e, 
	XrlArgs*	a, 
	EnableAllVifsCB		cb
    );

    void unmarshall_disable_all_vifs(
	const XrlError&	e, 
	XrlArgs*	a, 
	DisableAllVifsCB		cb
    );

    void unmarshall_start_all_vifs(
	const XrlError&	e, 
	XrlArgs*	a, 
	StartAllVifsCB		cb
    );

    void unmarshall_stop_all_vifs(
	const XrlError&	e, 
	XrlArgs*	a, 
	StopAllVifsCB		cb
    );

    void unmarshall_enable_pim(
	const XrlError&	e, 
	XrlArgs*	a, 
	EnablePimCB		cb
    );

    void unmarshall_disable_pim(
	const XrlError&	e, 
	XrlArgs*	a, 
	DisablePimCB		cb
    );

    void unmarshall_enable_cli(
	const XrlError&	e, 
	XrlArgs*	a, 
	EnableCliCB		cb
    );

    void unmarshall_disable_cli(
	const XrlError&	e, 
	XrlArgs*	a, 
	DisableCliCB		cb
    );

    void unmarshall_start_pim(
	const XrlError&	e, 
	XrlArgs*	a, 
	StartPimCB		cb
    );

    void unmarshall_stop_pim(
	const XrlError&	e, 
	XrlArgs*	a, 
	StopPimCB		cb
    );

    void unmarshall_start_cli(
	const XrlError&	e, 
	XrlArgs*	a, 
	StartCliCB		cb
    );

    void unmarshall_stop_cli(
	const XrlError&	e, 
	XrlArgs*	a, 
	StopCliCB		cb
    );

    void unmarshall_enable_bsr(
	const XrlError&	e, 
	XrlArgs*	a, 
	EnableBsrCB		cb
    );

    void unmarshall_disable_bsr(
	const XrlError&	e, 
	XrlArgs*	a, 
	DisableBsrCB		cb
    );

    void unmarshall_start_bsr(
	const XrlError&	e, 
	XrlArgs*	a, 
	StartBsrCB		cb
    );

    void unmarshall_stop_bsr(
	const XrlError&	e, 
	XrlArgs*	a, 
	StopBsrCB		cb
    );

    void unmarshall_add_config_scope_zone_by_vif_name4(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddConfigScopeZoneByVifName4CB		cb
    );

    void unmarshall_add_config_scope_zone_by_vif_name6(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddConfigScopeZoneByVifName6CB		cb
    );

    void unmarshall_add_config_scope_zone_by_vif_addr4(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddConfigScopeZoneByVifAddr4CB		cb
    );

    void unmarshall_add_config_scope_zone_by_vif_addr6(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddConfigScopeZoneByVifAddr6CB		cb
    );

    void unmarshall_delete_config_scope_zone_by_vif_name4(
	const XrlError&	e, 
	XrlArgs*	a, 
	DeleteConfigScopeZoneByVifName4CB		cb
    );

    void unmarshall_delete_config_scope_zone_by_vif_name6(
	const XrlError&	e, 
	XrlArgs*	a, 
	DeleteConfigScopeZoneByVifName6CB		cb
    );

    void unmarshall_delete_config_scope_zone_by_vif_addr4(
	const XrlError&	e, 
	XrlArgs*	a, 
	DeleteConfigScopeZoneByVifAddr4CB		cb
    );

    void unmarshall_delete_config_scope_zone_by_vif_addr6(
	const XrlError&	e, 
	XrlArgs*	a, 
	DeleteConfigScopeZoneByVifAddr6CB		cb
    );

    void unmarshall_add_config_cand_bsr_by_vif_name4(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddConfigCandBsrByVifName4CB		cb
    );

    void unmarshall_add_config_cand_bsr_by_vif_name6(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddConfigCandBsrByVifName6CB		cb
    );

    void unmarshall_add_config_cand_bsr_by_addr4(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddConfigCandBsrByAddr4CB		cb
    );

    void unmarshall_add_config_cand_bsr_by_addr6(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddConfigCandBsrByAddr6CB		cb
    );

    void unmarshall_delete_config_cand_bsr4(
	const XrlError&	e, 
	XrlArgs*	a, 
	DeleteConfigCandBsr4CB		cb
    );

    void unmarshall_delete_config_cand_bsr6(
	const XrlError&	e, 
	XrlArgs*	a, 
	DeleteConfigCandBsr6CB		cb
    );

    void unmarshall_add_config_cand_rp_by_vif_name4(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddConfigCandRpByVifName4CB		cb
    );

    void unmarshall_add_config_cand_rp_by_vif_name6(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddConfigCandRpByVifName6CB		cb
    );

    void unmarshall_add_config_cand_rp_by_addr4(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddConfigCandRpByAddr4CB		cb
    );

    void unmarshall_add_config_cand_rp_by_addr6(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddConfigCandRpByAddr6CB		cb
    );

    void unmarshall_delete_config_cand_rp_by_vif_name4(
	const XrlError&	e, 
	XrlArgs*	a, 
	DeleteConfigCandRpByVifName4CB		cb
    );

    void unmarshall_delete_config_cand_rp_by_vif_name6(
	const XrlError&	e, 
	XrlArgs*	a, 
	DeleteConfigCandRpByVifName6CB		cb
    );

    void unmarshall_delete_config_cand_rp_by_addr4(
	const XrlError&	e, 
	XrlArgs*	a, 
	DeleteConfigCandRpByAddr4CB		cb
    );

    void unmarshall_delete_config_cand_rp_by_addr6(
	const XrlError&	e, 
	XrlArgs*	a, 
	DeleteConfigCandRpByAddr6CB		cb
    );

    void unmarshall_add_config_static_rp4(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddConfigStaticRp4CB		cb
    );

    void unmarshall_add_config_static_rp6(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddConfigStaticRp6CB		cb
    );

    void unmarshall_delete_config_static_rp4(
	const XrlError&	e, 
	XrlArgs*	a, 
	DeleteConfigStaticRp4CB		cb
    );

    void unmarshall_delete_config_static_rp6(
	const XrlError&	e, 
	XrlArgs*	a, 
	DeleteConfigStaticRp6CB		cb
    );

    void unmarshall_config_static_rp_done(
	const XrlError&	e, 
	XrlArgs*	a, 
	ConfigStaticRpDoneCB		cb
    );

    void unmarshall_get_vif_proto_version(
	const XrlError&	e, 
	XrlArgs*	a, 
	GetVifProtoVersionCB		cb
    );

    void unmarshall_set_vif_proto_version(
	const XrlError&	e, 
	XrlArgs*	a, 
	SetVifProtoVersionCB		cb
    );

    void unmarshall_reset_vif_proto_version(
	const XrlError&	e, 
	XrlArgs*	a, 
	ResetVifProtoVersionCB		cb
    );

    void unmarshall_get_vif_hello_triggered_delay(
	const XrlError&	e, 
	XrlArgs*	a, 
	GetVifHelloTriggeredDelayCB		cb
    );

    void unmarshall_set_vif_hello_triggered_delay(
	const XrlError&	e, 
	XrlArgs*	a, 
	SetVifHelloTriggeredDelayCB		cb
    );

    void unmarshall_reset_vif_hello_triggered_delay(
	const XrlError&	e, 
	XrlArgs*	a, 
	ResetVifHelloTriggeredDelayCB		cb
    );

    void unmarshall_get_vif_hello_period(
	const XrlError&	e, 
	XrlArgs*	a, 
	GetVifHelloPeriodCB		cb
    );

    void unmarshall_set_vif_hello_period(
	const XrlError&	e, 
	XrlArgs*	a, 
	SetVifHelloPeriodCB		cb
    );

    void unmarshall_reset_vif_hello_period(
	const XrlError&	e, 
	XrlArgs*	a, 
	ResetVifHelloPeriodCB		cb
    );

    void unmarshall_get_vif_hello_holdtime(
	const XrlError&	e, 
	XrlArgs*	a, 
	GetVifHelloHoldtimeCB		cb
    );

    void unmarshall_set_vif_hello_holdtime(
	const XrlError&	e, 
	XrlArgs*	a, 
	SetVifHelloHoldtimeCB		cb
    );

    void unmarshall_reset_vif_hello_holdtime(
	const XrlError&	e, 
	XrlArgs*	a, 
	ResetVifHelloHoldtimeCB		cb
    );

    void unmarshall_get_vif_dr_priority(
	const XrlError&	e, 
	XrlArgs*	a, 
	GetVifDrPriorityCB		cb
    );

    void unmarshall_set_vif_dr_priority(
	const XrlError&	e, 
	XrlArgs*	a, 
	SetVifDrPriorityCB		cb
    );

    void unmarshall_reset_vif_dr_priority(
	const XrlError&	e, 
	XrlArgs*	a, 
	ResetVifDrPriorityCB		cb
    );

    void unmarshall_get_vif_lan_delay(
	const XrlError&	e, 
	XrlArgs*	a, 
	GetVifLanDelayCB		cb
    );

    void unmarshall_set_vif_lan_delay(
	const XrlError&	e, 
	XrlArgs*	a, 
	SetVifLanDelayCB		cb
    );

    void unmarshall_reset_vif_lan_delay(
	const XrlError&	e, 
	XrlArgs*	a, 
	ResetVifLanDelayCB		cb
    );

    void unmarshall_get_vif_override_interval(
	const XrlError&	e, 
	XrlArgs*	a, 
	GetVifOverrideIntervalCB		cb
    );

    void unmarshall_set_vif_override_interval(
	const XrlError&	e, 
	XrlArgs*	a, 
	SetVifOverrideIntervalCB		cb
    );

    void unmarshall_reset_vif_override_interval(
	const XrlError&	e, 
	XrlArgs*	a, 
	ResetVifOverrideIntervalCB		cb
    );

    void unmarshall_get_vif_is_tracking_support_disabled(
	const XrlError&	e, 
	XrlArgs*	a, 
	GetVifIsTrackingSupportDisabledCB		cb
    );

    void unmarshall_set_vif_is_tracking_support_disabled(
	const XrlError&	e, 
	XrlArgs*	a, 
	SetVifIsTrackingSupportDisabledCB		cb
    );

    void unmarshall_reset_vif_is_tracking_support_disabled(
	const XrlError&	e, 
	XrlArgs*	a, 
	ResetVifIsTrackingSupportDisabledCB		cb
    );

    void unmarshall_get_vif_accept_nohello_neighbors(
	const XrlError&	e, 
	XrlArgs*	a, 
	GetVifAcceptNohelloNeighborsCB		cb
    );

    void unmarshall_set_vif_accept_nohello_neighbors(
	const XrlError&	e, 
	XrlArgs*	a, 
	SetVifAcceptNohelloNeighborsCB		cb
    );

    void unmarshall_reset_vif_accept_nohello_neighbors(
	const XrlError&	e, 
	XrlArgs*	a, 
	ResetVifAcceptNohelloNeighborsCB		cb
    );

    void unmarshall_get_vif_join_prune_period(
	const XrlError&	e, 
	XrlArgs*	a, 
	GetVifJoinPrunePeriodCB		cb
    );

    void unmarshall_set_vif_join_prune_period(
	const XrlError&	e, 
	XrlArgs*	a, 
	SetVifJoinPrunePeriodCB		cb
    );

    void unmarshall_reset_vif_join_prune_period(
	const XrlError&	e, 
	XrlArgs*	a, 
	ResetVifJoinPrunePeriodCB		cb
    );

    void unmarshall_get_switch_to_spt_threshold(
	const XrlError&	e, 
	XrlArgs*	a, 
	GetSwitchToSptThresholdCB		cb
    );

    void unmarshall_set_switch_to_spt_threshold(
	const XrlError&	e, 
	XrlArgs*	a, 
	SetSwitchToSptThresholdCB		cb
    );

    void unmarshall_reset_switch_to_spt_threshold(
	const XrlError&	e, 
	XrlArgs*	a, 
	ResetSwitchToSptThresholdCB		cb
    );

    void unmarshall_enable_log_trace(
	const XrlError&	e, 
	XrlArgs*	a, 
	EnableLogTraceCB		cb
    );

    void unmarshall_disable_log_trace(
	const XrlError&	e, 
	XrlArgs*	a, 
	DisableLogTraceCB		cb
    );

    void unmarshall_add_test_jp_entry4(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddTestJpEntry4CB		cb
    );

    void unmarshall_add_test_jp_entry6(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddTestJpEntry6CB		cb
    );

    void unmarshall_send_test_jp_entry4(
	const XrlError&	e, 
	XrlArgs*	a, 
	SendTestJpEntry4CB		cb
    );

    void unmarshall_send_test_jp_entry6(
	const XrlError&	e, 
	XrlArgs*	a, 
	SendTestJpEntry6CB		cb
    );

    void unmarshall_send_test_assert4(
	const XrlError&	e, 
	XrlArgs*	a, 
	SendTestAssert4CB		cb
    );

    void unmarshall_send_test_assert6(
	const XrlError&	e, 
	XrlArgs*	a, 
	SendTestAssert6CB		cb
    );

    void unmarshall_add_test_bsr_zone4(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddTestBsrZone4CB		cb
    );

    void unmarshall_add_test_bsr_zone6(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddTestBsrZone6CB		cb
    );

    void unmarshall_add_test_bsr_group_prefix4(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddTestBsrGroupPrefix4CB		cb
    );

    void unmarshall_add_test_bsr_group_prefix6(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddTestBsrGroupPrefix6CB		cb
    );

    void unmarshall_add_test_bsr_rp4(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddTestBsrRp4CB		cb
    );

    void unmarshall_add_test_bsr_rp6(
	const XrlError&	e, 
	XrlArgs*	a, 
	AddTestBsrRp6CB		cb
    );

    void unmarshall_send_test_bootstrap(
	const XrlError&	e, 
	XrlArgs*	a, 
	SendTestBootstrapCB		cb
    );

    void unmarshall_send_test_bootstrap_by_dest4(
	const XrlError&	e, 
	XrlArgs*	a, 
	SendTestBootstrapByDest4CB		cb
    );

    void unmarshall_send_test_bootstrap_by_dest6(
	const XrlError&	e, 
	XrlArgs*	a, 
	SendTestBootstrapByDest6CB		cb
    );

    void unmarshall_send_test_cand_rp_adv(
	const XrlError&	e, 
	XrlArgs*	a, 
	SendTestCandRpAdvCB		cb
    );

};

#endif /* __XRL_INTERFACES_PIM_XIF_HH__ */
