/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 *
 * $XORP: xorp/xrl/interfaces/mfea_client_xif.hh,v 1.8 2003/05/13 00:23:48 hodson Exp $
 */

#ifndef __XRL_INTERFACES_MFEA_CLIENT_XIF_HH__
#define __XRL_INTERFACES_MFEA_CLIENT_XIF_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XifMfeaClient"

#include "libxorp/xlog.h"
#include "libxorp/callback.hh"

#include "libxipc/xrl.hh"
#include "libxipc/xrl_error.hh"
#include "libxipc/xrl_sender.hh"


class XrlMfeaClientV0p1Client {
public:
    XrlMfeaClientV0p1Client(XrlSender* s) : _sender(s) {}
    virtual ~XrlMfeaClientV0p1Client() {}

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB0;
    /**
     *  Send Xrl intended to:
     *  
     *  Add a new vif.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param vif_name the name of the new vif.
     *  
     *  @param vif_index the index of the new vif.
     */
    bool send_new_vif(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const CB0&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB1;
    /**
     *  Send Xrl intended to:
     *  
     *  Delete an existing vif.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param vif_name the name of the vif to delete.
     *  
     *  @param vif_index the index of the vif to delete.
     */
    bool send_delete_vif(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const CB1&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB2;
    /**
     *  Send Xrl intended to:
     *  
     *  Add an address to a vif.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param vif_name the name of the vif.
     *  
     *  @param vif_index the index of the vif.
     *  
     *  @param addr the unicast address to add.
     *  
     *  @param subnet the subnet address to add.
     *  
     *  @param broadcast the broadcast address (when applicable).
     *  
     *  @param peer the peer address (when applicable).
     */
    bool send_add_vif_addr4(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv4&	addr, 
	const IPv4Net&	subnet, 
	const IPv4&	broadcast, 
	const IPv4&	peer, 
	const CB2&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB3;

    bool send_add_vif_addr6(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv6&	addr, 
	const IPv6Net&	subnet, 
	const IPv6&	broadcast, 
	const IPv6&	peer, 
	const CB3&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB4;
    /**
     *  Send Xrl intended to:
     *  
     *  Delete an address from a vif.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param vif_name the name of the vif.
     *  
     *  @param vif_index the index of the vif.
     *  
     *  @param addr the unicast address to delete.
     */
    bool send_delete_vif_addr4(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv4&	addr, 
	const CB4&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB5;

    bool send_delete_vif_addr6(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv6&	addr, 
	const CB5&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB6;
    /**
     *  Send Xrl intended to:
     *  
     *  Set flags to a vif.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param vif_name the name of the vif.
     *  
     *  @param vif_index the index of the vif.
     *  
     *  @param is_pim_register true if this is a PIM Register vif.
     *  
     *  @param is_p2p true if this is a point-to-point vif.
     *  
     *  @param is_loopback true if this is a loopback interface.
     *  
     *  @param is_multicast true if the vif is multicast-capable.
     *  
     *  @param is_broadcast true if the vif is broadcast-capable.
     *  
     *  @param is_up true if the vif is UP and running.
     */
    bool send_set_vif_flags(
	const char*	target_name, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const bool&	is_pim_register, 
	const bool&	is_p2p, 
	const bool&	is_loopback, 
	const bool&	is_multicast, 
	const bool&	is_broadcast, 
	const bool&	is_up, 
	const CB6&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB7;
    /**
     *  Send Xrl intended to:
     *  
     *  Complete all transactions with vif information.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_set_all_vifs_done(
	const char*	target_name, 
	const CB7&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const bool*>::RefPtr CB8;
    /**
     *  Send Xrl intended to:
     *  
     *  Test if the vif setup is completed.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_is_vif_setup_completed(
	const char*	target_name, 
	const CB8&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB9;
    /**
     *  Send Xrl intended to:
     *  
     *  Receive a protocol message from the MFEA.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param xrl_sender_name the XRL name of the originator of this XRL.
     *  
     *  @param protocol_name the name of the protocol that sends a message.
     *  
     *  @param protocol_id the ID of the protocol that sends a message (both
     *  sides must agree on the particular values).
     *  
     *  @param vif_name the name of the vif the message was received on.
     *  
     *  @param vif_index the index of the vif the message was received on.
     *  
     *  @param source_address the address of the sender.
     *  
     *  @param dest_address the destination address.
     *  
     *  @param ip_ttl the TTL of the received IP packet. If it has a negative
     *  value, it should be ignored.
     *  
     *  @param ip_tos the TOS of the received IP packet. If it has a negative
     *  value, it should be ignored.
     *  
     *  @param is_router_alert if true, the IP Router Alert option in the IP
     *  packet was set (when applicable).
     *  
     *  @param protocol_message the protocol message.
     */
    bool send_recv_protocol_message4(
	const char*	target_name, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv4&	source_address, 
	const IPv4&	dest_address, 
	const int32_t&	ip_ttl, 
	const int32_t&	ip_tos, 
	const bool&	is_router_alert, 
	const vector<uint8_t>&	protocol_message, 
	const CB9&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB10;

    bool send_recv_protocol_message6(
	const char*	target_name, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv6&	source_address, 
	const IPv6&	dest_address, 
	const int32_t&	ip_ttl, 
	const int32_t&	ip_tos, 
	const bool&	is_router_alert, 
	const vector<uint8_t>&	protocol_message, 
	const CB10&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB11;
    /**
     *  Send Xrl intended to:
     *  
     *  Receive a kernel signal message from the MFEA.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param xrl_sender_name the XRL name of the originator of this XRL.
     *  
     *  @param protocol_name the name of the protocol that sends a message.
     *  
     *  @param protocol_id the ID of the protocol that sends a message (both
     *  sides must agree on the particular values).
     *  
     *  @param message_type the type of the kernel signal message (TODO:
     *  integer for now: the particular types are well-known by both sides).
     *  
     *  @param vif_name the name of the vif the message was received on.
     *  
     *  @param vif_index the index of the vif the message was received on.
     *  
     *  @param source_address the address of the sender.
     *  
     *  @param dest_address the destination address.
     *  
     *  @param protocol_message the protocol message.
     */
    bool send_recv_kernel_signal_message4(
	const char*	target_name, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const uint32_t&	message_type, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv4&	source_address, 
	const IPv4&	dest_address, 
	const vector<uint8_t>&	protocol_message, 
	const CB11&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB12;

    bool send_recv_kernel_signal_message6(
	const char*	target_name, 
	const string&	xrl_sender_name, 
	const string&	protocol_name, 
	const uint32_t&	protocol_id, 
	const uint32_t&	message_type, 
	const string&	vif_name, 
	const uint32_t&	vif_index, 
	const IPv6&	source_address, 
	const IPv6&	dest_address, 
	const vector<uint8_t>&	protocol_message, 
	const CB12&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB13;
    /**
     *  Send Xrl intended to:
     *  
     *  Add Multicast Routing Information Base information.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param xrl_sender_name the XRL name of the originator of this XRL.
     *  
     *  @param dest_prefix the destination prefix to add.
     *  
     *  @param next_hop_router_addr the address of the next-hop router toward
     *  the destination prefix.
     *  
     *  @param next_hop_vif_name the name of the vif toward the destination
     *  prefix.
     *  
     *  @param next_hop_vif_index the index of the vif toward the destination
     *  prefix.
     *  
     *  @param metric_preference the metric preference for this entry.
     *  
     *  @param metric the metric for this entry.
     */
    bool send_add_mrib4(
	const char*	target_name, 
	const string&	xrl_sender_name, 
	const IPv4Net&	dest_prefix, 
	const IPv4&	next_hop_router_addr, 
	const string&	next_hop_vif_name, 
	const uint32_t&	next_hop_vif_index, 
	const uint32_t&	metric_preference, 
	const uint32_t&	metric, 
	const CB13&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB14;

    bool send_add_mrib6(
	const char*	target_name, 
	const string&	xrl_sender_name, 
	const IPv6Net&	dest_prefix, 
	const IPv6&	next_hop_router_addr, 
	const string&	next_hop_vif_name, 
	const uint32_t&	next_hop_vif_index, 
	const uint32_t&	metric_preference, 
	const uint32_t&	metric, 
	const CB14&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB15;
    /**
     *  Send Xrl intended to:
     *  
     *  Delete Multicast Routing Information Base information.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param xrl_sender_name the XRL name of the originator of this XRL.
     *  
     *  @param dest_prefix the destination prefix to delete.
     */
    bool send_delete_mrib4(
	const char*	target_name, 
	const string&	xrl_sender_name, 
	const IPv4Net&	dest_prefix, 
	const CB15&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB16;

    bool send_delete_mrib6(
	const char*	target_name, 
	const string&	xrl_sender_name, 
	const IPv6Net&	dest_prefix, 
	const CB16&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB17;
    /**
     *  Send Xrl intended to:
     *  
     *  Complete a transaction with MRIB information.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param xrl_sender_name the XRL name of the originator of this XRL.
     */
    bool send_set_mrib_done(
	const char*	target_name, 
	const string&	xrl_sender_name, 
	const CB17&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB18;
    /**
     *  Send Xrl intended to:
     *  
     *  A signal that a dataflow-related pre-condition is true.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param xrl_sender_name the XRL name of the originator of this XRL.
     *  
     *  @param source_address the source address of the dataflow.
     *  
     *  @param group_address the group address of the dataflow.
     *  
     *  @param threshold_interval_sec the number of seconds in the interval
     *  requested for measurement.
     *  
     *  @param threshold_interval_usec the number of microseconds in the
     *  interval requested for measurement.
     *  
     *  @param measured_interval_sec the number of seconds in the last measured
     *  interval that has triggered the signal.
     *  
     *  @param measured_interval_usec the number of microseconds in the last
     *  measured interval that has triggered the signal.
     *  
     *  @param threshold_packets the threshold value to trigger a signal (in
     *  number of packets).
     *  
     *  @param threshold_bytes the threshold value to trigger a signal (in
     *  bytes).
     *  
     *  @param measured_packets the number of packets measured within the
     *  measured interval.
     *  
     *  @param measured_bytes the number of bytes measured within the measured
     *  interval.
     *  
     *  @param is_threshold_in_packets if true, threshold_packets is valid.
     *  
     *  @param is_threshold_in_bytes if true, threshold_bytes is valid.
     *  
     *  @param is_geq_upcall if true, the operation for comparison is ">=".
     *  
     *  @param is_leq_upcall if true, the operation for comparison is "<=".
     */
    bool send_recv_dataflow_signal4(
	const char*	target_name, 
	const string&	xrl_sender_name, 
	const IPv4&	source_address, 
	const IPv4&	group_address, 
	const uint32_t&	threshold_interval_sec, 
	const uint32_t&	threshold_interval_usec, 
	const uint32_t&	measured_interval_sec, 
	const uint32_t&	measured_interval_usec, 
	const uint32_t&	threshold_packets, 
	const uint32_t&	threshold_bytes, 
	const uint32_t&	measured_packets, 
	const uint32_t&	measured_bytes, 
	const bool&	is_threshold_in_packets, 
	const bool&	is_threshold_in_bytes, 
	const bool&	is_geq_upcall, 
	const bool&	is_leq_upcall, 
	const CB18&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB19;

    bool send_recv_dataflow_signal6(
	const char*	target_name, 
	const string&	xrl_sender_name, 
	const IPv6&	source_address, 
	const IPv6&	group_address, 
	const uint32_t&	threshold_interval_sec, 
	const uint32_t&	threshold_interval_usec, 
	const uint32_t&	measured_interval_sec, 
	const uint32_t&	measured_interval_usec, 
	const uint32_t&	threshold_packets, 
	const uint32_t&	threshold_bytes, 
	const uint32_t&	measured_packets, 
	const uint32_t&	measured_bytes, 
	const bool&	is_threshold_in_packets, 
	const bool&	is_threshold_in_bytes, 
	const bool&	is_geq_upcall, 
	const bool&	is_leq_upcall, 
	const CB19&	cb
    );

protected:
    XrlSender* _sender;

private:
    void unmarshall0(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB0		cb
    );

    void unmarshall1(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB1		cb
    );

    void unmarshall2(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB2		cb
    );

    void unmarshall3(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB3		cb
    );

    void unmarshall4(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB4		cb
    );

    void unmarshall5(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB5		cb
    );

    void unmarshall6(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB6		cb
    );

    void unmarshall7(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB7		cb
    );

    void unmarshall8(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB8		cb
    );

    void unmarshall9(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB9		cb
    );

    void unmarshall10(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB10		cb
    );

    void unmarshall11(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB11		cb
    );

    void unmarshall12(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB12		cb
    );

    void unmarshall13(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB13		cb
    );

    void unmarshall14(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB14		cb
    );

    void unmarshall15(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB15		cb
    );

    void unmarshall16(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB16		cb
    );

    void unmarshall17(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB17		cb
    );

    void unmarshall18(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB18		cb
    );

    void unmarshall19(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB19		cb
    );

};

#endif /* __XRL_INTERFACES_MFEA_CLIENT_XIF_HH__ */
