/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/clnt-gen'.
 *
 * $XORP: xorp/xrl/interfaces/test_peer_xif.hh,v 1.2 2002/12/14 23:43:13 hodson Exp $
 */


#ifndef __XRL_INTERFACES_TEST_PEER_XIF_HH__
#define __XRL_INTERFACES_TEST_PEER_XIF_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XifTestPeer"
#include "libxorp/xlog.h"
#include "libxipc/xrl_router.hh"

class XrlTestPeerV0p1Client {
public:
    XrlTestPeerV0p1Client(XrlSender* r) : _router(r) {}
    virtual ~XrlTestPeerV0p1Client() {}

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB0;
    /**
     *  Send Xrl intended to:
     *  
     *  Register for receiving packets and events.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_register(
	const char*	target_name, 
	const string&	coordinator, 
	const CB0&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB1;
    /**
     *  Send Xrl intended to:
     *  
     *  Packetisation style.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_packetisation(
	const char*	target_name, 
	const string&	protocol, 
	const CB1&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB2;
    /**
     *  Send Xrl intended to:
     *  
     *  Make a tcp connection to the specified host and port.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param host name.
     *  
     *  @param port number.
     */
    bool send_connect(
	const char*	target_name, 
	const string&	host, 
	const uint32_t&	port, 
	const CB2&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB3;
    /**
     *  Send Xrl intended to:
     *  
     *  Listen for connections on this address and port.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param address local address.
     *  
     *  @param port local port number.
     */
    bool send_listen(
	const char*	target_name, 
	const string&	address, 
	const uint32_t&	port, 
	const CB3&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB4;
    /**
     *  Send Xrl intended to:
     *  
     *  Send data Send data to the peer.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_send(
	const char*	target_name, 
	const vector<uint8_t>&	data, 
	const CB4&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB5;
    /**
     *  Send Xrl intended to:
     *  
     *  Disconnect from the peer.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_disconnect(
	const char*	target_name, 
	const CB5&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB6;
    /**
     *  Send Xrl intended to:
     *  
     *  Reset the peer. Take it back to a known state.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_reset(
	const char*	target_name, 
	const CB6&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB7;
    /**
     *  Send Xrl intended to:
     *  
     *  Terminate the test peer process.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_terminate(
	const char*	target_name, 
	const CB7&	cb
    );

protected:
    XrlSender* _router;

private:
    void unmarshall0(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB0		cb
    );

    void unmarshall1(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB1		cb
    );

    void unmarshall2(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB2		cb
    );

    void unmarshall3(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB3		cb
    );

    void unmarshall4(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB4		cb
    );

    void unmarshall5(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB5		cb
    );

    void unmarshall6(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB6		cb
    );

    void unmarshall7(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB7		cb
    );

};

#endif /* __XRL_INTERFACES_TEST_PEER_XIF_HH__ */
