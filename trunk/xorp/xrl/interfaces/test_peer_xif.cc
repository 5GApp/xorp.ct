/*
 * Copyright (c) 2001-2003 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#ident "$XORP: xorp/xrl/interfaces/test_peer_xif.cc,v 1.8 2003/08/07 04:52:28 hodson Exp $"

#include "test_peer_xif.hh"

bool
XrlTestPeerV0p1Client::send_register(
	const char*	the_tgt,
	const string&	coordinator,
	const uint32_t&	genid,
	const RegisterCB&	cb
)
{
    Xrl x(the_tgt, "test_peer/0.1/register");
    x.args().add("coordinator", coordinator);
    x.args().add("genid", genid);
    return _sender->send(x, callback(this, &XrlTestPeerV0p1Client::unmarshall_register, cb));
}


/* Unmarshall register */
void
XrlTestPeerV0p1Client::unmarshall_register(
	const XrlError&	e,
	XrlArgs*	a,
	RegisterCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlTestPeerV0p1Client::send_packetisation(
	const char*	the_tgt,
	const string&	protocol,
	const PacketisationCB&	cb
)
{
    Xrl x(the_tgt, "test_peer/0.1/packetisation");
    x.args().add("protocol", protocol);
    return _sender->send(x, callback(this, &XrlTestPeerV0p1Client::unmarshall_packetisation, cb));
}


/* Unmarshall packetisation */
void
XrlTestPeerV0p1Client::unmarshall_packetisation(
	const XrlError&	e,
	XrlArgs*	a,
	PacketisationCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlTestPeerV0p1Client::send_connect(
	const char*	the_tgt,
	const string&	host,
	const uint32_t&	port,
	const ConnectCB&	cb
)
{
    Xrl x(the_tgt, "test_peer/0.1/connect");
    x.args().add("host", host);
    x.args().add("port", port);
    return _sender->send(x, callback(this, &XrlTestPeerV0p1Client::unmarshall_connect, cb));
}


/* Unmarshall connect */
void
XrlTestPeerV0p1Client::unmarshall_connect(
	const XrlError&	e,
	XrlArgs*	a,
	ConnectCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlTestPeerV0p1Client::send_listen(
	const char*	the_tgt,
	const string&	address,
	const uint32_t&	port,
	const ListenCB&	cb
)
{
    Xrl x(the_tgt, "test_peer/0.1/listen");
    x.args().add("address", address);
    x.args().add("port", port);
    return _sender->send(x, callback(this, &XrlTestPeerV0p1Client::unmarshall_listen, cb));
}


/* Unmarshall listen */
void
XrlTestPeerV0p1Client::unmarshall_listen(
	const XrlError&	e,
	XrlArgs*	a,
	ListenCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlTestPeerV0p1Client::send_send(
	const char*	the_tgt,
	const vector<uint8_t>&	data,
	const SendCB&	cb
)
{
    Xrl x(the_tgt, "test_peer/0.1/send");
    x.args().add("data", data);
    return _sender->send(x, callback(this, &XrlTestPeerV0p1Client::unmarshall_send, cb));
}


/* Unmarshall send */
void
XrlTestPeerV0p1Client::unmarshall_send(
	const XrlError&	e,
	XrlArgs*	a,
	SendCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlTestPeerV0p1Client::send_disconnect(
	const char*	the_tgt,
	const DisconnectCB&	cb
)
{
    Xrl x(the_tgt, "test_peer/0.1/disconnect");
    return _sender->send(x, callback(this, &XrlTestPeerV0p1Client::unmarshall_disconnect, cb));
}


/* Unmarshall disconnect */
void
XrlTestPeerV0p1Client::unmarshall_disconnect(
	const XrlError&	e,
	XrlArgs*	a,
	DisconnectCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlTestPeerV0p1Client::send_reset(
	const char*	the_tgt,
	const ResetCB&	cb
)
{
    Xrl x(the_tgt, "test_peer/0.1/reset");
    return _sender->send(x, callback(this, &XrlTestPeerV0p1Client::unmarshall_reset, cb));
}


/* Unmarshall reset */
void
XrlTestPeerV0p1Client::unmarshall_reset(
	const XrlError&	e,
	XrlArgs*	a,
	ResetCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlTestPeerV0p1Client::send_terminate(
	const char*	the_tgt,
	const TerminateCB&	cb
)
{
    Xrl x(the_tgt, "test_peer/0.1/terminate");
    return _sender->send(x, callback(this, &XrlTestPeerV0p1Client::unmarshall_terminate, cb));
}


/* Unmarshall terminate */
void
XrlTestPeerV0p1Client::unmarshall_terminate(
	const XrlError&	e,
	XrlArgs*	a,
	TerminateCB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}
