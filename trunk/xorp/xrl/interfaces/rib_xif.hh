/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/clnt-gen'.
 *
 * $XORP: xorp/xrl/interfaces/rib_xif.hh,v 1.1.1.1 2002/12/11 23:56:18 hodson Exp $
 */


#ifndef __XRL_INTERFACES_RIB_XIF_HH__
#define __XRL_INTERFACES_RIB_XIF_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XifRib"
#include "libxorp/xlog.h"
#include "libxipc/xrl_router.hh"

class XrlRibV0p1Client {
public:
    XrlRibV0p1Client(XrlRouter* r) : _router(r) {}
    virtual ~XrlRibV0p1Client() {}

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB0;

    bool send_add_igp_table4(
	const char*	target_name, 
	const string&	protocol, 
	const bool&	unicast, 
	const bool&	multicast, 
	const CB0&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB1;

    bool send_add_igp_table6(
	const char*	target_name, 
	const string&	protocol, 
	const bool&	unicast, 
	const bool&	multicast, 
	const CB1&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB2;

    bool send_delete_igp_table4(
	const char*	target_name, 
	const string&	protocol, 
	const bool&	unicast, 
	const bool&	multicast, 
	const CB2&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB3;

    bool send_delete_igp_table6(
	const char*	target_name, 
	const string&	protocol, 
	const bool&	unicast, 
	const bool&	multicast, 
	const CB3&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB4;

    bool send_add_egp_table4(
	const char*	target_name, 
	const string&	protocol, 
	const bool&	unicast, 
	const bool&	multicast, 
	const CB4&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB5;

    bool send_add_egp_table6(
	const char*	target_name, 
	const string&	protocol, 
	const bool&	unicast, 
	const bool&	multicast, 
	const CB5&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB6;

    bool send_delete_egp_table4(
	const char*	target_name, 
	const string&	protocol, 
	const bool&	unicast, 
	const bool&	multicast, 
	const CB6&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB7;

    bool send_delete_egp_table6(
	const char*	target_name, 
	const string&	protocol, 
	const bool&	unicast, 
	const bool&	multicast, 
	const CB7&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB8;

    bool send_add_route4(
	const char*	target_name, 
	const string&	protocol, 
	const bool&	unicast, 
	const bool&	multicast, 
	const IPv4Net&	network, 
	const IPv4&	nexthop, 
	const uint32_t&	metric, 
	const CB8&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB9;

    bool send_add_route6(
	const char*	target_name, 
	const string&	protocol, 
	const bool&	unicast, 
	const bool&	multicast, 
	const IPv6Net&	network, 
	const IPv6&	nexthop, 
	const uint32_t&	metric, 
	const CB9&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB10;

    bool send_replace_route4(
	const char*	target_name, 
	const string&	protocol, 
	const bool&	unicast, 
	const bool&	multicast, 
	const IPv4Net&	network, 
	const IPv4&	nexthop, 
	const uint32_t&	metric, 
	const CB10&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB11;

    bool send_replace_route6(
	const char*	target_name, 
	const string&	protocol, 
	const bool&	unicast, 
	const bool&	multicast, 
	const IPv6Net&	network, 
	const IPv6&	nexthop, 
	const uint32_t&	metric, 
	const CB11&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB12;

    bool send_delete_route4(
	const char*	target_name, 
	const string&	protocol, 
	const bool&	unicast, 
	const bool&	multicast, 
	const IPv4Net&	network, 
	const CB12&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB13;

    bool send_delete_route6(
	const char*	target_name, 
	const string&	protocol, 
	const bool&	unicast, 
	const bool&	multicast, 
	const IPv6Net&	network, 
	const CB13&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const IPv4*>::RefPtr CB14;
    /**
     *  Send Xrl intended to:
     *  
     *  Lookup nexthop.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param addr address to lookup.
     *  
     *  @param unicast look in unicast RIB.
     *  
     *  @param multicast look in multicast RIB.
     */
    bool send_lookup_route4(
	const char*	target_name, 
	const IPv4&	addr, 
	const bool&	unicast, 
	const bool&	multicast, 
	const CB14&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const IPv6*>::RefPtr CB15;
    /**
     *  Send Xrl intended to:
     *  
     *  Lookup nexthop.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param addr address to lookup.
     *  
     *  @param unicast look in unicast RIB.
     *  
     *  @param multicast look in multicast RIB.
     */
    bool send_lookup_route6(
	const char*	target_name, 
	const IPv6&	addr, 
	const bool&	unicast, 
	const bool&	multicast, 
	const CB15&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB16;

    bool send_new_vif(
	const char*	target_name, 
	const string&	name, 
	const CB16&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB17;

    bool send_add_vif_addr4(
	const char*	target_name, 
	const string&	name, 
	const IPv4&	addr, 
	const IPv4Net&	subnet, 
	const CB17&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB18;

    bool send_add_vif_addr6(
	const char*	target_name, 
	const string&	name, 
	const IPv6&	addr, 
	const IPv6Net&	subnet, 
	const CB18&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB19;

    bool send_redist_enable4(
	const char*	target_name, 
	const string&	from, 
	const string&	to, 
	const bool&	unicast, 
	const bool&	multicast, 
	const CB19&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB20;

    bool send_redist_enable6(
	const char*	target_name, 
	const string&	from, 
	const string&	to, 
	const bool&	unicast, 
	const bool&	multicast, 
	const CB20&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB21;

    bool send_redist_disable4(
	const char*	target_name, 
	const string&	from, 
	const string&	to, 
	const bool&	unicast, 
	const bool&	multicast, 
	const CB21&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB22;

    bool send_redist_disable6(
	const char*	target_name, 
	const string&	from, 
	const string&	to, 
	const bool&	unicast, 
	const bool&	multicast, 
	const CB22&	cb
    );

    typedef XorpCallback7<void, const XrlError&, const bool*, const IPv4*, const uint32_t*, const uint32_t*, const IPv4*, const uint32_t*>::RefPtr CB23;
    /**
     *  Send Xrl intended to:
     *  
     *  Register an interest in a route
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param target the name of the XRL module to notify when the information
     *  returned by this call becomes invalid.
     *  
     *  @param addr address of interest
     */
    bool send_register_interest4(
	const char*	target_name, 
	const string&	target, 
	const IPv4&	addr, 
	const CB23&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB24;
    /**
     *  Send Xrl intended to:
     *  
     *  De-register an interest in a route
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param target the name of the XRL module that registered the interest
     *  
     *  @param addr the address of the previous registered interest. addr
     *  should be the base address of the add/prefix subnet.
     *  
     *  @param prefix the prefix length of the registered interest, as given in
     *  the response from register_interest.
     */
    bool send_deregister_interest4(
	const char*	target_name, 
	const string&	target, 
	const IPv4&	addr, 
	const uint32_t&	prefix, 
	const CB24&	cb
    );

    typedef XorpCallback7<void, const XrlError&, const bool*, const IPv6*, const uint32_t*, const uint32_t*, const IPv6*, const uint32_t*>::RefPtr CB25;
    /**
     *  Send Xrl intended to:
     *  
     *  Register an interest in a route
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param target the name of the XRL module to notify when the information
     *  returned by this call becomes invalid.
     *  
     *  @param addr address of interest
     */
    bool send_register_interest6(
	const char*	target_name, 
	const string&	target, 
	const IPv6&	addr, 
	const CB25&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB26;
    /**
     *  Send Xrl intended to:
     *  
     *  De-register an interest in a route
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param target the name of the XRL module that registered the interest
     *  
     *  @param addr the address of the previous registered interest. addr
     *  should be the base address of the add/prefix subnet.
     *  
     *  @param prefix the prefix length of the registered interest, as given in
     *  the response from register_interest.
     */
    bool send_deregister_interest6(
	const char*	target_name, 
	const string&	target, 
	const IPv6&	addr, 
	const uint32_t&	prefix, 
	const CB26&	cb
    );

protected:
    XrlRouter* _router;

private:
    void unmarshall0(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB0		cb
    );

    void unmarshall1(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB1		cb
    );

    void unmarshall2(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB2		cb
    );

    void unmarshall3(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB3		cb
    );

    void unmarshall4(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB4		cb
    );

    void unmarshall5(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB5		cb
    );

    void unmarshall6(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB6		cb
    );

    void unmarshall7(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB7		cb
    );

    void unmarshall8(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB8		cb
    );

    void unmarshall9(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB9		cb
    );

    void unmarshall10(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB10		cb
    );

    void unmarshall11(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB11		cb
    );

    void unmarshall12(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB12		cb
    );

    void unmarshall13(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB13		cb
    );

    void unmarshall14(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB14		cb
    );

    void unmarshall15(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB15		cb
    );

    void unmarshall16(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB16		cb
    );

    void unmarshall17(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB17		cb
    );

    void unmarshall18(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB18		cb
    );

    void unmarshall19(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB19		cb
    );

    void unmarshall20(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB20		cb
    );

    void unmarshall21(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB21		cb
    );

    void unmarshall22(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB22		cb
    );

    void unmarshall23(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB23		cb
    );

    void unmarshall24(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB24		cb
    );

    void unmarshall25(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB25		cb
    );

    void unmarshall26(
	const XrlError&	e, 
	XrlRouter&	/* r */, 
	const Xrl&	/* x */, 
	XrlArgs*	a, 
	CB26		cb
    );

};

#endif /* __XRL_INTERFACES_RIB_XIF_HH__ */
