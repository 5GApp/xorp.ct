/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/clnt-gen'.
 */

#ident "$XORP: xorp/xrl/interfaces/ospf_xif.cc,v 1.2 2003/01/10 00:30:28 hodson Exp $"

#include "ospf_xif.hh"

bool
XrlOspfV0p1Client::send_set_router_id(
	const char*	the_tgt, 
	const uint32_t&	id, 
	const CB0&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/set_router_id");
    x.args().add("id", id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall0, cb));
}


/* Unmarshall set_router_id */
void
XrlOspfV0p1Client::unmarshall0(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB0		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_get_router_id(
	const char*	the_tgt, 
	const CB1&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/get_router_id");
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall1, cb));
}


/* Unmarshall get_router_id */
void
XrlOspfV0p1Client::unmarshall1(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB1		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t id;
    try {
	a->get("id", id);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &id);
}

bool
XrlOspfV0p1Client::send_set_lsdb_limit(
	const char*	the_tgt, 
	const int32_t&	limit, 
	const CB2&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/set_lsdb_limit");
    x.args().add("limit", limit);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall2, cb));
}


/* Unmarshall set_lsdb_limit */
void
XrlOspfV0p1Client::unmarshall2(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB2		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_get_lsdb_limit(
	const char*	the_tgt, 
	const CB3&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/get_lsdb_limit");
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall3, cb));
}


/* Unmarshall get_lsdb_limit */
void
XrlOspfV0p1Client::unmarshall3(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB3		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    int32_t limit;
    try {
	a->get("limit", limit);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &limit);
}

bool
XrlOspfV0p1Client::send_set_mospf(
	const char*	the_tgt, 
	const bool&	enabled, 
	const CB4&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/set_mospf");
    x.args().add("enabled", enabled);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall4, cb));
}


/* Unmarshall set_mospf */
void
XrlOspfV0p1Client::unmarshall4(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB4		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_get_mospf(
	const char*	the_tgt, 
	const CB5&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/get_mospf");
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall5, cb));
}


/* Unmarshall get_mospf */
void
XrlOspfV0p1Client::unmarshall5(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB5		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    bool enabled;
    try {
	a->get("enabled", enabled);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &enabled);
}

bool
XrlOspfV0p1Client::send_set_interarea_mc(
	const char*	the_tgt, 
	const bool&	enabled, 
	const CB6&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/set_interarea_mc");
    x.args().add("enabled", enabled);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall6, cb));
}


/* Unmarshall set_interarea_mc */
void
XrlOspfV0p1Client::unmarshall6(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB6		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_get_interarea_mc(
	const char*	the_tgt, 
	const CB7&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/get_interarea_mc");
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall7, cb));
}


/* Unmarshall get_interarea_mc */
void
XrlOspfV0p1Client::unmarshall7(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB7		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    bool enabled;
    try {
	a->get("enabled", enabled);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &enabled);
}

bool
XrlOspfV0p1Client::send_set_overflow_interval(
	const char*	the_tgt, 
	const int32_t&	ovfl_int, 
	const CB8&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/set_overflow_interval");
    x.args().add("ovfl_int", ovfl_int);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall8, cb));
}


/* Unmarshall set_overflow_interval */
void
XrlOspfV0p1Client::unmarshall8(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB8		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_get_overflow_interval(
	const char*	the_tgt, 
	const CB9&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/get_overflow_interval");
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall9, cb));
}


/* Unmarshall get_overflow_interval */
void
XrlOspfV0p1Client::unmarshall9(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB9		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    int32_t ovfl_int;
    try {
	a->get("ovfl_int", ovfl_int);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &ovfl_int);
}

bool
XrlOspfV0p1Client::send_set_flood_rate(
	const char*	the_tgt, 
	const int32_t&	rate, 
	const CB10&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/set_flood_rate");
    x.args().add("rate", rate);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall10, cb));
}


/* Unmarshall set_flood_rate */
void
XrlOspfV0p1Client::unmarshall10(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB10		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_get_flood_rate(
	const char*	the_tgt, 
	const CB11&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/get_flood_rate");
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall11, cb));
}


/* Unmarshall get_flood_rate */
void
XrlOspfV0p1Client::unmarshall11(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB11		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    int32_t rate;
    try {
	a->get("rate", rate);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &rate);
}

bool
XrlOspfV0p1Client::send_set_max_rxmt_window(
	const char*	the_tgt, 
	const uint32_t&	window, 
	const CB12&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/set_max_rxmt_window");
    x.args().add("window", window);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall12, cb));
}


/* Unmarshall set_max_rxmt_window */
void
XrlOspfV0p1Client::unmarshall12(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB12		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_get_max_rxmt_window(
	const char*	the_tgt, 
	const CB13&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/get_max_rxmt_window");
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall13, cb));
}


/* Unmarshall get_max_rxmt_window */
void
XrlOspfV0p1Client::unmarshall13(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB13		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t window;
    try {
	a->get("window", window);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &window);
}

bool
XrlOspfV0p1Client::send_set_max_dds(
	const char*	the_tgt, 
	const uint32_t&	max_dds, 
	const CB14&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/set_max_dds");
    x.args().add("max_dds", max_dds);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall14, cb));
}


/* Unmarshall set_max_dds */
void
XrlOspfV0p1Client::unmarshall14(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB14		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_get_max_dds(
	const char*	the_tgt, 
	const CB15&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/get_max_dds");
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall15, cb));
}


/* Unmarshall get_max_dds */
void
XrlOspfV0p1Client::unmarshall15(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB15		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t max_dds;
    try {
	a->get("max_dds", max_dds);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &max_dds);
}

bool
XrlOspfV0p1Client::send_set_lsa_refresh_rate(
	const char*	the_tgt, 
	const uint32_t&	rate, 
	const CB16&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/set_lsa_refresh_rate");
    x.args().add("rate", rate);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall16, cb));
}


/* Unmarshall set_lsa_refresh_rate */
void
XrlOspfV0p1Client::unmarshall16(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB16		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_get_lsa_refresh_rate(
	const char*	the_tgt, 
	const CB17&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/get_lsa_refresh_rate");
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall17, cb));
}


/* Unmarshall get_lsa_refresh_rate */
void
XrlOspfV0p1Client::unmarshall17(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB17		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t rate;
    try {
	a->get("rate", rate);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &rate);
}

bool
XrlOspfV0p1Client::send_set_p2p_adj_limit(
	const char*	the_tgt, 
	const uint32_t&	max_adj, 
	const CB18&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/set_p2p_adj_limit");
    x.args().add("max_adj", max_adj);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall18, cb));
}


/* Unmarshall set_p2p_adj_limit */
void
XrlOspfV0p1Client::unmarshall18(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB18		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_get_p2p_adj_limit(
	const char*	the_tgt, 
	const CB19&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/get_p2p_adj_limit");
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall19, cb));
}


/* Unmarshall get_p2p_adj_limit */
void
XrlOspfV0p1Client::unmarshall19(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB19		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t max_adj;
    try {
	a->get("max_adj", max_adj);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &max_adj);
}

bool
XrlOspfV0p1Client::send_set_random_refresh(
	const char*	the_tgt, 
	const bool&	enabled, 
	const CB20&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/set_random_refresh");
    x.args().add("enabled", enabled);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall20, cb));
}


/* Unmarshall set_random_refresh */
void
XrlOspfV0p1Client::unmarshall20(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB20		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_get_random_refresh(
	const char*	the_tgt, 
	const CB21&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/get_random_refresh");
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall21, cb));
}


/* Unmarshall get_random_refresh */
void
XrlOspfV0p1Client::unmarshall21(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB21		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    bool enabled;
    try {
	a->get("enabled", enabled);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &enabled);
}

bool
XrlOspfV0p1Client::send_add_or_configure_area(
	const char*	the_tgt, 
	const uint32_t&	area_id, 
	const bool&	is_stub, 
	const uint32_t&	default_cost, 
	const bool&	import_summary_routes, 
	const CB22&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/add_or_configure_area");
    x.args().add("area_id", area_id);
    x.args().add("is_stub", is_stub);
    x.args().add("default_cost", default_cost);
    x.args().add("import_summary_routes", import_summary_routes);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall22, cb));
}


/* Unmarshall add_or_configure_area */
void
XrlOspfV0p1Client::unmarshall22(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB22		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_delete_area(
	const char*	the_tgt, 
	const uint32_t&	area_id, 
	const CB23&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/delete_area");
    x.args().add("area_id", area_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall23, cb));
}


/* Unmarshall delete_area */
void
XrlOspfV0p1Client::unmarshall23(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB23		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_query_area(
	const char*	the_tgt, 
	const uint32_t&	area_id, 
	const CB24&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/query_area");
    x.args().add("area_id", area_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall24, cb));
}


/* Unmarshall query_area */
void
XrlOspfV0p1Client::unmarshall24(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB24		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0, 0);
	return;
    } else if (a && a->size() != 3) {
	XLOG_ERROR("Wrong number of arguments (%u != 3)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0, 0);
	return;
    }
    bool is_stub;
    uint32_t default_cost;
    bool import_summary_routes;
    try {
	a->get("is_stub", is_stub);
	a->get("default_cost", default_cost);
	a->get("import_summary_routes", import_summary_routes);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0, 0);
	return;
    }
    cb->dispatch(e, &is_stub, &default_cost, &import_summary_routes);
}

bool
XrlOspfV0p1Client::send_list_area_ids(
	const char*	the_tgt, 
	const CB25&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/list_area_ids");
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall25, cb));
}


/* Unmarshall list_area_ids */
void
XrlOspfV0p1Client::unmarshall25(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB25		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    XrlAtomList area_ids;
    try {
	a->get("area_ids", area_ids);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &area_ids);
}

bool
XrlOspfV0p1Client::send_add_or_configure_aggregate(
	const char*	the_tgt, 
	const uint32_t&	area_id, 
	const IPv4&	network, 
	const IPv4&	netmask, 
	const bool&	suppress_advertisement, 
	const CB26&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/add_or_configure_aggregate");
    x.args().add("area_id", area_id);
    x.args().add("network", network);
    x.args().add("netmask", netmask);
    x.args().add("suppress_advertisement", suppress_advertisement);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall26, cb));
}


/* Unmarshall add_or_configure_aggregate */
void
XrlOspfV0p1Client::unmarshall26(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB26		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_delete_aggregate(
	const char*	the_tgt, 
	const uint32_t&	area_id, 
	const IPv4&	network, 
	const IPv4&	netmask, 
	const CB27&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/delete_aggregate");
    x.args().add("area_id", area_id);
    x.args().add("network", network);
    x.args().add("netmask", netmask);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall27, cb));
}


/* Unmarshall delete_aggregate */
void
XrlOspfV0p1Client::unmarshall27(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB27		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_query_aggregate(
	const char*	the_tgt, 
	const uint32_t&	area_id, 
	const IPv4&	network, 
	const IPv4&	netmask, 
	const CB28&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/query_aggregate");
    x.args().add("area_id", area_id);
    x.args().add("network", network);
    x.args().add("netmask", netmask);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall28, cb));
}


/* Unmarshall query_aggregate */
void
XrlOspfV0p1Client::unmarshall28(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB28		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    bool suppress_advertisement;
    try {
	a->get("suppress_advertisement", suppress_advertisement);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &suppress_advertisement);
}

bool
XrlOspfV0p1Client::send_list_aggregates(
	const char*	the_tgt, 
	const uint32_t&	area_id, 
	const CB29&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/list_aggregates");
    x.args().add("area_id", area_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall29, cb));
}


/* Unmarshall list_aggregates */
void
XrlOspfV0p1Client::unmarshall29(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB29		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    XrlAtomList networks;
    XrlAtomList netmasks;
    try {
	a->get("networks", networks);
	a->get("netmasks", netmasks);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &networks, &netmasks);
}

bool
XrlOspfV0p1Client::send_add_or_configure_host(
	const char*	the_tgt, 
	const IPv4&	network, 
	const IPv4&	netmask, 
	const uint32_t&	area_id, 
	const uint32_t&	cost, 
	const CB30&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/add_or_configure_host");
    x.args().add("network", network);
    x.args().add("netmask", netmask);
    x.args().add("area_id", area_id);
    x.args().add("cost", cost);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall30, cb));
}


/* Unmarshall add_or_configure_host */
void
XrlOspfV0p1Client::unmarshall30(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB30		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_delete_host(
	const char*	the_tgt, 
	const IPv4&	network, 
	const IPv4&	netmask, 
	const uint32_t&	area_id, 
	const CB31&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/delete_host");
    x.args().add("network", network);
    x.args().add("netmask", netmask);
    x.args().add("area_id", area_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall31, cb));
}


/* Unmarshall delete_host */
void
XrlOspfV0p1Client::unmarshall31(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB31		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_query_host(
	const char*	the_tgt, 
	const IPv4&	network, 
	const IPv4&	netmask, 
	const uint32_t&	area_id, 
	const CB32&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/query_host");
    x.args().add("network", network);
    x.args().add("netmask", netmask);
    x.args().add("area_id", area_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall32, cb));
}


/* Unmarshall query_host */
void
XrlOspfV0p1Client::unmarshall32(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB32		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t cost;
    try {
	a->get("cost", cost);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &cost);
}

bool
XrlOspfV0p1Client::send_list_hosts(
	const char*	the_tgt, 
	const uint32_t&	area_id, 
	const CB33&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/list_hosts");
    x.args().add("area_id", area_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall33, cb));
}


/* Unmarshall list_hosts */
void
XrlOspfV0p1Client::unmarshall33(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB33		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    XrlAtomList networks;
    XrlAtomList netmasks;
    try {
	a->get("networks", networks);
	a->get("netmasks", netmasks);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &networks, &netmasks);
}

bool
XrlOspfV0p1Client::send_add_vlink(
	const char*	the_tgt, 
	const uint32_t&	transit_area, 
	const uint32_t&	neighbor_id, 
	const CB34&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/add_vlink");
    x.args().add("transit_area", transit_area);
    x.args().add("neighbor_id", neighbor_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall34, cb));
}


/* Unmarshall add_vlink */
void
XrlOspfV0p1Client::unmarshall34(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB34		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_delete_vlink(
	const char*	the_tgt, 
	const uint32_t&	transit_area, 
	const uint32_t&	neighbor_id, 
	const CB35&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/delete_vlink");
    x.args().add("transit_area", transit_area);
    x.args().add("neighbor_id", neighbor_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall35, cb));
}


/* Unmarshall delete_vlink */
void
XrlOspfV0p1Client::unmarshall35(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB35		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_vlink_set_transmit_delay(
	const char*	the_tgt, 
	const uint32_t&	transit_area, 
	const uint32_t&	neighbor_id, 
	const uint32_t&	delay_secs, 
	const CB36&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/vlink_set_transmit_delay");
    x.args().add("transit_area", transit_area);
    x.args().add("neighbor_id", neighbor_id);
    x.args().add("delay_secs", delay_secs);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall36, cb));
}


/* Unmarshall vlink_set_transmit_delay */
void
XrlOspfV0p1Client::unmarshall36(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB36		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_vlink_get_transmit_delay(
	const char*	the_tgt, 
	const uint32_t&	transit_area, 
	const uint32_t&	neighbor_id, 
	const CB37&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/vlink_get_transmit_delay");
    x.args().add("transit_area", transit_area);
    x.args().add("neighbor_id", neighbor_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall37, cb));
}


/* Unmarshall vlink_get_transmit_delay */
void
XrlOspfV0p1Client::unmarshall37(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB37		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t delay_secs;
    try {
	a->get("delay_secs", delay_secs);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &delay_secs);
}

bool
XrlOspfV0p1Client::send_vlink_set_retransmit_interval(
	const char*	the_tgt, 
	const uint32_t&	transit_area, 
	const uint32_t&	neighbor_id, 
	const uint32_t&	interval_secs, 
	const CB38&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/vlink_set_retransmit_interval");
    x.args().add("transit_area", transit_area);
    x.args().add("neighbor_id", neighbor_id);
    x.args().add("interval_secs", interval_secs);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall38, cb));
}


/* Unmarshall vlink_set_retransmit_interval */
void
XrlOspfV0p1Client::unmarshall38(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB38		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_vlink_get_retransmit_interval(
	const char*	the_tgt, 
	const uint32_t&	transit_area, 
	const uint32_t&	neighbor_id, 
	const CB39&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/vlink_get_retransmit_interval");
    x.args().add("transit_area", transit_area);
    x.args().add("neighbor_id", neighbor_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall39, cb));
}


/* Unmarshall vlink_get_retransmit_interval */
void
XrlOspfV0p1Client::unmarshall39(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB39		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t interval_secs;
    try {
	a->get("interval_secs", interval_secs);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &interval_secs);
}

bool
XrlOspfV0p1Client::send_vlink_set_hello_interval(
	const char*	the_tgt, 
	const uint32_t&	transit_area, 
	const uint32_t&	neighbor_id, 
	const uint32_t&	interval_secs, 
	const CB40&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/vlink_set_hello_interval");
    x.args().add("transit_area", transit_area);
    x.args().add("neighbor_id", neighbor_id);
    x.args().add("interval_secs", interval_secs);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall40, cb));
}


/* Unmarshall vlink_set_hello_interval */
void
XrlOspfV0p1Client::unmarshall40(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB40		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_vlink_get_hello_interval(
	const char*	the_tgt, 
	const uint32_t&	transit_area, 
	const uint32_t&	neighbor_id, 
	const CB41&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/vlink_get_hello_interval");
    x.args().add("transit_area", transit_area);
    x.args().add("neighbor_id", neighbor_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall41, cb));
}


/* Unmarshall vlink_get_hello_interval */
void
XrlOspfV0p1Client::unmarshall41(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB41		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t interval_secs;
    try {
	a->get("interval_secs", interval_secs);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &interval_secs);
}

bool
XrlOspfV0p1Client::send_vlink_set_router_dead_interval(
	const char*	the_tgt, 
	const uint32_t&	transit_area, 
	const uint32_t&	neighbor_id, 
	const uint32_t&	interval_secs, 
	const CB42&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/vlink_set_router_dead_interval");
    x.args().add("transit_area", transit_area);
    x.args().add("neighbor_id", neighbor_id);
    x.args().add("interval_secs", interval_secs);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall42, cb));
}


/* Unmarshall vlink_set_router_dead_interval */
void
XrlOspfV0p1Client::unmarshall42(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB42		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_vlink_get_router_dead_interval(
	const char*	the_tgt, 
	const uint32_t&	transit_area, 
	const uint32_t&	neighbor_id, 
	const CB43&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/vlink_get_router_dead_interval");
    x.args().add("transit_area", transit_area);
    x.args().add("neighbor_id", neighbor_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall43, cb));
}


/* Unmarshall vlink_get_router_dead_interval */
void
XrlOspfV0p1Client::unmarshall43(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB43		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t interval_secs;
    try {
	a->get("interval_secs", interval_secs);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &interval_secs);
}

bool
XrlOspfV0p1Client::send_vlink_set_authentication(
	const char*	the_tgt, 
	const uint32_t&	transit_area, 
	const uint32_t&	neighbor_id, 
	const string&	type, 
	const string&	key, 
	const CB44&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/vlink_set_authentication");
    x.args().add("transit_area", transit_area);
    x.args().add("neighbor_id", neighbor_id);
    x.args().add("type", type);
    x.args().add("key", key);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall44, cb));
}


/* Unmarshall vlink_set_authentication */
void
XrlOspfV0p1Client::unmarshall44(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB44		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_vlink_get_authentication(
	const char*	the_tgt, 
	const uint32_t&	transit_area, 
	const uint32_t&	neighbor_id, 
	const CB45&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/vlink_get_authentication");
    x.args().add("transit_area", transit_area);
    x.args().add("neighbor_id", neighbor_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall45, cb));
}


/* Unmarshall vlink_get_authentication */
void
XrlOspfV0p1Client::unmarshall45(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB45		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    string type;
    string key;
    try {
	a->get("type", type);
	a->get("key", key);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &type, &key);
}

bool
XrlOspfV0p1Client::send_list_vlinks(
	const char*	the_tgt, 
	const uint32_t&	transit_id, 
	const CB46&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/list_vlinks");
    x.args().add("transit_id", transit_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall46, cb));
}


/* Unmarshall list_vlinks */
void
XrlOspfV0p1Client::unmarshall46(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB46		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    XrlAtomList neighbor_ids;
    try {
	a->get("neighbor_ids", neighbor_ids);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &neighbor_ids);
}

bool
XrlOspfV0p1Client::send_add_or_configure_external_route(
	const char*	the_tgt, 
	const IPv4Net&	network, 
	const IPv4&	gateway, 
	const uint32_t&	type, 
	const uint32_t&	cost, 
	const bool&	multicast, 
	const uint32_t&	external_route_tag, 
	const CB47&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/add_or_configure_external_route");
    x.args().add("network", network);
    x.args().add("gateway", gateway);
    x.args().add("type", type);
    x.args().add("cost", cost);
    x.args().add("multicast", multicast);
    x.args().add("external_route_tag", external_route_tag);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall47, cb));
}


/* Unmarshall add_or_configure_external_route */
void
XrlOspfV0p1Client::unmarshall47(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB47		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_delete_external_route(
	const char*	the_tgt, 
	const IPv4Net&	network, 
	const IPv4&	gateway, 
	const CB48&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/delete_external_route");
    x.args().add("network", network);
    x.args().add("gateway", gateway);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall48, cb));
}


/* Unmarshall delete_external_route */
void
XrlOspfV0p1Client::unmarshall48(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB48		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_query_external_route(
	const char*	the_tgt, 
	const IPv4Net&	network, 
	const IPv4&	gateway, 
	const CB49&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/query_external_route");
    x.args().add("network", network);
    x.args().add("gateway", gateway);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall49, cb));
}


/* Unmarshall query_external_route */
void
XrlOspfV0p1Client::unmarshall49(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB49		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0, 0, 0);
	return;
    } else if (a && a->size() != 4) {
	XLOG_ERROR("Wrong number of arguments (%u != 4)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0, 0, 0);
	return;
    }
    uint32_t type;
    uint32_t cost;
    bool multicast;
    uint32_t external_route_tag;
    try {
	a->get("type", type);
	a->get("cost", cost);
	a->get("multicast", multicast);
	a->get("external_route_tag", external_route_tag);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0, 0, 0);
	return;
    }
    cb->dispatch(e, &type, &cost, &multicast, &external_route_tag);
}

bool
XrlOspfV0p1Client::send_list_external_routes(
	const char*	the_tgt, 
	const IPv4Net&	network, 
	const CB50&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/list_external_routes");
    x.args().add("network", network);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall50, cb));
}


/* Unmarshall list_external_routes */
void
XrlOspfV0p1Client::unmarshall50(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB50		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    XrlAtomList gateways;
    try {
	a->get("gateways", gateways);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &gateways);
}

bool
XrlOspfV0p1Client::send_add_interface(
	const char*	the_tgt, 
	const string&	identifier, 
	const uint32_t&	if_index, 
	const uint32_t&	area_id, 
	const uint32_t&	cost, 
	const uint32_t&	mtu, 
	const string&	type, 
	const bool&	on_demand, 
	const bool&	passive, 
	const CB51&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/add_interface");
    x.args().add("identifier", identifier);
    x.args().add("if_index", if_index);
    x.args().add("area_id", area_id);
    x.args().add("cost", cost);
    x.args().add("mtu", mtu);
    x.args().add("type", type);
    x.args().add("on_demand", on_demand);
    x.args().add("passive", passive);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall51, cb));
}


/* Unmarshall add_interface */
void
XrlOspfV0p1Client::unmarshall51(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB51		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_set_if_index(
	const char*	the_tgt, 
	const string&	identifier, 
	const uint32_t&	index, 
	const CB52&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_set_if_index");
    x.args().add("identifier", identifier);
    x.args().add("index", index);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall52, cb));
}


/* Unmarshall interface_set_if_index */
void
XrlOspfV0p1Client::unmarshall52(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB52		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_if_index(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB53&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_if_index");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall53, cb));
}


/* Unmarshall interface_get_if_index */
void
XrlOspfV0p1Client::unmarshall53(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB53		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t index;
    try {
	a->get("index", index);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &index);
}

bool
XrlOspfV0p1Client::send_interface_set_area_id(
	const char*	the_tgt, 
	const string&	identifier, 
	const uint32_t&	area_id, 
	const CB54&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_set_area_id");
    x.args().add("identifier", identifier);
    x.args().add("area_id", area_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall54, cb));
}


/* Unmarshall interface_set_area_id */
void
XrlOspfV0p1Client::unmarshall54(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB54		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_area_id(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB55&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_area_id");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall55, cb));
}


/* Unmarshall interface_get_area_id */
void
XrlOspfV0p1Client::unmarshall55(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB55		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t area_id;
    try {
	a->get("area_id", area_id);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &area_id);
}

bool
XrlOspfV0p1Client::send_interface_set_cost(
	const char*	the_tgt, 
	const string&	identifier, 
	const uint32_t&	cost, 
	const CB56&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_set_cost");
    x.args().add("identifier", identifier);
    x.args().add("cost", cost);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall56, cb));
}


/* Unmarshall interface_set_cost */
void
XrlOspfV0p1Client::unmarshall56(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB56		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_cost(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB57&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_cost");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall57, cb));
}


/* Unmarshall interface_get_cost */
void
XrlOspfV0p1Client::unmarshall57(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB57		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t cost;
    try {
	a->get("cost", cost);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &cost);
}

bool
XrlOspfV0p1Client::send_interface_set_mtu(
	const char*	the_tgt, 
	const string&	identifier, 
	const uint32_t&	mtu, 
	const CB58&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_set_mtu");
    x.args().add("identifier", identifier);
    x.args().add("mtu", mtu);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall58, cb));
}


/* Unmarshall interface_set_mtu */
void
XrlOspfV0p1Client::unmarshall58(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB58		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_mtu(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB59&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_mtu");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall59, cb));
}


/* Unmarshall interface_get_mtu */
void
XrlOspfV0p1Client::unmarshall59(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB59		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t mtu;
    try {
	a->get("mtu", mtu);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &mtu);
}

bool
XrlOspfV0p1Client::send_interface_set_type(
	const char*	the_tgt, 
	const string&	identifier, 
	const string&	type, 
	const CB60&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_set_type");
    x.args().add("identifier", identifier);
    x.args().add("type", type);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall60, cb));
}


/* Unmarshall interface_set_type */
void
XrlOspfV0p1Client::unmarshall60(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB60		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_type(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB61&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_type");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall61, cb));
}


/* Unmarshall interface_get_type */
void
XrlOspfV0p1Client::unmarshall61(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB61		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    string type;
    try {
	a->get("type", type);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &type);
}

bool
XrlOspfV0p1Client::send_interface_set_dr_priority(
	const char*	the_tgt, 
	const string&	identifier, 
	const uint32_t&	dr_priority, 
	const CB62&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_set_dr_priority");
    x.args().add("identifier", identifier);
    x.args().add("dr_priority", dr_priority);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall62, cb));
}


/* Unmarshall interface_set_dr_priority */
void
XrlOspfV0p1Client::unmarshall62(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB62		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_dr_priority(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB63&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_dr_priority");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall63, cb));
}


/* Unmarshall interface_get_dr_priority */
void
XrlOspfV0p1Client::unmarshall63(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB63		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t dr_priority;
    try {
	a->get("dr_priority", dr_priority);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &dr_priority);
}

bool
XrlOspfV0p1Client::send_interface_set_transit_delay(
	const char*	the_tgt, 
	const string&	identifier, 
	const uint32_t&	delay_secs, 
	const CB64&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_set_transit_delay");
    x.args().add("identifier", identifier);
    x.args().add("delay_secs", delay_secs);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall64, cb));
}


/* Unmarshall interface_set_transit_delay */
void
XrlOspfV0p1Client::unmarshall64(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB64		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_transit_delay(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB65&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_transit_delay");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall65, cb));
}


/* Unmarshall interface_get_transit_delay */
void
XrlOspfV0p1Client::unmarshall65(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB65		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t delay_secs;
    try {
	a->get("delay_secs", delay_secs);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &delay_secs);
}

bool
XrlOspfV0p1Client::send_interface_set_retransmit_interval(
	const char*	the_tgt, 
	const string&	identifier, 
	const uint32_t&	interval_secs, 
	const CB66&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_set_retransmit_interval");
    x.args().add("identifier", identifier);
    x.args().add("interval_secs", interval_secs);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall66, cb));
}


/* Unmarshall interface_set_retransmit_interval */
void
XrlOspfV0p1Client::unmarshall66(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB66		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_retransmit_interval(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB67&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_retransmit_interval");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall67, cb));
}


/* Unmarshall interface_get_retransmit_interval */
void
XrlOspfV0p1Client::unmarshall67(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB67		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t interval_secs;
    try {
	a->get("interval_secs", interval_secs);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &interval_secs);
}

bool
XrlOspfV0p1Client::send_interface_set_router_dead_interval(
	const char*	the_tgt, 
	const string&	identifier, 
	const uint32_t&	interval_secs, 
	const CB68&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_set_router_dead_interval");
    x.args().add("identifier", identifier);
    x.args().add("interval_secs", interval_secs);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall68, cb));
}


/* Unmarshall interface_set_router_dead_interval */
void
XrlOspfV0p1Client::unmarshall68(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB68		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_router_dead_interval(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB69&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_router_dead_interval");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall69, cb));
}


/* Unmarshall interface_get_router_dead_interval */
void
XrlOspfV0p1Client::unmarshall69(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB69		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t interval_secs;
    try {
	a->get("interval_secs", interval_secs);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &interval_secs);
}

bool
XrlOspfV0p1Client::send_interface_set_poll_interval(
	const char*	the_tgt, 
	const string&	identifier, 
	const uint32_t&	interval_secs, 
	const CB70&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_set_poll_interval");
    x.args().add("identifier", identifier);
    x.args().add("interval_secs", interval_secs);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall70, cb));
}


/* Unmarshall interface_set_poll_interval */
void
XrlOspfV0p1Client::unmarshall70(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB70		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_poll_interval(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB71&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_poll_interval");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall71, cb));
}


/* Unmarshall interface_get_poll_interval */
void
XrlOspfV0p1Client::unmarshall71(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB71		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    uint32_t interval_secs;
    try {
	a->get("interval_secs", interval_secs);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &interval_secs);
}

bool
XrlOspfV0p1Client::send_interface_set_authentication(
	const char*	the_tgt, 
	const string&	identifier, 
	const string&	type, 
	const string&	key, 
	const CB72&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_set_authentication");
    x.args().add("identifier", identifier);
    x.args().add("type", type);
    x.args().add("key", key);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall72, cb));
}


/* Unmarshall interface_set_authentication */
void
XrlOspfV0p1Client::unmarshall72(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB72		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_authentication(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB73&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_authentication");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall73, cb));
}


/* Unmarshall interface_get_authentication */
void
XrlOspfV0p1Client::unmarshall73(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB73		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0);
	return;
    } else if (a && a->size() != 2) {
	XLOG_ERROR("Wrong number of arguments (%u != 2)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    string type;
    string key;
    try {
	a->get("type", type);
	a->get("key", key);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0);
	return;
    }
    cb->dispatch(e, &type, &key);
}

bool
XrlOspfV0p1Client::send_interface_set_multicast_forwarding(
	const char*	the_tgt, 
	const string&	identifier, 
	const string&	type, 
	const CB74&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_set_multicast_forwarding");
    x.args().add("identifier", identifier);
    x.args().add("type", type);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall74, cb));
}


/* Unmarshall interface_set_multicast_forwarding */
void
XrlOspfV0p1Client::unmarshall74(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB74		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_multicast_forwarding(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB75&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_multicast_forwarding");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall75, cb));
}


/* Unmarshall interface_get_multicast_forwarding */
void
XrlOspfV0p1Client::unmarshall75(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB75		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    string type;
    try {
	a->get("type", type);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &type);
}

bool
XrlOspfV0p1Client::send_interface_set_on_demand(
	const char*	the_tgt, 
	const string&	identifier, 
	const bool&	on_demand, 
	const CB76&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_set_on_demand");
    x.args().add("identifier", identifier);
    x.args().add("on_demand", on_demand);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall76, cb));
}


/* Unmarshall interface_set_on_demand */
void
XrlOspfV0p1Client::unmarshall76(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB76		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_on_demand(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB77&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_on_demand");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall77, cb));
}


/* Unmarshall interface_get_on_demand */
void
XrlOspfV0p1Client::unmarshall77(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB77		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    bool on_demand;
    try {
	a->get("on_demand", on_demand);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &on_demand);
}

bool
XrlOspfV0p1Client::send_interface_set_passive(
	const char*	the_tgt, 
	const string&	identifier, 
	const bool&	passive, 
	const CB78&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_set_passive");
    x.args().add("identifier", identifier);
    x.args().add("passive", passive);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall78, cb));
}


/* Unmarshall interface_set_passive */
void
XrlOspfV0p1Client::unmarshall78(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB78		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_passive(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB79&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_passive");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall79, cb));
}


/* Unmarshall interface_get_passive */
void
XrlOspfV0p1Client::unmarshall79(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB79		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    bool passive;
    try {
	a->get("passive", passive);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &passive);
}

bool
XrlOspfV0p1Client::send_interface_set_igmp(
	const char*	the_tgt, 
	const string&	identifier, 
	const bool&	enabled, 
	const CB80&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_set_igmp");
    x.args().add("identifier", identifier);
    x.args().add("enabled", enabled);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall80, cb));
}


/* Unmarshall interface_set_igmp */
void
XrlOspfV0p1Client::unmarshall80(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB80		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_igmp(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB81&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_igmp");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall81, cb));
}


/* Unmarshall interface_get_igmp */
void
XrlOspfV0p1Client::unmarshall81(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB81		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    bool enabled;
    try {
	a->get("enabled", enabled);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &enabled);
}

bool
XrlOspfV0p1Client::send_delete_interface(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB82&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/delete_interface");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall82, cb));
}


/* Unmarshall delete_interface */
void
XrlOspfV0p1Client::unmarshall82(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB82		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_list_interfaces(
	const char*	the_tgt, 
	const CB83&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/list_interfaces");
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall83, cb));
}


/* Unmarshall list_interfaces */
void
XrlOspfV0p1Client::unmarshall83(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB83		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    XrlAtomList identifiers;
    try {
	a->get("identifiers", identifiers);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &identifiers);
}

bool
XrlOspfV0p1Client::send_interface_add_md5_key(
	const char*	the_tgt, 
	const string&	identifier, 
	const uint32_t&	key_id, 
	const string&	md5key, 
	const string&	start_receive, 
	const string&	stop_receive, 
	const string&	start_transmit, 
	const string&	stop_transmit, 
	const CB84&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_add_md5_key");
    x.args().add("identifier", identifier);
    x.args().add("key_id", key_id);
    x.args().add("md5key", md5key);
    x.args().add("start_receive", start_receive);
    x.args().add("stop_receive", stop_receive);
    x.args().add("start_transmit", start_transmit);
    x.args().add("stop_transmit", stop_transmit);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall84, cb));
}


/* Unmarshall interface_add_md5_key */
void
XrlOspfV0p1Client::unmarshall84(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB84		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_get_md5_key(
	const char*	the_tgt, 
	const string&	identifier, 
	const uint32_t&	key_id, 
	const CB85&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_get_md5_key");
    x.args().add("identifier", identifier);
    x.args().add("key_id", key_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall85, cb));
}


/* Unmarshall interface_get_md5_key */
void
XrlOspfV0p1Client::unmarshall85(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB85		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0, 0, 0, 0, 0);
	return;
    } else if (a && a->size() != 5) {
	XLOG_ERROR("Wrong number of arguments (%u != 5)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0, 0, 0, 0);
	return;
    }
    string md5key;
    string start_receive;
    string stop_receive;
    string start_transmit;
    string stop_transmit;
    try {
	a->get("md5key", md5key);
	a->get("start_receive", start_receive);
	a->get("stop_receive", stop_receive);
	a->get("start_transmit", start_transmit);
	a->get("stop_transmit", stop_transmit);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0, 0, 0, 0, 0);
	return;
    }
    cb->dispatch(e, &md5key, &start_receive, &stop_receive, &start_transmit, &stop_transmit);
}

bool
XrlOspfV0p1Client::send_interface_delete_md5_key(
	const char*	the_tgt, 
	const string&	identifier, 
	const uint32_t&	key_id, 
	const CB86&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_delete_md5_key");
    x.args().add("identifier", identifier);
    x.args().add("key_id", key_id);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall86, cb));
}


/* Unmarshall interface_delete_md5_key */
void
XrlOspfV0p1Client::unmarshall86(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB86		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_interface_list_md5_keys(
	const char*	the_tgt, 
	const string&	identifier, 
	const CB87&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/interface_list_md5_keys");
    x.args().add("identifier", identifier);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall87, cb));
}


/* Unmarshall interface_list_md5_keys */
void
XrlOspfV0p1Client::unmarshall87(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB87		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    XrlAtomList key_ids;
    try {
	a->get("key_ids", key_ids);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &key_ids);
}

bool
XrlOspfV0p1Client::send_add_neighbor(
	const char*	the_tgt, 
	const IPv4&	nbr_addr, 
	const bool&	dr_eligible, 
	const CB88&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/add_neighbor");
    x.args().add("nbr_addr", nbr_addr);
    x.args().add("dr_eligible", dr_eligible);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall88, cb));
}


/* Unmarshall add_neighbor */
void
XrlOspfV0p1Client::unmarshall88(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB88		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_get_neighbor(
	const char*	the_tgt, 
	const IPv4&	nbr_addr, 
	const CB89&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/get_neighbor");
    x.args().add("nbr_addr", nbr_addr);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall89, cb));
}


/* Unmarshall get_neighbor */
void
XrlOspfV0p1Client::unmarshall89(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB89		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    bool dr_eligible;
    try {
	a->get("dr_eligible", dr_eligible);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &dr_eligible);
}

bool
XrlOspfV0p1Client::send_delete_neighbor(
	const char*	the_tgt, 
	const IPv4&	nbr_addr, 
	const CB90&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/delete_neighbor");
    x.args().add("nbr_addr", nbr_addr);
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall90, cb));
}


/* Unmarshall delete_neighbor */
void
XrlOspfV0p1Client::unmarshall90(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB90		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != 0)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlOspfV0p1Client::send_list_neighbors(
	const char*	the_tgt, 
	const CB91&	cb
)
{
    Xrl x(the_tgt, "ospf/0.1/list_neighbors");
    return _router->send(x, callback(this, &XrlOspfV0p1Client::unmarshall91, cb));
}


/* Unmarshall list_neighbors */
void
XrlOspfV0p1Client::unmarshall91(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB91		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e, 0);
	return;
    } else if (a && a->size() != 1) {
	XLOG_ERROR("Wrong number of arguments (%u != 1)", (uint32_t)a->size());
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    XrlAtomList nbr_addrs;
    try {
	a->get("nbr_addrs", nbr_addrs);
    } catch (const XrlArgs::XrlAtomNotFound&) {
	XLOG_ERROR("Atom not found");
	cb->dispatch(XrlError::BAD_ARGS(), 0);
	return;
    }
    cb->dispatch(e, &nbr_addrs);
}
