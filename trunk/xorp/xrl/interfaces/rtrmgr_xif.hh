/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/clnt-gen'.
 *
 * $XORP: xorp/xrl/interfaces/rtrmgr_xif.hh,v 1.3 2003/01/10 00:30:30 hodson Exp $
 */

#ifndef __XRL_INTERFACES_RTRMGR_XIF_HH__
#define __XRL_INTERFACES_RTRMGR_XIF_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XifRtrmgr"

#include "libxorp/xlog.h"
#include "libxorp/callback.hh"

#include "libxipc/xrl.hh"
#include "libxipc/xrl_error.hh"
#include "libxipc/xrl_sender.hh"


class XrlRtrmgrV0p1Client {
public:
    XrlRtrmgrV0p1Client(XrlSender* s) : _sender(s) {}
    virtual ~XrlRtrmgrV0p1Client() {}

    typedef XorpCallback2<void, const XrlError&, const uint32_t*>::RefPtr CB0;

    bool send_get_pid(
	const char*	target_name, 
	const CB0&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const string*, const uint32_t*>::RefPtr CB1;
    /**
     *  Send Xrl intended to:
     *  
     *  Register a user and client process with the rtrmgr.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param clientname name of xrl entity supporting rtrmgr_client.xif
     *  methods.
     */
    bool send_register_client(
	const char*	target_name, 
	const uint32_t&	userid, 
	const string&	clientname, 
	const CB1&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB2;

    bool send_unregister_client(
	const char*	target_name, 
	const string&	token, 
	const CB2&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB3;

    bool send_authenticate_client(
	const char*	target_name, 
	const uint32_t&	userid, 
	const string&	clientname, 
	const string&	token, 
	const CB3&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB4;

    bool send_enter_config_mode(
	const char*	target_name, 
	const string&	token, 
	const bool&	exclusive, 
	const CB4&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB5;

    bool send_leave_config_mode(
	const char*	target_name, 
	const string&	token, 
	const CB5&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const XrlAtomList*>::RefPtr CB6;

    bool send_get_config_users(
	const char*	target_name, 
	const string&	token, 
	const CB6&	cb
    );

    typedef XorpCallback2<void, const XrlError&, const string*>::RefPtr CB7;

    bool send_get_running_config(
	const char*	target_name, 
	const string&	token, 
	const CB7&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB8;

    bool send_apply_config_change(
	const char*	target_name, 
	const string&	token, 
	const string&	target, 
	const string&	deltas, 
	const string&	deletions, 
	const CB8&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const bool*, const uint32_t*>::RefPtr CB9;

    bool send_lock_config(
	const char*	target_name, 
	const string&	token, 
	const uint32_t&	timeout, 
	const CB9&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB10;

    bool send_unlock_config(
	const char*	target_name, 
	const string&	token, 
	const CB10&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const bool*, const uint32_t*>::RefPtr CB11;

    bool send_lock_node(
	const char*	target_name, 
	const string&	token, 
	const string&	node, 
	const uint32_t&	timeout, 
	const CB11&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB12;

    bool send_unlock_node(
	const char*	target_name, 
	const string&	token, 
	const string&	node, 
	const CB12&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB13;

    bool send_save_config(
	const char*	target_name, 
	const string&	token, 
	const string&	filename, 
	const CB13&	cb
    );

    typedef XorpCallback1<void, const XrlError&>::RefPtr CB14;

    bool send_load_config(
	const char*	target_name, 
	const string&	token, 
	const string&	target, 
	const string&	filename, 
	const CB14&	cb
    );

protected:
    XrlSender* _sender;

private:
    void unmarshall0(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB0		cb
    );

    void unmarshall1(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB1		cb
    );

    void unmarshall2(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB2		cb
    );

    void unmarshall3(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB3		cb
    );

    void unmarshall4(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB4		cb
    );

    void unmarshall5(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB5		cb
    );

    void unmarshall6(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB6		cb
    );

    void unmarshall7(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB7		cb
    );

    void unmarshall8(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB8		cb
    );

    void unmarshall9(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB9		cb
    );

    void unmarshall10(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB10		cb
    );

    void unmarshall11(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB11		cb
    );

    void unmarshall12(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB12		cb
    );

    void unmarshall13(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB13		cb
    );

    void unmarshall14(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB14		cb
    );

};

#endif /* __XRL_INTERFACES_RTRMGR_XIF_HH__ */
