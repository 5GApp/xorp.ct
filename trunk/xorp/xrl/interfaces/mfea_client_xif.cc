/*
 * Copyright (c) 2001-2008 XORP, Inc.
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by 'clnt-gen'.
 */

#ident "$XORP: xorp/xrl/interfaces/mfea_client_xif.cc,v 1.30 2008/07/23 11:55:16 bms Exp $"

#include "mfea_client_xif.hh"

bool
XrlMfeaClientV0p1Client::send_recv_kernel_signal_message4(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const uint32_t&	message_type,
	const string&	vif_name,
	const uint32_t&	vif_index,
	const IPv4&	source_address,
	const IPv4&	dest_address,
	const vector<uint8_t>&	protocol_message,
	const RecvKernelSignalMessage4CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea_client/0.1/recv_kernel_signal_message4");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(message_type));
        x->args().add(XrlAtom(vif_name));
        x->args().add(XrlAtom(vif_index));
        x->args().add(XrlAtom(source_address));
        x->args().add(XrlAtom(dest_address));
        x->args().add(XrlAtom(protocol_message));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, message_type);
    x->args().set_arg(2, vif_name);
    x->args().set_arg(3, vif_index);
    x->args().set_arg(4, source_address);
    x->args().set_arg(5, dest_address);
    x->args().set_arg(6, protocol_message);

    return _sender->send(*x, callback(this, &XrlMfeaClientV0p1Client::unmarshall_recv_kernel_signal_message4, cb));
}


/* Unmarshall recv_kernel_signal_message4 */
void
XrlMfeaClientV0p1Client::unmarshall_recv_kernel_signal_message4(
	const XrlError&	e,
	XrlArgs*	a,
	RecvKernelSignalMessage4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaClientV0p1Client::send_recv_kernel_signal_message6(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const uint32_t&	message_type,
	const string&	vif_name,
	const uint32_t&	vif_index,
	const IPv6&	source_address,
	const IPv6&	dest_address,
	const vector<uint8_t>&	protocol_message,
	const RecvKernelSignalMessage6CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea_client/0.1/recv_kernel_signal_message6");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(message_type));
        x->args().add(XrlAtom(vif_name));
        x->args().add(XrlAtom(vif_index));
        x->args().add(XrlAtom(source_address));
        x->args().add(XrlAtom(dest_address));
        x->args().add(XrlAtom(protocol_message));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, message_type);
    x->args().set_arg(2, vif_name);
    x->args().set_arg(3, vif_index);
    x->args().set_arg(4, source_address);
    x->args().set_arg(5, dest_address);
    x->args().set_arg(6, protocol_message);

    return _sender->send(*x, callback(this, &XrlMfeaClientV0p1Client::unmarshall_recv_kernel_signal_message6, cb));
}


/* Unmarshall recv_kernel_signal_message6 */
void
XrlMfeaClientV0p1Client::unmarshall_recv_kernel_signal_message6(
	const XrlError&	e,
	XrlArgs*	a,
	RecvKernelSignalMessage6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaClientV0p1Client::send_recv_dataflow_signal4(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const IPv4&	source_address,
	const IPv4&	group_address,
	const uint32_t&	threshold_interval_sec,
	const uint32_t&	threshold_interval_usec,
	const uint32_t&	measured_interval_sec,
	const uint32_t&	measured_interval_usec,
	const uint32_t&	threshold_packets,
	const uint32_t&	threshold_bytes,
	const uint32_t&	measured_packets,
	const uint32_t&	measured_bytes,
	const bool&	is_threshold_in_packets,
	const bool&	is_threshold_in_bytes,
	const bool&	is_geq_upcall,
	const bool&	is_leq_upcall,
	const RecvDataflowSignal4CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea_client/0.1/recv_dataflow_signal4");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(source_address));
        x->args().add(XrlAtom(group_address));
        x->args().add(XrlAtom(threshold_interval_sec));
        x->args().add(XrlAtom(threshold_interval_usec));
        x->args().add(XrlAtom(measured_interval_sec));
        x->args().add(XrlAtom(measured_interval_usec));
        x->args().add(XrlAtom(threshold_packets));
        x->args().add(XrlAtom(threshold_bytes));
        x->args().add(XrlAtom(measured_packets));
        x->args().add(XrlAtom(measured_bytes));
        x->args().add(XrlAtom(is_threshold_in_packets));
        x->args().add(XrlAtom(is_threshold_in_bytes));
        x->args().add(XrlAtom(is_geq_upcall));
        x->args().add(XrlAtom(is_leq_upcall));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, source_address);
    x->args().set_arg(2, group_address);
    x->args().set_arg(3, threshold_interval_sec);
    x->args().set_arg(4, threshold_interval_usec);
    x->args().set_arg(5, measured_interval_sec);
    x->args().set_arg(6, measured_interval_usec);
    x->args().set_arg(7, threshold_packets);
    x->args().set_arg(8, threshold_bytes);
    x->args().set_arg(9, measured_packets);
    x->args().set_arg(10, measured_bytes);
    x->args().set_arg(11, is_threshold_in_packets);
    x->args().set_arg(12, is_threshold_in_bytes);
    x->args().set_arg(13, is_geq_upcall);
    x->args().set_arg(14, is_leq_upcall);

    return _sender->send(*x, callback(this, &XrlMfeaClientV0p1Client::unmarshall_recv_dataflow_signal4, cb));
}


/* Unmarshall recv_dataflow_signal4 */
void
XrlMfeaClientV0p1Client::unmarshall_recv_dataflow_signal4(
	const XrlError&	e,
	XrlArgs*	a,
	RecvDataflowSignal4CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}

bool
XrlMfeaClientV0p1Client::send_recv_dataflow_signal6(
	const char*	dst_xrl_target_name,
	const string&	xrl_sender_name,
	const IPv6&	source_address,
	const IPv6&	group_address,
	const uint32_t&	threshold_interval_sec,
	const uint32_t&	threshold_interval_usec,
	const uint32_t&	measured_interval_sec,
	const uint32_t&	measured_interval_usec,
	const uint32_t&	threshold_packets,
	const uint32_t&	threshold_bytes,
	const uint32_t&	measured_packets,
	const uint32_t&	measured_bytes,
	const bool&	is_threshold_in_packets,
	const bool&	is_threshold_in_bytes,
	const bool&	is_geq_upcall,
	const bool&	is_leq_upcall,
	const RecvDataflowSignal6CB&	cb
)
{
    static Xrl* x = NULL;

    if (!x) {
        x = new Xrl(dst_xrl_target_name, "mfea_client/0.1/recv_dataflow_signal6");
        x->args().add(XrlAtom(xrl_sender_name));
        x->args().add(XrlAtom(source_address));
        x->args().add(XrlAtom(group_address));
        x->args().add(XrlAtom(threshold_interval_sec));
        x->args().add(XrlAtom(threshold_interval_usec));
        x->args().add(XrlAtom(measured_interval_sec));
        x->args().add(XrlAtom(measured_interval_usec));
        x->args().add(XrlAtom(threshold_packets));
        x->args().add(XrlAtom(threshold_bytes));
        x->args().add(XrlAtom(measured_packets));
        x->args().add(XrlAtom(measured_bytes));
        x->args().add(XrlAtom(is_threshold_in_packets));
        x->args().add(XrlAtom(is_threshold_in_bytes));
        x->args().add(XrlAtom(is_geq_upcall));
        x->args().add(XrlAtom(is_leq_upcall));
    }

    x->set_target(dst_xrl_target_name);

    x->args().set_arg(0, xrl_sender_name);
    x->args().set_arg(1, source_address);
    x->args().set_arg(2, group_address);
    x->args().set_arg(3, threshold_interval_sec);
    x->args().set_arg(4, threshold_interval_usec);
    x->args().set_arg(5, measured_interval_sec);
    x->args().set_arg(6, measured_interval_usec);
    x->args().set_arg(7, threshold_packets);
    x->args().set_arg(8, threshold_bytes);
    x->args().set_arg(9, measured_packets);
    x->args().set_arg(10, measured_bytes);
    x->args().set_arg(11, is_threshold_in_packets);
    x->args().set_arg(12, is_threshold_in_bytes);
    x->args().set_arg(13, is_geq_upcall);
    x->args().set_arg(14, is_leq_upcall);

    return _sender->send(*x, callback(this, &XrlMfeaClientV0p1Client::unmarshall_recv_dataflow_signal6, cb));
}


/* Unmarshall recv_dataflow_signal6 */
void
XrlMfeaClientV0p1Client::unmarshall_recv_dataflow_signal6(
	const XrlError&	e,
	XrlArgs*	a,
	RecvDataflowSignal6CB		cb
)
{
    if (e != XrlError::OKAY()) {
	cb->dispatch(e);
	return;
    } else if (a && a->size() != 0) {
	XLOG_ERROR("Wrong number of arguments (%u != %u)", XORP_UINT_CAST(a->size()), XORP_UINT_CAST(0));
	cb->dispatch(XrlError::BAD_ARGS());
	return;
    }
    cb->dispatch(e);
}
