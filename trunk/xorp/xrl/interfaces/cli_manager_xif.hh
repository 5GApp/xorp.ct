/*
 * Copyright (c) 2002 International Computer Science Institute
 * See LICENSE file for licensing, conditions, and warranties on use.
 *
 * DO NOT EDIT THIS FILE - IT IS PROGRAMMATICALLY GENERATED
 *
 * Generated by '../scripts/clnt-gen'.
 *
 * $XORP: xorp/xrl/interfaces/cli_manager_xif.hh,v 1.4 2003/01/23 11:14:25 pavlin Exp $
 */

#ifndef __XRL_INTERFACES_CLI_MANAGER_XIF_HH__
#define __XRL_INTERFACES_CLI_MANAGER_XIF_HH__

#undef XORP_LIBRARY_NAME
#define XORP_LIBRARY_NAME "XifCliManager"

#include "libxorp/xlog.h"
#include "libxorp/callback.hh"

#include "libxipc/xrl.hh"
#include "libxipc/xrl_error.hh"
#include "libxipc/xrl_sender.hh"


class XrlCliManagerV0p1Client {
public:
    XrlCliManagerV0p1Client(XrlSender* s) : _sender(s) {}
    virtual ~XrlCliManagerV0p1Client() {}

    typedef XorpCallback3<void, const XrlError&, const bool*, const string*>::RefPtr CB0;
    /**
     *  Send Xrl intended to:
     *  
     *  Enable/disable/start/stop the CLI.
     *  
     *  @param tgt_name Xrl Target name
     */
    bool send_enable_cli(
	const char*	target_name, 
	const CB0&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const bool*, const string*>::RefPtr CB1;

    bool send_disable_cli(
	const char*	target_name, 
	const CB1&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const bool*, const string*>::RefPtr CB2;

    bool send_start_cli(
	const char*	target_name, 
	const CB2&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const bool*, const string*>::RefPtr CB3;

    bool send_stop_cli(
	const char*	target_name, 
	const CB3&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const bool*, const string*>::RefPtr CB4;
    /**
     *  Send Xrl intended to:
     *  
     *  Add a subnet address to the list of subnet addresses enabled for CLI
     *  access. This method can be called more than once to add a number of
     *  subnet addresses.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param subnet_addr the subnet address to add.
     */
    bool send_add_enable_cli_access_from_subnet4(
	const char*	target_name, 
	const IPv4Net&	subnet_addr, 
	const CB4&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const bool*, const string*>::RefPtr CB5;

    bool send_add_enable_cli_access_from_subnet6(
	const char*	target_name, 
	const IPv6Net&	subnet_addr, 
	const CB5&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const bool*, const string*>::RefPtr CB6;
    /**
     *  Send Xrl intended to:
     *  
     *  Delete a subnet address from the list of subnet addresses enabled for
     *  CLI access.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param subnet_addr the subnet address to delete.
     */
    bool send_delete_enable_cli_access_from_subnet4(
	const char*	target_name, 
	const IPv4Net&	subnet_addr, 
	const CB6&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const bool*, const string*>::RefPtr CB7;

    bool send_delete_enable_cli_access_from_subnet6(
	const char*	target_name, 
	const IPv6Net&	subnet_addr, 
	const CB7&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const bool*, const string*>::RefPtr CB8;
    /**
     *  Send Xrl intended to:
     *  
     *  Add a subnet address to the list of subnet addresses disabled for CLI
     *  access. This method can be called more than once to add a number of
     *  subnet addresses.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param subnet_addr the subnet address to add.
     */
    bool send_add_disable_cli_access_from_subnet4(
	const char*	target_name, 
	const IPv4Net&	subnet_addr, 
	const CB8&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const bool*, const string*>::RefPtr CB9;

    bool send_add_disable_cli_access_from_subnet6(
	const char*	target_name, 
	const IPv6Net&	subnet_addr, 
	const CB9&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const bool*, const string*>::RefPtr CB10;
    /**
     *  Send Xrl intended to:
     *  
     *  Delete a subnet address from the list of subnet addresses disabled for
     *  CLI access.
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param subnet_addr the subnet address to delete.
     */
    bool send_delete_disable_cli_access_from_subnet4(
	const char*	target_name, 
	const IPv4Net&	subnet_addr, 
	const CB10&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const bool*, const string*>::RefPtr CB11;

    bool send_delete_disable_cli_access_from_subnet6(
	const char*	target_name, 
	const IPv6Net&	subnet_addr, 
	const CB11&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const bool*, const string*>::RefPtr CB12;
    /**
     *  Send Xrl intended to:
     *  
     *  Add a CLI command to the CLI manager
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param processor_name the name of the module that will process that
     *  command.
     *  
     *  @param command_name the name of the command to add.
     *  
     *  @param command_help the help for the command to add.
     *  
     *  @param is_command_cd is true, the string that will replace the CLI
     *  prompt after we "cd" to that level of the CLI command-tree.
     *  
     *  @param command_cd_prompt if
     *  
     *  @param is_command_processor if true, this is a processing command that
     *  would be performed by processor_name.
     */
    bool send_add_cli_command(
	const char*	target_name, 
	const string&	processor_name, 
	const string&	command_name, 
	const string&	command_help, 
	const bool&	is_command_cd, 
	const string&	command_cd_prompt, 
	const bool&	is_command_processor, 
	const CB12&	cb
    );

    typedef XorpCallback3<void, const XrlError&, const bool*, const string*>::RefPtr CB13;
    /**
     *  Send Xrl intended to:
     *  
     *  Delete a CLI command from the CLI manager
     *  
     *  @param tgt_name Xrl Target name
     *  
     *  @param processor_name the name of the module that sends the request.
     *  
     *  @param command_name the name of the command to delete.
     */
    bool send_delete_cli_command(
	const char*	target_name, 
	const string&	processor_name, 
	const string&	command_name, 
	const CB13&	cb
    );

protected:
    XrlSender* _sender;

private:
    void unmarshall0(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB0		cb
    );

    void unmarshall1(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB1		cb
    );

    void unmarshall2(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB2		cb
    );

    void unmarshall3(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB3		cb
    );

    void unmarshall4(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB4		cb
    );

    void unmarshall5(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB5		cb
    );

    void unmarshall6(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB6		cb
    );

    void unmarshall7(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB7		cb
    );

    void unmarshall8(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB8		cb
    );

    void unmarshall9(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB9		cb
    );

    void unmarshall10(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB10		cb
    );

    void unmarshall11(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB11		cb
    );

    void unmarshall12(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB12		cb
    );

    void unmarshall13(
	const XrlError&	e, 
	XrlArgs*	a, 
	CB13		cb
    );

};

#endif /* __XRL_INTERFACES_CLI_MANAGER_XIF_HH__ */
