#define yy_create_buffer yy_compile_policy_create_buffer
#define yy_delete_buffer yy_compile_policy_delete_buffer
#define yy_scan_buffer yy_compile_policy_scan_buffer
#define yy_scan_string yy_compile_policy_scan_string
#define yy_scan_bytes yy_compile_policy_scan_bytes
#define yy_flex_debug yy_compile_policy_flex_debug
#define yy_init_buffer yy_compile_policy_init_buffer
#define yy_flush_buffer yy_compile_policy_flush_buffer
#define yy_load_buffer_state yy_compile_policy_load_buffer_state
#define yy_switch_to_buffer yy_compile_policy_switch_to_buffer
#define yyin yy_compile_policyin
#define yyleng yy_compile_policyleng
#define yylex yy_compile_policylex
#define yyout yy_compile_policyout
#define yyrestart yy_compile_policyrestart
#define yytext yy_compile_policytext

#line 19 "lex.yy_compile_policy.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 * $FreeBSD: src/usr.bin/lex/flex.skl,v 1.8 2004/01/06 19:03:44 nectar Exp $
 */

#if defined(__FreeBSD__)
#include <sys/cdefs.h>
#else
#define __unused
#endif

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) __unused;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 26
#define YY_END_OF_BUFFER 27
static yyconst short int yy_accept[694] =
    {   0,
        0,    0,    0,    0,    0,    0,   27,   25,   24,   23,
        1,    9,   25,   25,   25,   25,   22,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,    2,    3,    8,
        7,   11,   10,   24,    0,    0,    0,    0,    0,    0,
        0,   14,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,    8,   11,    0,    0,    0,    0,    0,    0,
       14,    0,    0,   14,   14,   14,   14,   21,   18,   21,
       21,   21,   21,   21,   21,   21,    0,    0,    0,    0,
        0,    0,    0,    0,   14,   14,   14,   14,   15,   15,
        0,   14,    0,   14,   14,   14,   14,   21,   21,    5,

       21,   21,   21,   21,   16,    0,    0,    0,    0,    0,
        0,   14,   14,    0,   14,   14,   14,   14,   15,   15,
       15,    0,    0,    0,   14,   14,   14,   14,   14,   14,
       14,   21,   21,   21,   21,   21,    0,    0,    0,    0,
        0,    0,    0,    0,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   15,    0,    0,    0,    0,
        0,   14,    0,   14,    0,   14,   14,   14,   14,    6,
       20,   19,   21,    4,   12,   12,   12,    0,    0,    0,
       14,   14,    0,   14,   14,   14,   14,   14,   14,    0,
       14,   14,   14,   14,    0,    0,    0,    0,    0,    0,

        0,   14,   14,   14,   14,   14,   14,   14,    0,    0,
       12,   12,   12,   12,    0,    0,    0,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   14,    0,   14,    0,   14,
       14,   14,   14,    0,   13,   13,   13,   12,    0,    0,
       14,   14,    0,   14,   14,   14,   14,   14,   14,    0,
       14,   14,   14,   14,   14,   14,    0,   14,   14,   14,
       14,   14,   14,   14,    0,    0,    0,    0,    0,    0,
        0,    0,   14,   14,   14,   14,   14,   14,   14,    0,

        0,    0,    0,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   14,    0,   14,    0,   14,   14,   14,   14,
        0,    0,    0,   14,   14,    0,   14,   14,   14,   14,
       14,   14,    0,   14,   14,   14,   14,   14,   14,    0,
       14,   14,   14,   14,   14,   14,    0,   14,   14,   14,
       14,   14,   14,   14,   14,    0,    0,    0,    0,    0,
        0,    0,    0,   14,   14,   14,   14,   14,   14,   14,

        0,    0,    0,    0,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       14,    0,   14,    0,   14,   14,   14,   14,    0,    0,
        0,    0,    0,   14,    0,   14,    0,   14,   14,   14,
       14,   14,   14,    0,   14,   14,   14,   14,   14,   14,
        0,   14,   14,   14,   14,   14,   14,    0,   14,   14,
       14,   14,   14,   14,    0,   14,   14,   14,   14,   14,

       14,   14,   14,    0,    0,    0,    0,    0,    0,    0,
        0,   14,   14,   14,   14,   14,   14,   14,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   14,    0,   14,    0,   14,   14,   14,   14,
        0,    0,    0,    0,    0,    0,   14,   14,    0,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,    0,    0,    0,    0,    0,    0,

        0,    0,   14,   14,   14,   14,    0,    0,    0,    0,
        0,    0,    0,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   14,   14,   17,    0,    0,    0,
        0,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,    0,    0,    0,    0,    0,   14,    0,    0,
        0,    0,    0,   14,   14,   14,   14,    0,    0,    0,
        0,    0,   14,   14,   14,   14,    0,   14,   14,   14,
       14,    0,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    1,    1,    1,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   16,   16,   17,   18,   19,    1,
        1,    1,    1,    1,   20,   20,   20,   20,   21,   20,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   23,   24,   22,   22,   22,   22,   22,   22,
        1,    1,    1,    1,   25,    1,   26,   20,   27,   28,

       29,   20,   22,   22,   30,   22,   22,   31,   32,   33,
       34,   35,   22,   36,   37,   38,   39,   22,   22,   40,
       41,   22,   42,    1,   43,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[44] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    4,    5,    6,
        6,    6,    6,    6,    6,    6,    6,    7,    1,    8,
        8,    1,    1,    1,    1,    8,    8,    8,    8,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static yyconst short int yy_base[917] =
    {   0,
        0,    0, 2171, 2169, 2166, 2146, 2151, 3705, 2148, 3705,
     3705, 3705,   36,   56,   64, 2131, 3705,   70,  102, 2125,
     2106, 2102, 2089, 2096, 2093, 2092, 2079, 3705, 3705,    0,
     3705,    0, 3705, 2105,   48,  124, 2088, 2087,  144,  108,
       37,  153,  173,    0, 2078, 2048, 2048, 2049, 2048, 2049,
     2030, 2031,    0,    0, 2058,  195, 2057,  125,  196, 2046,
      206,  220, 2052,  231,  251,  259,  266,  275,    0, 2032,
     2008, 2011, 2010, 2013, 2004, 1995,  136, 2017, 2016,  289,
     2015, 2004, 2003, 2002,  299,  319,  266,  328,    0,  165,
      185,  339,  359,  372,  381,  110,  391, 1967, 1950,    0,

     1947, 1946, 1954, 1953,    0, 1971,  402, 1970, 1958, 1943,
     1942,  411,  433,  453,  393,  473,  155,  483, 3705,    0,
     1942, 1947,  494, 1946,  485,  504,  515,  535,  328,  544,
      546, 1908, 1902, 1901, 1897, 1906,  219, 1913, 1894,  549,
     1889, 1878, 1877, 1873,  559,  579,  393,  588,  590,  592,
      603,  623,  485,  632,  634, 3705,  243, 1882, 1869,  637,
     1868,  637,  288,  648,  668,  681,  690,  175,  700,    0,
        0,    0, 1868,    0, 1865,  710, 1862, 1849, 1820, 1815,
      719,  741,  761,  774,  783,  208,  793,  794,  805,  825,
      838,  847,  220,  857, 1824,  868, 1823, 1819, 1818,  878,

     1805,  859,  888,  899,  919,  504,  928,  930, 1775,  939,
     1802, 1801,  948, 1798, 1775, 1756, 1751,  958,  978,  700,
      987,  989,  991, 1002, 1022,  794, 1031, 1033, 1035, 1037,
     1048, 1068,  859, 1077, 1079,  311, 1760, 1759, 1082, 1755,
      351, 1754, 1741, 1084, 1740, 1084,  372, 1095, 1115, 1128,
     1137,  266, 1147, 1709,  423,  445, 3705, 1737, 1725, 1709,
     1157, 1179, 1199, 1212, 1221,  277, 1231, 1232, 1243, 1263,
     1276, 1285,  328, 1295, 1296, 1307, 1327, 1340, 1349,  361,
     1359, 1717, 1369, 1716, 1716, 1713, 1379, 1712, 1701, 1700,
     1389, 1682, 1399, 1401, 1412, 1432,  888, 1441, 1443, 1659,

     1666, 1665, 1661, 1454, 1474,  930, 1483, 1485, 1487, 1498,
     1518,  948, 1527, 1529, 1531, 1533, 1544, 1564, 1147, 1573,
     1575, 1577, 1579, 1590, 1610, 1232, 1619, 1621, 1669, 1656,
     1624, 1655,  465, 1655, 1654, 1626, 1651,  527, 1638, 1627,
     1628, 1624, 1629,  548, 1640, 1660, 1673, 1682,  413, 1692,
     1593, 1597, 1596, 1702, 1724, 1744, 1757, 1766,  455, 1776,
     1777, 1788, 1808, 1821, 1830,  504, 1840, 1841, 1852, 1872,
     1885, 1894,  565, 1904, 1905, 1916, 1936, 1949, 1958,  567,
     1968, 1604, 1603, 1978, 1600, 1588, 1586, 1988, 1584, 1582,
     1581, 1998, 1561, 2008, 2010, 2021, 2041, 1296, 2050, 2052,

     1539, 1549, 1548, 2061, 2083, 2103, 1359, 2112, 2114, 2116,
     2127, 2147, 1401, 2156, 2158, 2160, 2162, 2173, 2193, 1443,
     2202, 2204, 2206, 2208, 2219, 2239, 1692, 2248, 2250, 2252,
     2254, 2265, 2285, 1777, 2294, 2296, 1554, 1541, 2299, 1539,
      592, 1538, 1536, 2301, 1535,  615, 1515, 1514, 2303, 1513,
     2304,  637, 2315, 2335, 2348, 2357,  654, 2367, 1488, 1499,
     2378, 2398, 1841, 1495, 1484, 2408,    0, 2369, 2428,  656,
     2438, 2439, 2450,    0, 2463, 2472,  670, 2482, 2483, 2494,
        0, 2507, 2516,  675, 2526, 2527, 2538,    0, 2551, 2560,
      700, 2570, 2571, 2582,    0, 2595, 2604,  721, 2614, 1491,

     1490, 2624, 1489, 1489, 1471, 2634, 1470, 1469, 1468, 2644,
     1465, 2654, 2656, 2667, 2687, 1905, 2696, 2698, 1431, 1419,
      731, 2709, 1418, 1417, 2729,  747, 1380, 1425, 2700, 2739,
     1422, 2741, 2743, 2745, 1409, 2747, 2758, 2760, 1367, 2762,
     2764, 2766, 1366, 2777, 2779, 2781, 1348, 2783, 1343, 1342,
     2787, 1341,  774, 1338, 1337, 2790, 1324,  817, 1323, 1322,
     2792, 1321, 2784,  838, 2802,    0, 2815, 2824,  749, 2834,
     1293, 1304, 2845, 1285, 1989, 2635, 1279, 1278, 2836, 1277,
     2854, 1273, 2855, 1272, 2856, 1259, 2857, 1258, 2858, 1257,
     1256, 1253, 2868, 1239, 1221, 1216, 2878, 1215, 1214, 1210,

     2888, 1209, 2898, 2900, 1195, 2902, 1165,  911, 1194, 1193,
     2905, 1190, 1164, 1172, 1171, 1170, 1167, 1166, 1155, 1154,
     1136, 1131, 2908, 1130,  970, 1130, 1126, 2911, 1125,  991,
     1112, 1111, 2915, 1110, 2917, 1108, 3705, 1106, 2928, 1088,
     1086, 1082, 1080, 1064, 1058, 1045, 1043, 1041, 1039, 1038,
     2937, 1018, 1013, 1000, 2947,  998,  996,  974, 1014,  969,
      939, 2957,  916,  909,  896, 2959,  895, 1060,  879,  847,
     2961,  836,  834,  821, 2970,  815,  802,  782,  771, 2979,
      770,  752,  735,  689, 2988,  684,  658,  642, 2990,  635,
      619,  613, 3705, 3007, 3015, 3023, 3031,  603, 3034, 3037,

     3042, 3045, 3048, 3051,  601, 3055,  599, 3060, 3061, 3064,
     3068,  572,  557, 3072, 3077, 3080, 3081, 3084, 3088,  555,
     3093, 3096, 3099, 3103,  550, 3108, 3109, 3112, 3116, 3121,
     3125,  534, 3130,  528, 3132, 3136, 3138, 3139, 3142, 3146,
     3150, 3155, 3158, 3161, 3164, 3167, 3171, 3175, 3176, 3179,
     3183, 3188, 3192, 3197, 3201,  472, 3206,  452, 3209,  446,
     3211, 3214, 3217, 3221, 3225, 3229, 3233, 3235, 3238, 3241,
     3244, 3247, 3250, 3254, 3257, 3260, 3264, 3269, 3273, 3278,
     3282, 3287, 3291, 3295,  395, 3298,  383, 3301,  358, 3303,
     3306, 3309, 3313, 3317, 3321, 3325, 3329, 3331, 3334, 3337,

     3340, 3343, 3346, 3350, 3353, 3357, 3362, 3366, 3371, 3375,
     3380, 3384, 3389, 3393, 3397,  352, 3400,  318, 3403,  312,
     3405, 3408, 3412, 3415, 3418, 3422, 3425, 3429, 3432, 3436,
     3439, 3443, 3446, 3450, 3454, 3456, 3459, 3462, 3465, 3468,
     3471, 3475,  250, 3478, 3481, 3485, 3490, 3494, 3499, 3503,
     3508, 3512, 3517, 3521, 3526, 3530, 3534,  244, 3537,  207,
     3540,  192, 3541, 3545, 3550, 3553, 3556, 3560, 3564, 3568,
     3572, 3576, 3580, 3584, 3588, 3590, 3593, 3596, 3599, 3602,
     3605, 3609,  172, 3614, 3616, 3620, 3624, 3628, 3632, 3636,
     3640, 3644,  143, 3647,  115, 3650, 3652, 3657, 3660, 3662,

     3666, 3668, 3671, 3674, 3676,   83, 3681, 3683,   55, 3686,
     3688, 3690, 3692, 3694, 3696, 3698
    } ;

static yyconst short int yy_def[917] =
    {   0,
      693,    1,  694,  694,  695,  695,  693,  693,  693,  693,
      693,  693,  693,   13,   14,  693,  693,  693,   18,   19,
       18,   18,   18,   19,   19,   19,   19,  693,  693,  696,
      693,  697,  693,  693,  698,  693,  699,  700,   36,   39,
      700,  693,   18,   19,   19,   43,   43,   19,   19,   19,
       19,   19,  696,  697,  701,  693,  702,  703,  703,  704,
      693,  703,  705,  693,   64,   65,  706,   43,   19,   19,
       19,   19,   19,   19,   19,   19,  707,  702,  708,  708,
      693,  693,  709,  710,  693,   85,   86,  711,  712,  712,
      713,  693,  693,  714,   92,   95,  714,   19,   19,   19,

       19,   19,   19,   19,   19,  715,  693,  716,  693,  717,
      718,  693,  693,  693,  719,  113,  116,  719,  693,  720,
      720,  721,  693,  722,  723,  723,  693,  127,  128,  724,
      723,   19,   19,   19,   19,   19,  725,  716,  726,  726,
      693,  693,  727,  728,  693,  145,  146,  729,  730,  730,
      693,  151,  152,  731,  730,  693,  732,  722,  733,  733,
      693,  693,  734,  693,  693,  735,  164,  167,  735,   19,
       19,   19,   19,   19,  736,  693,  737,  693,  738,  739,
      693,  693,  693,  740,  182,  185,  740,  693,  693,  693,
      741,  189,  192,  741,  742,  693,  743,  693,  744,  693,

      745,  746,  746,  693,  204,  205,  747,  746,  693,  693,
      737,  748,  748,  693,  693,  749,  750,  693,  218,  219,
      751,  752,  752,  693,  224,  225,  753,  752,  754,  754,
      693,  231,  232,  755,  754,  756,  743,  757,  757,  693,
      758,  745,  759,  759,  693,  693,  760,  693,  693,  761,
      248,  251,  761,  693,  210,  693,  693,  693,  762,  763,
      693,  693,  693,  764,  262,  265,  764,  693,  693,  693,
      765,  269,  272,  765,  693,  693,  693,  766,  276,  279,
      766,  767,  693,  768,  693,  769,  693,  770,  693,  771,
      693,  772,  773,  773,  693,  295,  296,  774,  773,  693,

      693,  775,  776,  693,  304,  305,  777,  778,  778,  693,
      310,  311,  779,  778,  780,  780,  693,  317,  318,  781,
      780,  782,  782,  693,  324,  325,  783,  782,  768,  784,
      784,  693,  785,  770,  786,  786,  693,  787,  772,  788,
      788,  693,  693,  789,  693,  693,  790,  345,  348,  790,
      693,  791,  792,  693,  693,  693,  793,  355,  358,  793,
      693,  693,  693,  794,  362,  365,  794,  693,  693,  693,
      795,  369,  372,  795,  693,  693,  693,  796,  376,  379,
      796,  693,  797,  693,  798,  693,  799,  693,  800,  693,
      801,  693,  802,  803,  803,  693,  396,  397,  804,  803,

      693,  693,  805,  693,  693,  405,  406,  806,  807,  807,
      693,  411,  412,  808,  807,  809,  809,  693,  418,  419,
      810,  809,  811,  811,  693,  425,  426,  812,  811,  813,
      813,  693,  432,  433,  814,  813,  798,  815,  815,  693,
      816,  800,  817,  817,  693,  818,  802,  819,  819,  693,
      693,  820,  693,  693,  821,  453,  456,  821,  693,  822,
      693,  461,  462,  823,  824,  693,  825,  826,  466,  469,
      826,  693,  693,  827,  828,  473,  476,  828,  693,  693,
      829,  830,  480,  483,  830,  693,  693,  831,  832,  487,
      490,  832,  693,  693,  833,  834,  494,  497,  834,  693,

      835,  693,  836,  693,  837,  693,  838,  693,  839,  693,
      840,  841,  841,  693,  514,  515,  842,  841,  693,  693,
      843,  693,  844,  845,  522,  525,  845,  846,  847,  847,
      848,  847,  849,  849,  850,  849,  851,  851,  852,  851,
      853,  853,  854,  853,  855,  855,  856,  855,  836,  857,
      857,  693,  858,  838,  859,  859,  693,  860,  840,  861,
      861,  693,  693,  862,  693,  863,  864,  565,  568,  864,
      693,  865,  693,  866,  867,  867,  868,  693,  867,  869,
      693,  870,  693,  871,  693,  872,  693,  873,  693,  874,
      693,  875,  693,  876,  693,  877,  693,  878,  693,  879,

      693,  880,  881,  881,  882,  881,  693,  883,  866,  884,
      884,  693,  693,  885,  886,  887,  888,  889,  890,  891,
      876,  892,  892,  693,  893,  878,  894,  894,  693,  895,
      880,  896,  896,  693,  693,  897,  693,  898,  693,  899,
      693,  900,  693,  693,  693,  693,  693,  693,  693,  901,
      693,  902,  693,  903,  693,  904,  693,  905,  906,  899,
      907,  907,  693,  902,  908,  908,  693,  909,  904,  910,
      910,  693,  693,  911,  693,  912,  693,  693,  913,  693,
      914,  693,  912,  915,  915,  693,  914,  916,  916,  693,
      693,  693,    0,  693,  693,  693,  693,  693,  693,  693,

      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,

      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,

      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693
    } ;

static yyconst short int yy_nxt[3749] =
    {   0,
        8,    9,   10,   11,   12,    8,    8,    8,    8,   13,
       13,   14,   15,   15,   15,   15,   15,   16,   17,   18,
       18,   19,   20,   19,    8,   21,   18,   22,   23,   24,
       19,   19,   19,   19,   25,   19,   26,   27,   19,   19,
       19,   28,   29,   35,   35,   36,   36,   36,   36,   36,
       36,   36,   36,   37,   37,   38,   38,   55,   55,   56,
      681,   38,   38,   38,   38,   39,   39,   39,   39,   39,
       40,   41,   41,   41,   41,   41,   41,   41,   41,   43,
       43,   43,   43,   43,   43,   43,   43,   37,  676,   43,
       43,   44,   44,   44,   44,   43,   43,   43,   43,   44,

       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,  693,
      656,   44,   44,   59,   59,  126,  126,   44,   44,   44,
       44,   35,   35,   58,   58,   58,   58,   58,   58,   58,
       58,   37,   37,   59,   59,  106,  106,  107,  652,   59,
       59,   59,   59,   62,   62,   62,   62,   62,   62,   62,
       62,   63,   64,   64,   65,   66,   66,   66,   66,   66,
      150,  150,   67,   67,  120,  120,  121,  640,   67,   67,
       67,   67,   68,   68,   68,   68,   68,   68,   68,   68,
      203,  203,   68,   68,  122,  122,  123,  602,   68,   68,

       68,   68,   77,  693,   79,   79,   79,   79,   79,   80,
       81,   81,  598,   37,   63,   85,   85,   86,   87,   87,
       87,   87,   87,  223,  223,   88,   88,   35,  175,  175,
      176,   88,   88,   88,   88,  230,  230,   37,   91,   63,
       92,   92,   92,   92,   92,   92,   92,   92,   93,  594,
       94,   94,  195,  195,  196,  574,   94,   94,   94,   94,
       95,   95,   95,   95,   95,   96,   97,   97,   97,   97,
       97,   97,   97,   97,   63,  118,  118,  118,  118,  118,
      118,  294,  294,   93,   98,   98,   98,   98,   98,   98,
       98,   98,  309,  309,   98,   98,   77,  199,  199,  200,

       98,   98,   98,   98,  693,  693,   91,   63,  113,  113,
      113,  113,  113,  113,  113,  113,  114,  511,  115,  115,
      282,  282,  283,  507,  115,  115,  115,  115,  116,  116,
      116,  116,  116,  117,  118,  118,   63,  169,  169,  169,
      169,  169,  169,  316,  316,  114,   91,   63,  125,  125,
      125,  125,  125,  125,  125,  125,   93,  503,  126,  126,
      286,  286,  287,  393,  126,  126,  126,  126,  127,  127,
      128,  129,  129,  129,  129,  129,  323,  323,  130,  130,
       63,  290,  290,  291,  130,  130,  130,  130,  389,   93,
      131,  131,  131,  131,  131,  131,  131,  131,   91,   63,

      385,   63,  187,  187,  187,  187,  187,  187,   93,  137,
      114,  139,  139,  139,  139,  139,  140,  141,  141,   63,
      145,  145,  146,  147,  147,  147,  147,  147,  395,  395,
      148,  148,  257,  257,  257,  257,  148,  148,  148,  148,
       91,   63,  149,  149,  149,  149,  149,  149,  149,  149,
      114,  292,  150,  150,  257,  257,  257,  288,  150,  150,
      150,  150,  151,  151,  152,  153,  153,  153,  153,  153,
      410,  410,  154,  154,  383,  383,  384,  284,  154,  154,
      154,  154,  155,  155,  155,  155,  155,  155,  155,  155,
       91,   63,   91,   63,  194,  194,  194,  194,  194,  194,

      114,  157,   93,  159,  159,  159,  159,  159,  160,  161,
      161,  693,   63,  253,  253,  253,  253,  253,  253,  417,
      417,   93,  163,   63,  164,  164,  164,  164,  164,  164,
      164,  164,  165,  201,  166,  166,  387,  387,  388,  197,
      166,  166,  166,  166,  167,  167,  167,  167,  167,  168,
      169,  169,   63,   91,   63,  177,  137,  391,  391,  392,
      156,  165,  124,   93,  693,  693,   91,   63,  182,  182,
      182,  182,  182,  182,  182,  182,  183,  119,  184,  184,
      424,  424,  431,  431,  184,  184,  184,  184,  185,  185,
      185,  185,  185,  186,  187,  187,   63,   91,   63,  693,

       63,  501,  501,  502,  108,  183,   89,  114,   57,  114,
      163,   63,  189,  189,  189,  189,  189,  189,  189,  189,
      190,   63,  191,  191,  505,  505,  506,   63,  191,  191,
      191,  191,  192,  192,  192,  192,  192,  193,  194,  194,
       63,   91,   63,   63,  157,   63,  509,  509,  510,  190,
       63,  114,  693,  693,   93,  163,   63,  202,  202,  202,
      202,  202,  202,  202,  202,  165,   63,  203,  203,  513,
      513,  530,  530,  203,  203,  203,  203,  204,  204,  205,
      206,  206,  206,  206,  206,  534,  534,  207,  207,   63,
      538,  538,   63,  207,  207,  207,  207,   63,  165,  208,

      208,  208,  208,  208,  208,  208,  208,  163,   63,  267,
      267,  267,  267,  267,  267,  542,  542,  165,  210,  212,
      212,  212,  212,  212,  213,  214,  214,   63,  218,  218,
      219,  220,  220,  220,  220,  220,  546,  546,  221,  221,
      572,  572,  573,   63,  221,  221,  221,  221,   91,   63,
      222,  222,  222,  222,  222,  222,  222,  222,  183,  668,
      223,  223,  576,  576,  604,  604,  223,  223,  223,  223,
      224,  224,  225,  226,  226,  226,  226,  226,   63,   63,
      227,  227,   63,  592,  592,  593,  227,  227,  227,  227,
       63,  183,  228,  228,  228,  228,  228,  228,  228,  228,

       91,   63,   63,  274,  274,  274,  274,  274,  274,  659,
      183,  114,  163,   63,  229,  229,  229,  229,  229,  229,
      229,  229,  190,   63,  230,  230,  596,  596,  597,   63,
      230,  230,  230,  230,  231,  231,  232,  233,  233,  233,
      233,  233,   63,  668,  234,  234,   63,  600,  600,  601,
      234,  234,  234,  234,  668,  190,  235,  235,  235,  235,
      235,  235,  235,  235,  163,   63,  163,   63,  281,  281,
      281,  281,  281,  281,  190,  236,  165,  238,  238,  238,
      238,  238,  239,  240,  240,  241,  668,  243,  243,  243,
      243,  243,  244,  245,  245,  693,   63,  350,  350,  350,

      350,  350,  350,   63,   63,  165,  247,   63,  248,  248,
      248,  248,  248,  248,  248,  248,  249,   63,  250,  250,
      638,  638,  639,  659,  250,  250,  250,  250,  251,  251,
      251,  251,  251,  252,  253,  253,   63,  163,   63,  360,
      360,  360,  360,  360,  360,  249,  659,  165,  255,  255,
      255,  256,  257,  257,  257,  257,  210,  367,  367,  367,
      367,  367,  367,  693,  693,   91,   63,  262,  262,  262,
      262,  262,  262,  262,  262,  263,  659,  264,  264,  650,
      650,  651,   63,  264,  264,  264,  264,  265,  265,  265,
      265,  265,  266,  267,  267,   63,   91,   63,  693,   63,

      654,  654,  655,  630,  263,  668,  183,  668,  183,  163,
       63,  269,  269,  269,  269,  269,  269,  269,  269,  270,
      625,  271,  271,  674,  674,  675,   63,  271,  271,  271,
      271,  272,  272,  272,  272,  272,  273,  274,  274,   63,
       91,   63,  163,   63,  693,   63,   63,   63,  270,   63,
      183,   63,  190,   63,  190,  247,   63,  276,  276,  276,
      276,  276,  276,  276,  276,  277,   63,  278,  278,  679,
      679,  680,   63,  278,  278,  278,  278,  279,  279,  279,
      279,  279,  280,  281,  281,   63,  163,   63,   63,  236,
       63,  241,   63,  608,  277,  659,  190,  693,  693,  693,

      693,  165,  247,   63,  293,  293,  293,  293,  293,  293,
      293,  293,  249,  659,  294,  294,   63,  630,  630,  630,
      294,  294,  294,  294,  295,  295,  296,  297,  297,  297,
      297,  297,  625,  625,  298,  298,   63,  625,   63,   63,
      298,  298,  298,  298,   63,  249,  299,  299,  299,  299,
      299,  299,  299,  299,  247,   63,  374,  374,  374,  374,
      374,  374,   63,   63,  249,   63,  304,  304,  305,  306,
      306,  306,  306,  306,   63,   63,  307,  307,   63,   63,
       63,  523,  307,  307,  307,  307,   91,   63,  308,  308,
      308,  308,  308,  308,  308,  308,  263,  608,  309,  309,

      608,  608,  637,   63,  309,  309,  309,  309,  310,  310,
      311,  312,  312,  312,  312,  312,  630,  630,  313,  313,
       63,  558,  625,  625,  313,  313,  313,  313,  553,  263,
      314,  314,  314,  314,  314,  314,  314,  314,   91,   63,
       63,  381,  381,  381,  381,  381,  381,   63,  263,  183,
      163,   63,  315,  315,  315,  315,  315,  315,  315,  315,
      270,   63,  316,  316,   63,   63,   63,   63,  316,  316,
      316,  316,  317,  317,  318,  319,  319,  319,  319,  319,
       63,   63,  320,  320,   63,   63,   63,   63,  320,  320,
      320,  320,  608,  270,  321,  321,  321,  321,  321,  321,

      321,  321,  163,   63,   63,  458,  458,  458,  458,  458,
      458,  608,  270,  190,  247,   63,  322,  322,  322,  322,
      322,  322,  322,  322,  277,  607,  323,  323,  558,  558,
      558,  553,  323,  323,  323,  323,  324,  324,  325,  326,
      326,  326,  326,  326,  553,  553,  327,  327,   63,   63,
       63,   63,  327,  327,  327,  327,   63,  277,  328,  328,
      328,  328,  328,  328,  328,  328,  247,   63,  471,  471,
      471,  471,  471,  471,   63,   63,  277,   63,  330,  330,
      330,  330,  330,  331,  332,  332,  333,  521,  335,  335,
      335,  335,  335,  336,  337,  337,  338,  523,  340,  340,

      340,  340,  340,  341,  342,  342,  247,   63,  693,   63,
      478,  478,  478,  478,  478,  478,  249,   63,  249,  344,
       63,  345,  345,  345,  345,  345,  345,  345,  345,  346,
       63,  347,  347,   63,  523,  578,  404,  347,  347,  347,
      347,  348,  348,  348,  348,  348,  349,  350,  350,   63,
      247,   63,  485,  485,  485,  485,  485,  485,  346,  571,
      249,   91,   63,  355,  355,  355,  355,  355,  355,  355,
      355,  356,  558,  357,  357,  558,  446,  553,  553,  357,
      357,  357,  357,  358,  358,  358,  358,  358,  359,  360,
      360,   63,   91,   63,  693,   63,  441,   63,   63,   63,

      356,  523,  263,   63,  263,  163,   63,  362,  362,  362,
      362,  362,  362,  362,  362,  363,  404,  364,  364,  519,
      446,  446,  446,  364,  364,  364,  364,  365,  365,  365,
      365,  365,  366,  367,  367,   63,   91,   63,  163,   63,
      693,   63,  441,  441,  363,  441,  263,   63,  270,   63,
      270,  247,   63,  369,  369,  369,  369,  369,  369,  369,
      369,  370,   63,  371,  371,  404,  303,  459,  446,  371,
      371,  371,  371,  372,  372,  372,  372,  372,  373,  374,
      374,   63,  163,   63,  247,   63,  693,   63,  446,  338,
      370,  441,  270,  441,  277,  333,  277,  344,   63,  376,

      376,  376,  376,  376,  376,  376,  376,  377,   63,  378,
      378,   63,   63,  404,  303,  378,  378,  378,  378,  379,
      379,  379,  379,  379,  380,  381,  381,   63,  247,   63,
      401,  338,   63,  333,  338,  338,  377,   63,  277,  693,
      693,  693,  693,  693,  693,  338,  249,  344,   63,  394,
      394,  394,  394,  394,  394,  394,  394,  346,  333,  395,
      395,  333,  333,   63,   63,  395,  395,  395,  395,  396,
      396,  397,  398,  398,  398,  398,  398,   63,  354,  399,
      399,   63,  303,  217,  351,  399,  399,  399,  399,  338,
      346,  400,  400,  400,  400,  400,  400,  400,  400,  344,

       63,  492,  492,  492,  492,  492,  492,  338,  241,  346,
       63,  405,  405,  406,  407,  407,  407,  407,  407,  333,
      333,  408,  408,  236,   63,   63,  303,  408,  408,  408,
      408,   91,   63,  409,  409,  409,  409,  409,  409,  409,
      409,  356,  217,  410,  410,  210,  300,  241,  241,  410,
      410,  410,  410,  411,  411,  412,  413,  413,  413,  413,
      413,  241,  236,  414,  414,   63,  236,  236,  261,  414,
      414,  414,  414,  217,  356,  415,  415,  415,  415,  415,
      415,  415,  415,   91,   63,   63,  499,  499,  499,  499,
      499,  499,  144,  356,  263,  163,   63,  416,  416,  416,

      416,  416,  416,  416,  416,  363,  210,  417,  417,  210,
      210,  254,  241,  417,  417,  417,  417,  418,  418,  419,
      420,  420,  420,  420,  420,  241,  157,  421,  421,   63,
      236,  236,  217,  421,  421,  421,  421,  144,  363,  422,
      422,  422,  422,  422,  422,  422,  422,  163,   63,   63,
      527,  527,  527,  527,  527,  527,  137,  363,  270,  247,
       63,  423,  423,  423,  423,  423,  423,  423,  423,  370,
      210,  424,  424,  210,  209,  157,  157,  424,  424,  424,
      424,  425,  425,  426,  427,  427,  427,  427,  427,  157,
      181,  428,  428,   63,  144,   84,  137,  428,  428,  428,

      428,  137,  370,  429,  429,  429,  429,  429,  429,  429,
      429,  247,   63,   63,  570,  570,  570,  570,  570,  570,
      137,  370,  277,  344,   63,  430,  430,  430,  430,  430,
      430,  430,  430,  377,  174,  431,  431,  173,  172,  171,
      170,  431,  431,  431,  431,  432,  432,  433,  434,  434,
      434,  434,  434,  157,  157,  435,  435,   63,  693,  144,
       84,  435,  435,  435,  435,   77,  377,  436,  436,  436,
      436,  436,  436,  436,  436,  344,   63,  137,  137,  136,
      135,  134,  133,  132,   37,  377,   63,  438,  438,  438,
      438,  438,  439,  440,  440,  441,  521,  443,  443,  443,

      443,  443,  444,  445,  445,  446,  523,  448,  448,  448,
      448,  448,  449,  450,  450,  344,   63,  693,   63,  112,
       84,   37,   77,   77,   77,  346,  105,  346,  452,   63,
      453,  453,  453,  453,  453,  453,  453,  453,  454,  104,
      455,  455,  103,  102,  101,  100,  455,  455,  455,  455,
      456,  456,  456,  456,  456,  457,  458,  458,   63,  344,
       63,   99,   90,   84,   77,   77,   76,  454,   75,  346,
      461,  461,  462,  463,  463,  463,  463,  463,  464,   74,
      465,  465,   73,   72,   71,   70,  465,  465,  465,  465,
       91,   63,  466,  466,  466,  466,  466,  466,  466,  466,

      467,   69,  468,  468,   37,   61,   34,   52,  468,  468,
      468,  468,  469,  469,  469,  469,  469,  470,  471,  471,
       63,   91,   63,  693,   63,   51,   50,   49,   48,  467,
       47,  356,   46,  356,  163,   63,  473,  473,  473,  473,
      473,  473,  473,  473,  474,   45,  475,  475,   42,   34,
      693,   33,  475,  475,  475,  475,  476,  476,  476,  476,
      476,  477,  478,  478,   63,   91,   63,  163,   63,  693,
       63,   33,   31,  474,   31,  356,  693,  363,  693,  363,
      247,   63,  480,  480,  480,  480,  480,  480,  480,  480,
      481,  693,  482,  482,  693,  693,  693,  693,  482,  482,

      482,  482,  483,  483,  483,  483,  483,  484,  485,  485,
       63,  163,   63,  247,   63,  693,   63,  693,  693,  481,
      693,  363,  693,  370,  693,  370,  344,   63,  487,  487,
      487,  487,  487,  487,  487,  487,  488,  693,  489,  489,
      693,  693,  693,  693,  489,  489,  489,  489,  490,  490,
      490,  490,  490,  491,  492,  492,   63,  247,   63,  344,
       63,  693,   63,  693,  693,  488,  693,  370,  693,  377,
      693,  377,  452,   63,  494,  494,  494,  494,  494,  494,
      494,  494,  495,  693,  496,  496,  693,  693,  693,  693,
      496,  496,  496,  496,  497,  497,  497,  497,  497,  498,

      499,  499,   63,  344,   63,  693,  693,   63,  441,  693,
      446,  495,   63,  377,  693,  693,  693,  693,  693,  693,
      693,  346,  452,   63,  512,  512,  512,  512,  512,  512,
      512,  512,  454,  693,  513,  513,  693,  693,  693,  693,
      513,  513,  513,  513,  514,  514,  515,  516,  516,  516,
      516,  516,  693,  693,  517,  517,   63,  693,  693,  693,
      517,  517,  517,  517,  693,  454,  518,  518,  518,  518,
      518,  518,  518,  518,  452,   63,  693,   63,  693,  693,
      693,  693,  693,  693,  454,  521,  467,  522,  522,  522,
      522,  522,  522,  522,  522,  523,  693,  524,  524,  693,

      693,  693,  693,  524,  524,  524,  524,  525,  525,  525,
      525,  525,  526,  527,  527,   91,   63,  529,  529,  529,
      529,  529,  529,  529,  529,  467,  693,  530,  530,  693,
      693,  693,  693,  530,  530,  530,  530,  532,  532,  532,
      532,  532,  532,  532,  532,   91,   63,   63,  693,  693,
      693,  693,  693,  693,  693,  467,  356,  163,   63,  533,
      533,  533,  533,  533,  533,  533,  533,  474,  693,  534,
      534,   63,  693,  693,  693,  534,  534,  534,  534,  693,
      474,  536,  536,  536,  536,  536,  536,  536,  536,  163,
       63,   63,  693,  693,  693,  693,  693,  693,  693,  474,

      363,  247,   63,  537,  537,  537,  537,  537,  537,  537,
      537,  481,  693,  538,  538,   63,  693,  693,  693,  538,
      538,  538,  538,  693,  481,  540,  540,  540,  540,  540,
      540,  540,  540,  247,   63,   63,  693,  693,  693,  693,
      693,  693,  693,  481,  370,  344,   63,  541,  541,  541,
      541,  541,  541,  541,  541,  488,  693,  542,  542,   63,
      693,  693,  693,  542,  542,  542,  542,  693,  488,  544,
      544,  544,  544,  544,  544,  544,  544,  344,   63,   63,
      693,  693,  693,  693,  693,  693,  693,  488,  377,  452,
       63,  545,  545,  545,  545,  545,  545,  545,  545,  495,

      693,  546,  546,   63,  693,  693,  693,  546,  546,  546,
      546,  693,  495,  548,  548,  548,  548,  548,  548,  548,
      548,  452,   63,  693,  693,  693,  693,  693,  693,  693,
      693,  495,   63,  550,  550,  550,  550,  550,  551,  552,
      552,  553,  693,  555,  555,  555,  555,  555,  556,  557,
      557,  558,  523,  560,  560,  560,  560,  560,  561,  562,
      562,  452,   63,  693,   63,  693,  693,  693,  693,  693,
      693,  454,  693,  454,  564,   63,  565,  565,  565,  565,
      565,  565,  565,  565,  566,  693,  567,  567,  693,  693,
      693,  693,  567,  567,  567,  567,  568,  568,  568,  568,

      568,  569,  570,  570,   63,  452,   63,   91,   63,  693,
      693,  693,  693,  566,  693,  454,  521,  467,  575,  575,
      575,  575,  575,  575,  575,  575,  523,  693,  576,  576,
      693,  693,  693,  693,  576,  576,  576,  576,  579,  579,
      579,  579,  579,  579,  579,  579,  693,   63,   91,   63,
      163,   63,  693,   63,  163,   63,  467,  693,  467,  693,
      474,  693,  474,  693,  474,  247,   63,  693,   63,  247,
       63,  344,   63,  693,   63,  481,  693,  481,  693,  481,
      693,  488,  693,  488,  344,   63,  452,   63,  693,   63,
      452,   63,   63,  693,  488,   63,  495,  553,  495,  558,

      495,  454,  693,  693,  693,  693,  693,  693,  693,  564,
       63,  603,  603,  603,  603,  603,  603,  603,  603,  566,
      693,  604,  604,   63,  693,  693,  693,  604,  604,  604,
      604,  693,  566,  606,  606,  606,  606,  606,  606,  606,
      606,  564,   63,  521,  693,  693,  693,  693,  693,  693,
      693,  566,  608,  523,  610,  610,  610,  610,  610,  611,
      612,  612,   63,   63,   63,   63,   63,  693,  693,  693,
      693,  467,  474,  481,  488,  495,   63,  622,  622,  622,
      622,  622,  623,  624,  624,  625,  693,  627,  627,  627,
      627,  627,  628,  629,  629,  630,  693,  632,  632,  632,

      632,  632,  633,  634,  634,  564,   63,  693,   63,  564,
       63,  693,  608,  693,  693,  566,   63,  566,  625,  566,
      693,  693,  630,  693,  693,   63,  693,  693,  693,  693,
      693,  693,  693,  693,  566,  659,  693,  661,  661,  661,
      661,  661,  662,  663,  663,   63,  665,  665,  665,  665,
      665,  666,  667,  667,  668,  693,  670,  670,  670,  670,
      670,  671,  672,  672,  659,  693,  693,   63,  668,  693,
      693,  693,  693,  693,  693,  693,  693,  693,   63,  684,
      684,  684,  684,  684,  685,  686,  686,   63,  688,  688,
      688,  688,  688,  689,  690,  690,   63,  693,   63,  693,

      693,  693,  693,  693,  693,  693,  693,   30,   30,   30,
       30,   30,   30,   30,   30,   32,   32,   32,   32,   32,
       32,   32,   32,   53,  693,   53,   53,   53,   53,   53,
       53,   54,   54,  693,   54,   54,   54,   54,   54,   60,
       60,   60,   59,   59,   59,   78,  693,   78,   81,  693,
       81,   82,  693,   82,   82,   82,   83,   83,   83,   94,
       94,   94,   94,  109,  693,  109,  110,  110,  110,  111,
      111,  111,  115,  115,  115,  115,  126,  126,  126,  126,
      138,  693,  138,  141,  693,  141,  142,  142,  142,  143,
      143,  143,  150,  150,  150,  150,  158,  693,  158,  161,

      693,  161,  162,  162,  162,  162,  162,  166,  166,  166,
      166,  178,  693,  178,  179,  179,  179,  180,  180,  180,
      184,  184,  184,  184,  188,  188,  188,  188,  188,  191,
      191,  191,  191,  198,  693,  198,  203,  203,  203,  203,
      211,  211,  214,  214,  215,  215,  215,  216,  216,  216,
      223,  223,  223,  223,  230,  230,  230,  230,  237,  693,
      237,  240,  693,  240,  242,  693,  242,  245,  693,  245,
      246,  246,  246,  246,  246,  250,  250,  250,  250,  258,
      258,  259,  259,  259,  260,  260,  260,  264,  264,  264,
      264,  268,  268,  268,  268,  268,  271,  271,  271,  271,

      275,  275,  275,  275,  275,  278,  278,  278,  278,  285,
      693,  285,  289,  693,  289,  294,  294,  294,  294,  301,
      301,  301,  302,  302,  302,  309,  309,  309,  309,  316,
      316,  316,  316,  323,  323,  323,  323,  329,  329,  332,
      332,  334,  693,  334,  337,  693,  337,  339,  693,  339,
      342,  693,  342,  343,  343,  343,  343,  343,  347,  347,
      347,  347,  352,  352,  352,  353,  353,  353,  357,  357,
      357,  357,  361,  361,  361,  361,  361,  364,  364,  364,
      364,  368,  368,  368,  368,  368,  371,  371,  371,  371,
      375,  375,  375,  375,  375,  378,  378,  378,  378,  382,

      382,  386,  693,  386,  390,  693,  390,  395,  395,  395,
      395,  402,  402,  402,  403,  403,  403,  410,  410,  410,
      410,  417,  417,  417,  417,  424,  424,  424,  424,  431,
      431,  431,  431,  437,  437,  440,  440,  442,  693,  442,
      445,  693,  445,  447,  693,  447,  450,  693,  450,  451,
      451,  451,  451,  451,  455,  455,  455,  455,  460,  460,
      460,  468,  468,  468,  468,  472,  472,  472,  472,  472,
      475,  475,  475,  475,  479,  479,  479,  479,  479,  482,
      482,  482,  482,  486,  486,  486,  486,  486,  489,  489,
      489,  489,  493,  493,  493,  493,  493,  496,  496,  496,

      496,  500,  500,  504,  693,  504,  508,  693,  508,  513,
      513,  513,  513,  520,  520,  520,  528,  528,  693,  528,
      524,  524,  524,  531,  693,  531,  530,  530,  530,  530,
      535,  693,  535,  534,  534,  534,  534,  539,  693,  539,
      538,  538,  538,  538,  543,  693,  543,  542,  542,  542,
      542,  547,  693,  547,  546,  546,  546,  546,  549,  549,
      552,  552,  554,  693,  554,  557,  693,  557,  559,  693,
      559,  562,  693,  562,  563,  563,  563,  563,  563,  567,
      567,  567,  567,  577,  577,  577,  576,  576,  576,  580,
      580,  693,  580,  581,  581,  581,  581,  581,  582,  582,

      693,  582,  583,  583,  583,  583,  583,  584,  584,  693,
      584,  585,  585,  585,  585,  585,  586,  586,  693,  586,
      587,  587,  587,  587,  587,  588,  588,  693,  588,  589,
      589,  589,  589,  589,  590,  590,  693,  590,  591,  591,
      595,  693,  595,  599,  693,  599,  605,  693,  605,  604,
      604,  604,  604,  609,  693,  609,  612,  693,  612,  613,
      693,  613,  613,  613,  614,  614,  693,  614,  615,  615,
      693,  615,  616,  616,  693,  616,  617,  617,  693,  617,
      618,  618,  693,  618,  619,  619,  693,  619,  620,  620,
      693,  620,  621,  621,  624,  624,  626,  693,  626,  629,

      693,  629,  631,  693,  631,  634,  693,  634,  635,  635,
      635,  635,  635,  636,  636,  693,  636,  641,  693,  641,
      642,  642,  693,  642,  643,  643,  693,  643,  644,  644,
      693,  644,  645,  645,  693,  645,  646,  646,  693,  646,
      647,  647,  693,  647,  648,  648,  693,  648,  649,  649,
      653,  693,  653,  657,  693,  657,  658,  658,  693,  658,
      660,  693,  660,  663,  693,  663,  578,  578,  693,  578,
      664,  664,  667,  667,  669,  693,  669,  672,  693,  672,
      673,  673,  693,  673,  677,  693,  677,  678,  678,  682,
      693,  682,  683,  683,  686,  686,  687,  687,  690,  690,

      691,  691,  692,  692,    7,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693
    } ;

static yyconst short int yy_chk[3749] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   13,   41,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   41,   13,   13,   35,   35,   35,
      909,   13,   13,   13,   13,   14,   14,   14,   14,   14,
       14,   14,   14,   15,   15,   15,   15,   15,   15,   18,
       18,   18,   18,   18,   18,   18,   18,   18,  906,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   19,   19,   19,   19,   19,   19,   19,   19,   19,
      895,   19,   19,   40,   40,   96,   96,   19,   19,   19,
       19,   36,   58,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   58,   36,   36,   77,   77,   77,  893,   36,
       36,   36,   36,   39,   39,   39,   39,   39,   39,   39,
       39,   42,   42,   42,   42,   42,   42,   42,   42,   42,
      117,  117,   42,   42,   90,   90,   90,  883,   42,   42,
       42,   42,   43,   43,   43,   43,   43,   43,   43,   43,
      168,  168,   43,   43,   91,   91,   91,  862,   43,   43,

       43,   43,   56,   59,   56,   56,   56,   56,   56,   56,
       56,   56,  860,   59,   61,   61,   61,   61,   61,   61,
       61,   61,   61,  186,  186,   61,   61,   62,  137,  137,
      137,   61,   61,   61,   61,  193,  193,   62,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,  858,
       64,   64,  157,  157,  157,  843,   64,   64,   64,   64,
       65,   65,   65,   65,   65,   65,   65,   65,   66,   66,
       66,   66,   66,   66,   67,   87,   87,   87,   87,   87,
       87,  252,  252,   67,   68,   68,   68,   68,   68,   68,
       68,   68,  266,  266,   68,   68,   80,  163,  163,  163,

       68,   68,   68,   68,   80,   80,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,  820,   85,   85,
      236,  236,  236,  818,   85,   85,   85,   85,   86,   86,
       86,   86,   86,   86,   86,   86,   88,  129,  129,  129,
      129,  129,  129,  273,  273,   88,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,  816,   92,   92,
      241,  241,  241,  789,   92,   92,   92,   92,   93,   93,
       93,   93,   93,   93,   93,   93,  280,  280,   93,   93,
       94,  247,  247,  247,   93,   93,   93,   93,  787,   94,
       95,   95,   95,   95,   95,   95,   95,   95,   97,   97,

      785,  115,  147,  147,  147,  147,  147,  147,   97,  107,
      115,  107,  107,  107,  107,  107,  107,  107,  107,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  349,  349,
      112,  112,  255,  255,  255,  255,  112,  112,  112,  112,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  760,  113,  113,  256,  256,  256,  758,  113,  113,
      113,  113,  114,  114,  114,  114,  114,  114,  114,  114,
      359,  359,  114,  114,  333,  333,  333,  756,  114,  114,
      114,  114,  116,  116,  116,  116,  116,  116,  116,  116,
      118,  118,  125,  125,  153,  153,  153,  153,  153,  153,

      118,  123,  125,  123,  123,  123,  123,  123,  123,  123,
      123,  126,  126,  206,  206,  206,  206,  206,  206,  366,
      366,  126,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  734,  127,  127,  338,  338,  338,  732,
      127,  127,  127,  127,  128,  128,  128,  128,  128,  128,
      128,  128,  130,  131,  131,  725,  140,  344,  344,  344,
      720,  130,  713,  131,  140,  140,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  712,  145,  145,
      373,  373,  380,  380,  145,  145,  145,  145,  146,  146,
      146,  146,  146,  146,  146,  146,  148,  149,  149,  150,

      150,  441,  441,  441,  707,  148,  705,  149,  698,  150,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  692,  151,  151,  446,  446,  446,  691,  151,  151,
      151,  151,  152,  152,  152,  152,  152,  152,  152,  152,
      154,  155,  155,  690,  160,  162,  452,  452,  452,  154,
      688,  155,  160,  160,  162,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  687,  164,  164,  457,
      457,  470,  470,  164,  164,  164,  164,  165,  165,  165,
      165,  165,  165,  165,  165,  477,  477,  165,  165,  166,
      484,  484,  686,  165,  165,  165,  165,  684,  166,  167,

      167,  167,  167,  167,  167,  167,  167,  169,  169,  220,
      220,  220,  220,  220,  220,  491,  491,  169,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  498,  498,  181,  181,
      521,  521,  521,  683,  181,  181,  181,  181,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  682,
      182,  182,  526,  526,  569,  569,  182,  182,  182,  182,
      183,  183,  183,  183,  183,  183,  183,  183,  681,  679,
      183,  183,  184,  553,  553,  553,  183,  183,  183,  183,
      678,  184,  185,  185,  185,  185,  185,  185,  185,  185,

      187,  187,  188,  226,  226,  226,  226,  226,  226,  677,
      187,  188,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  676,  189,  189,  558,  558,  558,  674,
      189,  189,  189,  189,  190,  190,  190,  190,  190,  190,
      190,  190,  673,  672,  190,  190,  191,  564,  564,  564,
      190,  190,  190,  190,  670,  191,  192,  192,  192,  192,
      192,  192,  192,  192,  194,  194,  202,  202,  233,  233,
      233,  233,  233,  233,  194,  196,  202,  196,  196,  196,
      196,  196,  196,  196,  196,  200,  669,  200,  200,  200,
      200,  200,  200,  200,  200,  203,  203,  297,  297,  297,

      297,  297,  297,  667,  665,  203,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  664,  204,  204,
      608,  608,  608,  663,  204,  204,  204,  204,  205,  205,
      205,  205,  205,  205,  205,  205,  207,  208,  208,  306,
      306,  306,  306,  306,  306,  207,  661,  208,  210,  210,
      210,  210,  210,  210,  210,  210,  213,  312,  312,  312,
      312,  312,  312,  213,  213,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  660,  218,  218,  625,
      625,  625,  658,  218,  218,  218,  218,  219,  219,  219,
      219,  219,  219,  219,  219,  221,  222,  222,  223,  223,

      630,  630,  630,  657,  221,  656,  222,  654,  223,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      653,  224,  224,  659,  659,  659,  652,  224,  224,  224,
      224,  225,  225,  225,  225,  225,  225,  225,  225,  227,
      228,  228,  229,  229,  230,  230,  650,  649,  227,  648,
      228,  647,  229,  646,  230,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  645,  231,  231,  668,
      668,  668,  644,  231,  231,  231,  231,  232,  232,  232,
      232,  232,  232,  232,  232,  234,  235,  235,  643,  239,
      642,  244,  246,  641,  234,  640,  235,  239,  239,  244,

      244,  246,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  638,  248,  248,  636,  634,  632,  631,
      248,  248,  248,  248,  249,  249,  249,  249,  249,  249,
      249,  249,  629,  627,  249,  249,  250,  626,  624,  622,
      249,  249,  249,  249,  621,  250,  251,  251,  251,  251,
      251,  251,  251,  251,  253,  253,  319,  319,  319,  319,
      319,  319,  620,  619,  253,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  618,  617,  261,  261,  616,  615,
      614,  613,  261,  261,  261,  261,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  612,  262,  262,

      610,  609,  607,  605,  262,  262,  262,  262,  263,  263,
      263,  263,  263,  263,  263,  263,  602,  600,  263,  263,
      264,  599,  598,  596,  263,  263,  263,  263,  595,  264,
      265,  265,  265,  265,  265,  265,  265,  265,  267,  267,
      268,  326,  326,  326,  326,  326,  326,  594,  267,  268,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  592,  269,  269,  591,  590,  588,  586,  269,  269,
      269,  269,  270,  270,  270,  270,  270,  270,  270,  270,
      584,  582,  270,  270,  271,  580,  578,  577,  270,  270,
      270,  270,  574,  271,  272,  272,  272,  272,  272,  272,

      272,  272,  274,  274,  275,  398,  398,  398,  398,  398,
      398,  572,  274,  275,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  571,  276,  276,  562,  560,
      559,  557,  276,  276,  276,  276,  277,  277,  277,  277,
      277,  277,  277,  277,  555,  554,  277,  277,  278,  552,
      550,  549,  277,  277,  277,  277,  547,  278,  279,  279,
      279,  279,  279,  279,  279,  279,  281,  281,  407,  407,
      407,  407,  407,  407,  543,  539,  281,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  287,  527,  287,  287,
      287,  287,  287,  287,  287,  287,  291,  527,  291,  291,

      291,  291,  291,  291,  291,  291,  293,  293,  294,  294,
      413,  413,  413,  413,  413,  413,  293,  535,  294,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      531,  295,  295,  528,  524,  523,  520,  295,  295,  295,
      295,  296,  296,  296,  296,  296,  296,  296,  296,  298,
      299,  299,  420,  420,  420,  420,  420,  420,  298,  519,
      299,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  511,  304,  304,  509,  508,  507,  505,  304,
      304,  304,  304,  305,  305,  305,  305,  305,  305,  305,
      305,  307,  308,  308,  309,  309,  504,  503,  501,  500,

      307,  465,  308,  464,  309,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  460,  310,  310,  459,
      450,  448,  447,  310,  310,  310,  310,  311,  311,  311,
      311,  311,  311,  311,  311,  313,  314,  314,  315,  315,
      316,  316,  445,  443,  313,  442,  314,  440,  315,  438,
      316,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  437,  317,  317,  403,  402,  401,  393,  317,
      317,  317,  317,  318,  318,  318,  318,  318,  318,  318,
      318,  320,  321,  321,  322,  322,  323,  323,  391,  390,
      320,  389,  321,  387,  322,  386,  323,  324,  324,  324,

      324,  324,  324,  324,  324,  324,  324,  324,  385,  324,
      324,  383,  382,  353,  352,  324,  324,  324,  324,  325,
      325,  325,  325,  325,  325,  325,  325,  327,  328,  328,
      351,  342,  331,  336,  340,  341,  327,  343,  328,  331,
      331,  336,  336,  341,  341,  339,  343,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  337,  345,
      345,  335,  334,  332,  330,  345,  345,  345,  345,  346,
      346,  346,  346,  346,  346,  346,  346,  329,  303,  346,
      346,  347,  302,  301,  300,  346,  346,  346,  346,  292,
      347,  348,  348,  348,  348,  348,  348,  348,  348,  350,

      350,  427,  427,  427,  427,  427,  427,  290,  289,  350,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  288,
      286,  354,  354,  285,  284,  282,  260,  354,  354,  354,
      354,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  259,  355,  355,  258,  254,  245,  243,  355,
      355,  355,  355,  356,  356,  356,  356,  356,  356,  356,
      356,  242,  240,  356,  356,  357,  238,  237,  217,  356,
      356,  356,  356,  216,  357,  358,  358,  358,  358,  358,
      358,  358,  358,  360,  360,  361,  434,  434,  434,  434,
      434,  434,  215,  360,  361,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  214,  362,  362,  212,
      211,  209,  201,  362,  362,  362,  362,  363,  363,  363,
      363,  363,  363,  363,  363,  199,  198,  363,  363,  364,
      197,  195,  180,  363,  363,  363,  363,  179,  364,  365,
      365,  365,  365,  365,  365,  365,  365,  367,  367,  368,
      463,  463,  463,  463,  463,  463,  178,  367,  368,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      177,  369,  369,  175,  173,  161,  159,  369,  369,  369,
      369,  370,  370,  370,  370,  370,  370,  370,  370,  158,
      144,  370,  370,  371,  143,  142,  141,  370,  370,  370,

      370,  139,  371,  372,  372,  372,  372,  372,  372,  372,
      372,  374,  374,  375,  516,  516,  516,  516,  516,  516,
      138,  374,  375,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  136,  376,  376,  135,  134,  133,
      132,  376,  376,  376,  376,  377,  377,  377,  377,  377,
      377,  377,  377,  124,  122,  377,  377,  378,  121,  111,
      110,  377,  377,  377,  377,  109,  378,  379,  379,  379,
      379,  379,  379,  379,  379,  381,  381,  108,  106,  104,
      103,  102,  101,   99,   98,  381,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  388,  575,  388,  388,  388,

      388,  388,  388,  388,  388,  392,  575,  392,  392,  392,
      392,  392,  392,  392,  392,  394,  394,  395,  395,   84,
       83,   82,   81,   79,   78,  394,   76,  395,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,   75,
      396,  396,   74,   73,   72,   71,  396,  396,  396,  396,
      397,  397,  397,  397,  397,  397,  397,  397,  399,  400,
      400,   70,   63,   60,   57,   55,   52,  399,   51,  400,
      404,  404,  404,  404,  404,  404,  404,  404,  404,   50,
      404,  404,   49,   48,   47,   46,  404,  404,  404,  404,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,

      405,   45,  405,  405,   38,   37,   34,   27,  405,  405,
      405,  405,  406,  406,  406,  406,  406,  406,  406,  406,
      408,  409,  409,  410,  410,   26,   25,   24,   23,  408,
       22,  409,   21,  410,  411,  411,  411,  411,  411,  411,
      411,  411,  411,  411,  411,   20,  411,  411,   16,    9,
        7,    6,  411,  411,  411,  411,  412,  412,  412,  412,
      412,  412,  412,  412,  414,  415,  415,  416,  416,  417,
      417,    5,    4,  414,    3,  415,    0,  416,    0,  417,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418,    0,  418,  418,    0,    0,    0,    0,  418,  418,

      418,  418,  419,  419,  419,  419,  419,  419,  419,  419,
      421,  422,  422,  423,  423,  424,  424,    0,    0,  421,
        0,  422,    0,  423,    0,  424,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,    0,  425,  425,
        0,    0,    0,    0,  425,  425,  425,  425,  426,  426,
      426,  426,  426,  426,  426,  426,  428,  429,  429,  430,
      430,  431,  431,    0,    0,  428,    0,  429,    0,  430,
        0,  431,  432,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,    0,  432,  432,    0,    0,    0,    0,
      432,  432,  432,  432,  433,  433,  433,  433,  433,  433,

      433,  433,  435,  436,  436,    0,    0,  439,  444,    0,
      449,  435,  451,  436,  439,  439,  444,  444,  449,  449,
        0,  451,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,    0,  453,  453,    0,    0,    0,    0,
      453,  453,  453,  453,  454,  454,  454,  454,  454,  454,
      454,  454,    0,    0,  454,  454,  455,    0,    0,    0,
      454,  454,  454,  454,    0,  455,  456,  456,  456,  456,
      456,  456,  456,  456,  458,  458,    0,  468,    0,    0,
        0,    0,    0,    0,  458,  461,  468,  461,  461,  461,
      461,  461,  461,  461,  461,  461,    0,  461,  461,    0,

        0,    0,    0,  461,  461,  461,  461,  462,  462,  462,
      462,  462,  462,  462,  462,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,    0,  466,  466,    0,
        0,    0,    0,  466,  466,  466,  466,  469,  469,  469,
      469,  469,  469,  469,  469,  471,  471,  472,    0,    0,
        0,    0,    0,    0,    0,  471,  472,  473,  473,  473,
      473,  473,  473,  473,  473,  473,  473,  473,    0,  473,
      473,  475,    0,    0,    0,  473,  473,  473,  473,    0,
      475,  476,  476,  476,  476,  476,  476,  476,  476,  478,
      478,  479,    0,    0,    0,    0,    0,    0,    0,  478,

      479,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,    0,  480,  480,  482,    0,    0,    0,  480,
      480,  480,  480,    0,  482,  483,  483,  483,  483,  483,
      483,  483,  483,  485,  485,  486,    0,    0,    0,    0,
        0,    0,    0,  485,  486,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,    0,  487,  487,  489,
        0,    0,    0,  487,  487,  487,  487,    0,  489,  490,
      490,  490,  490,  490,  490,  490,  490,  492,  492,  493,
        0,    0,    0,    0,    0,    0,    0,  492,  493,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,

        0,  494,  494,  496,    0,    0,    0,  494,  494,  494,
      494,    0,  496,  497,  497,  497,  497,  497,  497,  497,
      497,  499,  499,    0,    0,    0,    0,    0,    0,    0,
        0,  499,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  506,  576,  506,  506,  506,  506,  506,  506,  506,
      506,  510,  576,  510,  510,  510,  510,  510,  510,  510,
      510,  512,  512,  513,  513,    0,    0,    0,    0,    0,
        0,  512,    0,  513,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,    0,  514,  514,    0,    0,
        0,    0,  514,  514,  514,  514,  515,  515,  515,  515,

      515,  515,  515,  515,  517,  518,  518,  529,  529,    0,
        0,    0,    0,  517,    0,  518,  522,  529,  522,  522,
      522,  522,  522,  522,  522,  522,  522,    0,  522,  522,
        0,    0,    0,    0,  522,  522,  522,  522,  525,  525,
      525,  525,  525,  525,  525,  525,  530,  530,  532,  532,
      533,  533,  534,  534,  536,  536,  530,    0,  532,    0,
      533,    0,  534,    0,  536,  537,  537,  538,  538,  540,
      540,  541,  541,  542,  542,  537,    0,  538,    0,  540,
        0,  541,    0,  542,  544,  544,  545,  545,  546,  546,
      548,  548,  563,    0,  544,  551,  545,  556,  546,  561,

      548,  563,  551,  551,    0,  556,  556,  561,  561,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
        0,  565,  565,  567,    0,    0,    0,  565,  565,  565,
      565,    0,  567,  568,  568,  568,  568,  568,  568,  568,
      568,  570,  570,  579,    0,    0,    0,    0,    0,    0,
        0,  570,  573,  579,  573,  573,  573,  573,  573,  573,
      573,  573,  581,  583,  585,  587,  589,    0,    0,    0,
        0,  581,  583,  585,  587,  589,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  597,    0,  597,  597,  597,
      597,  597,  597,  597,  597,  601,    0,  601,  601,  601,

      601,  601,  601,  601,  601,  603,  603,  604,  604,  606,
      606,    0,  611,    0,    0,  603,  623,  604,  628,  606,
      611,  611,  633,  623,  623,  635,  628,  628,    0,    0,
      633,  633,    0,    0,  635,  639,    0,  639,  639,  639,
      639,  639,  639,  639,  639,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  655,    0,  655,  655,  655,  655,
      655,  655,  655,  655,  662,    0,    0,  666,  671,    0,
        0,    0,  662,  662,  666,  666,  671,  671,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  685,    0,  689,    0,

        0,    0,    0,  685,  685,  689,  689,  694,  694,  694,
      694,  694,  694,  694,  694,  695,  695,  695,  695,  695,
      695,  695,  695,  696,    0,  696,  696,  696,  696,  696,
      696,  697,  697,    0,  697,  697,  697,  697,  697,  699,
      699,  699,  700,  700,  700,  701,    0,  701,  702,    0,
      702,  703,    0,  703,  703,  703,  704,  704,  704,  706,
      706,  706,  706,  708,    0,  708,  709,  709,  709,  710,
      710,  710,  711,  711,  711,  711,  714,  714,  714,  714,
      715,    0,  715,  716,    0,  716,  717,  717,  717,  718,
      718,  718,  719,  719,  719,  719,  721,    0,  721,  722,

        0,  722,  723,  723,  723,  723,  723,  724,  724,  724,
      724,  726,    0,  726,  727,  727,  727,  728,  728,  728,
      729,  729,  729,  729,  730,  730,  730,  730,  730,  731,
      731,  731,  731,  733,    0,  733,  735,  735,  735,  735,
      736,  736,  737,  737,  738,  738,  738,  739,  739,  739,
      740,  740,  740,  740,  741,  741,  741,  741,  742,    0,
      742,  743,    0,  743,  744,    0,  744,  745,    0,  745,
      746,  746,  746,  746,  746,  747,  747,  747,  747,  748,
      748,  749,  749,  749,  750,  750,  750,  751,  751,  751,
      751,  752,  752,  752,  752,  752,  753,  753,  753,  753,

      754,  754,  754,  754,  754,  755,  755,  755,  755,  757,
        0,  757,  759,    0,  759,  761,  761,  761,  761,  762,
      762,  762,  763,  763,  763,  764,  764,  764,  764,  765,
      765,  765,  765,  766,  766,  766,  766,  767,  767,  768,
      768,  769,    0,  769,  770,    0,  770,  771,    0,  771,
      772,    0,  772,  773,  773,  773,  773,  773,  774,  774,
      774,  774,  775,  775,  775,  776,  776,  776,  777,  777,
      777,  777,  778,  778,  778,  778,  778,  779,  779,  779,
      779,  780,  780,  780,  780,  780,  781,  781,  781,  781,
      782,  782,  782,  782,  782,  783,  783,  783,  783,  784,

      784,  786,    0,  786,  788,    0,  788,  790,  790,  790,
      790,  791,  791,  791,  792,  792,  792,  793,  793,  793,
      793,  794,  794,  794,  794,  795,  795,  795,  795,  796,
      796,  796,  796,  797,  797,  798,  798,  799,    0,  799,
      800,    0,  800,  801,    0,  801,  802,    0,  802,  803,
      803,  803,  803,  803,  804,  804,  804,  804,  805,  805,
      805,  806,  806,  806,  806,  807,  807,  807,  807,  807,
      808,  808,  808,  808,  809,  809,  809,  809,  809,  810,
      810,  810,  810,  811,  811,  811,  811,  811,  812,  812,
      812,  812,  813,  813,  813,  813,  813,  814,  814,  814,

      814,  815,  815,  817,    0,  817,  819,    0,  819,  821,
      821,  821,  821,  822,  822,  822,  823,  823,    0,  823,
      824,  824,  824,  825,    0,  825,  826,  826,  826,  826,
      827,    0,  827,  828,  828,  828,  828,  829,    0,  829,
      830,  830,  830,  830,  831,    0,  831,  832,  832,  832,
      832,  833,    0,  833,  834,  834,  834,  834,  835,  835,
      836,  836,  837,    0,  837,  838,    0,  838,  839,    0,
      839,  840,    0,  840,  841,  841,  841,  841,  841,  842,
      842,  842,  842,  844,  844,  844,  845,  845,  845,  846,
      846,    0,  846,  847,  847,  847,  847,  847,  848,  848,

        0,  848,  849,  849,  849,  849,  849,  850,  850,    0,
      850,  851,  851,  851,  851,  851,  852,  852,    0,  852,
      853,  853,  853,  853,  853,  854,  854,    0,  854,  855,
      855,  855,  855,  855,  856,  856,    0,  856,  857,  857,
      859,    0,  859,  861,    0,  861,  863,    0,  863,  864,
      864,  864,  864,  865,    0,  865,  866,    0,  866,  867,
        0,  867,  867,  867,  868,  868,    0,  868,  869,  869,
        0,  869,  870,  870,    0,  870,  871,  871,    0,  871,
      872,  872,    0,  872,  873,  873,    0,  873,  874,  874,
        0,  874,  875,  875,  876,  876,  877,    0,  877,  878,

        0,  878,  879,    0,  879,  880,    0,  880,  881,  881,
      881,  881,  881,  882,  882,    0,  882,  884,    0,  884,
      885,  885,    0,  885,  886,  886,    0,  886,  887,  887,
        0,  887,  888,  888,    0,  888,  889,  889,    0,  889,
      890,  890,    0,  890,  891,  891,    0,  891,  892,  892,
      894,    0,  894,  896,    0,  896,  897,  897,    0,  897,
      898,    0,  898,  899,    0,  899,  900,  900,    0,  900,
      901,  901,  902,  902,  903,    0,  903,  904,    0,  904,
      905,  905,    0,  905,  907,    0,  907,  908,  908,  910,
        0,  910,  911,  911,  912,  912,  913,  913,  914,  914,

      915,  915,  916,  916,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "compilepolicy.l"
#define INITIAL 0
#line 2 "compilepolicy.l"
#include "config.h"
#include "policy/test/compilepolicy.hh"
#include "yacc.yy_compile_policy.cc.h"
#include "policy/common/policy_utils.hh"
#include <sstream>


#define yylval yy_compile_policylval
#define yyparse yy_compile_policyparse
#define yyerror yy_compile_policyerror


void yyerror(const char *);
int yyparse(void);

namespace {
	unsigned _yy_lineno;
	string _yy_last_err;
}

#define YY_NO_UNPUT 1
#define STR 1

#define PAR 2

#line 1519 "lex.yy_compile_policy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 56 "compilepolicy.l"


#line 1673 "lex.yy_compile_policy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 694 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3705 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "compilepolicy.l"
BEGIN(STR);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "compilepolicy.l"
return YY_LBRACE;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 62 "compilepolicy.l"
return YY_RBRACE;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 64 "compilepolicy.l"
return YY_SOURCE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "compilepolicy.l"
return YY_DEST;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "compilepolicy.l"
return YY_ACTION;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 68 "compilepolicy.l"
BEGIN(INITIAL);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 69 "compilepolicy.l"
{ yylval.c_str = strdup(yytext); 
		  _yy_lineno += policy_utils::count_nl(yytext);
		  return YY_STR;
		}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 74 "compilepolicy.l"
BEGIN(PAR);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 76 "compilepolicy.l"
BEGIN(INITIAL);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 77 "compilepolicy.l"
{ yylval.c_str = strdup(yytext); 
		  _yy_lineno += policy_utils::count_nl(yytext);
		  return YY_PAR;
		}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 82 "compilepolicy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV4;
		}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 87 "compilepolicy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV4NET;
		}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 93 "compilepolicy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV6;
		}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 98 "compilepolicy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV6NET;
		}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 104 "compilepolicy.l"
return YY_TERM;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 107 "compilepolicy.l"
return YY_POLICY_STATEMENT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 110 "compilepolicy.l"
return YY_SET;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 112 "compilepolicy.l"
return YY_IMPORT;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 113 "compilepolicy.l"
return YY_EXPORT;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 115 "compilepolicy.l"
{ yylval.c_str = strdup(yytext);
				  return YY_ID;
				}  
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 119 "compilepolicy.l"
return YY_SEMICOLON;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 122 "compilepolicy.l"
_yy_lineno++;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 124 "compilepolicy.l"
/* eat blanks */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 127 "compilepolicy.l"
{ yyerror("Unknown character"); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 129 "compilepolicy.l"
ECHO;
	YY_BREAK
#line 1906 "lex.yy_compile_policy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STR):
case YY_STATE_EOF(PAR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 694 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 694 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 693);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 129 "compilepolicy.l"


void yyerror(const char *m) {
        ostringstream oss;

        oss << "Error on line " <<  _yy_lineno << ": " << m;

        _yy_last_err = oss.str();
}


// XXX: no memory management [a lot of leaks... for simplicy]
int
do_parsing(const string& conf, string& outerr) {
        YY_BUFFER_STATE yybuffstate = yy_scan_string(conf.c_str());

        _yy_last_err = "No error";
        _yy_lineno =1;

        int res = yyparse();

	yy_delete_buffer(yybuffstate);
        outerr = _yy_last_err;

        return res;
}
