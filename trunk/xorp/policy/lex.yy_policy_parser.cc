#define yy_create_buffer yy_policy_parser_create_buffer
#define yy_delete_buffer yy_policy_parser_delete_buffer
#define yy_scan_buffer yy_policy_parser_scan_buffer
#define yy_scan_string yy_policy_parser_scan_string
#define yy_scan_bytes yy_policy_parser_scan_bytes
#define yy_flex_debug yy_policy_parser_flex_debug
#define yy_init_buffer yy_policy_parser_init_buffer
#define yy_flush_buffer yy_policy_parser_flush_buffer
#define yy_load_buffer_state yy_policy_parser_load_buffer_state
#define yy_switch_to_buffer yy_policy_parser_switch_to_buffer
#define yyin yy_policy_parserin
#define yyleng yy_policy_parserleng
#define yylex yy_policy_parserlex
#define yyout yy_policy_parserout
#define yyrestart yy_policy_parserrestart
#define yytext yy_policy_parsertext

#line 19 "lex.yy_policy_parser.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 * $FreeBSD: src/usr.bin/lex/flex.skl,v 1.4 1999/10/27 07:56:44 obrien Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 44
#define YY_END_OF_BUFFER 45
static yyconst short int yy_accept[1313] =
    {   0,
        0,    0,    0,    0,   45,   43,   41,   42,   43,    4,
       14,   15,   29,   26,   28,    2,    2,    2,   13,   40,
       20,   30,   21,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,    6,    5,   41,   17,    3,
        0,    2,    0,    0,    2,    2,    2,   11,   18,   16,
       19,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   23,   39,   39,   39,    6,    0,    0,    0,
        0,    2,    0,    0,   11,    2,    2,    0,    0,   11,
       11,   11,   11,   39,   39,   36,   39,   27,   22,   32,
       39,   39,   25,   39,   39,   24,    1,    0,    0,    0,

        0,    0,    2,    0,    0,    0,   11,   11,   11,   11,
        0,    0,   12,   12,    0,   11,    0,   11,   11,   11,
       11,   39,   39,   39,   31,   39,   39,   39,    0,    0,
        0,    0,    2,    0,    0,   11,   11,    0,   11,   11,
       11,   11,    0,    0,   12,   12,   12,    0,    0,    0,
       11,   11,   11,   11,   11,   11,   11,   37,   39,   39,
       39,   39,    0,    0,    0,    0,    0,    0,    0,    0,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    0,    0,   10,   12,    0,    0,    0,    0,    0,
       11,    0,   11,    0,   11,   11,   11,   11,   34,   33,

       39,   35,    8,    8,    8,    0,    0,    0,   11,   11,
        0,   11,   11,   11,   11,   11,   11,    0,   11,   11,
       11,   11,    0,    0,   10,   10,   10,   10,   10,    0,
        0,    0,    0,    0,    0,    0,   11,   11,   11,   11,
       11,   11,   11,   39,    0,    0,    8,    8,    8,    8,
        0,    0,    0,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    0,    0,    0,   10,   10,   10,   10,    0,   10,
        0,   10,   10,   10,   10,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   11,    0,   11,    0,   11,

       11,   11,   11,   38,    0,    9,    9,    9,    8,    0,
        0,   11,   11,    0,   11,   11,   11,   11,   11,   11,
        0,   11,   11,   11,   11,   11,   11,    0,   11,   11,
       11,   11,    0,    0,   10,   10,    0,   10,   10,   10,
       10,    0,    0,    0,   10,   10,   10,   10,   10,   10,
       10,   11,   11,   11,    0,    0,    0,    0,    0,    0,
        0,    0,   11,   11,   11,   11,   11,   11,   11,    0,
        0,    0,    0,    0,    0,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

        0,    0,    0,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,    0,    0,    0,    0,    0,   10,
        0,   10,    0,   10,   10,   10,   10,   11,   11,   11,
       11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   11,    0,   11,    0,   11,   11,   11,   11,    0,
        0,    0,    0,    0,    0,    0,   11,   11,    0,   11,
       11,   11,   11,   11,   11,    0,   11,   11,   11,   11,
       11,   11,    0,   11,   11,   11,   11,   11,   11,    0,
       11,   11,   11,   11,    0,    0,   10,   10,    0,   10,
       10,   10,   10,   10,   10,    0,   10,   10,   10,   10,

        0,    0,    0,    0,    0,    0,    0,   10,   10,   10,
       10,   10,   10,   10,   11,   11,   11,   11,    0,    0,
        0,    0,    0,    0,    0,    0,   11,   11,   11,   11,
       11,   11,   11,    0,    0,    0,    0,    0,    0,    0,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,    0,    0,    0,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   10,    0,   10,    0,   10,   10,   10,
       10,   11,   11,   11,   11,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   11,    0,   11,    0,   11,
       11,   11,   11,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   11,    0,   11,    0,   11,   11,   11,   11,
       11,   11,    0,   11,   11,   11,   11,   11,   11,    0,
       11,   11,   11,   11,   11,   11,    0,   11,   11,   11,
       11,   11,   11,    0,   11,   11,   11,   11,    0,    0,
       10,   10,    0,   10,   10,   10,   10,   10,   10,    0,
       10,   10,   10,   10,   10,   10,    0,   10,   10,   10,

       10,   10,   10,   10,    0,    0,    0,    0,    0,    0,
        0,    0,   10,   10,   10,   10,   10,   10,   10,   11,
       11,   11,   11,    0,    0,    0,    0,    0,    0,    0,
        0,   11,   11,   11,   11,   11,   11,   11,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    0,    0,    0,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   10,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   10,    0,   10,    0,   10,   10,   10,
       10,   11,   11,   11,   11,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   11,    0,   11,    0,   11,
       11,   11,   11,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   11,   11,    0,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    0,    0,   10,
       10,    0,   10,   10,   10,   10,   10,   10,    0,   10,
       10,   10,   10,   10,   10,    0,   10,   10,   10,   10,
       10,   10,    0,   10,   10,   10,   10,   10,   10,   10,

       10,    0,    0,    0,    0,    0,    0,    0,    0,   10,
       10,   10,   10,   10,   10,   10,   11,   11,   11,   11,
        0,    0,    0,    0,    0,    0,    0,    0,   11,   11,
       11,   11,    7,    7,    7,    0,    0,    0,    0,    0,
        0,    0,   11,   11,   11,   11,   11,   11,   11,    0,
        0,    0,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   10,    0,

       10,    0,   10,   10,   10,   10,   11,   11,   11,   11,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       11,   11,    7,    7,    7,    7,    0,    0,    0,    0,
       11,   11,   11,   11,   11,   11,   11,    0,    0,    0,
        0,   10,    0,   10,    0,   10,   10,   10,   10,   10,
       10,    0,   10,   10,   10,   10,   10,   10,    0,   10,
       10,   10,   10,   10,   10,    0,   10,   10,   10,   10,
       10,   10,    0,   10,   10,   10,   10,   10,   10,   10,
       10,    0,    0,    0,    0,    0,    0,    0,    0,   10,
       10,   10,   10,   10,   10,   10,   11,   11,   11,   11,

        0,    0,    0,    0,    0,   11,    7,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   10,    0,   10,    0,   10,
       10,   10,   10,   11,   11,   11,   11,    0,    0,    0,
        0,    0,   11,   11,   11,   11,    0,    0,    0,    0,
        0,    0,   10,   10,    0,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,

        0,    0,    0,    0,    0,    0,    0,    0,   10,   10,
       10,   10,   11,   11,   11,   11,    0,   11,   11,   11,
       11,    0,    0,    0,    0,    0,    0,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   10,   10,
       11,   11,   11,   11,   11,    0,    0,    0,    0,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        0,    0,    0,    0,    0,   10,   11,    0,    0,    0,
        0,    0,   10,   10,   10,   10,    0,    0,    0,    0,
        0,   10,   10,   10,   10,    0,   10,   10,   10,   10,

        0,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    1,    6,    7,
        8,    9,   10,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   20,   20,   21,   22,   23,   24,
       25,   26,    1,    1,   27,   27,   27,   27,   28,   27,
       29,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   31,   32,   33,   30,   30,   30,   34,   30,   30,
        1,    1,    1,    1,   35,    1,   36,   27,   37,   38,

       39,   27,   30,   40,   41,   42,   30,   43,   30,   44,
       45,   46,   30,   47,   30,   48,   30,   30,   30,   49,
       30,   30,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    1,    1,    1,    2,    2,    1,    1,    1,    1,
        1,    3,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    1,    1,    1,    1,    7,    7,    8,    8,
        8,    8,    8,    8,    8,    7,    7,    7,    7,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8
    } ;

static yyconst short int yy_base[1791] =
    {   0,
        0,    0,   45,   47, 6642, 6771, 6631, 6771, 6605, 6771,
     6771, 6771, 6771, 6771,    0,   42,   68,   57, 6605, 6771,
     6599, 6594, 6591,   76,  112, 6583, 6580,   98, 6555, 6561,
       98, 6548, 6545, 6548, 6539,    0, 6771, 6573, 6771,    0,
      140,  150, 6550, 6547,  176,   45,  184,  194, 6771, 6771,
     6771,  220,    0, 6535, 6528, 6510, 6506, 6503, 6491, 6499,
     6494, 6475,    0, 6472, 6469, 6458,    0,    0, 6487,  248,
     6481,  258, 6466, 6463,  286,    0, 6470, 6465, 6459,  314,
      340,  165,   55,  348, 6443,    0, 6429,    0,    0,    0,
     6418, 6412,    0, 6402, 6408,    0,    0,   85, 6427, 6419,

      376, 6411,  141, 6393, 6384, 6379,  384,  410,  209,  163,
     6384, 6369,    0,  130,  420,  430,  456,  207,  482,  153,
      230, 6364, 6347,  262,    0, 6332, 6326, 6331, 6353,  492,
     6343, 6340,  232, 6327, 6324,  502,  530,  556,  233,  582,
      196,  269, 6310, 6307, 6771,    0,  301, 6314,  592, 6311,
      325,  327,  602,  628,  363,  361,  395,    0, 6272, 6251,
     6257, 6241,  235, 6272, 6267,  638, 6262, 6247, 6240, 6237,
      646,  672,  445,  397,  443,  466,  682,  708,  517,  468,
      515, 6234, 6231,  716, 6771,  273, 6238, 6230,  744, 6227,
      541,  752,  762,  788,  543,  814,  272,  566,    0,    0,

     6191,    0,  297,  824,  299, 6221, 6208, 6196,  834,  862,
      888,  568,  914,  323,  613,  615,  924,  950,  657,  976,
      325,  659, 6193, 6190,  984, 1012, 1038,  697, 6187, 6189,
     1048, 6181, 6173, 6161, 1058, 6151,  695,  726, 1068, 1094,
      777,  728,  775, 6110, 6131, 1102,  358,  401,  798,  403,
     6111, 6101, 6090, 1112, 1138,  849,  800,  847,  873, 1148,
     1174,  903,  875,  901,  935,  937, 1184, 1210,  965,  963,
      994, 6087, 6074, 6071, 1220, 1246, 1027, 6068,  471, 1256,
     1282, 6065, 1308,  433,  249,  510, 6061, 6058, 1318, 6055,
      545, 6052, 6049, 1326, 6026,  996, 1334, 1344, 1370, 1025,

     1396,  565, 1079,    0,  617,    0,  661, 6771,  693, 6008,
     6000, 1406, 1434, 1460, 1081, 1486,  725, 1123, 1125, 1496,
     1522, 1159, 1548,  765, 1161, 1195, 1558, 1584, 1197, 1610,
      800, 1231, 5992, 5984, 1618, 1646, 1672, 5978, 1698,  836,
      735, 5980, 1708, 5977, 1003, 1049, 1718, 1744, 1271, 5959,
     1233,  879, 1754,  881, 5966, 5963, 1764, 5960, 5948, 5945,
     1774, 5942, 1269, 1292, 1784, 1810, 1359, 1294, 1357, 5939,
     1820, 5931, 5913, 5853, 5850, 1830, 1856, 1385, 1383, 1416,
     1418, 1866, 1892, 1449, 1447, 1470, 1472, 1507, 1902, 1928,
     1537, 1509, 1535, 1569, 1571, 1938, 1964, 1599, 1597, 1628,

     5837, 5834, 5831, 1974, 2000, 1661, 5828, 1257, 1630, 2010,
     2036, 1687, 5814, 1631,  896, 5821, 5818, 2046, 5815, 5802,
      939, 2054, 2080, 5761, 2106,  952, 1637, 1001, 1023, 1729,
     1085, 1127, 5768, 5760, 2116, 5757, 1163, 5754, 5751, 2124,
     5739, 1659, 2132, 2142, 2168, 1685, 2194, 1079, 1731, 1199,
     5736, 5728, 2204, 5675, 5662, 5649, 2212, 2240, 2266, 1795,
     2292, 1229, 1797, 1841, 2302, 2328, 1843, 2354, 1231, 1877,
     1879, 2364, 2390, 1913, 2416, 1291, 1915, 1949, 2426, 2452,
     1951, 2478, 1347, 1985, 5646, 5643, 2486, 2514, 2540, 5640,
     2566, 1372, 1709, 5626, 2576, 2602, 5623, 2628, 1415, 1765,

     5630, 2638, 5596, 5588, 5585, 2648, 5582, 1987, 2011, 2658,
     2684, 2025, 5569, 2023, 1445, 1477, 2694, 1513, 5520, 5517,
     2704, 5514, 5511, 5472, 2714, 5442, 2065, 2067, 2724, 2750,
     2095, 2093, 2153, 5429, 2760, 5426, 5409, 5396, 5373, 2768,
     2796, 2822, 2183, 2155, 2181, 2222, 2832, 2858, 2255, 2224,
     2253, 2276, 2278, 2868, 2894, 2317, 2315, 2338, 2340, 2375,
     2904, 2930, 2405, 2377, 2403, 2437, 2439, 2940, 2966, 2467,
     2465, 2496, 5370, 5356, 5353, 2976, 3002, 2529, 5339, 2498,
     2499, 3012, 3038, 2555, 5323, 2505, 2527, 2553, 3048, 3074,
     2591, 5315, 2577, 1530, 5315, 5305, 3084, 5297, 1573, 5289,

     5281, 3092, 5261, 5241, 1592, 3100, 3126, 5231, 3152, 1507,
     2589, 1635, 1657, 2612, 1682, 1799, 5223, 5209, 3162, 5200,
     1845, 5199, 5198, 3170, 5197, 2614, 3178, 3188, 3214, 2669,
     3240, 1727, 2671, 1881, 5187, 5179, 3250, 5171, 5147, 3258,
     3284, 2739, 1739, 5138, 3294,    0, 2737, 3320, 1911, 2779,
     2781, 3330,    0, 2807, 3356, 1913, 2809, 2843, 3366,    0,
     2845, 3392, 1947, 2879, 2881, 3402,    0, 2915, 3428, 1949,
     2917, 2951, 3438,    0, 2953, 3464, 1983, 2987, 5137, 5136,
     3472, 3500, 3526, 5135, 3552, 1985, 2639, 5125, 3562, 3588,
     5117, 3614, 2063, 2705, 5107, 3624, 3650, 5083, 3676, 2065,

     2989,    0, 2083,    0, 5092, 5091, 3686, 5090, 5084, 5071,
     3696, 5061, 3013, 3024, 3706, 3732, 3063, 5041, 3025, 2159,
     2161, 3742, 2178, 5037, 5028, 3752, 5015, 4996, 4995, 3762,
     4979, 3061, 3111, 3772, 3798, 3141, 3113, 3139, 4956, 3808,
     4943, 4929, 4910, 2227, 3818, 4897, 4861, 3844, 2243, 3049,
     2283, 3199, 3201, 2313, 3224, 3226, 3269, 2345, 3271, 3305,
     3307, 2381, 3341, 3343, 3377, 2383, 3379, 3413, 3415, 2400,
     3449, 4838, 4807, 4799, 3854, 3880, 3487, 4781, 3451, 3485,
     3890, 3916, 3515, 4776, 3501, 3513, 3536, 3926, 3952, 3577,
     4737, 3537, 3538, 3539, 3962, 3988, 3603, 4729, 3563,    0,

        0, 3639, 6771, 2441, 4731, 4717, 3998, 4708, 2460, 4672,
     4643, 4006, 4636, 4590, 2548, 4014, 4040, 4560, 4066, 2495,
     3575, 2525, 2622, 3660, 2675, 2783, 4564, 4536, 4076, 4517,
     2811, 4473, 4451, 4084, 4408, 3601, 4092, 4102,    0, 3637,
     4128, 2669, 3662, 2847, 4406, 4382, 4138, 4380, 4346, 4146,
     4320, 3625, 3687, 2735, 2885, 3707, 2887, 3718, 2921, 3783,
     2923, 3785, 2957, 3829, 2959, 3831, 2993, 4297, 4274, 4154,
     4182, 4208, 4272, 4234, 2987, 3753, 4248, 4244, 4270, 4246,
     4296, 3021, 3809, 4217, 4306, 4332, 4186, 4358, 3023, 3855,
     4184, 4368, 4394, 4158, 4420, 3109, 3866, 6771,    0, 3129,

        0, 4166, 4147, 4430, 4139, 4116, 4093, 4440, 4085, 3867,
     3891, 4450, 4476, 3905, 4067, 3903, 3119, 3205, 4486, 3207,
     4054, 4052, 4496, 4028, 4026, 4007, 4506, 3999, 3937, 3939,
     3231, 3973,    0, 3268,    0, 3984, 3309, 3976, 3963, 4516,
     3948, 3917, 3347, 3349, 3383, 3385, 3419, 3421, 3455, 3894,
     3892, 4522, 4550, 4576, 4029, 3865, 3975, 4015, 4586, 4612,
     4055, 3858, 4027, 4053, 4113, 4622, 4648, 4169, 3830, 4114,
     4115, 4167, 4658, 4684, 4197, 3828, 4183, 4195, 4218, 4694,
     4720, 4259, 3784, 4219,    0,    0, 4285, 6771, 3480, 3792,
     3729, 4730, 3727, 3541, 3720, 3673, 4738, 3667, 3654, 3596,

     4746, 4772, 3626, 4798, 3449, 4220, 3670, 3723, 4317, 3725,
     3787, 3576, 3574, 4808, 3540, 3833, 3514, 3512, 4816, 3486,
     4221, 3871,    0,    0, 4347, 6771, 3460, 4824, 3452, 3424,
     3873, 3943, 3945, 3979, 3981, 4050, 4119, 3378, 4834, 4860,
     4383,    0, 3342, 4870,    0, 3306, 4896, 4113, 4245, 3304,
     4906,    0, 3270, 4932, 4156, 4257, 3268, 4942,    0, 3249,
     4968, 4217, 4283, 3241, 4978,    0, 3227, 5004, 4272, 4319,
     3225, 5014,    0, 3223, 5040, 4315, 4345, 6771,    0, 4335,
        0, 3228, 3210, 5050, 3179, 3171, 3163, 5060, 3122, 4369,
     4381, 5070, 5096, 4409, 3091, 4407, 4327, 4404, 5106, 4461,

     3093, 3085, 5116, 3060, 3033, 4463, 6771, 4465, 3026, 2998,
     5126, 2990, 2967, 4468, 5134, 2952, 2916, 5160, 4525, 4431,
        0, 4497, 4535,    0, 4541, 4561, 4562,    0, 4563, 4587,
     4598,    0, 4599, 4623, 4634,    0, 4635, 4659, 4670,    0,
     4671,    0,    0, 4709, 6771, 4540, 2890, 2854, 5170, 2852,
     4565, 2818, 2816, 5178, 2790, 2778, 4601, 5186,    0, 2751,
     5212, 4531, 4695, 4606, 4639, 4757, 4641, 4673, 2680, 2659,
     5222, 2625, 4678, 4706, 5230, 4759, 2619, 2616, 5240, 2590,
     4782, 4783,    0, 6771, 4784,    0, 2578,    0, 2544,    0,
     2518,    0, 2497,    0, 2490,    0, 6771,    0, 4760,    0,

     2448, 2446, 5250, 2402, 2386, 2351, 5260, 2349, 4785, 4825,
        0, 4845, 4763, 4789, 5270, 4846, 2347, 4851, 4853, 4881,
     4856, 4889, 2342, 2289, 5280, 2287, 2275,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4921, 6771, 4915, 2280,
     2235, 5288, 2233, 4951, 2226, 2205, 5296, 2180, 2154,    0,
     4883, 4887, 4989, 4959, 4961, 2133, 5304, 2125, 2117,    0,
     6771, 6771, 6771, 6771, 6771, 6771, 6771,    0, 4956,    0,
     2076, 2055, 5314, 2047, 2024,    0, 4991, 4997, 2022, 1996,
     5324, 1988,    0,    0, 5029, 6771, 5023, 1975, 1960, 5332,
     1924, 6771,    0, 5074,    0, 1888, 6771,    0, 5080,    0,

     1886,    0,    0, 5149, 6771,    0,    0, 5201, 6771, 6771,
     6771, 6771, 5351, 1859, 5359, 5363, 5366, 1857, 5371, 5374,
     5375, 5378, 1828, 5383, 1813, 5388, 5391, 5393, 5396, 5401,
     5404, 1811, 5409, 5414, 5417, 5418, 5421, 5426, 5429, 1691,
     5434, 5437, 5440, 5445, 1646, 5450, 5451, 5454, 5459, 5464,
     5469, 5472, 5475, 1639, 5480, 5483, 5488, 5491, 5492, 5495,
     5500, 5505, 5508, 5511, 5514, 5519, 5522, 5525, 5528, 5531,
     5536, 5541, 5542, 5545, 5550, 5555, 5560, 5565, 5570, 5573,
     5576, 5579, 1587, 5582, 1585, 5587, 5590, 1525, 5593, 5596,
     5599, 5602, 1490, 1488, 5606, 5609, 5614, 5619, 5624, 5627,

     5630, 5633, 5638, 5641, 5644, 5647, 5652, 5655, 5658, 5661,
     5664, 5667, 5670, 5675, 5680, 5683, 5684, 5687, 5692, 5697,
     5702, 5707, 5712, 5717, 5722, 5725, 5728, 5731, 5736, 5739,
     1486, 5744, 5747, 1481, 5748, 5753, 5756, 1436, 5759, 5762,
     1434, 5765, 5768, 5771, 1432, 5776, 5779, 5780, 5783, 5788,
     5793, 5798, 5803, 5806, 5809, 5812, 5815, 5820, 5823, 5826,
     5829, 5832, 5835, 5840, 5843, 5846, 5849, 5852, 5855, 5858,
     5863, 5868, 5871, 5872, 5877, 5882, 5887, 5892, 5897, 5902,
     5907, 5912, 5917, 5920, 5923, 5926, 5931, 5934, 5939, 5942,
     1427, 5947, 5950, 1389, 5953, 5956, 1342, 5957, 5962, 5965,

     1334, 5968, 5971, 1326, 5974, 5977, 5980, 1312, 5985, 5988,
     5989, 5994, 5997, 6000, 6005, 6008, 6013, 6016, 6021, 6024,
     6029, 6032, 6037, 6040, 6043, 6046, 6049, 6052, 1310, 1308,
     1303, 6057, 6060, 6063, 6066, 6069, 6072, 6077, 6080, 6083,
     6086, 6089, 6092, 6095, 6100, 6105, 6108, 1275, 6109, 6112,
     6117, 6122, 6127, 6132, 6137, 6142, 6147, 6152, 6157, 6162,
     6167, 6170, 6173, 6176, 6181, 6184, 6189, 6192, 6197, 6200,
     1249, 1241, 1228, 6205, 6208, 1213, 6211, 6214, 1211, 6215,
     6220, 6223, 1177, 6226, 6229, 1175, 6232, 6235, 6236, 6241,
     1141, 6246, 6249, 6252, 6255, 6258, 6263, 6268, 6273, 6278,

     6283, 6288, 6293, 6296, 6299, 6302, 6305, 6308, 6311, 1139,
     1097, 1014, 6316, 6319, 6322, 6325, 6328, 6331, 6336, 6339,
     6342, 6345, 6348, 6351, 6354, 6359, 1012, 1005,  969,  953,
     6364, 6367, 6370, 6375, 6380, 6385, 6390, 6395, 6400, 6403,
     6406, 6411, 6414, 6419, 6422, 6427, 6430, 6435, 6438,  951,
      891,  853, 6443, 6446,  818, 6449, 6452,  812, 6453, 6458,
     6461,  809, 6464, 6467,  760, 6470, 6473, 6476,  746,  744,
     6481, 6484, 6487, 6490, 6493, 6496, 6499, 6502, 6505, 6508,
     6511, 6514, 6517, 6520, 6523, 6526,  737,  675,  673, 6531,
     6534, 6537, 6540, 6543, 6546, 6551, 6554, 6557, 6560, 6563,

      646, 6568, 6571,  631, 6572, 6575, 6578, 6583, 6586, 6591,
     6594, 6599, 6602, 6607, 6610, 6615, 6618,  629,  600, 6623,
      586, 6626,  584, 6627, 6630, 6635,  582, 6638, 6641, 6644,
     6647, 6650, 6653, 6656, 6659, 6662, 6665, 6668, 6671, 6674,
      577,  559,  557, 6679, 6682, 6685, 6688, 6691, 6694, 6699,
     6702, 6705,  500, 6708, 6709, 6712, 6715, 6718, 6721, 6724,
     6727,  486,  484, 6732,  477, 6735, 6736, 6741, 6744, 6747,
     6748,  428,  413,  384, 6753, 6756, 6757,  367, 6762,  343,
      285, 6765,  278,  248,  213,  142,  136,  133,   97,   50
    } ;

static yyconst short int yy_def[1791] =
    {   0,
     1312,    1, 1313, 1313, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1314, 1312,   16,   17, 1312, 1312,
     1312, 1312, 1312, 1312,   24,   25,   25,   24,   24,   25,
       25,   25,   25,   25,   25, 1315, 1312, 1312, 1312, 1314,
     1312, 1312, 1316, 1317,   42,   45,   45, 1312, 1312, 1312,
     1312,   24,   25,   25,   25,   52,   52,   25,   25,   25,
       25,   25,   25,   25,   25,   25, 1315, 1318, 1319, 1312,
     1320, 1312, 1321, 1322, 1312,   72,   72, 1312, 1323, 1312,
       80,   81, 1324,   52,   25,   25,   84,   84,   25,   25,
       25,   25,   25,   25,   25,   25, 1318, 1325, 1320, 1326,

     1312, 1312, 1327, 1312, 1328, 1329, 1312,  107,  108, 1330,
     1312, 1331, 1332, 1332, 1312, 1312, 1312, 1333,  116,  119,
     1333,   25,   25,   25,   25,   25,   25,   25, 1334, 1312,
     1335, 1312, 1327, 1336, 1337, 1312, 1312, 1312, 1338,  137,
      140, 1338, 1339, 1312, 1312, 1340, 1312, 1341, 1312, 1342,
     1343, 1343, 1312,  153,  154, 1344, 1343,   25,   25,   25,
       25,   25, 1345, 1335, 1346, 1312, 1312, 1312, 1347, 1348,
     1312,  171,  172, 1349, 1350, 1350, 1312,  177,  178, 1351,
     1350, 1352, 1353, 1312, 1312, 1354, 1342, 1355, 1312, 1312,
     1312, 1312, 1312, 1312, 1356,  193,  196, 1356,   25,   25,

       25,   25, 1357, 1312, 1358, 1312, 1359, 1360, 1312, 1312,
     1312, 1361,  210,  213, 1361, 1312, 1312, 1312, 1362,  217,
      220, 1362, 1363, 1364, 1312, 1312,  226,  227, 1365, 1366,
     1312, 1367, 1312, 1368, 1312, 1369, 1370, 1370, 1312,  239,
      240, 1371, 1370,   25, 1312, 1312, 1358, 1372, 1372, 1312,
     1312, 1373, 1374, 1312,  254,  255, 1375, 1376, 1376, 1312,
      260,  261, 1377, 1376, 1378, 1378, 1312,  267,  268, 1379,
     1378, 1312, 1380, 1381, 1312,  275,  276, 1382, 1383, 1312,
     1312, 1384,  280,  283, 1384, 1385, 1386, 1387, 1312, 1312,
     1388, 1389, 1390, 1312, 1312, 1312, 1312, 1312, 1312, 1391,

      298,  301, 1391, 1392, 1393, 1394, 1312, 1312, 1312, 1395,
     1396, 1312, 1312, 1312, 1397,  313,  316, 1397, 1312, 1312,
     1312, 1398,  320,  323, 1398, 1312, 1312, 1312, 1399,  327,
      330, 1399, 1400, 1401, 1312, 1312, 1312, 1402,  336,  339,
     1402, 1403, 1312, 1404, 1405, 1405, 1312,  347,  348, 1406,
     1405, 1407, 1312, 1408, 1312, 1409, 1312, 1410, 1312, 1411,
     1312, 1412, 1413, 1413, 1312,  365,  366, 1414, 1413, 1415,
     1312, 1416, 1312, 1417, 1418, 1312,  376,  377, 1419, 1420,
     1420, 1312,  382,  383, 1421, 1420, 1422, 1422, 1312,  389,
      390, 1423, 1422, 1424, 1424, 1312,  396,  397, 1425, 1424,

     1312, 1426, 1427, 1312,  404,  405, 1428, 1429, 1429, 1312,
      410,  411, 1430, 1429, 1431, 1432, 1433, 1312, 1312, 1312,
     1434, 1312, 1312, 1435,  422,  425, 1435, 1436, 1437, 1437,
     1312, 1438, 1439, 1440, 1312, 1312, 1441, 1442, 1443, 1312,
     1312, 1312, 1312, 1312, 1312, 1444,  444,  447, 1444, 1445,
     1446, 1447, 1312, 1312, 1448, 1449, 1312, 1312, 1312, 1450,
      458,  461, 1450, 1312, 1312, 1312, 1451,  465,  468, 1451,
     1312, 1312, 1312, 1452,  472,  475, 1452, 1312, 1312, 1312,
     1453,  479,  482, 1453, 1454, 1455, 1312, 1312, 1312, 1456,
      488,  491, 1456, 1312, 1312, 1312, 1457,  495,  498, 1457,

     1458, 1312, 1459, 1312, 1460, 1312, 1461, 1462, 1462, 1312,
      510,  511, 1463, 1462, 1312, 1464, 1312, 1465, 1312, 1466,
     1312, 1467, 1312, 1468, 1312, 1469, 1470, 1470, 1312,  529,
      530, 1471, 1470, 1472, 1312, 1473, 1312, 1312, 1474, 1312,
     1312,  541,  542, 1475, 1476, 1476, 1312,  547,  548, 1477,
     1476, 1478, 1478, 1312,  554,  555, 1479, 1478, 1480, 1480,
     1312,  561,  562, 1481, 1480, 1482, 1482, 1312,  568,  569,
     1483, 1482, 1312, 1484, 1485, 1312,  576,  577, 1486, 1487,
     1487, 1312,  582,  583, 1488, 1487, 1489, 1489, 1312,  589,
      590, 1490, 1489, 1491, 1492, 1493, 1312, 1312, 1494, 1495,

     1496, 1312, 1312, 1312, 1497, 1312, 1312, 1498,  606,  609,
     1498, 1499, 1500, 1500, 1312, 1501, 1502, 1503, 1312, 1312,
     1504, 1505, 1506, 1312, 1312, 1312, 1312, 1312, 1312, 1507,
      628,  631, 1507, 1508, 1509, 1510, 1312, 1312, 1511, 1312,
      640,  641, 1512, 1513, 1312, 1514, 1515,  645,  648, 1515,
     1312, 1312, 1516, 1517,  652,  655, 1517, 1312, 1312, 1518,
     1519,  659,  662, 1519, 1312, 1312, 1520, 1521,  666,  669,
     1521, 1312, 1312, 1522, 1523,  673,  676, 1523, 1524, 1525,
     1312, 1312, 1312, 1526,  682,  685, 1526, 1312, 1312, 1312,
     1527,  689,  692, 1527, 1312, 1312, 1312, 1528,  696,  699,

     1528, 1529, 1530, 1531, 1312, 1532, 1312, 1533, 1312, 1534,
     1312, 1535, 1536, 1536, 1312,  715,  716, 1537, 1536, 1312,
     1538, 1312, 1539, 1312, 1540, 1312, 1541, 1312, 1542, 1312,
     1543, 1544, 1544, 1312,  734,  735, 1545, 1544, 1546, 1312,
     1547, 1312, 1312, 1548, 1312, 1549, 1550,  745,  748, 1550,
     1551, 1552, 1552, 1553, 1552, 1554, 1554, 1555, 1554, 1556,
     1556, 1557, 1556, 1558, 1558, 1559, 1558, 1560, 1560, 1561,
     1560, 1312, 1562, 1563, 1312,  775,  776, 1564, 1565, 1565,
     1312,  781,  782, 1566, 1565, 1567, 1567, 1312,  788,  789,
     1568, 1567, 1569, 1569, 1312,  795,  796, 1570, 1569, 1571,

     1572, 1312, 1312, 1573, 1574, 1575, 1312, 1312, 1576, 1577,
     1578, 1312, 1312, 1312, 1579, 1312, 1312, 1580,  816,  819,
     1580, 1581, 1582, 1582, 1312, 1583, 1584, 1585, 1312, 1312,
     1586, 1587, 1588, 1312, 1312, 1312, 1312, 1312, 1589, 1590,
      838,  841, 1590, 1591, 1592, 1593, 1312, 1312, 1594, 1312,
     1595, 1596, 1596, 1597, 1312, 1596, 1598, 1312, 1599, 1312,
     1600, 1312, 1601, 1312, 1602, 1312, 1603, 1604, 1605, 1312,
     1312, 1312, 1606,  871,  874, 1606, 1312, 1312, 1312, 1607,
      878,  881, 1607, 1312, 1312, 1312, 1608,  885,  888, 1608,
     1312, 1312, 1312, 1609,  892,  895, 1609, 1312, 1610, 1611,

     1612, 1312, 1613, 1312, 1614, 1312, 1615, 1312, 1616, 1617,
     1617, 1312,  912,  913, 1618, 1617, 1312, 1619, 1312, 1620,
     1312, 1621, 1312, 1622, 1312, 1623, 1312, 1624, 1625, 1625,
     1626, 1625, 1627, 1628, 1629, 1312, 1630, 1631, 1632, 1312,
     1312, 1312, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1312,
     1640, 1312, 1312,  953,  954, 1641, 1642, 1642, 1312,  959,
      960, 1643, 1642, 1644, 1644, 1312,  966,  967, 1645, 1644,
     1646, 1646, 1312,  973,  974, 1647, 1646, 1648, 1648, 1312,
      980,  981, 1649, 1648, 1650, 1651, 1312, 1312, 1652, 1653,
     1654, 1312, 1312, 1655, 1656, 1657, 1312, 1312, 1312, 1658,

     1312, 1312, 1659, 1001, 1004, 1659, 1660, 1661, 1661, 1312,
     1662, 1663, 1664, 1312, 1312, 1665, 1666, 1667, 1312, 1312,
     1312, 1668, 1669, 1670, 1312, 1312, 1671, 1312, 1672, 1312,
     1673, 1312, 1312, 1312, 1312, 1312, 1312, 1674, 1312, 1039,
     1040, 1675, 1676, 1312, 1677, 1678, 1044, 1047, 1678, 1312,
     1312, 1679, 1680, 1051, 1054, 1680, 1312, 1312, 1681, 1682,
     1058, 1061, 1682, 1312, 1312, 1683, 1684, 1065, 1068, 1684,
     1312, 1312, 1685, 1686, 1072, 1075, 1686, 1312, 1687, 1688,
     1689, 1312, 1690, 1312, 1691, 1312, 1692, 1312, 1693, 1694,
     1694, 1312, 1092, 1093, 1695, 1694, 1312, 1696, 1312, 1697,

     1312, 1698, 1312, 1699, 1312, 1700, 1312, 1701, 1702, 1703,
     1312, 1312, 1312, 1704, 1312, 1705, 1706, 1115, 1118, 1706,
     1707, 1708, 1708, 1709, 1708, 1710, 1710, 1711, 1710, 1712,
     1712, 1713, 1712, 1714, 1714, 1715, 1714, 1716, 1716, 1717,
     1716, 1689, 1718, 1312, 1312, 1719, 1691, 1720, 1312, 1312,
     1721, 1693, 1722, 1312, 1312, 1312, 1723, 1312, 1724, 1725,
     1158, 1161, 1725, 1697, 1726, 1726, 1312, 1727, 1699, 1728,
     1312, 1312, 1312, 1729, 1312, 1730, 1312, 1731, 1312, 1732,
     1733, 1733, 1734, 1312, 1733, 1735, 1312, 1736, 1312, 1737,
     1312, 1738, 1312, 1739, 1312, 1740, 1312, 1741, 1742, 1743,

     1312, 1744, 1312, 1745, 1312, 1746, 1312, 1747, 1748, 1748,
     1749, 1748, 1312, 1750, 1312, 1751, 1312, 1730, 1752, 1752,
     1312, 1753, 1732, 1754, 1312, 1312, 1312, 1755, 1756, 1757,
     1758, 1759, 1760, 1761, 1743, 1762, 1312, 1312, 1763, 1745,
     1764, 1312, 1312, 1765, 1747, 1766, 1312, 1312, 1312, 1767,
     1751, 1768, 1768, 1312, 1312, 1769, 1312, 1770, 1312, 1771,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1772, 1773, 1774,
     1312, 1775, 1312, 1776, 1312, 1777, 1312, 1778, 1770, 1779,
     1312, 1312, 1774, 1780, 1312, 1312, 1781, 1776, 1782, 1312,
     1312, 1312, 1783, 1784, 1785, 1312, 1312, 1786, 1787, 1788,

     1312, 1785, 1789, 1312, 1312, 1788, 1790, 1312, 1312, 1312,
     1312,    0, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,

     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,

     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,

     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,

     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312
    } ;

static yyconst short int yy_nxt[6821] =
    {   0,
        6,    7,    8,    9,   10,   10,   11,   12,   13,   14,
       15,    6,    6,   16,   16,   17,   18,   18,   18,   18,
       18,   19,   20,   21,   22,   23,   24,   24,   25,   25,
       26,   27,   25,   25,    6,   28,   29,   24,   24,   30,
       25,   25,   25,   31,   32,   33,   34,   25,   35,   37,
       37,   37,   37,   41, 1311,   42,   42,   42,   42,   42,
       42,   42,   42,   43,   77,   77,   78,   79,   44,   44,
       47,   47,   47,   47,   47,   47,  117,   44,   44,   44,
       44,   45,   45,   45,   45,   45,   46,   47,   47,   52,
       52,   52,   52,   52,   52,   52,   52,   43,  129,  129,

      130, 1310,   52,   52,   53,   53,   53,   53,   53,   53,
       53,   52,   52,   52,   52,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53, 1312,   56,   57,   61, 1309,   53,   53,
     1307,   58,   62,  146,  146,  147, 1306,   53,   53,   53,
       53,   68,  111,   69,   69,   70,   71,   71,   71,   71,
       71,   41,   43,   72,   72,   72,   72,   72,   72,   72,
       72,   43,  152,  152,   78,   79,   73,   73,  121,  121,
      121,  121,  121,  121,  138,   73,   73,   73,   73,   76,
       76,   76,   76,   76,   76,   76,   76,   77,   77,   77,

       77,   77,   77,   77,   77,   78,   79,   80,   80,   81,
       82,   82,   82,   82,   82,  176,  176, 1305,   78,   79,
       83,   83,  142,  142,  142,  142,  142,  142,  117,   83,
       83,   83,   83,   84,   84,   84,   84,   84,   84,   84,
       84,  115,   79,  111,   78,   79,   84,   84,  203,  203,
      204,  117, 1303, 1312,  138,   84,   84,   84,   84,   98,
      279,  100,  100,  100,  100,  100,  101,  102,  102,   41,
      281,  103,  103,  103,  103,  103,  103,  103,  103,   43,
      115,   79, 1302,   43,  104,  104,  230,  230,  231, 1300,
      138,  238,  238,  104,  104,  104,  104,   78,   79,  107,

      107,  108,  109,  109,  109,  109,  109,  159,  245,  246,
      245,  246,  110,  110,  185,  185,  185,  185,  185,  185,
      185,  110,  110,  110,  110,  115,   79,  116,  116,  116,
      116,  116,  116,  116,  116,  117,  115,   79,   78,   79,
      118,  118,  259,  259,  266,  266,  117, 1297,  117,  118,
      118,  118,  118,  119,  119,  119,  119,  119,  120,  121,
      121,  122,  122,  122,  122,  122,  122,  122,  122,  245,
      246, 1295,   78,   79,  122,  122,  198,  198,  198,  198,
      198,  198,  194,  122,  122,  122,  122,   98, 1286,  132,
      132,  132,  132,  132,  132,  115,   79,  137,  137,  137,

      137,  137,  137,  137,  137,  138,  115,   79,   78,   79,
      139,  139,  245,  246,  245,  246,  117, 1284,  211,  139,
      139,  139,  139,  140,  140,  140,  140,  140,  141,  142,
      142,  112, 1283,  148,  148,  149,  150,  150,  150,  150,
      150,  115,   79,  151,  151,  151,  151,  151,  151,  151,
      151,  117,  346,  346,  115,   79,  152,  152,  215,  215,
      215,  215,  215,  215,  138,  152,  152,  152,  152,  153,
      153,  154,  155,  155,  155,  155,  155,   78,   79,   78,
       79, 1274,  156,  156,  342,  342,  343,  138, 1270,  218,
     1267,  156,  156,  156,  156,  157,  157,  157,  157,  157,

      157,  157,  157,  163, 1258,  165,  165,  165,  165,  165,
      166,  167,  167,   78,   79,  171,  171,  172,  173,  173,
      173,  173,  173,  352,  352,  353,  115,   79,  174,  174,
      222,  222,  222,  222,  222,  222,  138,  174,  174,  174,
      174,  115,   79,  175,  175,  175,  175,  175,  175,  175,
      175,  138,   78,   79,   78,   79,  176,  176,  356,  356,
      357, 1238,  117, 1236,  194,  176,  176,  176,  176,  177,
      177,  178,  179,  179,  179,  179,  179,  192,   79,   78,
       79, 1235,  180,  180,  364,  364, 1216,  194, 1208,  211,
     1204,  180,  180,  180,  180,  181,  181,  181,  181,  181,

      181,  181,  181,  186, 1200,  188,  188,  188,  188,  188,
      189,  190,  190,  192,   79,  193,  193,  193,  193,  193,
      193,  193,  193,  194,  115,   79,   78,   79,  195,  195,
      370,  370,  371, 1197,  211, 1180,  138,  195,  195,  195,
      195,  196,  196,  196,  196,  196,  197,  198,  198,  163,
     1176,  206,  206,  206,  206,  206,  206,  115,   79,  210,
      210,  210,  210,  210,  210,  210,  210,  211,   78,   79,
      192,   79,  212,  212,  308,  308,  308, 1145,  218, 1143,
      218,  212,  212,  212,  212,  213,  213,  213,  213,  213,
      214,  215,  215,  192,   79,  217,  217,  217,  217,  217,

      217,  217,  217,  218,  245,  246,  192,   79,  219,  219,
      285,  285,  285,  285,  285,  285,  194,  219,  219,  219,
      219,  220,  220,  220,  220,  220,  221,  222,  222,  226,
      226,  227,  228,  228,  228,  228,  228,   78,   79,   78,
       79, 1142,  229,  229,  381,  381,  279,  194, 1107,  299,
     1026,  229,  229,  229,  229,  186,  337,  233,  233,  233,
      233,  233,  233,  112, 1104,  234,  234,  235,  236,  236,
      236,  236,  236,  192,   79,  237,  237,  237,  237,  237,
      237,  237,  237,  194,  388,  388,  192,   79,  238,  238,
      303,  303,  303,  303,  303,  303,  194,  238,  238,  238,

      238,  239,  239,  240,  241,  241,  241,  241,  241,  245,
      246,   78,   79, 1100,  242,  242, 1089, 1312, 1312,  395,
      395,  314, 1085,  242,  242,  242,  242,  243,  243,  243,
      243,  243,  243,  243,  243,  245,  246,  248,  248,  248,
      248,  248,  249,  250,  250,   78,   79,  254,  254,  255,
      256,  256,  256,  256,  256,  409,  409, 1081,  115,   79,
      257,  257,  318,  318,  318,  318,  318,  318,  211,  257,
      257,  257,  257,  115,   79,  258,  258,  258,  258,  258,
      258,  258,  258,  211,   78,   79,   78,   79,  259,  259,
       78,   79,   78,   79,  211, 1078,  321,  259,  259,  259,

      259,  260,  260,  261,  262,  262,  262,  262,  262,  501,
      501,  502,  115,   79,  263,  263,  325,  325,  325,  325,
      325,  325,  211,  263,  263,  263,  263,  264,  264,  264,
      264,  264,  264,  264,  264,  192,   79,  265,  265,  265,
      265,  265,  265,  265,  265,  218,  192,   79,   78,   79,
      266,  266,  505,  505,  506,  988,  218, 1029,  218,  266,
      266,  266,  266,  267,  267,  268,  269,  269,  269,  269,
      269,  509,  509, 1026,   78,   79,  270,  270,  332,  332,
      332,  332,  332,  332,  328,  270,  270,  270,  270,  271,
      271,  271,  271,  271,  271,  271,  271,  275,  275,  276,

      277,  277,  277,  277,  277,  192,   79,   78,   79, 1024,
      278,  278,   78,   79,  279,  218, 1023,  194,  988,  278,
      278,  278,  278,  279,  281,  280,  280,  280,  280,  280,
      280,  280,  280,  281,   78,   79,   78,   79,  282,  282,
      341,  341,  341,  341,  341,  341,  299,  282,  282,  282,
      282,  283,  283,  283,  283,  283,  284,  285,  285,  286,
     1312,  288,  288,  288,  288,  288,  289,  290,  290,  291,
      281,  293,  293,  293,  293,  293,  294,  295,  295,  297,
       79,  298,  298,  298,  298,  298,  298,  298,  298,  299,
      297,   79,   78,   79,  300,  300,   78,   79,  528,  528,

      299,  986,  314,  300,  300,  300,  300,  301,  301,  301,
      301,  301,  302,  303,  303,  306,  306,  306,  307,  308,
      308,  308,  308,  115,   79,  313,  313,  313,  313,  313,
      313,  313,  313,  314,  115,   79,   78,   79,  315,  315,
      516,  516,  517,  985,  314,  935,  211,  315,  315,  315,
      315,  316,  316,  316,  316,  316,  317,  318,  318,  192,
       79,  320,  320,  320,  320,  320,  320,  320,  320,  321,
       78,   79,  192,   79,  322,  322,  520,  520,  521,  924,
      321,  920,  321,  322,  322,  322,  322,  323,  323,  323,
      323,  323,  324,  325,  325,  297,   79,  327,  327,  327,

      327,  327,  327,  327,  327,  328,   78,   79,   78,   79,
      329,  329,  534,  534,  535,  909,  218,  905,  328,  329,
      329,  329,  329,  330,  330,  330,  330,  330,  331,  332,
      332,  279,  901,  336,  336,  336,  336,  336,  336,  336,
      336,  337,  297,   79,  279,  898,  338,  338,  546,  546,
      553,  553,  328,  803,  281,  338,  338,  338,  338,  339,
      339,  339,  339,  339,  340,  341,  341,  279,  279,  345,
      345,  345,  345,  345,  345,  345,  345,  281,  337,  851,
      297,   79,  346,  346,  427,  427,  427,  427,  427,  427,
      299,  346,  346,  346,  346,  347,  347,  348,  349,  349,

      349,  349,  349,   78,   79,   78,   79,  803,  350,  350,
      560,  560,  801,  299,  800,  445,  741,  350,  350,  350,
      350,  351,  351,  351,  351,  351,  351,  351,  351,  286,
      727,  355,  355,  355,  355,  355,  355,  291,  723,  359,
      359,  359,  359,  359,  359,  112,  712,  360,  360,  361,
      362,  362,  362,  362,  362,  297,   79,  363,  363,  363,
      363,  363,  363,  363,  363,  299,  567,  567,  297,   79,
      364,  364,  449,  449,  449,  449,  449,  449,  299,  364,
      364,  364,  364,  365,  365,  366,  367,  367,  367,  367,
      367,  581,  581,  708,   78,   79,  368,  368,  463,  463,

      463,  463,  463,  463,  459,  368,  368,  368,  368,  369,
      369,  369,  369,  369,  369,  369,  369,   78,   79,  376,
      376,  377,  378,  378,  378,  378,  378,  115,   79,   78,
       79,  704,  379,  379,  588,  588,  536,  314,  522,  314,
      518,  379,  379,  379,  379,  115,   79,  380,  380,  380,
      380,  380,  380,  380,  380,  314,   78,   79,   78,   79,
      381,  381,  470,  470,  470,  470,  470,  470,  466,  381,
      381,  381,  381,  382,  382,  383,  384,  384,  384,  384,
      384,  115,   79,  192,   79,  507,  385,  385,   78,   79,
      503,  314,  308,  321,  372,  385,  385,  385,  385,  386,

      386,  386,  386,  386,  386,  386,  386,  192,   79,  387,
      387,  387,  387,  387,  387,  387,  387,  321,   78,   79,
       78,   79,  388,  388,   78,   79,  714,  714,  321,  358,
      473,  388,  388,  388,  388,  389,  389,  390,  391,  391,
      391,  391,  391,  702,  702,  703,  192,   79,  392,  392,
      477,  477,  477,  477,  477,  477,  321,  392,  392,  392,
      392,  393,  393,  393,  393,  393,  393,  393,  393,  297,
       79,  394,  394,  394,  394,  394,  394,  394,  394,  328,
      297,   79,   78,   79,  395,  395,  706,  706,  707,  354,
      328,  344,  328,  395,  395,  395,  395,  396,  396,  397,

      398,  398,  398,  398,  398,  710,  710,  711,   78,   79,
      399,  399,  484,  484,  484,  484,  484,  484,  480,  399,
      399,  399,  399,  400,  400,  400,  400,  400,  400,  400,
      400,  404,  404,  405,  406,  406,  406,  406,  406,  297,
       79, 1312,  279,  232,  407,  407,   78,   79,  421,  328,
      205,  337,  337,  407,  407,  407,  407,  279,  423,  408,
      408,  408,  408,  408,  408,  408,  408,  337,   78,   79,
       78,   79,  409,  409,  493,  493,  493,  493,  493,  493,
      299,  409,  409,  409,  409,  410,  410,  411,  412,  412,
      412,  412,  412,   78,   79,  185,   78,   79,  413,  413,

      500,  500,  500,  500,  500,  500,  445,  413,  413,  413,
      413,  414,  414,  414,  414,  414,  414,  414,  414,  415,
      279,  417,  417,  417,  417,  417,  418,  419,  419,  421,
      489,  422,  422,  422,  422,  422,  422,  422,  422,  423,
       78,   79,  443,   79,  424,  424,  733,  733, 1312, 1312,
       78,   79,  445,  424,  424,  424,  424,  425,  425,  425,
      425,  425,  426,  427,  427,   78,   79,  429,  429,  429,
      429,  429,  430,  431,  431,  432,  421,  434,  434,  434,
      434,  434,  435,  436,  436,  437,  496,  439,  439,  439,
      439,  439,  440,  441,  441,  443,   79,  444,  444,  444,

      444,  444,  444,  444,  444,  445,   78,   79,  115,   79,
      446,  446,  721,  721,  722,  145,  459,  131,  459,  446,
      446,  446,  446,  447,  447,  447,  447,  447,  448,  449,
      449,  450,  113,  452,  452,  452,  452,  452,  453,  454,
      454,  115,   79,  458,  458,  458,  458,  458,  458,  458,
      458,  459,   78,   79,   78,   79,  460,  460,  725,  725,
      726,   97,  314,   40,  466,  460,  460,  460,  460,  461,
      461,  461,  461,  461,  462,  463,  463,  192,   79,  465,
      465,  465,  465,  465,  465,  465,  465,  466,  192,   79,
       78,   79,  467,  467,  739,  739,  740, 1287,  466, 1278,

      321,  467,  467,  467,  467,  468,  468,  468,  468,  468,
      469,  470,  470,  297,   79,  472,  472,  472,  472,  472,
      472,  472,  472,  473,   78,   79,  297,   79,  474,  474,
      753,  753,  757,  757,  473, 1287,  473,  474,  474,  474,
      474,  475,  475,  475,  475,  475,  476,  477,  477,  443,
       79,  479,  479,  479,  479,  479,  479,  479,  479,  480,
       78,   79,   78,   79,  481,  481,  761,  761,  765,  765,
      328, 1287,  480,  481,  481,  481,  481,  482,  482,  482,
      482,  482,  483,  484,  484,  279, 1287,  488,  488,  488,
      488,  488,  488,  488,  488,  489,  443,   79,  421, 1278,

      490,  490,  769,  769,  780,  780,  480, 1278,  423,  490,
      490,  490,  490,  491,  491,  491,  491,  491,  492,  493,
      493,  421, 1312,  495,  495,  495,  495,  495,  495,  495,
      495,  496,  423, 1278,  421, 1244,  497,  497,  611,  611,
      611,  611,  611,  611,  423,  497,  497,  497,  497,  498,
      498,  498,  498,  498,  499,  500,  500,  415, 1287,  504,
      504,  504,  504,  504,  504,  421, 1287,  508,  508,  508,
      508,  508,  508,  508,  508,  423,  443,   79,   78,   79,
      509,  509,  787,  787,  794,  794,  445, 1239,  445,  509,
      509,  509,  509,  510,  510,  511,  512,  512,  512,  512,

      512,  802,  803,  803,   78,   79,  513,  513,  633,  633,
      633,  633,  633,  633,  629,  513,  513,  513,  513,  514,
      514,  514,  514,  514,  514,  514,  514,  432, 1222,  519,
      519,  519,  519,  519,  519,  437, 1278,  523,  523,  523,
      523,  523,  523,  112, 1278,  524,  524,  525,  526,  526,
      526,  526,  526,  443,   79,  527,  527,  527,  527,  527,
      527,  527,  527,  445,  443,   79,   78,   79,  528,  528,
       78,   79,   78,   79,  445, 1159,  646,  528,  528,  528,
      528,  529,  529,  530,  531,  531,  531,  531,  531,   78,
       79, 1244,  115,   79,  532,  532,  650,  650,  650,  650,

      650,  650,  459,  532,  532,  532,  532,  533,  533,  533,
      533,  533,  533,  533,  533,  450, 1244,  537,  537,  537,
      537,  537,  537,   78,   79,  541,  541,  542,  543,  543,
      543,  543,  543,   78,   79,   78,   79, 1244,  544,  544,
      849,  849,  850,  459, 1239,  653, 1239,  544,  544,  544,
      544,  115,   79,  545,  545,  545,  545,  545,  545,  545,
      545,  459,  853,  853,  115,   79,  546,  546,  657,  657,
      657,  657,  657,  657,  459,  546,  546,  546,  546,  547,
      547,  548,  549,  549,  549,  549,  549,  192,   79,   78,
       79, 1239,  550,  550,   78,   79, 1116,  466, 1222,  466,

     1222,  550,  550,  550,  550,  551,  551,  551,  551,  551,
      551,  551,  551,  192,   79,  552,  552,  552,  552,  552,
      552,  552,  552,  466,   78,   79,   78,   79,  553,  553,
      664,  664,  664,  664,  664,  664,  660,  553,  553,  553,
      553,  554,  554,  555,  556,  556,  556,  556,  556,  192,
       79,  297,   79, 1222,  557,  557,   78,   79, 1168,  466,
     1244,  473, 1244,  557,  557,  557,  557,  558,  558,  558,
      558,  558,  558,  558,  558,  297,   79,  559,  559,  559,
      559,  559,  559,  559,  559,  473,   78,   79,   78,   79,
      560,  560,   78,   79,   78,   79,  473, 1151,  667,  560,

      560,  560,  560,  561,  561,  562,  563,  563,  563,  563,
      563,   78,   79, 1239,  297,   79,  564,  564,  671,  671,
      671,  671,  671,  671,  473,  564,  564,  564,  564,  565,
      565,  565,  565,  565,  565,  565,  565,  443,   79,  566,
      566,  566,  566,  566,  566,  566,  566,  480,  443,   79,
       78,   79,  567,  567,  899,  899,  900, 1239,  480, 1146,
      480,  567,  567,  567,  567,  568,  568,  569,  570,  570,
      570,  570,  570,  903,  903,  904,   78,   79,  571,  571,
      678,  678,  678,  678,  678,  678,  674,  571,  571,  571,
      571,  572,  572,  572,  572,  572,  572,  572,  572,  576,

      576,  577,  578,  578,  578,  578,  578,  443,   79,  279,
     1312, 1073,  579,  579,  911,  911,  279,  480, 1066,  489,
      489,  579,  579,  579,  579,  279,  489,  580,  580,  580,
      580,  580,  580,  580,  580,  489,   78,   79,  421, 1059,
      581,  581,  687,  687,  687,  687,  687,  687,  496,  581,
      581,  581,  581,  582,  582,  583,  584,  584,  584,  584,
      584,  907,  907,  908, 1312, 1052,  585,  585,  694,  694,
      694,  694,  694,  694,  496,  585,  585,  585,  585,  586,
      586,  586,  586,  586,  586,  586,  586,  421,  421,  587,
      587,  587,  587,  587,  587,  587,  587,  496,  496, 1045,

      605, 1222,  588,  588,  701,  701,  701,  701,  701,  701,
      607,  588,  588,  588,  588,  589,  589,  590,  591,  591,
      591,  591,  591,   78,   79,   78,   79, 1222,  592,  592,
     1108, 1312, 1312,   78,   79,  445, 1168,  592,  592,  592,
      592,  593,  593,  593,  593,  593,  593,  593,  593,  594,
      279,  596,  596,  596,  596,  596,  597,  598,  598,  599,
      683,  601,  601,  601,  601,  601,  602,  603,  603,  605,
     1168,  606,  606,  606,  606,  606,  606,  606,  606,  607,
       78,   79,  627,   79,  608,  608,   78,   79,  930,  930,
      629, 1168,  629,  608,  608,  608,  608,  609,  609,  609,

      609,  609,  610,  611,  611,   78,   79,  613,  613,  613,
      613,  613,  614,  615,  615,  616,  421,  618,  618,  618,
      618,  618,  619,  620,  620,  621,  690,  623,  623,  623,
      623,  623,  624,  625,  625,  627,   79,  628,  628,  628,
      628,  628,  628,  628,  628,  629,   78,   79,   78,   79,
      630,  630,  750,  750,  750,  750,  750,  750,  646,  630,
      630,  630,  630,  631,  631,  631,  631,  631,  632,  633,
      633,  634, 1159,  636,  636,  636,  636,  636,  637,  638,
      638,  640,  640,  641,  642,  642,  642,  642,  642,  643,
      115,   79,   78,   79,  644,  644,  918,  918,  919, 1002,

      646, 1151,  459,  644,  644,  644,  644,  115,   79,  645,
      645,  645,  645,  645,  645,  645,  645,  646,   78,   79,
      192,   79,  647,  647,  922,  922,  923, 1151,  653, 1151,
      653,  647,  647,  647,  647,  648,  648,  648,  648,  648,
      649,  650,  650,  192,   79,  652,  652,  652,  652,  652,
      652,  652,  652,  653,   78,   79,   78,   79,  654,  654,
      933,  933,  934, 1146,  466, 1146,  660,  654,  654,  654,
      654,  655,  655,  655,  655,  655,  656,  657,  657,  297,
       79,  659,  659,  659,  659,  659,  659,  659,  659,  660,
      297,   79,   78,   79,  661,  661,   78,   79,   78,   79,

      660, 1146,  473,  661,  661,  661,  661,  662,  662,  662,
      662,  662,  663,  664,  664,  443,   79,  666,  666,  666,
      666,  666,  666,  666,  666,  667,   78,   79,  443,   79,
      668,  668,   78,   79,   78,   79,  667, 1116,  667,  668,
      668,  668,  668,  669,  669,  669,  669,  669,  670,  671,
      671,  627,   79,  673,  673,  673,  673,  673,  673,  673,
      673,  674,   78,   79,   78,   79,  675,  675,   78,   79,
       78,   79,  480, 1184,  674,  675,  675,  675,  675,  676,
      676,  676,  676,  676,  677,  678,  678,  279,  952,  682,
      682,  682,  682,  682,  682,  682,  682,  683,  627,   79,

      605, 1108,  684,  684,   78,   79,  958,  958,  674, 1108,
      697,  684,  684,  684,  684,  685,  685,  685,  685,  685,
      686,  687,  687,  421,  605,  689,  689,  689,  689,  689,
      689,  689,  689,  690,  607, 1312,  605, 1108,  691,  691,
      965,  965,  972,  972, 1016,  607,  607,  691,  691,  691,
      691,  692,  692,  692,  692,  692,  693,  694,  694,  605,
      744,  696,  696,  696,  696,  696,  696,  696,  696,  697,
      746, 1168,  627,   79,  698,  698,  821,  821,  821,  821,
      821,  821,  629,  698,  698,  698,  698,  699,  699,  699,
      699,  699,  700,  701,  701,  594, 1168,  705,  705,  705,

      705,  705,  705,  599, 1011,  709,  709,  709,  709,  709,
      709,  605, 1159,  713,  713,  713,  713,  713,  713,  713,
      713,  607,   78,   79,   78,   79,  714,  714,  979,  979,
       78,   79,  629, 1151,  839,  714,  714,  714,  714,  715,
      715,  716,  717,  717,  717,  717,  717,  987,  988,  988,
      627,   79,  718,  718,  843,  843,  843,  843,  843,  843,
      629,  718,  718,  718,  718,  719,  719,  719,  719,  719,
      719,  719,  719,  616, 1151,  724,  724,  724,  724,  724,
      724,  621,  994,  728,  728,  728,  728,  728,  728,  112,
     1146,  729,  729,  730,  731,  731,  731,  731,  731,  627,

       79,  732,  732,  732,  732,  732,  732,  732,  732,  629,
      115,   79,   78,   79,  733,  733,   78,   79,   78,   79,
      646, 1146,  646,  733,  733,  733,  733,  734,  734,  735,
      736,  736,  736,  736,  736,  115,   79,  192,   79,  989,
      737,  737,   78,   79, 1073,  646,  893,  653, 1066,  737,
      737,  737,  737,  738,  738,  738,  738,  738,  738,  738,
      738,  634,  886,  742,  742,  742,  742,  742,  742,  744,
     1059,  745,  745,  745,  745,  745,  745,  745,  745,  746,
       78,   79,  192,   79,  747,  747, 1025, 1026, 1026,  879,
      653, 1052,  653,  747,  747,  747,  747,  748,  748,  748,

      748,  748,  749,  750,  750,  115,   79,  752,  752,  752,
      752,  752,  752,  752,  752,  646,  297,   79,   78,   79,
      753,  753, 1027, 1027, 1028,  872,  660, 1045,  660,  753,
      753,  753,  753,  755,  755,  755,  755,  755,  755,  755,
      755,  192,   79,  756,  756,  756,  756,  756,  756,  756,
      756,  653,  297,   79,  443,   79,  757,  757,   78,   79,
       78,   79,  660, 1116,  667,  757,  757,  757,  757,  759,
      759,  759,  759,  759,  759,  759,  759,  297,   79,  760,
      760,  760,  760,  760,  760,  760,  760,  660,   78,   79,
      443,   79,  761,  761,   78,   79,   78,   79,  667,  952,

      667,  761,  761,  761,  761,  763,  763,  763,  763,  763,
      763,  763,  763,  443,   79,  764,  764,  764,  764,  764,
      764,  764,  764,  667,  627,   79,   78,   79,  765,  765,
       78,   79,   78,   79,  674,  937,  674,  765,  765,  765,
      765,  767,  767,  767,  767,  767,  767,  767,  767,  627,
       79,  768,  768,  768,  768,  768,  768,  768,  768,  674,
      627,   79,  279, 1108,  769,  769,   78,   79, 1091, 1091,
      674, 1108,  683,  769,  769,  769,  769,  771,  771,  771,
      771,  771,  771,  771,  771,  775,  775,  776,  777,  777,
      777,  777,  777, 1079, 1079, 1080, 1312, 1016,  778,  778,

      876,  876,  876,  876,  876,  876,  683,  778,  778,  778,
      778,  279,  279,  779,  779,  779,  779,  779,  779,  779,
      779,  683,  683, 1016,  421, 1016,  780,  780,  883,  883,
      883,  883,  883,  883,  690,  780,  780,  780,  780,  781,
      781,  782,  783,  783,  783,  783,  783, 1312,  421,  605,
     1312, 1011,  784,  784, 1083, 1083, 1084,  690,  690,  697,
      697,  784,  784,  784,  784,  785,  785,  785,  785,  785,
      785,  785,  785,  421,  605,  786,  786,  786,  786,  786,
      786,  786,  786,  690,  697, 1011,  815, 1011,  787,  787,
      890,  890,  890,  890,  890,  890,  817,  787,  787,  787,

      787,  788,  788,  789,  790,  790,  790,  790,  790, 1087,
     1087, 1088,   78,   79,  791,  791,  897,  897,  897,  897,
      897,  897,  629,  791,  791,  791,  791,  792,  792,  792,
      792,  792,  792,  792,  792,  605,  744,  793,  793,  793,
      793,  793,  793,  793,  793,  697,  746, 1002,   78,   79,
      794,  794,  898,  898,  898,  898,  898,  898,  839,  794,
      794,  794,  794,  795,  795,  796,  797,  797,  797,  797,
      797,   78,   79,  837,   79,  817,  798,  798,  994, 1312,
     1312,   78,   79,  839,  994,  798,  798,  798,  798,  799,
      799,  799,  799,  799,  799,  799,  799,  804, 1312,  806,

      806,  806,  806,  806,  807,  808,  808,  809,  746,  811,
      811,  811,  811,  811,  812,  813,  813,  815,  744,  816,
      816,  816,  816,  816,  816,  816,  816,  817,  746,   78,
       79,  994,  818,  818,   78,   79,   78,   79,  989,  646,
      989,  818,  818,  818,  818,  819,  819,  819,  819,  819,
      820,  821,  821,   78,   79,  823,  823,  823,  823,  823,
      824,  825,  825,  826,  279,  828,  828,  828,  828,  828,
      829,  830,  830,  831,  872,  833,  833,  833,  833,  833,
      834,  835,  835,  837,   79,  838,  838,  838,  838,  838,
      838,  838,  838,  839,   78,   79,   78,   79,  840,  840,

     1098, 1098, 1099,  989,  653, 1073,  660,  840,  840,  840,
      840,  841,  841,  841,  841,  841,  842,  843,  843,  844,
      421,  846,  846,  846,  846,  846,  847,  848,  848,  744,
      879,  852,  852,  852,  852,  852,  852,  852,  852,  746,
       78,   79,   78,   79,  853,  853, 1102, 1102, 1103, 1066,
      667, 1059,  674,  853,  853,  853,  853,  856,  856,  856,
      856,  856,  856,  856,  856,  279,  605,  871,  871,  871,
      871,  871,  871,  871,  871,  872,  886,  815,  815, 1052,
      873,  873,   78,   79,   78,   79, 1045,  893,  817,  873,
      873,  873,  873,  874,  874,  874,  874,  874,  875,  876,

      876,  421, 1312,  878,  878,  878,  878,  878,  878,  878,
      878,  879,  817,  952,  815,  774,  880,  880, 1006, 1006,
     1006, 1006, 1006, 1006,  817,  880,  880,  880,  880,  881,
      881,  881,  881,  881,  882,  883,  883,  605,  746,  885,
      885,  885,  885,  885,  885,  885,  885,  886,  837,   79,
       78,   79,  887,  887,   78,   79,   78,   79,  839,  937,
      839,  887,  887,  887,  887,  888,  888,  888,  888,  888,
      889,  890,  890,  815,  937,  892,  892,  892,  892,  892,
      892,  892,  892,  893,  837,   79,  279,  937,  894,  894,
       78,   79,   78,   79,  839,  844,  872,  894,  894,  894,

      894,  895,  895,  895,  895,  895,  896,  897,  897,  804,
     1016,  902,  902,  902,  902,  902,  902,  809, 1016,  906,
      906,  906,  906,  906,  906,  815, 1312,  910,  910,  910,
      910,  910,  910,  910,  910,  817,  872,  831,  279, 1011,
      911,  911, 1049, 1049, 1049, 1049, 1049, 1049,  872,  911,
      911,  911,  911,  912,  912,  913,  914,  914,  914,  914,
      914,   78,   79, 1011,  421,  826,  915,  915, 1056, 1056,
     1056, 1056, 1056, 1056,  879,  915,  915,  915,  915,  916,
      916,  916,  916,  916,  916,  916,  916,  826, 1002,  921,
      921,  921,  921,  921,  921,  831,  994,  925,  925,  925,

      925,  925,  925,  112,  994,  926,  926,  927,  928,  928,
      928,  928,  928,  837,   79,  929,  929,  929,  929,  929,
      929,  929,  929,  839, 1312,  421,  605,  809,  930,  930,
       78,   79, 1123, 1123,  879,  879,  886,  930,  930,  930,
      930,  932,  932,  932,  932,  932,  932,  932,  932,  844,
      989,  936,  936,  936,  936,  936,  936,  937,  989,  939,
      939,  939,  939,  939,  940,  941,  941,  953,  953,  954,
      955,  955,  955,  955,  955, 1127, 1127,  804, 1312,  893,
      956,  956, 1063, 1063, 1063, 1063, 1063, 1063,  886,  956,
      956,  956,  956,  279,  605,  957,  957,  957,  957,  957,

      957,  957,  957,  872,  886,  697,  815,  886,  958,  958,
     1070, 1070, 1070, 1070, 1070, 1070,  893,  958,  958,  958,
      958,  959,  959,  960,  961,  961,  961,  961,  961, 1312,
      815, 1000,   78,   79,  962,  962, 1131, 1131,  690,  893,
      893, 1002,  839,  962,  962,  962,  962,  963,  963,  963,
      963,  963,  963,  963,  963,  421,  279,  964,  964,  964,
      964,  964,  964,  964,  964,  879, 1045,  879,  421,  683,
      965,  965, 1077, 1077, 1077, 1077, 1077, 1077, 1052,  965,
      965,  965,  965,  966,  966,  967,  968,  968,  968,  968,
      968, 1135, 1135,  872,  605,  952,  969,  969, 1078, 1078,

     1078, 1078, 1078, 1078, 1059,  969,  969,  969,  969,  970,
      970,  970,  970,  970,  970,  970,  970,  605,  774,  971,
      971,  971,  971,  971,  971,  971,  971,  886,   78,   79,
      815,  937,  972,  972, 1139, 1139, 1312, 1312,   78,   79,
     1066,  972,  972,  972,  972,  973,  973,  974,  975,  975,
      975,  975,  975, 1144, 1145, 1145, 1000,  937,  976,  976,
     1107, 1107, 1107, 1107, 1107, 1107, 1073,  976,  976,  976,
      976,  977,  977,  977,  977,  977,  977,  977,  977,  815,
     1000,  978,  978,  978,  978,  978,  978,  978,  978,  893,
     1002,  844, 1312,  844,  979,  979, 1120, 1120, 1120, 1120,

     1120, 1120, 1002,  979,  979,  979,  979,  980,  980,  981,
      982,  982,  982,  982,  982,   78,   79,  844, 1000,  831,
      983,  983, 1163, 1163, 1163, 1163, 1163, 1163, 1002,  983,
      983,  983,  983,  984,  984,  984,  984,  984,  984,  984,
      984,  989, 1114,  991,  991,  991,  991,  991,  992,  993,
      993,  994, 1116,  996,  996,  996,  996,  996,  997,  998,
      998, 1000,  831, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1002,   78,   79,   78,   79, 1003, 1003, 1174, 1174,
     1175, 1178, 1178, 1179,  831, 1003, 1003, 1003, 1003, 1004,
     1004, 1004, 1004, 1004, 1005, 1006, 1006,   78,   79, 1008,

     1008, 1008, 1008, 1008, 1009, 1010, 1010, 1011,  279, 1013,
     1013, 1013, 1013, 1013, 1014, 1015, 1015, 1016, 1045, 1018,
     1018, 1018, 1018, 1018, 1019, 1020, 1020,  937,  826, 1030,
     1030, 1030, 1030, 1030, 1030, 1039, 1039, 1040, 1041, 1041,
     1041, 1041, 1041, 1042, 1182, 1182, 1312,  826, 1043, 1043,
     1210, 1210,  279, 1198, 1198, 1199, 1045, 1043, 1043, 1043,
     1043,  279, 1045, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1045,  421, 1312,  421,  826, 1046, 1046, 1202, 1202,
     1203,  817, 1052, 1052, 1052, 1046, 1046, 1046, 1046, 1047,
     1047, 1047, 1047, 1047, 1048, 1049, 1049,  421,  605, 1051,

     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1052, 1059, 1312,
      605,  607, 1053, 1053, 1206, 1206, 1207,   78,   79, 1059,
     1059, 1053, 1053, 1053, 1053, 1054, 1054, 1054, 1054, 1054,
     1055, 1056, 1056,  605,  815, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1059, 1066, 1312,  815,  809, 1060, 1060,
       78,   79,   78,   79,  809, 1066, 1066, 1060, 1060, 1060,
     1060, 1061, 1061, 1061, 1061, 1061, 1062, 1063, 1063,  815,
     1000, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1066,
     1073, 1312, 1000,  809, 1067, 1067, 1214, 1214, 1215,   78,
       79, 1073, 1073, 1067, 1067, 1067, 1067, 1068, 1068, 1068,

     1068, 1068, 1069, 1070, 1070, 1000, 1157, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1073, 1159,   78,   79,  804,
     1074, 1074, 1197, 1197, 1197, 1197, 1197, 1197,  804, 1074,
     1074, 1074, 1074, 1075, 1075, 1075, 1075, 1075, 1076, 1077,
     1077,  989,  804, 1082, 1082, 1082, 1082, 1082, 1082,  994,
      893, 1086, 1086, 1086, 1086, 1086, 1086, 1000,  886, 1090,
     1090, 1090, 1090, 1090, 1090, 1090, 1090, 1002,   78,   79,
       78,   79, 1091, 1091,   78,   79, 1312, 1312, 1237, 1238,
     1238, 1091, 1091, 1091, 1091, 1092, 1092, 1093, 1094, 1094,
     1094, 1094, 1094, 1114, 1312, 1114, 1157,  879, 1095, 1095,

       78,   79,  872, 1116, 1116, 1116, 1159, 1095, 1095, 1095,
     1095, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1011,
      870, 1101, 1101, 1101, 1101, 1101, 1101, 1016,  774, 1105,
     1105, 1105, 1105, 1105, 1105, 1108, 1312, 1110, 1110, 1110,
     1110, 1110, 1111, 1112, 1112, 1114, 1159, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1116, 1157,   78,   79,  575,
     1117, 1117,   78,   79,   78,   79, 1159,   78,   79, 1117,
     1117, 1117, 1117, 1118, 1118, 1118, 1118, 1118, 1119, 1120,
     1120,  279,  746, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1045,   78,   79,   78,   79, 1123, 1123,   78,   79,

     1312, 1312, 1256, 1256, 1257, 1123, 1123, 1123, 1123, 1125,
     1125, 1125, 1125, 1125, 1125, 1125, 1125,  421,  855, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1052, 1268, 1268,
     1269,  540, 1127, 1127, 1267, 1267, 1267, 1267, 1267, 1267,
      634, 1127, 1127, 1127, 1127, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1129,  605,  844, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1059, 1272, 1272, 1273,  844, 1131, 1131,
       78,   79,   78,   79, 1285, 1286, 1286, 1131, 1131, 1131,
     1131, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,  815,
      831, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1066,

       78,   79,   78,   79, 1135, 1135,  831,  621, 1312, 1312,
     1293, 1293, 1294, 1135, 1135, 1135, 1135, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1000,  826, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1073, 1298, 1298, 1299,  826,
     1139, 1139, 1297, 1297, 1297, 1297, 1297, 1297,  616, 1139,
     1139, 1139, 1139, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
     1141, 1146,  817, 1148, 1148, 1148, 1148, 1148, 1149, 1150,
     1150, 1151,  809, 1153, 1153, 1153, 1153, 1153, 1154, 1155,
     1155, 1157,  809, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1159, 1304, 1305, 1305,  599, 1160, 1160, 1308, 1309,

     1309,  804,  804,  594,  697, 1160, 1160, 1160, 1160, 1161,
     1161, 1161, 1161, 1161, 1162, 1163, 1163,   78,   79, 1165,
     1165, 1165, 1165, 1165, 1166, 1167, 1167, 1168,  496, 1170,
     1170, 1170, 1170, 1170, 1171, 1172, 1172, 1108,  690, 1177,
     1177, 1177, 1177, 1177, 1177, 1114,  489, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1116,  683,  774,  575,  746,
     1182, 1182, 1310, 1310, 1310, 1310, 1310, 1310,  540, 1182,
     1182, 1182, 1182, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1146,  634, 1201, 1201, 1201, 1201, 1201, 1201, 1151,
      634, 1205, 1205, 1205, 1205, 1205, 1205, 1157,  634, 1209,

     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1159,  621,  621,
      621,  616, 1210, 1210, 1311, 1311, 1311, 1311, 1311, 1311,
      616, 1210, 1210, 1210, 1210, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1168,  616, 1217, 1217, 1217, 1217, 1217,
     1217,   78,   79, 1219, 1219, 1219, 1219, 1219, 1220, 1221,
     1221, 1222,  607, 1224, 1224, 1224, 1224, 1224, 1225, 1226,
     1226, 1239,  423, 1241, 1241, 1241, 1241, 1241, 1242, 1243,
     1243, 1244,  599, 1246, 1246, 1246, 1246, 1246, 1247, 1248,
     1248,   78,   79, 1252, 1252, 1252, 1252, 1252, 1253, 1254,
     1254, 1222,  599, 1259, 1259, 1259, 1259, 1259, 1259, 1239,

      599, 1271, 1271, 1271, 1271, 1271, 1271, 1244,  594, 1275,
     1275, 1275, 1275, 1275, 1275, 1278,  594, 1280, 1280, 1280,
     1280, 1280, 1281, 1282, 1282, 1287,  594, 1289, 1289, 1289,
     1289, 1289, 1290, 1291, 1291, 1278,  697, 1296, 1296, 1296,
     1296, 1296, 1296, 1287,  690, 1301, 1301, 1301, 1301, 1301,
     1301,   36,   36,   36,   36,   36,   36,   36,   36,   67,
      683,   67,   67,   67,   67,   67,   67,   74,   74,   74,
       73,   73,   73,   99,  681,   99,  102,  575,  102,  104,
      104,  104,  105,  105,  105,  118,  118,  118,  118,  118,
      132,  403,  132,  133,  540,  133,  133,  134,  134,  134,

      135,  135,  135,  139,  139,  139,  139,  139,  143,  143,
      143,  152,  152,  152,  152,  152,  164,  375,  164,  167,
      450,  167,  168,  168,  168,  169,  169,  169,  176,  176,
      176,  176,  176,  182,  182,  182,  187,  634,  187,  190,
      634,  190,  191,  191,  191,  191,  191,  195,  195,  195,
      195,  195,  206,  621,  206,  207,  207,  207,  208,  208,
      208,  212,  212,  212,  212,  212,  216,  216,  216,  216,
      216,  219,  219,  219,  219,  219,  223,  223,  223,  224,
      224,  224,  233,  621,  233,  238,  238,  238,  238,  238,
      247,  247,  247,  250,  250,  250,  251,  251,  251,  252,

      252,  252,  259,  259,  259,  259,  259,  266,  266,  266,
      266,  266,  272,  272,  272,  273,  273,  273,  282,  282,
      282,  287,  437,  287,  290,  616,  290,  292,  616,  292,
      295,  432,  295,  296,  296,  296,  296,  296,  300,  300,
      300,  300,  300,  309,  309,  309,  310,  310,  310,  311,
      311,  311,  315,  315,  315,  315,  315,  319,  319,  319,
      319,  319,  322,  322,  322,  322,  322,  326,  326,  326,
      326,  326,  329,  329,  329,  329,  329,  333,  333,  333,
      334,  334,  334,  338,  338,  338,  346,  346,  346,  290,
      607,  290,  355,  599,  355,  295,  599,  295,  359,  415,

      359,  364,  364,  364,  364,  364,   53,  594,   53,   53,
      373,  373,  373,  374,  374,  374,  381,  381,  381,  381,
      381,  388,  388,  388,  388,  388,  395,  395,  395,  395,
      395,  401,  401,  401,  402,  402,  402,  409,  409,  409,
      416,  594,  416,  419,  496,  419,  420,  337,  420,  420,
      420,  424,  424,  424,  428,  428,  428,  431,  431,  431,
      433,  489,  433,  436,  575,  436,  438,  403,  438,  441,
      540,  441,  442,  442,  442,  442,  442,  446,  446,  446,
      446,  446,  451,  375,  451,  454,  450,  454,  455,  455,
      455,  456,  456,  456,  460,  460,  460,  460,  460,  464,

      464,  464,  464,  464,  467,  467,  467,  467,  467,  471,
      471,  471,  471,  471,  474,  474,  474,  474,  474,  478,
      478,  478,  478,  478,  481,  481,  481,  481,  481,  485,
      485,  485,  486,  486,  486,  490,  490,  490,  494,  450,
      494,  494,  494,  497,  497,  497,  419,  450,  419,  504,
      437,  504,  509,  509,  509,  431,  431,  431,  515,  515,
      515,  436,  437,  436,  519,  437,  519,  441,  432,  441,
      523,  432,  523,  528,  528,  528,  528,  528,  454,  432,
      454,  537,  423,  537,  538,  538,  538,  539,  539,  539,
      546,  546,  546,  546,  546,  553,  553,  553,  553,  553,

      560,  560,  560,  560,  560,  567,  567,  567,  567,  567,
      573,  573,  573,  574,  574,  574,  581,  581,  581,  588,
      588,  588,  595,  281,  595,  598,  415,  598,  600,  415,
      600,  603,  415,  603,  604,  496,  604,  604,  604,  608,
      608,  608,  612,  612,  612,  615,  615,  615,  617,  489,
      617,  620,  487,  620,  622,  403,  622,  625,  274,  625,
      626,  626,  626,  626,  626,  630,  630,  630,  630,  630,
      635,  457,  635,  638,  375,  638,  639,  639,  639,  647,
      647,  647,  647,  647,  651,  651,  651,  651,  651,  654,
      654,  654,  654,  654,  658,  658,  658,  658,  658,  661,

      661,  661,  661,  661,  665,  665,  665,  665,  665,  668,
      668,  668,  668,  668,  672,  672,  672,  672,  672,  675,
      675,  675,  675,  675,  679,  679,  679,  680,  680,  680,
      684,  684,  684,  688,  253,  688,  688,  688,  691,  691,
      691,  695,  450,  695,  695,  695,  698,  698,  698,  598,
      450,  598,  705,  437,  705,  603,  437,  603,  709,  291,
      709,  714,  714,  714,  615,  615,  615,  720,  720,  720,
      620,  432,  620,  724,  432,  724,  625,  286,  625,  728,
      423,  728,  733,  733,  733,  733,  733,  638,  415,  638,
      742,  415,  742,  743,  743,  743,  751,  751,  751,  337,

      751,  747,  747,  747,  754,  403,  754,  753,  753,  753,
      753,  753,  758,  274,  758,  757,  757,  757,  757,  757,
      762,  375,  762,  761,  761,  761,  761,  761,  766,  253,
      766,  765,  765,  765,  765,  765,  770,  291,  770,  769,
      769,  769,  769,  769,  772,  772,  772,  773,  773,  773,
      780,  780,  780,  787,  787,  787,  794,  794,  794,  805,
      291,  805,  808,  291,  808,  810,  286,  810,  813,  286,
      813,  814,  286,  814,  814,  814,  818,  818,  818,  822,
      822,  822,  825,  825,  825,  827,  281,  827,  830,  337,
      830,  832,  335,  832,  835,  274,  835,  836,  836,  836,

      836,  836,  840,  840,  840,  840,  840,  845,  183,  845,
      848,  312,  848,  854,  854,  854,  853,  853,  853,  857,
      857,  857,  253,  857,  858,  858,  858,  858,  858,  859,
      859,  859,  170,  859,  860,  860,  860,  860,  860,  861,
      861,  861,  305,  861,  862,  862,  862,  862,  862,  863,
      863,  863,  304,  863,  864,  864,  864,  864,  864,  865,
      865,  865,  291,  865,  866,  866,  866,  866,  866,  867,
      867,  867,  291,  867,  868,  868,  868,  869,  869,  869,
      873,  873,  873,  877,  186,  877,  877,  877,  880,  880,
      880,  884,  286,  884,  884,  884,  887,  887,  887,  891,

      286,  891,  891,  891,  894,  894,  894,  808,  281,  808,
      902,  274,  902,  813,  183,  813,  906,  253,  906,  911,
      911,  911,  825,  825,  825,  917,  917,  917,  830,  170,
      830,  921,  163,  921,  835,  244,  835,  925,  186,  925,
      931,  186,  931,  930,  930,  930,  930,  930,  848,  186,
      848,  936,  225,  936,  938,  183,  938,  941,  209,  941,
      942,  170,  942,  942,  942,  943,  943,  943,  106,  943,
      944,  944,  944,  163,  944,  945,  945,  945,  163,  945,
      946,  946,  946,  163,  946,  947,  947,  947,  202,  947,
      948,  948,  948,  201,  948,  949,  949,  949,  200,  949,

      950,  950,  950,  951,  951,  951,  958,  958,  958,  965,
      965,  965,  972,  972,  972,  979,  979,  979,  990,  199,
      990,  993,  186,  993,  995,  186,  995,  998,  184,  998,
      999,  183,  999,  999,  999, 1003, 1003, 1003, 1007, 1007,
     1007, 1010, 1010, 1010, 1012,  170, 1012, 1015,  106, 1015,
     1017,   98, 1017, 1020,  163, 1020, 1021, 1021, 1021, 1021,
     1021, 1022, 1022, 1022,  163, 1022,  941,  162,  941, 1030,
      161, 1030, 1031, 1031, 1031,  160, 1031, 1032, 1032, 1032,
      158, 1032, 1033, 1033, 1033,   43, 1033, 1034, 1034, 1034,
      144, 1034, 1035, 1035, 1035,   68, 1035, 1036, 1036, 1036,

      136, 1036, 1037, 1037, 1037,  106, 1037, 1038, 1038, 1038,
     1046, 1046, 1046, 1050,   43, 1050, 1050, 1050, 1053, 1053,
     1053, 1057,   98, 1057, 1057, 1057, 1060, 1060, 1060, 1064,
       98, 1064, 1064, 1064, 1067, 1067, 1067, 1071,   98, 1071,
     1071, 1071, 1074, 1074, 1074,  993,  128,  993, 1082,  127,
     1082,  998,  126,  998, 1086,  125, 1086, 1091, 1091, 1091,
     1010, 1010, 1010, 1097, 1097, 1097, 1015,  124, 1015, 1101,
      123, 1101, 1020,  114, 1020, 1105,  112, 1105, 1106, 1106,
     1106,  111, 1106, 1109,  106, 1109, 1112,   43, 1112,  855,
      855,  855,   98,  855, 1113, 1113, 1113, 1121,   98, 1121,

     1117, 1117, 1117, 1124,   96, 1124, 1123, 1123, 1123, 1128,
       95, 1128, 1127, 1127, 1127, 1132,   94, 1132, 1131, 1131,
     1131, 1136,   93, 1136, 1135, 1135, 1135, 1140,   92, 1140,
     1139, 1139, 1139, 1147,   91, 1147, 1150,   90, 1150, 1152,
       89, 1152, 1155,   88, 1155, 1156,   87, 1156, 1156, 1156,
     1160, 1160, 1160, 1164, 1164, 1164, 1167, 1167, 1167, 1169,
       86, 1169, 1172,   85, 1172, 1173, 1173, 1173,   43, 1173,
     1112,   75, 1112, 1177,   38, 1177, 1183, 1183, 1183, 1182,
     1182, 1182, 1186,   66, 1186, 1187,   65, 1187, 1187, 1187,
     1188,   64, 1188, 1189,   63, 1189, 1189, 1189, 1190,   60,

     1190, 1191,   59, 1191, 1191, 1191, 1192,   55, 1192, 1193,
       54, 1193, 1193, 1193, 1194,   51, 1194, 1195,   50, 1195,
     1195, 1195, 1196,   49, 1196, 1201,   48, 1201, 1205,   39,
     1205, 1211,   38, 1211, 1210, 1210, 1210, 1213, 1213, 1213,
     1217, 1312, 1217, 1218, 1218, 1218, 1221, 1221, 1221, 1223,
     1312, 1223, 1226, 1312, 1226, 1227, 1312, 1227, 1227, 1227,
     1228, 1312, 1228, 1229, 1312, 1229, 1230, 1312, 1230, 1231,
     1312, 1231, 1232, 1312, 1232, 1233, 1312, 1233, 1234, 1312,
     1234, 1240, 1312, 1240, 1243, 1312, 1243, 1245, 1312, 1245,
     1248, 1312, 1248, 1249, 1312, 1249, 1249, 1249, 1250, 1312,

     1250, 1251, 1251, 1251, 1254, 1254, 1254, 1255, 1255, 1255,
     1259, 1312, 1259, 1260, 1312, 1260, 1261, 1312, 1261, 1262,
     1312, 1262, 1263, 1312, 1263, 1264, 1312, 1264, 1265, 1312,
     1265, 1266, 1312, 1266, 1271, 1312, 1271, 1275, 1312, 1275,
     1276, 1312, 1276, 1277, 1277, 1277, 1279, 1312, 1279, 1282,
     1312, 1282, 1184, 1312, 1184, 1288, 1312, 1288, 1291, 1312,
     1291, 1292, 1312, 1292, 1296, 1312, 1296, 1301, 1312, 1301,
        5, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,

     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312
    } ;

static yyconst short int yy_chk[6821] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    4,    4,   16, 1790,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   46,   46,   83,   83,   16,   16,
       18,   18,   18,   18,   18,   18,   83,   16,   16,   16,
       16,   17,   17,   17,   17,   17,   17,   17,   17,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   98,   98,

       98, 1789,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   28,   28,   31, 1788,   25,   25,
     1787,   28,   31,  114,  114,  114, 1786,   25,   25,   25,
       25,   41,  103,   41,   41,   41,   41,   41,   41,   41,
       41,   42,  103,   42,   42,   42,   42,   42,   42,   42,
       42,   42,  120,  120,  110,  110,   42,   42,   82,   82,
       82,   82,   82,   82,  110,   42,   42,   42,   42,   45,
       45,   45,   45,   45,   45,   45,   45,   47,   47,   47,

       47,   47,   47,   47,   47,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,  141,  141, 1785,  118,  118,
       48,   48,  109,  109,  109,  109,  109,  109,  118,   48,
       48,   48,   48,   52,   52,   52,   52,   52,   52,   52,
       52,  121,  121,  133,  139,  139,   52,   52,  163,  163,
      163,  121, 1784,  133,  139,   52,   52,   52,   52,   70,
      285,   70,   70,   70,   70,   70,   70,   70,   70,   72,
      285,   72,   72,   72,   72,   72,   72,   72,   72,   72,
      142,  142, 1783,  124,   72,   72,  186,  186,  186, 1781,
      142,  197,  197,   72,   72,   72,   72,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,  124,  203,  203,
      205,  205,   75,   75,  147,  147,  147,  147,  147,  147,
      147,   75,   75,   75,   75,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,  151,  151,  152,  152,
       80,   80,  214,  214,  221,  221,  151, 1780,  152,   80,
       80,   80,   80,   81,   81,   81,   81,   81,   81,   81,
       81,   84,   84,   84,   84,   84,   84,   84,   84,  247,
      247, 1778,  156,  156,   84,   84,  155,  155,  155,  155,
      155,  155,  156,   84,   84,   84,   84,  101, 1774,  101,
      101,  101,  101,  101,  101,  107,  107,  107,  107,  107,

      107,  107,  107,  107,  107,  107,  157,  157,  174,  174,
      107,  107,  248,  248,  250,  250,  157, 1773,  174,  107,
      107,  107,  107,  108,  108,  108,  108,  108,  108,  108,
      108,  115, 1772,  115,  115,  115,  115,  115,  115,  115,
      115,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  284,  284,  175,  175,  116,  116,  173,  173,
      173,  173,  173,  173,  175,  116,  116,  116,  116,  117,
      117,  117,  117,  117,  117,  117,  117,  176,  176,  180,
      180, 1765,  117,  117,  279,  279,  279,  176, 1763,  180,
     1762,  117,  117,  117,  117,  119,  119,  119,  119,  119,

      119,  119,  119,  130, 1753,  130,  130,  130,  130,  130,
      130,  130,  130,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  286,  286,  286,  181,  181,  136,  136,
      179,  179,  179,  179,  179,  179,  181,  136,  136,  136,
      136,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  191,  191,  195,  195,  137,  137,  291,  291,
      291, 1743,  191, 1742,  195,  137,  137,  137,  137,  138,
      138,  138,  138,  138,  138,  138,  138,  198,  198,  212,
      212, 1741,  138,  138,  302,  302, 1727,  198, 1723,  212,
     1721,  138,  138,  138,  138,  140,  140,  140,  140,  140,

      140,  140,  140,  149, 1719,  149,  149,  149,  149,  149,
      149,  149,  149,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  215,  215,  216,  216,  153,  153,
      305,  305,  305, 1718,  215, 1704,  216,  153,  153,  153,
      153,  154,  154,  154,  154,  154,  154,  154,  154,  166,
     1701,  166,  166,  166,  166,  166,  166,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  219,  219,
      222,  222,  171,  171,  307,  307,  307, 1689,  219, 1688,
      222,  171,  171,  171,  171,  172,  172,  172,  172,  172,
      172,  172,  172,  177,  177,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  309,  309,  237,  237,  177,  177,
      228,  228,  228,  228,  228,  228,  237,  177,  177,  177,
      177,  178,  178,  178,  178,  178,  178,  178,  178,  184,
      184,  184,  184,  184,  184,  184,  184,  238,  238,  242,
      242, 1687,  184,  184,  317,  317,  341,  238, 1670,  242,
     1669,  184,  184,  184,  184,  189,  341,  189,  189,  189,
      189,  189,  189,  192, 1665,  192,  192,  192,  192,  192,
      192,  192,  192,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  324,  324,  243,  243,  193,  193,
      241,  241,  241,  241,  241,  241,  243,  193,  193,  193,

      193,  194,  194,  194,  194,  194,  194,  194,  194,  249,
      249,  257,  257, 1662,  194,  194, 1658,  249,  249,  331,
      331,  257, 1655,  194,  194,  194,  194,  196,  196,  196,
      196,  196,  196,  196,  196,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  209,  209,  209,  209,  209,
      209,  209,  209,  209,  209,  340,  340, 1652,  258,  258,
      209,  209,  256,  256,  256,  256,  256,  256,  258,  209,
      209,  209,  209,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  259,  259,  263,  263,  210,  210,
      352,  352,  354,  354,  259, 1651,  263,  210,  210,  210,

      210,  211,  211,  211,  211,  211,  211,  211,  211,  415,
      415,  415,  264,  264,  211,  211,  262,  262,  262,  262,
      262,  262,  264,  211,  211,  211,  211,  213,  213,  213,
      213,  213,  213,  213,  213,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  265,  265,  266,  266,
      217,  217,  421,  421,  421, 1650,  265, 1630,  266,  217,
      217,  217,  217,  218,  218,  218,  218,  218,  218,  218,
      218,  426,  426, 1629,  270,  270,  218,  218,  269,  269,
      269,  269,  269,  269,  270,  218,  218,  218,  218,  220,
      220,  220,  220,  220,  220,  220,  220,  225,  225,  225,

      225,  225,  225,  225,  225,  271,  271,  296,  296, 1628,
      225,  225,  428,  428,  345,  271, 1627,  296, 1612,  225,
      225,  225,  225,  226,  345,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  429,  429,  300,  300,  226,  226,
      277,  277,  277,  277,  277,  277,  300,  226,  226,  226,
      226,  227,  227,  227,  227,  227,  227,  227,  227,  231,
      346,  231,  231,  231,  231,  231,  231,  231,  231,  235,
      346,  235,  235,  235,  235,  235,  235,  235,  235,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      303,  303,  315,  315,  239,  239,  431,  431,  448,  448,

      303, 1611,  315,  239,  239,  239,  239,  240,  240,  240,
      240,  240,  240,  240,  240,  246,  246,  246,  246,  246,
      246,  246,  246,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  318,  318,  319,  319,  254,  254,
      432,  432,  432, 1610,  318, 1591,  319,  254,  254,  254,
      254,  255,  255,  255,  255,  255,  255,  255,  255,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      322,  322,  325,  325,  260,  260,  437,  437,  437, 1586,
      322, 1583,  325,  260,  260,  260,  260,  261,  261,  261,
      261,  261,  261,  261,  261,  267,  267,  267,  267,  267,

      267,  267,  267,  267,  267,  267,  326,  326,  329,  329,
      267,  267,  450,  450,  450, 1579,  326, 1576,  329,  267,
      267,  267,  267,  268,  268,  268,  268,  268,  268,  268,
      268,  275, 1573,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  332,  332,  351, 1572,  275,  275,  462,  462,
      469,  469,  332, 1571,  351,  275,  275,  275,  275,  276,
      276,  276,  276,  276,  276,  276,  276,  280,  408,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  408, 1548,
      363,  363,  280,  280,  349,  349,  349,  349,  349,  349,
      363,  280,  280,  280,  280,  281,  281,  281,  281,  281,

      281,  281,  281,  364,  364,  368,  368, 1531,  281,  281,
      476,  476, 1530,  364, 1529,  368, 1508,  281,  281,  281,
      281,  283,  283,  283,  283,  283,  283,  283,  283,  289,
     1504,  289,  289,  289,  289,  289,  289,  294, 1501,  294,
      294,  294,  294,  294,  294,  297, 1497,  297,  297,  297,
      297,  297,  297,  297,  297,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  483,  483,  369,  369,
      298,  298,  367,  367,  367,  367,  367,  367,  369,  298,
      298,  298,  298,  299,  299,  299,  299,  299,  299,  299,
      299,  492,  492, 1494,  379,  379,  299,  299,  378,  378,

      378,  378,  378,  378,  379,  299,  299,  299,  299,  301,
      301,  301,  301,  301,  301,  301,  301,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  380,  380,  381,
      381, 1491,  312,  312,  499,  499, 1445,  380, 1441,  381,
     1438,  312,  312,  312,  312,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  515,  515,  385,  385,
      313,  313,  384,  384,  384,  384,  384,  384,  385,  313,
      313,  313,  313,  314,  314,  314,  314,  314,  314,  314,
      314,  386,  386,  387,  387, 1434,  314,  314,  516,  516,
     1431,  386, 1394,  387, 1393,  314,  314,  314,  314,  316,

      316,  316,  316,  316,  316,  316,  316,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  388,  388,
      392,  392,  320,  320,  518,  518,  610,  610,  388, 1388,
      392,  320,  320,  320,  320,  321,  321,  321,  321,  321,
      321,  321,  321,  594,  594,  594,  393,  393,  321,  321,
      391,  391,  391,  391,  391,  391,  393,  321,  321,  321,
      321,  323,  323,  323,  323,  323,  323,  323,  323,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      394,  394,  395,  395,  327,  327,  599,  599,  599, 1385,
      394, 1383,  395,  327,  327,  327,  327,  328,  328,  328,

      328,  328,  328,  328,  328,  605,  605,  605,  399,  399,
      328,  328,  398,  398,  398,  398,  398,  398,  399,  328,
      328,  328,  328,  330,  330,  330,  330,  330,  330,  330,
      330,  335,  335,  335,  335,  335,  335,  335,  335,  400,
      400,  409,  414, 1354,  335,  335,  612,  612,  427,  400,
     1345,  409,  414,  335,  335,  335,  335,  336,  427,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  613,  613,
      442,  442,  336,  336,  406,  406,  406,  406,  406,  406,
      442,  336,  336,  336,  336,  337,  337,  337,  337,  337,
      337,  337,  337,  615,  615, 1340,  446,  446,  337,  337,

      412,  412,  412,  412,  412,  412,  446,  337,  337,  337,
      337,  339,  339,  339,  339,  339,  339,  339,  339,  343,
      493,  343,  343,  343,  343,  343,  343,  343,  343,  347,
      493,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      430,  430,  449,  449,  347,  347,  632,  632,  430,  430,
      643,  643,  449,  347,  347,  347,  347,  348,  348,  348,
      348,  348,  348,  348,  348,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  357,  500,  357,  357,  357,
      357,  357,  357,  357,  357,  361,  500,  361,  361,  361,
      361,  361,  361,  361,  361,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  460,  460,  463,  463,
      365,  365,  616,  616,  616, 1332,  460, 1325,  463,  365,
      365,  365,  365,  366,  366,  366,  366,  366,  366,  366,
      366,  371, 1323,  371,  371,  371,  371,  371,  371,  371,
      371,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  464,  464,  467,  467,  376,  376,  621,  621,
      621, 1318,  464, 1314,  467,  376,  376,  376,  376,  377,
      377,  377,  377,  377,  377,  377,  377,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  470,  470,
      471,  471,  382,  382,  634,  634,  634, 1301,  470, 1296,

      471,  382,  382,  382,  382,  383,  383,  383,  383,  383,
      383,  383,  383,  389,  389,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  474,  474,  477,  477,  389,  389,
      649,  649,  656,  656,  474, 1291,  477,  389,  389,  389,
      389,  390,  390,  390,  390,  390,  390,  390,  390,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      478,  478,  481,  481,  396,  396,  663,  663,  670,  670,
      478, 1289,  481,  396,  396,  396,  396,  397,  397,  397,
      397,  397,  397,  397,  397,  404, 1288,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  484,  484,  508, 1282,

      404,  404,  677,  677,  686,  686,  484, 1280,  508,  404,
      404,  404,  404,  405,  405,  405,  405,  405,  405,  405,
      405,  410,  509,  410,  410,  410,  410,  410,  410,  410,
      410,  410,  509, 1279,  514, 1275,  410,  410,  512,  512,
      512,  512,  512,  512,  514,  410,  410,  410,  410,  411,
      411,  411,  411,  411,  411,  411,  411,  418, 1274,  418,
      418,  418,  418,  418,  418,  422, 1272,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  527,  527,  528,  528,
      422,  422,  693,  693,  700,  700,  527, 1271,  528,  422,
      422,  422,  422,  423,  423,  423,  423,  423,  423,  423,

      423,  703,  703,  703,  532,  532,  423,  423,  531,  531,
      531,  531,  531,  531,  532,  423,  423,  423,  423,  425,
      425,  425,  425,  425,  425,  425,  425,  435, 1259,  435,
      435,  435,  435,  435,  435,  440, 1258,  440,  440,  440,
      440,  440,  440,  443, 1256,  443,  443,  443,  443,  443,
      443,  443,  443,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  533,  533,  544,  544,  444,  444,
      720,  720,  721,  721,  533, 1249,  544,  444,  444,  444,
      444,  445,  445,  445,  445,  445,  445,  445,  445,  723,
      723, 1248,  545,  545,  445,  445,  543,  543,  543,  543,

      543,  543,  545,  445,  445,  445,  445,  447,  447,  447,
      447,  447,  447,  447,  447,  453, 1246,  453,  453,  453,
      453,  453,  453,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  546,  546,  550,  550, 1245,  457,  457,
      744,  744,  744,  546, 1243,  550, 1241,  457,  457,  457,
      457,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  749,  749,  551,  551,  458,  458,  549,  549,
      549,  549,  549,  549,  551,  458,  458,  458,  458,  459,
      459,  459,  459,  459,  459,  459,  459,  552,  552,  553,
      553, 1240,  459,  459,  751,  751, 1227,  552, 1226,  553,

     1224,  459,  459,  459,  459,  461,  461,  461,  461,  461,
      461,  461,  461,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  754,  754,  557,  557,  465,  465,
      556,  556,  556,  556,  556,  556,  557,  465,  465,  465,
      465,  466,  466,  466,  466,  466,  466,  466,  466,  558,
      558,  559,  559, 1223,  466,  466,  758,  758, 1217,  558,
     1208,  559, 1206,  466,  466,  466,  466,  468,  468,  468,
      468,  468,  468,  468,  468,  472,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  560,  560,  564,  564,
      472,  472,  762,  762,  766,  766,  560, 1205,  564,  472,

      472,  472,  472,  473,  473,  473,  473,  473,  473,  473,
      473,  770,  770, 1204,  565,  565,  473,  473,  563,  563,
      563,  563,  563,  563,  565,  473,  473,  473,  473,  475,
      475,  475,  475,  475,  475,  475,  475,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  566,  566,
      567,  567,  479,  479,  804,  804,  804, 1202,  566, 1201,
      567,  479,  479,  479,  479,  480,  480,  480,  480,  480,
      480,  480,  480,  809,  809,  809,  571,  571,  480,  480,
      570,  570,  570,  570,  570,  570,  571,  480,  480,  480,
      480,  482,  482,  482,  482,  482,  482,  482,  482,  487,

      487,  487,  487,  487,  487,  487,  487,  572,  572,  580,
      581, 1195,  487,  487,  820,  820,  586,  572, 1193,  580,
      581,  487,  487,  487,  487,  488,  586,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  822,  822,  587, 1191,
      488,  488,  578,  578,  578,  578,  578,  578,  587,  488,
      488,  488,  488,  489,  489,  489,  489,  489,  489,  489,
      489,  815,  815,  815,  588, 1189,  489,  489,  584,  584,
      584,  584,  584,  584,  588,  489,  489,  489,  489,  491,
      491,  491,  491,  491,  491,  491,  491,  495,  593,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  593, 1187,

      611, 1180,  495,  495,  591,  591,  591,  591,  591,  591,
      611,  495,  495,  495,  495,  496,  496,  496,  496,  496,
      496,  496,  496,  614,  614,  626,  626, 1178,  496,  496,
     1177,  614,  614,  823,  823,  626, 1172,  496,  496,  496,
      496,  498,  498,  498,  498,  498,  498,  498,  498,  502,
      687,  502,  502,  502,  502,  502,  502,  502,  502,  506,
      687,  506,  506,  506,  506,  506,  506,  506,  506,  510,
     1170,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      630,  630,  633,  633,  510,  510,  825,  825,  842,  842,
      630, 1169,  633,  510,  510,  510,  510,  511,  511,  511,

      511,  511,  511,  511,  511,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  521,  694,  521,  521,  521,
      521,  521,  521,  521,  521,  525,  694,  525,  525,  525,
      525,  525,  525,  525,  525,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  854,  854,  647,  647,
      529,  529,  642,  642,  642,  642,  642,  642,  647,  529,
      529,  529,  529,  530,  530,  530,  530,  530,  530,  530,
      530,  535, 1160,  535,  535,  535,  535,  535,  535,  535,
      535,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      650,  650,  651,  651,  540,  540,  826,  826,  826, 1156,

      650, 1155,  651,  540,  540,  540,  540,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  654,  654,
      657,  657,  541,  541,  831,  831,  831, 1153,  654, 1152,
      657,  541,  541,  541,  541,  542,  542,  542,  542,  542,
      542,  542,  542,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  658,  658,  661,  661,  547,  547,
      844,  844,  844, 1150,  658, 1148,  661,  547,  547,  547,
      547,  548,  548,  548,  548,  548,  548,  548,  548,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      664,  664,  665,  665,  554,  554,  855,  855,  857,  857,

      664, 1147,  665,  554,  554,  554,  554,  555,  555,  555,
      555,  555,  555,  555,  555,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  668,  668,  671,  671,
      561,  561,  859,  859,  861,  861,  668, 1117,  671,  561,
      561,  561,  561,  562,  562,  562,  562,  562,  562,  562,
      562,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  672,  672,  675,  675,  568,  568,  863,  863,
      865,  865,  672, 1116,  675,  568,  568,  568,  568,  569,
      569,  569,  569,  569,  569,  569,  569,  576, 1113,  576,
      576,  576,  576,  576,  576,  576,  576,  576,  678,  678,

      701, 1112,  576,  576,  867,  867,  875,  875,  678, 1110,
      701,  576,  576,  576,  576,  577,  577,  577,  577,  577,
      577,  577,  577,  582,  713,  582,  582,  582,  582,  582,
      582,  582,  582,  582,  713,  714,  719, 1109,  582,  582,
      882,  882,  889,  889, 1105,  714,  719,  582,  582,  582,
      582,  583,  583,  583,  583,  583,  583,  583,  583,  589,
      750,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      750, 1104,  732,  732,  589,  589,  717,  717,  717,  717,
      717,  717,  732,  589,  589,  589,  589,  590,  590,  590,
      590,  590,  590,  590,  590,  597, 1102,  597,  597,  597,

      597,  597,  597,  602, 1101,  602,  602,  602,  602,  602,
      602,  606, 1095,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  733,  733,  737,  737,  606,  606,  896,  896,
      917,  917,  733, 1089,  737,  606,  606,  606,  606,  607,
      607,  607,  607,  607,  607,  607,  607,  900,  900,  900,
      738,  738,  607,  607,  736,  736,  736,  736,  736,  736,
      738,  607,  607,  607,  607,  609,  609,  609,  609,  609,
      609,  609,  609,  619, 1087,  619,  619,  619,  619,  619,
      619,  624, 1086,  624,  624,  624,  624,  624,  624,  627,
     1085,  627,  627,  627,  627,  627,  627,  627,  627,  628,

      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      752,  752,  753,  753,  628,  628,  918,  918,  920,  920,
      752, 1083,  753,  628,  628,  628,  628,  629,  629,  629,
      629,  629,  629,  629,  629,  755,  755,  756,  756, 1082,
      629,  629,  931,  931, 1074,  755, 1071,  756, 1067,  629,
      629,  629,  629,  631,  631,  631,  631,  631,  631,  631,
      631,  637, 1064,  637,  637,  637,  637,  637,  637,  640,
     1060,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      757,  757,  759,  759,  640,  640,  934,  934,  934, 1057,
      757, 1053,  759,  640,  640,  640,  640,  641,  641,  641,

      641,  641,  641,  641,  641,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  760,  760,  761,  761,
      645,  645,  937,  937,  937, 1050,  760, 1046,  761,  645,
      645,  645,  645,  648,  648,  648,  648,  648,  648,  648,
      648,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  763,  763,  764,  764,  652,  652,  943,  943,
      944,  944,  763, 1043,  764,  652,  652,  652,  652,  655,
      655,  655,  655,  655,  655,  655,  655,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  765,  765,
      767,  767,  659,  659,  945,  945,  946,  946,  765, 1038,

      767,  659,  659,  659,  659,  662,  662,  662,  662,  662,
      662,  662,  662,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  768,  768,  769,  769,  666,  666,
      947,  947,  948,  948,  768, 1030,  769,  666,  666,  666,
      666,  669,  669,  669,  669,  669,  669,  669,  669,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      771,  771,  779, 1029,  673,  673,  949,  949, 1005, 1005,
      771, 1027,  779,  673,  673,  673,  673,  676,  676,  676,
      676,  676,  676,  676,  676,  681,  681,  681,  681,  681,
      681,  681,  681,  989,  989,  989,  780, 1020,  681,  681,

      777,  777,  777,  777,  777,  777,  780,  681,  681,  681,
      681,  682,  785,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  785, 1018,  786, 1017,  682,  682,  783,  783,
      783,  783,  783,  783,  786,  682,  682,  682,  682,  683,
      683,  683,  683,  683,  683,  683,  683,  787,  792,  793,
      794, 1015,  683,  683,  994,  994,  994,  787,  792,  793,
      794,  683,  683,  683,  683,  685,  685,  685,  685,  685,
      685,  685,  685,  689,  799,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  799, 1013,  821, 1012,  689,  689,
      790,  790,  790,  790,  790,  790,  821,  689,  689,  689,

      689,  690,  690,  690,  690,  690,  690,  690,  690, 1000,
     1000, 1000,  836,  836,  690,  690,  797,  797,  797,  797,
      797,  797,  836,  690,  690,  690,  690,  692,  692,  692,
      692,  692,  692,  692,  692,  696,  852,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  852, 1003,  840,  840,
      696,  696,  802,  802,  802,  802,  802,  802,  840,  696,
      696,  696,  696,  697,  697,  697,  697,  697,  697,  697,
      697,  824,  824,  843,  843,  999,  697,  697,  998,  824,
      824, 1007, 1007,  843,  996,  697,  697,  697,  697,  699,
      699,  699,  699,  699,  699,  699,  699,  707,  853,  707,

      707,  707,  707,  707,  707,  707,  707,  711,  853,  711,
      711,  711,  711,  711,  711,  711,  711,  715,  856,  715,
      715,  715,  715,  715,  715,  715,  715,  715,  856,  858,
      858,  995,  715,  715, 1008, 1008, 1010, 1010,  993,  858,
      991,  715,  715,  715,  715,  716,  716,  716,  716,  716,
      716,  716,  716,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  726,  876,  726,  726,  726,  726,  726,
      726,  726,  726,  730,  876,  730,  730,  730,  730,  730,
      730,  730,  730,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  860,  860,  862,  862,  734,  734,

     1011, 1011, 1011,  990,  860,  983,  862,  734,  734,  734,
      734,  735,  735,  735,  735,  735,  735,  735,  735,  740,
      883,  740,  740,  740,  740,  740,  740,  740,  740,  745,
      883,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      864,  864,  866,  866,  745,  745, 1016, 1016, 1016,  976,
      864,  969,  866,  745,  745,  745,  745,  748,  748,  748,
      748,  748,  748,  748,  748,  775,  890,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  890,  897,  910,  962,
      775,  775, 1022, 1022, 1031, 1031,  956,  897,  910,  775,
      775,  775,  775,  776,  776,  776,  776,  776,  776,  776,

      776,  781,  911,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  911,  951,  916,  950,  781,  781,  914,  914,
      914,  914,  914,  914,  916,  781,  781,  781,  781,  782,
      782,  782,  782,  782,  782,  782,  782,  788,  942,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  929,  929,
      930,  930,  788,  788, 1032, 1032, 1033, 1033,  929,  941,
      930,  788,  788,  788,  788,  789,  789,  789,  789,  789,
      789,  789,  789,  795,  939,  795,  795,  795,  795,  795,
      795,  795,  795,  795,  932,  932,  957,  938,  795,  795,
     1034, 1034, 1035, 1035,  932,  936,  957,  795,  795,  795,

      795,  796,  796,  796,  796,  796,  796,  796,  796,  807,
      928,  807,  807,  807,  807,  807,  807,  812,  926,  812,
      812,  812,  812,  812,  812,  816,  958,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  958,  925,  963,  924,
      816,  816,  955,  955,  955,  955,  955,  955,  963,  816,
      816,  816,  816,  817,  817,  817,  817,  817,  817,  817,
      817, 1036, 1036,  922,  964,  921,  817,  817,  961,  961,
      961,  961,  961,  961,  964,  817,  817,  817,  817,  819,
      819,  819,  819,  819,  819,  819,  819,  829,  915,  829,
      829,  829,  829,  829,  829,  834,  909,  834,  834,  834,

      834,  834,  834,  837,  907,  837,  837,  837,  837,  837,
      837,  837,  837,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  965,  970,  971,  906,  838,  838,
     1037, 1037, 1048, 1048,  965,  970,  971,  838,  838,  838,
      838,  841,  841,  841,  841,  841,  841,  841,  841,  847,
      905,  847,  847,  847,  847,  847,  847,  850,  903,  850,
      850,  850,  850,  850,  850,  850,  850,  870,  870,  870,
      870,  870,  870,  870,  870, 1055, 1055,  902,  972,  894,
      870,  870,  968,  968,  968,  968,  968,  968,  972,  870,
      870,  870,  870,  871,  977,  871,  871,  871,  871,  871,

      871,  871,  871,  871,  977,  891,  978,  887,  871,  871,
      975,  975,  975,  975,  975,  975,  978,  871,  871,  871,
      871,  872,  872,  872,  872,  872,  872,  872,  872,  979,
      984, 1006, 1021, 1021,  872,  872, 1062, 1062,  884,  979,
      984, 1006, 1021,  872,  872,  872,  872,  874,  874,  874,
      874,  874,  874,  874,  874,  878, 1049,  878,  878,  878,
      878,  878,  878,  878,  878,  878, 1049,  880, 1056,  877,
      878,  878,  982,  982,  982,  982,  982,  982, 1056,  878,
      878,  878,  878,  879,  879,  879,  879,  879,  879,  879,
      879, 1069, 1069,  873, 1063,  869,  879,  879,  987,  987,

      987,  987,  987,  987, 1063,  879,  879,  879,  879,  881,
      881,  881,  881,  881,  881,  881,  881,  885,  868,  885,
      885,  885,  885,  885,  885,  885,  885,  885, 1009, 1009,
     1070,  851,  885,  885, 1076, 1076, 1009, 1009, 1097, 1097,
     1070,  885,  885,  885,  885,  886,  886,  886,  886,  886,
      886,  886,  886, 1080, 1080, 1080, 1077,  849,  886,  886,
     1025, 1025, 1025, 1025, 1025, 1025, 1077,  886,  886,  886,
      886,  888,  888,  888,  888,  888,  888,  888,  888,  892,
     1090,  892,  892,  892,  892,  892,  892,  892,  892,  892,
     1090,  848, 1091,  846,  892,  892, 1041, 1041, 1041, 1041,

     1041, 1041, 1091,  892,  892,  892,  892,  893,  893,  893,
      893,  893,  893,  893,  893, 1098, 1098,  845, 1096,  835,
      893,  893, 1094, 1094, 1094, 1094, 1094, 1094, 1096,  893,
      893,  893,  893,  895,  895,  895,  895,  895,  895,  895,
      895,  904, 1120,  904,  904,  904,  904,  904,  904,  904,
      904,  908, 1120,  908,  908,  908,  908,  908,  908,  908,
      908,  912,  833,  912,  912,  912,  912,  912,  912,  912,
      912,  912, 1100, 1100, 1106, 1106,  912,  912, 1108, 1108,
     1108, 1114, 1114, 1114,  832,  912,  912,  912,  912,  913,
      913,  913,  913,  913,  913,  913,  913,  919,  919,  919,

      919,  919,  919,  919,  919,  919,  919,  923, 1122,  923,
      923,  923,  923,  923,  923,  923,  923,  927, 1122,  927,
      927,  927,  927,  927,  927,  927,  927,  940,  830,  940,
      940,  940,  940,  940,  940,  952,  952,  952,  952,  952,
      952,  952,  952,  952, 1119, 1119, 1123,  828,  952,  952,
     1162, 1162, 1125, 1146, 1146, 1146, 1123,  952,  952,  952,
      952,  953, 1125,  953,  953,  953,  953,  953,  953,  953,
      953,  953, 1126, 1127, 1129,  827,  953,  953, 1151, 1151,
     1151,  818, 1126, 1127, 1129,  953,  953,  953,  953,  954,
      954,  954,  954,  954,  954,  954,  954,  959, 1130,  959,

      959,  959,  959,  959,  959,  959,  959,  959, 1130, 1131,
     1133,  814,  959,  959, 1157, 1157, 1157, 1164, 1164, 1131,
     1133,  959,  959,  959,  959,  960,  960,  960,  960,  960,
      960,  960,  960,  966, 1134,  966,  966,  966,  966,  966,
      966,  966,  966,  966, 1134, 1135, 1137,  813,  966,  966,
     1165, 1165, 1167, 1167,  811, 1135, 1137,  966,  966,  966,
      966,  967,  967,  967,  967,  967,  967,  967,  967,  973,
     1138,  973,  973,  973,  973,  973,  973,  973,  973,  973,
     1138, 1139, 1141,  810,  973,  973, 1168, 1168, 1168, 1173,
     1173, 1139, 1141,  973,  973,  973,  973,  974,  974,  974,

      974,  974,  974,  974,  974,  980, 1163,  980,  980,  980,
      980,  980,  980,  980,  980,  980, 1163, 1174, 1174,  808,
      980,  980, 1144, 1144, 1144, 1144, 1144, 1144,  806,  980,
      980,  980,  980,  981,  981,  981,  981,  981,  981,  981,
      981,  992,  805,  992,  992,  992,  992,  992,  992,  997,
      798,  997,  997,  997,  997,  997,  997, 1001,  791, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1166, 1166,
     1176, 1176, 1001, 1001, 1213, 1213, 1166, 1166, 1199, 1199,
     1199, 1001, 1001, 1001, 1001, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1181, 1182, 1185, 1209,  784, 1002, 1002,

     1214, 1214,  778, 1181, 1182, 1185, 1209, 1002, 1002, 1002,
     1002, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1014,
      774, 1014, 1014, 1014, 1014, 1014, 1014, 1019,  773, 1019,
     1019, 1019, 1019, 1019, 1019, 1028, 1210, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1039, 1210, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1039, 1212, 1216, 1216,  772,
     1039, 1039, 1218, 1218, 1219, 1219, 1212, 1221, 1221, 1039,
     1039, 1039, 1039, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1044,  747, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1220, 1220, 1251, 1251, 1044, 1044, 1252, 1252,

     1220, 1220, 1222, 1222, 1222, 1044, 1044, 1044, 1044, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1051,  746, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1239, 1239,
     1239,  743, 1051, 1051, 1237, 1237, 1237, 1237, 1237, 1237,
      742, 1051, 1051, 1051, 1051, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1058,  741, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1244, 1244, 1244,  739, 1058, 1058,
     1254, 1254, 1255, 1255, 1269, 1269, 1269, 1058, 1058, 1058,
     1058, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1065,
      731, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,

     1253, 1253, 1277, 1277, 1065, 1065,  729,  728, 1253, 1253,
     1278, 1278, 1278, 1065, 1065, 1065, 1065, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1072,  727, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1287, 1287, 1287,  725,
     1072, 1072, 1285, 1285, 1285, 1285, 1285, 1285,  724, 1072,
     1072, 1072, 1072, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1084,  718, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1088,  712, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1092,  710, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
     1092, 1092, 1294, 1294, 1294,  709, 1092, 1092, 1299, 1299,

     1299,  708,  706,  705,  698, 1092, 1092, 1092, 1092, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093, 1099, 1099, 1099,
     1099, 1099, 1099, 1099, 1099, 1099, 1099, 1103,  695, 1103,
     1103, 1103, 1103, 1103, 1103, 1103, 1103, 1111,  691, 1111,
     1111, 1111, 1111, 1111, 1111, 1115,  688, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115,  684,  680,  679,  644,
     1115, 1115, 1304, 1304, 1304, 1304, 1304, 1304,  639, 1115,
     1115, 1115, 1115, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1149,  638, 1149, 1149, 1149, 1149, 1149, 1149, 1154,
      636, 1154, 1154, 1154, 1154, 1154, 1154, 1158,  635, 1158,

     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,  625,  623,
      622,  620, 1158, 1158, 1308, 1308, 1308, 1308, 1308, 1308,
      618, 1158, 1158, 1158, 1158, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1171,  617, 1171, 1171, 1171, 1171, 1171,
     1171, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1179,  608, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1203,  604, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1207,  603, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1225,  601, 1225, 1225, 1225, 1225, 1225, 1225, 1242,

      600, 1242, 1242, 1242, 1242, 1242, 1242, 1247,  598, 1247,
     1247, 1247, 1247, 1247, 1247, 1257,  596, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1273,  595, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1281,  592, 1281, 1281, 1281,
     1281, 1281, 1281, 1290,  585, 1290, 1290, 1290, 1290, 1290,
     1290, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1315,
      579, 1315, 1315, 1315, 1315, 1315, 1315, 1316, 1316, 1316,
     1317, 1317, 1317, 1319,  575, 1319, 1320,  574, 1320, 1321,
     1321, 1321, 1322, 1322, 1322, 1324, 1324, 1324, 1324, 1324,
     1326,  573, 1326, 1327,  539, 1327, 1327, 1328, 1328, 1328,

     1329, 1329, 1329, 1330, 1330, 1330, 1330, 1330, 1331, 1331,
     1331, 1333, 1333, 1333, 1333, 1333, 1334,  538, 1334, 1335,
      537, 1335, 1336, 1336, 1336, 1337, 1337, 1337, 1338, 1338,
     1338, 1338, 1338, 1339, 1339, 1339, 1341,  536, 1341, 1342,
      534, 1342, 1343, 1343, 1343, 1343, 1343, 1344, 1344, 1344,
     1344, 1344, 1346,  526, 1346, 1347, 1347, 1347, 1348, 1348,
     1348, 1349, 1349, 1349, 1349, 1349, 1350, 1350, 1350, 1350,
     1350, 1351, 1351, 1351, 1351, 1351, 1352, 1352, 1352, 1353,
     1353, 1353, 1355,  524, 1355, 1356, 1356, 1356, 1356, 1356,
     1357, 1357, 1357, 1358, 1358, 1358, 1359, 1359, 1359, 1360,

     1360, 1360, 1361, 1361, 1361, 1361, 1361, 1362, 1362, 1362,
     1362, 1362, 1363, 1363, 1363, 1364, 1364, 1364, 1365, 1365,
     1365, 1366,  523, 1366, 1367,  522, 1367, 1368,  520, 1368,
     1369,  519, 1369, 1370, 1370, 1370, 1370, 1370, 1371, 1371,
     1371, 1371, 1371, 1372, 1372, 1372, 1373, 1373, 1373, 1374,
     1374, 1374, 1375, 1375, 1375, 1375, 1375, 1376, 1376, 1376,
     1376, 1376, 1377, 1377, 1377, 1377, 1377, 1378, 1378, 1378,
     1378, 1378, 1379, 1379, 1379, 1379, 1379, 1380, 1380, 1380,
     1381, 1381, 1381, 1382, 1382, 1382, 1384, 1384, 1384, 1386,
      513, 1386, 1387,  507, 1387, 1389,  505, 1389, 1390,  504,

     1390, 1391, 1391, 1391, 1391, 1391, 1392,  503, 1392, 1392,
     1395, 1395, 1395, 1396, 1396, 1396, 1397, 1397, 1397, 1397,
     1397, 1398, 1398, 1398, 1398, 1398, 1399, 1399, 1399, 1399,
     1399, 1400, 1400, 1400, 1401, 1401, 1401, 1402, 1402, 1402,
     1403,  501, 1403, 1404,  497, 1404, 1405,  494, 1405, 1405,
     1405, 1406, 1406, 1406, 1407, 1407, 1407, 1408, 1408, 1408,
     1409,  490, 1409, 1410,  486, 1410, 1411,  485, 1411, 1412,
      456, 1412, 1413, 1413, 1413, 1413, 1413, 1414, 1414, 1414,
     1414, 1414, 1415,  455, 1415, 1416,  454, 1416, 1417, 1417,
     1417, 1418, 1418, 1418, 1419, 1419, 1419, 1419, 1419, 1420,

     1420, 1420, 1420, 1420, 1421, 1421, 1421, 1421, 1421, 1422,
     1422, 1422, 1422, 1422, 1423, 1423, 1423, 1423, 1423, 1424,
     1424, 1424, 1424, 1424, 1425, 1425, 1425, 1425, 1425, 1426,
     1426, 1426, 1427, 1427, 1427, 1428, 1428, 1428, 1429,  452,
     1429, 1429, 1429, 1430, 1430, 1430, 1432,  451, 1432, 1433,
      441, 1433, 1435, 1435, 1435, 1436, 1436, 1436, 1437, 1437,
     1437, 1439,  439, 1439, 1440,  438, 1440, 1442,  436, 1442,
     1443,  434, 1443, 1444, 1444, 1444, 1444, 1444, 1446,  433,
     1446, 1447,  424, 1447, 1448, 1448, 1448, 1449, 1449, 1449,
     1450, 1450, 1450, 1450, 1450, 1451, 1451, 1451, 1451, 1451,

     1452, 1452, 1452, 1452, 1452, 1453, 1453, 1453, 1453, 1453,
     1454, 1454, 1454, 1455, 1455, 1455, 1456, 1456, 1456, 1457,
     1457, 1457, 1458,  420, 1458, 1459,  419, 1459, 1460,  417,
     1460, 1461,  416, 1461, 1462,  413, 1462, 1462, 1462, 1463,
     1463, 1463, 1464, 1464, 1464, 1465, 1465, 1465, 1466,  407,
     1466, 1467,  403, 1467, 1468,  402, 1468, 1469,  401, 1469,
     1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471, 1471, 1471,
     1472,  375, 1472, 1473,  374, 1473, 1474, 1474, 1474, 1475,
     1475, 1475, 1475, 1475, 1476, 1476, 1476, 1476, 1476, 1477,
     1477, 1477, 1477, 1477, 1478, 1478, 1478, 1478, 1478, 1479,

     1479, 1479, 1479, 1479, 1480, 1480, 1480, 1480, 1480, 1481,
     1481, 1481, 1481, 1481, 1482, 1482, 1482, 1482, 1482, 1483,
     1483, 1483, 1483, 1483, 1484, 1484, 1484, 1485, 1485, 1485,
     1486, 1486, 1486, 1487,  373, 1487, 1487, 1487, 1488, 1488,
     1488, 1489,  372, 1489, 1489, 1489, 1490, 1490, 1490, 1492,
      370, 1492, 1493,  362, 1493, 1495,  360, 1495, 1496,  359,
     1496, 1498, 1498, 1498, 1499, 1499, 1499, 1500, 1500, 1500,
     1502,  358, 1502, 1503,  356, 1503, 1505,  355, 1505, 1506,
      350, 1506, 1507, 1507, 1507, 1507, 1507, 1509,  344, 1509,
     1510,  342, 1510, 1511, 1511, 1511, 1512, 1512, 1512,  338,

     1512, 1513, 1513, 1513, 1514,  334, 1514, 1515, 1515, 1515,
     1515, 1515, 1516,  333, 1516, 1517, 1517, 1517, 1517, 1517,
     1518,  311, 1518, 1519, 1519, 1519, 1519, 1519, 1520,  310,
     1520, 1521, 1521, 1521, 1521, 1521, 1522,  295, 1522, 1523,
     1523, 1523, 1523, 1523, 1524, 1524, 1524, 1525, 1525, 1525,
     1526, 1526, 1526, 1527, 1527, 1527, 1528, 1528, 1528, 1532,
      293, 1532, 1533,  292, 1533, 1534,  290, 1534, 1535,  288,
     1535, 1536,  287, 1536, 1536, 1536, 1537, 1537, 1537, 1538,
     1538, 1538, 1539, 1539, 1539, 1540,  282, 1540, 1541,  278,
     1541, 1542,  274, 1542, 1543,  273, 1543, 1544, 1544, 1544,

     1544, 1544, 1545, 1545, 1545, 1545, 1545, 1546,  272, 1546,
     1547,  253, 1547, 1549, 1549, 1549, 1550, 1550, 1550, 1551,
     1551, 1551,  252, 1551, 1552, 1552, 1552, 1552, 1552, 1553,
     1553, 1553,  251, 1553, 1554, 1554, 1554, 1554, 1554, 1555,
     1555, 1555,  245, 1555, 1556, 1556, 1556, 1556, 1556, 1557,
     1557, 1557,  244, 1557, 1558, 1558, 1558, 1558, 1558, 1559,
     1559, 1559,  236, 1559, 1560, 1560, 1560, 1560, 1560, 1561,
     1561, 1561,  234, 1561, 1562, 1562, 1562, 1563, 1563, 1563,
     1564, 1564, 1564, 1565,  233, 1565, 1565, 1565, 1566, 1566,
     1566, 1567,  232, 1567, 1567, 1567, 1568, 1568, 1568, 1569,

      230, 1569, 1569, 1569, 1570, 1570, 1570, 1574,  229, 1574,
     1575,  224, 1575, 1577,  223, 1577, 1578,  208, 1578, 1580,
     1580, 1580, 1581, 1581, 1581, 1582, 1582, 1582, 1584,  207,
     1584, 1585,  206, 1585, 1587,  201, 1587, 1588,  190, 1588,
     1589,  188, 1589, 1590, 1590, 1590, 1590, 1590, 1592,  187,
     1592, 1593,  183, 1593, 1594,  182, 1594, 1595,  170, 1595,
     1596,  169, 1596, 1596, 1596, 1597, 1597, 1597,  168, 1597,
     1598, 1598, 1598,  167, 1598, 1599, 1599, 1599,  165, 1599,
     1600, 1600, 1600,  164, 1600, 1601, 1601, 1601,  162, 1601,
     1602, 1602, 1602,  161, 1602, 1603, 1603, 1603,  160, 1603,

     1604, 1604, 1604, 1605, 1605, 1605, 1606, 1606, 1606, 1607,
     1607, 1607, 1608, 1608, 1608, 1609, 1609, 1609, 1613,  159,
     1613, 1614,  150, 1614, 1615,  148, 1615, 1616,  144, 1616,
     1617,  143, 1617, 1617, 1617, 1618, 1618, 1618, 1619, 1619,
     1619, 1620, 1620, 1620, 1621,  135, 1621, 1622,  134, 1622,
     1623,  132, 1623, 1624,  131, 1624, 1625, 1625, 1625, 1625,
     1625, 1626, 1626, 1626,  129, 1626, 1631,  128, 1631, 1632,
      127, 1632, 1633, 1633, 1633,  126, 1633, 1634, 1634, 1634,
      123, 1634, 1635, 1635, 1635,  122, 1635, 1636, 1636, 1636,
      112, 1636, 1637, 1637, 1637,  111, 1637, 1638, 1638, 1638,

      106, 1638, 1639, 1639, 1639,  105, 1639, 1640, 1640, 1640,
     1641, 1641, 1641, 1642,  104, 1642, 1642, 1642, 1643, 1643,
     1643, 1644,  102, 1644, 1644, 1644, 1645, 1645, 1645, 1646,
      100, 1646, 1646, 1646, 1647, 1647, 1647, 1648,   99, 1648,
     1648, 1648, 1649, 1649, 1649, 1653,   95, 1653, 1654,   94,
     1654, 1656,   92, 1656, 1657,   91, 1657, 1659, 1659, 1659,
     1660, 1660, 1660, 1661, 1661, 1661, 1663,   87, 1663, 1664,
       85, 1664, 1666,   79, 1666, 1667,   78, 1667, 1668, 1668,
     1668,   77, 1668, 1671,   74, 1671, 1672,   73, 1672, 1673,
     1673, 1673,   71, 1673, 1674, 1674, 1674, 1675,   69, 1675,

     1676, 1676, 1676, 1677,   66, 1677, 1678, 1678, 1678, 1679,
       65, 1679, 1680, 1680, 1680, 1681,   64, 1681, 1682, 1682,
     1682, 1683,   62, 1683, 1684, 1684, 1684, 1685,   61, 1685,
     1686, 1686, 1686, 1690,   60, 1690, 1691,   59, 1691, 1692,
       58, 1692, 1693,   57, 1693, 1694,   56, 1694, 1694, 1694,
     1695, 1695, 1695, 1696, 1696, 1696, 1697, 1697, 1697, 1698,
       55, 1698, 1699,   54, 1699, 1700, 1700, 1700,   44, 1700,
     1702,   43, 1702, 1703,   38, 1703, 1705, 1705, 1705, 1706,
     1706, 1706, 1707,   35, 1707, 1708,   34, 1708, 1708, 1708,
     1709,   33, 1709, 1710,   32, 1710, 1710, 1710, 1711,   30,

     1711, 1712,   29, 1712, 1712, 1712, 1713,   27, 1713, 1714,
       26, 1714, 1714, 1714, 1715,   23, 1715, 1716,   22, 1716,
     1716, 1716, 1717,   21, 1717, 1720,   19, 1720, 1722,    9,
     1722, 1724,    7, 1724, 1725, 1725, 1725, 1726, 1726, 1726,
     1728,    5, 1728, 1729, 1729, 1729, 1730, 1730, 1730, 1731,
        0, 1731, 1732,    0, 1732, 1733,    0, 1733, 1733, 1733,
     1734,    0, 1734, 1735,    0, 1735, 1736,    0, 1736, 1737,
        0, 1737, 1738,    0, 1738, 1739,    0, 1739, 1740,    0,
     1740, 1744,    0, 1744, 1745,    0, 1745, 1746,    0, 1746,
     1747,    0, 1747, 1748,    0, 1748, 1748, 1748, 1749,    0,

     1749, 1750, 1750, 1750, 1751, 1751, 1751, 1752, 1752, 1752,
     1754,    0, 1754, 1755,    0, 1755, 1756,    0, 1756, 1757,
        0, 1757, 1758,    0, 1758, 1759,    0, 1759, 1760,    0,
     1760, 1761,    0, 1761, 1764,    0, 1764, 1766,    0, 1766,
     1767,    0, 1767, 1768, 1768, 1768, 1769,    0, 1769, 1770,
        0, 1770, 1771,    0, 1771, 1775,    0, 1775, 1776,    0,
     1776, 1777,    0, 1777, 1779,    0, 1779, 1782,    0, 1782,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,

     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "policy.l"
#define INITIAL 0
#line 2 "policy.l"

#include "policy_module.h"
#include "libxorp/xorp.h"

#include "policy/common/policy_utils.hh"
#include <vector>
#include <string>
#include <sstream>
#include "policy_parser.hh"
#include "yacc.yy_policy_parser.cc.h"

#define yylval yy_policy_parserlval
#define yyerror yy_policy_parsererror
#define yyparse yy_policy_parserparse

void yyerror(const char *m);
extern int yyparse(void);

using namespace policy_parser;

// instantiate the globals here.
vector<Node*>* policy_parser::_parser_nodes;
unsigned policy_parser::_parser_lineno;

// try not to pollute
namespace {
	string _last_error;
	Term::BLOCKS _block;
}

#define YY_NO_UNPUT 1
#define YY_NEVER_INTERACTIVE 1
#define STR 1

#line 2456 "lex.yy_policy_parser.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 62 "policy.l"


#line 2610 "lex.yy_policy_parser.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1313 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6771 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 64 "policy.l"
{ yylval.c_str = strdup(yytext);
		  return YY_UINTRANGE;
		}  
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 68 "policy.l"
{ yylval.c_str = strdup(yytext);
		  return YY_UINT;
		}  
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 72 "policy.l"
{ yylval.c_str = strdup(yytext);
		  return YY_INT;
		}  
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 76 "policy.l"
BEGIN(STR);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 78 "policy.l"
BEGIN(INITIAL);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 80 "policy.l"
{ yylval.c_str = strdup(yytext); 
		  _parser_lineno += policy_utils::count_nl(yytext);
		  /* XXX: a string can be started with " but terminated with '
		   * and vice versa...
		   */ 
		  return YY_STR;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 88 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV4RANGE;
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 93 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV4;
		}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 98 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV4NET;
		}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 104 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV6RANGE;
		}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 109 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV6;
		}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 114 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV6NET;
		}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 119 "policy.l"
{
		  // the colon is an alias for asignment in action and equality
		  // in the source / dest blocks.
		  if (_block == Term::ACTION)
		  	return YY_ASSIGN;
		  else
		  	return YY_EQ;
		}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 128 "policy.l"
return YY_LPAR;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 129 "policy.l"
return YY_RPAR;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 131 "policy.l"
return YY_EQ; 
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 132 "policy.l"
return YY_NE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 133 "policy.l"
return YY_LE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 134 "policy.l"
return YY_GE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 135 "policy.l"
return YY_LT;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 136 "policy.l"
return YY_GT;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 138 "policy.l"
return YY_AND;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 139 "policy.l"
return YY_OR;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 140 "policy.l"
return YY_XOR;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 141 "policy.l"
return YY_NOT;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 143 "policy.l"
return YY_ADD;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 144 "policy.l"
return YY_ADD;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 145 "policy.l"
return YY_SUB;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 146 "policy.l"
return YY_MUL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 147 "policy.l"
return YY_ASSIGN;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 149 "policy.l"
return YY_HEAD;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 150 "policy.l"
return YY_CTR;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 151 "policy.l"
return YY_NE_INT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 153 "policy.l"
return YY_ACCEPT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 154 "policy.l"
return YY_REJECT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 156 "policy.l"
return YY_SET;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 157 "policy.l"
return YY_REGEX;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 159 "policy.l"
return YY_PROTOCOL;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 161 "policy.l"
{ yylval.c_str = strdup(yytext);
					  return YY_ID;
					}  
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 165 "policy.l"
return YY_SEMICOLON;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 167 "policy.l"
/* eat blanks */
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 169 "policy.l"
_parser_lineno++;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 171 "policy.l"
{ yyerror("Unknown character"); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 173 "policy.l"
ECHO;
	YY_BREAK
#line 2952 "lex.yy_policy_parser.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1313 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1313 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1312);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 173 "policy.l"


void yyerror(const char *m)
{
        ostringstream oss;
        oss << "Error on line " <<  _parser_lineno << " near (";

	for(int i = 0; i < yyleng; i++)
		oss << yytext[i];
	oss << "): " << m;

        _last_error = oss.str();
}

// Everything is put in the lexer because of YY_BUFFER_STATE...
int 
policy_parser::policy_parse(vector<Node*>& outnodes, const Term::BLOCKS& block, 
			    const string& conf, string& outerr)
{

        YY_BUFFER_STATE yybuffstate = yy_scan_string(conf.c_str());

        _last_error = "No error";
        _parser_nodes = &outnodes;
        _parser_lineno = 1;
	_block = block;

        int res = yyparse();
        
        yy_delete_buffer(yybuffstate);
        outerr = _last_error;
        
        return res;
}
