#define yy_create_buffer yy_policy_parser_create_buffer
#define yy_delete_buffer yy_policy_parser_delete_buffer
#define yy_scan_buffer yy_policy_parser_scan_buffer
#define yy_scan_string yy_policy_parser_scan_string
#define yy_scan_bytes yy_policy_parser_scan_bytes
#define yy_flex_debug yy_policy_parser_flex_debug
#define yy_init_buffer yy_policy_parser_init_buffer
#define yy_flush_buffer yy_policy_parser_flush_buffer
#define yy_load_buffer_state yy_policy_parser_load_buffer_state
#define yy_switch_to_buffer yy_policy_parser_switch_to_buffer
#define yyin yy_policy_parserin
#define yyleng yy_policy_parserleng
#define yylex yy_policy_parserlex
#define yyout yy_policy_parserout
#define yyrestart yy_policy_parserrestart
#define yytext yy_policy_parsertext

#line 19 "lex.yy_policy_parser.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 * $FreeBSD: src/usr.bin/lex/flex.skl,v 1.4 1999/10/27 07:56:44 obrien Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yy_policy_parserrestart(yy_policy_parserin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yy_policy_parserleng;

extern FILE *yy_policy_parserin, *yy_policy_parserout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yy_policy_parsertext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yy_policy_parsertext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yy_policy_parserrestart()), so that the user can continue scanning by
	 * just pointing yy_policy_parserin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yy_policy_parsertext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yy_policy_parserleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yy_policy_parserwrap()'s to do buffer switches
 * instead of setting up a fresh yy_policy_parserin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yy_policy_parserrestart (FILE *input_file  );
void yy_policy_parser_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_policy_parser_create_buffer (FILE *file,int size  );
void yy_policy_parser_delete_buffer (YY_BUFFER_STATE b  );
void yy_policy_parser_flush_buffer (YY_BUFFER_STATE b  );
void yy_policy_parserpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yy_policy_parserpop_buffer_state (void );

static void yy_policy_parserensure_buffer_stack (void );
static void yy_policy_parser_load_buffer_state (void );
static void yy_policy_parser_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_policy_parser_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_policy_parser_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_policy_parser_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_policy_parser_scan_bytes (yyconst char *bytes,int len  );

void *yy_policy_parseralloc (yy_size_t  );
void *yy_policy_parserrealloc (void *,yy_size_t  );
void yy_policy_parserfree (void *  );

#define yy_new_buffer yy_policy_parser_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yy_policy_parserensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_policy_parser_create_buffer(yy_policy_parserin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yy_policy_parserensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_policy_parser_create_buffer(yy_policy_parserin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yy_policy_parserwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yy_policy_parserin = (FILE *) 0, *yy_policy_parserout = (FILE *) 0;

typedef int yy_state_type;

extern int yy_policy_parserlineno;

int yy_policy_parserlineno = 1;

extern char *yy_policy_parsertext;
#define yytext_ptr yy_policy_parsertext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yy_policy_parsertext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yy_policy_parserleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 57
#define YY_END_OF_BUFFER 58
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1367] =
    {   0,
        0,    0,    0,    0,   58,   56,   54,   55,   56,    6,
       16,   17,   25,   24,   26,    2,    2,    2,   15,   53,
       22,   27,   23,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
        8,    7,   54,   19,   28,    3,   29,    0,    2,    0,
        0,    2,    2,    2,   13,   20,   18,   21,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   36,   52,   52,   52,   52,   52,   52,   52,
       52,    8,    0,    0,    0,    0,    2,    0,    0,   13,
        2,    2,    0,    0,   13,   13,   13,   13,   52,   52,

       46,   52,   39,   35,   42,   52,   52,   52,   52,   52,
       52,   38,   52,   52,   52,   52,   52,   52,   40,   52,
       52,   37,    1,    0,    0,    0,    0,    0,    2,    0,
        0,    0,   13,   13,   13,   13,    0,    0,   14,   14,
        0,   13,    0,   13,   13,   13,   13,   52,   52,   52,
       52,   52,   41,   52,   52,   49,   52,   52,   52,   52,
       52,   52,   51,    4,    0,    0,    0,    0,    2,    0,
        0,   13,   13,    0,   13,   13,   13,   13,    0,    0,
       14,   14,   14,    0,    0,    0,   13,   13,   13,   13,
       13,   13,   13,   47,   52,   30,    5,   52,   52,   52,

       52,   52,   52,   52,   52,    0,    0,    0,    0,    0,
        0,    0,    0,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,    0,    0,   12,   14,    0,    0,
        0,    0,    0,   13,    0,   13,    0,   13,   13,   13,
       13,   44,   31,   43,   52,   52,   50,   52,   45,   52,
       10,   10,   10,    0,    0,    0,   13,   13,    0,   13,
       13,   13,   13,   13,   13,    0,   13,   13,   13,   13,
        0,    0,   12,   12,   12,   12,   12,    0,    0,    0,
        0,    0,    0,    0,   13,   13,   13,   13,   13,   13,
       13,   52,   52,   52,   32,    0,    0,   10,   10,   10,

       10,    0,    0,    0,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,    0,    0,    0,   12,   12,   12,   12,    0,
       12,    0,   12,   12,   12,   12,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   13,    0,   13,    0,
       13,   13,   13,   13,   33,   52,   48,    0,   11,   11,
       11,   10,    0,    0,   13,   13,    0,   13,   13,   13,
       13,   13,   13,    0,   13,   13,   13,   13,   13,   13,
        0,   13,   13,   13,   13,    0,    0,   12,   12,    0,
       12,   12,   12,   12,    0,    0,    0,   12,   12,   12,

       12,   12,   12,   12,   13,   13,   13,    0,    0,    0,
        0,    0,    0,    0,    0,   13,   13,   13,   13,   13,
       13,   13,   34,    0,    0,    0,    0,    0,    0,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,    0,    0,    0,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,    0,    0,
        0,    0,    0,   12,    0,   12,    0,   12,   12,   12,
       12,   13,   13,   13,   13,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   13,    0,   13,    0,   13,

       13,   13,   13,    0,    0,    0,    0,    0,    0,    0,
       13,   13,    0,   13,   13,   13,   13,   13,   13,    0,
       13,   13,   13,   13,   13,   13,    0,   13,   13,   13,
       13,   13,   13,    0,   13,   13,   13,   13,    0,    0,
       12,   12,    0,   12,   12,   12,   12,   12,   12,    0,
       12,   12,   12,   12,    0,    0,    0,    0,    0,    0,
        0,   12,   12,   12,   12,   12,   12,   12,   13,   13,
       13,   13,    0,    0,    0,    0,    0,    0,    0,    0,
       13,   13,   13,   13,   13,   13,   13,    0,    0,    0,
        0,    0,    0,    0,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,    0,    0,    0,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   12,    0,   12,
        0,   12,   12,   12,   12,   13,   13,   13,   13,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   13,
        0,   13,    0,   13,   13,   13,   13,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   13,    0,   13,    0,

       13,   13,   13,   13,   13,   13,    0,   13,   13,   13,
       13,   13,   13,    0,   13,   13,   13,   13,   13,   13,
        0,   13,   13,   13,   13,   13,   13,    0,   13,   13,
       13,   13,    0,    0,   12,   12,    0,   12,   12,   12,
       12,   12,   12,    0,   12,   12,   12,   12,   12,   12,
        0,   12,   12,   12,   12,   12,   12,   12,    0,    0,
        0,    0,    0,    0,    0,    0,   12,   12,   12,   12,
       12,   12,   12,   13,   13,   13,   13,    0,    0,    0,
        0,    0,    0,    0,    0,   13,   13,   13,   13,   13,
       13,   13,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,    0,    0,    0,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   12,    0,   12,
        0,   12,   12,   12,   12,   13,   13,   13,   13,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   13,
        0,   13,    0,   13,   13,   13,   13,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   13,   13,    0,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,    0,    0,   12,   12,    0,   12,   12,   12,   12,
       12,   12,    0,   12,   12,   12,   12,   12,   12,    0,
       12,   12,   12,   12,   12,   12,    0,   12,   12,   12,
       12,   12,   12,   12,   12,    0,    0,    0,    0,    0,
        0,    0,    0,   12,   12,   12,   12,   12,   12,   12,
       13,   13,   13,   13,    0,    0,    0,    0,    0,    0,
        0,    0,   13,   13,   13,   13,    9,    9,    9,    0,
        0,    0,    0,    0,    0,    0,   13,   13,   13,   13,

       13,   13,   13,    0,    0,    0,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   12,    0,   12,    0,   12,   12,   12,   12,
       13,   13,   13,   13,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   13,   13,    9,    9,    9,    9,
        0,    0,    0,    0,   13,   13,   13,   13,   13,   13,
       13,    0,    0,    0,    0,   12,    0,   12,    0,   12,

       12,   12,   12,   12,   12,    0,   12,   12,   12,   12,
       12,   12,    0,   12,   12,   12,   12,   12,   12,    0,
       12,   12,   12,   12,   12,   12,    0,   12,   12,   12,
       12,   12,   12,   12,   12,    0,    0,    0,    0,    0,
        0,    0,    0,   12,   12,   12,   12,   12,   12,   12,
       13,   13,   13,   13,    0,    0,    0,    0,    0,   13,
        9,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   12,
        0,   12,    0,   12,   12,   12,   12,   13,   13,   13,
       13,    0,    0,    0,    0,    0,   13,   13,   13,   13,
        0,    0,    0,    0,    0,    0,   12,   12,    0,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,    0,    0,    0,    0,    0,    0,
        0,    0,   12,   12,   12,   12,   13,   13,   13,   13,
        0,   13,   13,   13,   13,    0,    0,    0,    0,    0,
        0,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   12,   12,   13,   13,   13,   13,   13,    0,
        0,    0,    0,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,    0,    0,    0,    0,    0,   12,
       13,    0,    0,    0,    0,    0,   12,   12,   12,   12,
        0,    0,    0,    0,    0,   12,   12,   12,   12,    0,
       12,   12,   12,   12,    0,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    1,    6,    7,
        8,    9,   10,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   20,   20,   21,   22,   23,   24,
       25,   26,    1,    1,   27,   27,   27,   27,   28,   27,
       29,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   31,   32,   33,   30,   30,   30,   34,   30,   30,
        1,    1,    1,    1,   35,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   45,   30,   46,   47,   48,
       49,   50,   30,   51,   52,   53,   54,   30,   30,   55,
       56,   30,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    1,    1,    1,    2,    2,    1,    1,    1,    1,
        3,    4,    5,    6,    6,    6,    6,    6,    6,    6,
        6,    7,    1,    1,    8,    1,    9,    9,    3,    3,
        3,    3,    3,    3,    3,    9,    9,    9,    9,    9,
        9,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[1722] =
    {   0,
        0,    0,   52,   54, 5169, 8694, 5166, 8694, 5142, 8694,
     8694, 8694, 8694, 5141, 5138,   49,   77,   64, 5140, 8694,
     5136, 5135, 5125,   88,  131, 5106, 5105,   36, 5079, 5076,
     5094, 5089, 5079,  114, 5074,   62, 5084,   19,   61, 5074,
        0, 8694, 5120, 8694, 8694,  159, 8694,  169,  179, 5090,
     5074,  207,  135,  215,  225, 8694, 8694, 8694,    0,  253,
     5066, 5061, 5055, 5053, 5052, 5039, 5051, 5040, 5049, 5036,
      127, 5021,  114, 5012, 5008, 5011, 5006, 5017, 5002, 4998,
     4998,    0,  281, 5036,  291, 5035,  301, 5024, 5014,  331,
        0, 5021, 5020,  359,  369,  397,  194,  407,  415, 4997,

        0, 4969,    0,    0,    0, 4970, 4955, 4967, 4963, 4960,
     4950,    0, 4951, 4956, 4954, 4944, 4947, 4918,    0, 4912,
     4903,    0,  443,  451, 4930, 4929,  461, 4928,  180, 4917,
     4916, 4915,  469,  497,  240,  507, 4922, 4911,  515,  523,
      533,  543,  571,  601,  609,  619, 4920, 4909, 4877,   50,
     4848, 4835,    0, 4834, 4825,    0, 4824, 4822, 4832, 4820,
     4828, 4812,    0,    0, 4852,  627, 4851, 4841,  192, 4821,
     4811,  637,  667,  695,  725,  733,  743, 4794, 4783, 4776,
     8694,  749,  268, 4770,  759, 4769,  238,  312,  769,  797,
      346,  807,  314,    0, 4727,    0,    0, 4728, 4725, 4735,

     4725, 4717, 4734, 4718, 4730,  815, 4757, 4742,  825, 4733,
     4722, 4721, 4720,  833,  861,  384,  871,  344,  382,  881,
      909,  430,  919,  428, 4710, 4707,  927, 8694,  955, 4716,
     4709,  965, 4693,  480,  973,  983, 1011, 1041, 1049, 1059,
     4684,    0,    0,    0, 4655, 4641,    0, 4644,    0, 4641,
      152, 1067,  235, 4665, 4646, 4645, 1077, 1107, 1135, 1165,
     1173, 1183, 4654,  482, 1191, 1219, 1249, 1257, 1267, 4653,
     4633, 4630, 1273, 1303, 1331,  558, 4629, 4632, 1341, 4616,
     4607, 4606, 1351, 4605,  556,  581, 1361, 1389,  652, 1399,
      583, 4565, 4575, 4554,    0, 4586, 1407,  263,  265, 1417,

      318, 4575, 4574, 4573, 1425, 1453,  682, 1463,  650,  680,
     1473, 1501,  710, 1511,  708,  780,  782, 1521, 1549,  848,
     1559,  846, 4572, 4569, 4568, 1569, 1597,  896, 4544, 1605,
     1615, 1643, 4543, 1671, 1681,  292, 1690, 4552, 4549, 1700,
     4530, 1706, 4512, 4495, 1716, 4493,  894, 1724, 1734, 1762,
     1792, 1800, 1810, 4492,    0, 4435,    0, 1816, 1824,  339,
     8694,  320, 4446, 4435, 1834, 1864, 1892, 1922, 1930, 1940,
     4444,  937, 1948, 1976, 2006, 2014, 2024, 4443,  939, 2032,
     2060, 2090, 2098, 2108, 4442, 4429, 4408, 2114, 2144, 2172,
     4390, 2200, 2210,  592, 4389, 2221, 4388,  994,  995, 2231,

     2259, 1026, 4377,  996,  380, 2269,  425, 4386, 4383, 2279,
     4362, 4344, 4333, 2289, 4332, 1024, 1087, 2299, 2327, 1122,
     2337, 1089,    0, 4331, 2347, 4330, 4317, 4296, 4278, 2357,
     2385, 1150, 2395, 1120, 1148, 2405, 2433, 1206, 2443, 1204,
     1229, 1231, 2453, 2481, 1288, 2491, 1286, 1314, 1316, 2501,
     2529, 1376, 2539, 1374, 4267, 4266, 4265, 2549, 2577, 1440,
     4264, 1240, 1342, 2587, 2615, 1488, 4261, 1438, 2623, 4233,
     4231, 2633, 4212, 4186, 2639, 2649, 2677, 4168, 2705, 2715,
     1486,  486,  488, 2726,  554, 2732, 4166, 4165, 2742, 4164,
     2748, 4161, 4139, 2758, 4138, 1532, 2766, 2776, 2804, 2834,

     2842, 2852, 4137, 2858, 4136, 4133, 2868, 4110, 4092, 4076,
     2876, 2906, 2934, 2964, 2972, 2982, 4067, 1534, 2990, 3018,
     3048, 3056, 3066, 4066, 1580, 3074, 3102, 3132, 3140, 3150,
     4059, 1582, 3158, 3186, 3216, 3224, 3234, 4034, 4022, 4021,
     3240, 3270, 3298, 4020, 3326, 3336, 1560, 3996, 3347, 3375,
     3994, 3403, 3413, 1616, 3977, 3424, 3961, 3926, 3890, 3434,
     3888, 1627, 1628, 3444, 3472, 1658, 3842, 1656,  588,  647,
     3482,  678, 3850, 3849, 3492, 3804, 3802, 3801, 3502, 3781,
     1745, 1747, 3512, 3540, 1777, 3550, 1775, 3762, 3560, 3761,
     3760, 3749, 3746, 3568, 3598, 3626, 1849, 3636, 1847, 1875,

     3646, 3674, 1907, 3684, 1877, 1905, 1959, 3694, 3722, 1991,
     3732, 1961, 1989, 2043, 3742, 3770, 2075, 3780, 2045, 2073,
     2124, 3790, 3818, 2159, 3828, 2126, 3723, 3698, 3696, 3838,
     3866, 2187, 3695, 2135, 2157, 3876, 3904, 2246, 3675, 2185,
     2222, 2244, 3914, 3942, 2314, 3650, 2280, 3950, 3658, 3657,
     3960, 3637, 3966, 3620, 3618, 3976, 3617, 3606, 3982, 3992,
     4020, 3605, 4048, 4058, 2312,  705,  786, 4069,  788, 4075,
     3612, 3580, 4085, 3579, 4091, 3532, 3531, 4101, 3530, 2368,
     4109, 4119, 4147, 4177, 4185, 4195, 3529, 4201, 3465, 3464,
     4211, 3463, 3452, 4219, 4247, 2420,  844, 3451, 4257,    0,

     4287, 4295, 4305, 3458, 2370, 4313,    0, 4343, 4351, 4361,
     3422, 2418, 4369,    0, 4399, 4407, 4417, 3421, 2464, 4425,
        0, 4455, 4463, 4473, 3414, 2466, 4481,    0, 4511, 4519,
     4529, 3398, 3386, 3384, 4535, 4565, 4593, 3383, 4621, 4631,
     2338, 3382, 4642, 4670, 3379, 4698, 4708, 2512, 3359, 4719,
     4747, 3357, 4775, 4785, 2513, 4794, 4802, 4810, 3366, 3365,
     4820, 3364, 3348, 3345, 4830, 3344, 2514, 2540, 4840, 4868,
     2564, 3327, 2562,  892,  944, 4878, 1000, 3321, 3317, 4888,
     3316, 3315, 3312, 4898, 3292, 2598, 2600, 4908, 4936, 2664,
     4946, 2662, 3290, 4956, 3289, 3288, 3277, 4964, 4974, 3274,

     3261, 5002, 5012, 2650, 1002, 2687, 2689, 1021, 2787, 2789,
     2814, 1094, 2816, 2886, 2888, 1118, 2917, 2919, 2944, 1145,
     2946, 3001, 3003, 1202, 3028, 3244, 3242, 3241, 5023, 5051,
     3089, 3240, 2825, 2955, 5061, 5089, 3117, 3225, 3030, 3031,
     3039, 5099, 5127, 3173, 3207, 3087, 3115, 3171, 5137, 5165,
     3201, 3190, 3199, 5173, 5181, 3255, 8694, 5189, 3198, 3197,
     5199, 3196, 5205, 3172, 3170, 5215, 3169, 3141, 5221, 5231,
     5259, 3123, 5287, 5297, 3253, 1236, 1283, 5308, 1320, 5314,
     3116, 3114, 5324, 3113, 5330, 3112, 3088, 5340, 3086, 3281,
     5348, 5358,    0, 5388, 5396, 5406, 3085, 5412, 3067, 3037,

     5422, 3036, 3035, 5430, 3032, 3283, 3308, 1322, 1372, 3309,
     1436, 3310, 1484, 3358, 1538, 3360, 1540, 3385, 1586, 3387,
     1588, 3002, 3000, 5438, 5468, 5496, 2999, 5524, 5534, 3425,
     2973, 5545, 5573, 2947, 5601, 5611, 3445, 2943, 5622, 5650,
     2938, 5678, 5688, 3456, 2918, 5699, 5727, 2889, 5755, 5765,
     3457, 8694, 5774, 5782, 5790, 2897, 2895, 5800, 2890, 2869,
     2853, 5810, 2827, 3493, 3523, 5820, 5848, 3583, 2813, 3524,
     1632, 1634, 5858, 1653, 2818, 2798, 5868, 2767, 2759, 2743,
     5878, 2716, 3525, 3581, 1689, 3609, 5886, 5894, 5902, 2700,
     5910, 2698, 2696, 5920, 2691, 2651, 1751, 1753, 1772, 1844,

     1881, 1883, 1902, 2624, 2599, 5926, 5956, 5984, 3661, 2578,
     3551, 3611, 5994, 6022, 3709, 2553, 3659, 3707, 3753, 6032,
     6060, 3805, 2505, 3754, 3755, 3803, 6070, 6098, 3853, 2482,
     3829, 3851, 3877, 6108, 6136, 3891, 2465, 3889, 6144, 6152,
     3929, 8694, 6160, 2444, 2396, 6170, 2379, 6176, 2313, 2245,
     6186, 2211, 2176, 6192, 6202, 6230, 2174, 6258, 6268, 3915,
     1965, 1967, 6279, 1986, 6285, 2158, 2137, 6295, 2133, 6301,
     2128, 2109, 6311, 2091, 3927, 2049, 6317, 6325, 4007, 8694,
     2072, 6335, 2054, 2025, 2051, 2070, 2131, 2155, 2182, 2218,
     2242, 1997, 6345, 6373, 4035,    0, 1978, 6383,    0, 1960,

     6411, 6421, 3993, 1931, 6432,    0, 1913, 6460, 6470, 4005,
     1894, 6481,    0, 1876, 6509, 6519, 4033, 1836, 6530,    0,
     1801, 6558, 6568, 4130, 1783, 6579,    0, 1764, 6607, 6617,
     4131, 8694, 6626, 6634, 6642, 1756, 1725, 6652, 1717, 1701,
     1682, 6662, 1657, 4132, 4157, 6672, 6700, 4234, 1645, 4158,
     2310, 2374, 6710, 2376, 1636, 1629, 6720, 1591, 1543, 2416,
     8694, 6728, 1512, 1487, 6738, 1464, 1429, 6744, 6754, 1390,
     1315, 6782, 6792, 4159,    0, 4160, 4220,    0, 4232, 4268,
     4269,    0, 4270, 4324, 4325,    0, 4326, 4380, 4381,    0,
     4382, 4436, 4437,    0, 4438, 6801, 6809, 4496, 8694, 6817,

     1304, 1285, 6827, 1268, 6833, 1242, 1238, 6843, 1233, 1174,
     6849, 6859,    0, 1156, 6887, 6897, 4494, 2470, 2472, 6908,
     2518, 6914, 1147, 1100, 6924, 1098, 2520, 2560, 6932, 2604,
     1096, 1091, 6942, 1060, 4545, 4546,    0, 8694, 4547,    0,
     1032,    0, 1013,    0,  987,    0,  964,    0,  956,    0,
     8694, 6950, 6958, 6966,  950,  948, 6976,  946,  941,  920,
     6986,  872, 4548, 4566,    0, 4577, 2606, 2694, 6996, 2723,
      826, 2793, 2795, 7006, 2821, 7012,  808,  791, 7022,  760,
      734,    0,    0,    0,    0,    0,    0,    0, 7028, 7036,
     4608, 8694, 7044,  726,  707, 7054,  649, 7060,  628,  620,

     7070,  594,  580,    0, 2893, 2923, 7078, 2925, 2951,  585,
     7086,  534,  508,    0, 8694, 8694, 8694, 8694, 8694, 8694,
     8694, 7094, 7102, 7110,  491,  462, 7120,  427,  408,    0,
     3007, 7128,  323,  267, 7138,  237, 7144, 7152, 4657, 8694,
     7160,  193,  191, 7170,  149, 8694, 7176, 7184, 7192,  145,
     8694, 7200, 7208, 7216,  102, 7224, 7232, 4685, 8694, 7240,
     7248, 4734, 8694, 8694, 8694, 8694, 7269, 7273, 7281, 7285,
     7289, 7295, 7298, 7299, 7303, 7309, 7312, 7314, 7318, 7322,
     7328, 7331, 7332, 7336, 7340, 7346, 7349, 7352, 7358, 7359,
     7363, 7369, 7373, 7377, 7383, 7386, 7389, 7390, 7394, 7398,

     7402, 7406, 7412, 7415, 7418, 7421, 7424, 7430, 7431, 7435,
     7441, 7447, 7451, 7455, 7459, 7463, 7469, 7472, 7475, 7478,
     7482, 7486, 7490, 7494, 7498, 7502, 7508, 7511, 7514, 7518,
     7524, 7527, 7530, 7533, 7536, 7539, 7542, 7549, 7555, 7558,
     7559, 7563, 7569, 7575, 7581, 7585, 7589, 7593, 7599, 7603,
     7609, 7612, 7613, 7619, 7622, 7625, 7628, 7631, 7634, 7637,
     7640, 7641, 7645, 7649, 7653, 7657, 7661, 7667, 7670, 7673,
     7676, 7679, 7683, 7689, 7692, 7695, 7698, 7701, 7704, 7707,
     7713, 7716, 7717, 7723, 7729, 7735, 7741, 7745, 7749, 7753,
     7759, 7763, 7769, 7773, 7779, 7782, 7785, 7788, 7789, 7795,

     7798, 7801, 7804, 7807, 7810, 7813, 7816, 7817, 7823, 7827,
     7831, 7835, 7839, 7843, 7847, 7851, 7855, 7859, 7863, 7867,
     7873, 7876, 7879, 7882, 7885, 7889, 7895, 7898, 7901, 7904,
     7907, 7910, 7913, 7919, 7922, 7923, 7927, 7933, 7939, 7945,
     7951, 7957, 7963, 7969, 7975, 7981, 7987, 7993, 7997, 8001,
     8005, 8011, 8015, 8021, 8025, 8031, 8035, 8041, 8044, 8047,
     8050, 8051, 8057, 8060, 8063, 8066, 8069, 8072, 8073, 8079,
     8082, 8085, 8088, 8091, 8097, 8103, 8109, 8115, 8121, 8127,
     8133, 8137, 8141, 8145, 8149, 8153, 8157, 8163, 8166, 8169,
     8172, 8175, 8179, 8185, 8188, 8191, 8194, 8197, 8200, 8203,

     8209, 8215, 8218, 8221, 8227, 8233, 8239, 8245, 8251, 8257,
     8261, 8265, 8271, 8275, 8281, 8285, 8291, 8295, 8301, 8305,
     8311, 8314, 8317, 8320, 8321, 8327, 8330, 8333, 8336, 8339,
     8342, 8345, 8351, 8354, 8357, 8361, 8365, 8369, 8373, 8377,
     8381, 8385, 8389, 8393, 8397, 8401, 8405, 8409, 8415, 8418,
     8421, 8424, 8427, 8431, 8437, 8440, 8443, 8446, 8449, 8455,
     8458, 8459, 8463, 8467, 8473, 8477, 8483, 8487, 8493, 8497,
     8503, 8507, 8513, 8517, 8523, 8526, 8527, 8531, 8537, 8540,
     8543, 8546, 8549, 8552, 8555, 8559, 8563, 8567, 8571, 8575,
     8579, 8583, 8589, 8592, 8595, 8598, 8601, 8605, 8611, 8614,

     8617, 8620, 8621, 8625, 8629, 8633, 8637, 8641, 8645, 8651,
     8654, 8655, 8661, 8664, 8667, 8668, 8674, 8677, 8678, 8684,
     8687
    } ;

static yyconst flex_int16_t yy_def[1722] =
    {   0,
     1366,    1, 1367, 1367, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1368, 1366,   16,   17, 1366, 1366,
     1366, 1366, 1366, 1366,   24,   25,   25,   24,   24,   24,
       24,   25,   25,   25,   25,   25,   25,   25,   25,   25,
     1369, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1370,
     1371,   49,   52,   52, 1366, 1366, 1366, 1366,   25,   24,
       25,   25,   60,   60,   25,   25,   25,   60,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25, 1369, 1366, 1372, 1366, 1373, 1366, 1374, 1375, 1366,
       87,   87, 1366, 1366, 1366,   95,   96,   96,   60,   25,

       25,   99,   99,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25, 1366, 1366, 1373, 1376, 1366, 1366, 1377, 1366,
     1378, 1379, 1366,  133,  134,  134, 1366, 1380, 1366, 1366,
     1366, 1366, 1366,  142,  142,  144,  144,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25, 1381, 1366, 1382, 1366, 1377, 1383,
     1384, 1366, 1366, 1366,  173,  173,  175,  175, 1385, 1366,
     1366, 1366, 1366, 1386, 1366, 1387, 1388, 1388, 1366,  189,
      190,  190, 1388,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25, 1366, 1382, 1389, 1366, 1366,
     1366, 1390, 1391, 1366,  214,  215,  215, 1392, 1392, 1366,
      220,  221,  221, 1392, 1393, 1394, 1366, 1366, 1366, 1387,
     1395, 1366, 1366, 1366, 1366, 1366, 1366,  236,  236,  238,
      238,   25,   25,   25,   25,   25,   25,   25,   25,   25,
     1396, 1366, 1397, 1366, 1398, 1399, 1366, 1366, 1366,  258,
      258,  260,  260, 1366, 1366, 1366,  265,  265,  267,  267,
     1400, 1401, 1366, 1366,  274,  275, 1402, 1403, 1366, 1404,
     1366, 1405, 1366, 1406, 1407, 1407, 1366,  287,  288,  288,
     1407,   25,   25,   25,   25, 1366, 1366, 1397, 1408, 1366,

     1366, 1366, 1409, 1410, 1366,  305,  306,  306, 1411, 1411,
     1366,  311,  312,  312, 1411, 1412, 1412, 1366,  318,  319,
      319, 1412, 1366, 1413, 1414, 1366,  326,  327, 1415, 1366,
     1366, 1366, 1416,  331, 1416, 1416, 1366, 1417, 1418, 1366,
     1366, 1366, 1419, 1420, 1366, 1366, 1366, 1366, 1366, 1366,
      349,  349,  351,  351, 1421, 1421, 1421, 1366, 1366, 1366,
     1366, 1366, 1422, 1423, 1366, 1366, 1366,  366,  366,  368,
      368, 1366, 1366, 1366,  373,  373,  375,  375, 1366, 1366,
     1366,  380,  380,  382,  382, 1424, 1425, 1366, 1366, 1366,
     1426,  389, 1426, 1426, 1427, 1366, 1428, 1429, 1429, 1366,

      400,  401, 1430, 1429, 1431, 1366, 1432, 1366, 1433, 1366,
     1434, 1366, 1435, 1366, 1436, 1437, 1437, 1366,  418,  419,
      419, 1437, 1438, 1439, 1366, 1440, 1366, 1441, 1442, 1366,
      430,  431,  431, 1443, 1443, 1366,  436,  437,  437, 1443,
     1444, 1444, 1366,  443,  444,  444, 1444, 1445, 1445, 1366,
      450,  451,  451, 1445, 1366, 1446, 1447, 1366,  458,  459,
     1448, 1449, 1449, 1366,  464,  465, 1450, 1449, 1366, 1451,
     1452, 1366, 1366, 1366, 1366, 1366, 1366, 1453,  476, 1453,
     1453, 1454, 1455, 1366, 1366, 1366, 1456, 1457, 1366, 1366,
     1366, 1458, 1459, 1366, 1366, 1366, 1366, 1366, 1366,  498,

      498,  500,  500, 1366, 1460, 1461, 1366, 1366, 1462, 1463,
     1366, 1366, 1366,  512,  512,  514,  514, 1366, 1366, 1366,
      519,  519,  521,  521, 1366, 1366, 1366,  526,  526,  528,
      528, 1366, 1366, 1366,  533,  533,  535,  535, 1464, 1465,
     1366, 1366, 1366, 1466,  542, 1466, 1466, 1366, 1366, 1366,
     1467,  549, 1467, 1467, 1468, 1366, 1469, 1366, 1470, 1366,
     1471, 1472, 1472, 1366,  564,  565, 1473, 1472, 1366, 1474,
     1366, 1475, 1366, 1476, 1366, 1477, 1366, 1478, 1366, 1479,
     1480, 1480, 1366,  583,  584,  584, 1480, 1481, 1366, 1482,
     1366, 1366, 1483, 1366, 1366,  595,  596,  596, 1484, 1484,

     1366,  601,  602,  602, 1484, 1485, 1485, 1366,  608,  609,
      609, 1485, 1486, 1486, 1366,  615,  616,  616, 1486, 1487,
     1487, 1366,  622,  623,  623, 1487, 1366, 1488, 1489, 1366,
      630,  631, 1490, 1491, 1491, 1366,  636,  637, 1492, 1491,
     1493, 1493, 1366,  643,  644, 1494, 1493, 1366, 1495, 1496,
     1366, 1366, 1366, 1497, 1498, 1366, 1366, 1366, 1366, 1366,
     1366, 1499,  660, 1499, 1499, 1500, 1501, 1366, 1366, 1366,
     1502, 1503, 1366, 1366, 1366, 1504, 1505, 1366, 1366, 1366,
     1366, 1366, 1366,  682,  682,  684,  684, 1366, 1506, 1507,
     1366, 1366, 1508, 1366,  694,  695, 1509, 1510, 1366, 1511,

      699,  699,  701,  701, 1366, 1366, 1512,  706,  706,  708,
      708, 1366, 1366, 1513,  713,  713,  715,  715, 1366, 1366,
     1514,  720,  720,  722,  722, 1366, 1366, 1515,  727,  727,
      729,  729, 1516, 1517, 1366, 1366, 1366, 1518,  736, 1518,
     1518, 1366, 1366, 1366, 1519,  743, 1519, 1519, 1366, 1366,
     1366, 1520,  750, 1520, 1520, 1366, 1366, 1366, 1366, 1521,
     1366, 1522, 1366, 1523, 1366, 1524, 1525, 1525, 1366,  769,
      770, 1526, 1525, 1366, 1527, 1366, 1528, 1366, 1529, 1366,
     1530, 1366, 1531, 1366, 1532, 1533, 1533, 1366,  788,  789,
      789, 1533, 1534, 1366, 1535, 1366, 1366, 1366, 1366, 1536,

     1537,  799, 1537, 1537, 1538, 1539, 1539, 1540, 1539, 1541,
     1541, 1542, 1541, 1543, 1543, 1544, 1543, 1545, 1545, 1546,
     1545, 1547, 1547, 1548, 1547, 1366, 1549, 1550, 1366,  829,
      830, 1551, 1552, 1552, 1366,  835,  836, 1553, 1552, 1554,
     1554, 1366,  842,  843, 1555, 1554, 1556, 1556, 1366,  849,
      850, 1557, 1556, 1366, 1366, 1366, 1366, 1366, 1558, 1559,
     1366, 1366, 1366, 1560, 1561, 1366, 1366, 1366, 1366, 1366,
     1366, 1562,  870, 1562, 1562, 1563, 1564, 1366, 1366, 1366,
     1565, 1566, 1366, 1366, 1366, 1567, 1568, 1366, 1366, 1366,
     1366, 1366, 1569,  892,  892,  894,  894, 1366, 1570, 1571,

     1366, 1366, 1572, 1366, 1573, 1574, 1574, 1575, 1366, 1574,
     1576, 1366, 1577, 1366, 1578, 1366, 1579, 1366, 1580, 1366,
     1581, 1582, 1583, 1366, 1366, 1366, 1584,  925, 1584, 1584,
     1366, 1366, 1366, 1585,  932, 1585, 1585, 1366, 1366, 1366,
     1586,  939, 1586, 1586, 1366, 1366, 1366, 1587,  946, 1587,
     1587, 1366, 1366, 1366, 1366, 1366, 1588, 1366, 1589, 1366,
     1590, 1366, 1591, 1592, 1592, 1366,  966,  967, 1593, 1592,
     1366, 1594, 1366, 1595, 1366, 1596, 1366, 1597, 1366, 1598,
     1366, 1599, 1600, 1600, 1601, 1600, 1366, 1366, 1366, 1366,
     1366, 1602, 1603, 1366, 1366, 1366, 1604, 1605, 1606, 1607,

     1608, 1609, 1610, 1366, 1611, 1366, 1366, 1007, 1008, 1612,
     1613, 1613, 1366, 1013, 1014, 1614, 1613, 1615, 1615, 1366,
     1020, 1021, 1616, 1615, 1617, 1617, 1366, 1027, 1028, 1618,
     1617, 1619, 1619, 1366, 1034, 1035, 1620, 1619, 1366, 1366,
     1366, 1366, 1366, 1621, 1622, 1366, 1366, 1366, 1623, 1624,
     1366, 1366, 1366, 1366, 1366, 1366, 1625, 1055, 1625, 1625,
     1626, 1627, 1366, 1366, 1366, 1628, 1629, 1366, 1366, 1366,
     1630, 1631, 1366, 1366, 1366, 1632, 1366, 1366, 1366, 1366,
     1633, 1366, 1634, 1366, 1635, 1366, 1366, 1366, 1366, 1366,
     1366, 1636, 1366, 1093, 1094, 1637, 1638, 1366, 1639, 1640,

     1098, 1640, 1640, 1366, 1366, 1641, 1642, 1105, 1642, 1642,
     1366, 1366, 1643, 1644, 1112, 1644, 1644, 1366, 1366, 1645,
     1646, 1119, 1646, 1646, 1366, 1366, 1647, 1648, 1126, 1648,
     1648, 1366, 1366, 1366, 1366, 1366, 1649, 1366, 1650, 1366,
     1651, 1366, 1652, 1653, 1653, 1366, 1146, 1147, 1654, 1653,
     1366, 1655, 1366, 1656, 1366, 1657, 1366, 1658, 1366, 1659,
     1366, 1366, 1660, 1661, 1366, 1366, 1366, 1366, 1366, 1662,
     1663, 1169, 1663, 1663, 1664, 1665, 1665, 1666, 1665, 1667,
     1667, 1668, 1667, 1669, 1669, 1670, 1669, 1671, 1671, 1672,
     1671, 1673, 1673, 1674, 1673, 1366, 1366, 1366, 1366, 1366,

     1650, 1675, 1366, 1366, 1366, 1652, 1676, 1366, 1366, 1366,
     1366, 1366, 1677, 1678, 1212, 1678, 1678, 1656, 1679, 1366,
     1366, 1366, 1658, 1680, 1366, 1366, 1366, 1681, 1366, 1682,
     1366, 1683, 1366, 1684, 1685, 1685, 1686, 1366, 1685, 1687,
     1366, 1688, 1366, 1689, 1366, 1690, 1366, 1691, 1366, 1692,
     1366, 1366, 1366, 1366, 1366, 1693, 1366, 1694, 1366, 1695,
     1366, 1696, 1697, 1697, 1698, 1697, 1366, 1699, 1366, 1700,
     1366, 1682, 1701, 1366, 1366, 1366, 1684, 1702, 1366, 1366,
     1366, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1366, 1366,
     1366, 1366, 1366, 1694, 1710, 1366, 1366, 1366, 1696, 1711,

     1366, 1366, 1366, 1712, 1700, 1713, 1366, 1366, 1366, 1714,
     1366, 1715, 1366, 1716, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1717, 1366, 1718, 1366, 1719,
     1366, 1366, 1715, 1720, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1718, 1721, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366,    0, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366
    } ;

static yyconst flex_int16_t yy_nxt[8751] =
    {   0,
        6,    7,    8,    9,   10,   10,   11,   12,   13,   14,
       15,    6,    6,   16,   16,   17,   18,   18,   18,   18,
       18,   19,   20,   21,   22,   23,   24,   24,   25,   25,
       26,   27,   25,   25,    6,   28,   24,   29,   24,   30,
       31,   25,   32,   25,   25,   33,   25,   34,   35,   36,
       37,   38,   39,   25,   40,   25,   42,   42,   42,   42,
       48,   77,   49,   49,   49,   49,   49,   49,   49,   49,
       50,   50,   78,   63,   64,   51,   51,   54,   54,   54,
       54,   54,   54,   65,   51,   51,   51,   51,   51,   51,
       52,   52,   52,   52,   52,   53,   54,   54,   59,  195,

       79,   60,   60,   60,   60,   60,   60,   60,   60,   50,
       74,   80,   75, 1341,   60,   60,   59,   59,   59,   59,
       59,   59,   59,   60,   60,   60,   60,   60,   60,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59, 1366,   71,   92,   92, 1332,   59,   59,  113,
     1341,  110,   72,  296,  297,  114,   59,   59,   59,   59,
       59,   59,   46,   46,   46,   46,   46,   46,   46,   46,
       83,  111,   84,   84,   85,   86,   86,   86,   86,   86,
       48,  137,   87,   87,   87,   87,   87,   87,   87,   87,

       50,   50, 1341,  137, 1341,   88,   88,  147,  147,  147,
      147,  147,  147, 1366,   88,   88,   88,   88,   88,   88,
       91,   91,   91,   91,   91,   91,   91,   91,   92,   92,
       92,   92,   92,   92,   92,   92,   93,   94,   95,   95,
       96,   97,   97,   97,   97,   97,  296,  297, 1332,  141,
       94,   98,   98,  178,  178,  178,  178,  178,  178,  143,
       98,   98,   98,   98,   98,   98,   99,   99,   99,   99,
       99,   99,   99,   99,  296,  297,  296,  297, 1332,   99,
       99,  228,  228,  228,  228,  228,  228,  228,   99,   99,
       99,   99,   99,   99,  123,  123,  123,  123,  123,  123,

      123,  123,  124,  330,  126,  126,  126,  126,  126,  127,
      128,  128,   48,  332,  129,  129,  129,  129,  129,  129,
      129,  129,   50,   93,   94,  141,   94,  130,  130,  296,
      297,  296,  297,  143, 1332,  143,  130,  130,  130,  130,
      130,  130,   93,   94,  133,  133,  134,  135,  135,  135,
      135,  135,  361,  361,  361,  141,   94,  136,  136,  241,
      241,  241,  241,  241,  241,  174,  136,  136,  136,  136,
      136,  136,  139,  140,  139,  139,  139,  139,  139,  139,
      141,   94,  142,  142,  142,  142,  142,  142,  142,  142,
      143,   93,   94,   93,   94,  144,  144,  263,  263,  263,

      263,  263,  263,  174,  144,  144,  144,  144,  144,  144,
      145,  145,  145,  145,  145,  146,  147,  147,   93, 1298,
      144,  144,  144,  144,  144,  144,  144,  144,  148,  148,
      148,  148,  148,  148,  148,  148,   93,   94, 1341,  141,
       94,  148,  148,  270,  270,  270,  270,  270,  270,  174,
      148,  148,  148,  148,  148,  148,  123,  123,  123,  123,
      123,  123,  123,  123,  165,  165,  166,  167,  167,  167,
      167,  167,  124, 1341,  168,  168,  168,  168,  168,  168,
      141,   94,  173,  173,  173,  173,  173,  173,  173,  173,
      174,   93,   94,   93,   94,  175,  175,   93,   94,   93,

       94,  143, 1293,  174,  175,  175,  175,  175,  175,  175,
      176,  176,  176,  176,  176,  177,  178,  178,   93, 1276,
      175,  175,  175,  175,  175,  175,  175,  175,  181,  181,
      181,  181,  181,  181,  181,  181,  182,  182,  183,  181,
      181,  181,  181,  181,  138, 1332,  184,  184,  185,  186,
      186,  186,  186,  186,  141,   94,  187,  187,  187,  187,
      187,  187,  187,  187,  143,   93,   94,  235,   94,  188,
      188,  336,  336,  336,  336,  336,  336,  237,  188,  188,
      188,  188,  188,  188,  189,  189,  190,  191,  191,  191,
      191,  191,   93,   94,  235,   94, 1332,  192,  192,   93,

       94, 1213,  237,  330,  237, 1298,  192,  192,  192,  192,
      192,  192,   93,  390,  188,  188,  188,  188,  188,  188,
      188,  188,  193,  193,  193,  193,  193,  193,  193,  193,
      141, 1298,  193,  193,  193,  193,  193,  193,  206, 1298,
      208,  208,  208,  208,  208,  209,  210,  210,   93,   94,
      214,  214,  215,  216,  216,  216,  216,  216,   93,   94,
     1293,  141,   94,  217,  217,  354,  354,  354,  354,  354,
      354,  259,  217,  217,  217,  217,  217,  217,  141,   94,
      218,  218,  218,  218,  218,  218,  218,  218,  174,   93,
       94,   93,   94,  219,  219,  371,  371,  371,  371,  371,

      371,  259,  219,  219,  219,  219,  219,  219,  220,  220,
      221,  222,  222,  222,  222,  222,   93,   94, 1293,  141,
       94,  223,  223,  378,  378,  378,  378,  378,  378,  259,
      223,  223,  223,  223,  223,  223,   93, 1293,  219,  219,
      219,  219,  219,  219,  219,  219,  224,  224,  224,  224,
      224,  224,  224,  224,  141, 1170,  224,  224,  224,  224,
      224,  224,  228,  228,  228,  228,  228,  228,  228,  228,
      229, 1276,  231,  231,  231,  231,  231,  232,  233,  233,
      235,   94,  236,  236,  236,  236,  236,  236,  236,  236,
      237,  235,   94,   93,   94,  238,  238,   93,   94,   93,

       94,  266, 1276,  266,  238,  238,  238,  238,  238,  238,
      239,  239,  239,  239,  239,  240,  241,  241,   93, 1276,
      238,  238,  238,  238,  238,  238,  238,  238,  251,  251,
      252,  253,  253,  253,  253,  253,  206, 1222,  254,  254,
      254,  254,  254,  254,  141,   94,  258,  258,  258,  258,
      258,  258,  258,  258,  259,   93,   94,  235,   94,  260,
      260,  385,  385,  385,  385,  385,  385,  266,  260,  260,
      260,  260,  260,  260,  261,  261,  261,  261,  261,  262,
      263,  263,   93, 1298,  260,  260,  260,  260,  260,  260,
      260,  260,  235,   94,  265,  265,  265,  265,  265,  265,

      265,  265,  266,   93,   94,   93,   94,  267,  267,  394,
      394,  394,  394,  394,  394,  237,  267,  267,  267,  267,
      267,  267,  268,  268,  268,  268,  268,  269,  270,  270,
       93, 1298,  267,  267,  267,  267,  267,  267,  267,  267,
      274,  274,  275,  276,  276,  276,  276,  276,   93,   94,
       93,   94, 1205,  277,  277,   93,   94, 1293,  259, 1293,
      266, 1200,  277,  277,  277,  277,  277,  277,  278,  278,
      279,  280,  280,  280,  280,  280,  229, 1127,  281,  281,
      281,  281,  281,  281,  138, 1120,  282,  282,  283,  284,
      284,  284,  284,  284,  235,   94,  285,  285,  285,  285,

      285,  285,  285,  285,  237,  330, 1366,  330, 1113,  286,
      286,   93,   94,   93,   94,  332,  332,  332,  286,  286,
      286,  286,  286,  286,  287,  287,  288,  289,  289,  289,
      289,  289,   93,   94, 1106,  348,   94,  290,  290,  481,
      481,  481,  481,  481,  481,  350,  290,  290,  290,  290,
      290,  290,   93, 1099,  286,  286,  286,  286,  286,  286,
      286,  286,  291,  291,  291,  291,  291,  291,  291,  291,
      235, 1276,  291,  291,  291,  291,  291,  291,  296,  297,
      299,  299,  299,  299,  299,  300,  301,  301,   93,   94,
      305,  305,  306,  307,  307,  307,  307,  307,   93,   94,

      348,   94, 1276,  308,  308,   93,   94, 1162,  350, 1222,
      350, 1222,  308,  308,  308,  308,  308,  308,  141,   94,
      309,  309,  309,  309,  309,  309,  309,  309,  259,   93,
       94,  141,   94,  310,  310,  503,  503,  503,  503,  503,
      503,  367,  310,  310,  310,  310,  310,  310,  311,  311,
      312,  313,  313,  313,  313,  313,   93,   94, 1222,   93,
       94,  314,  314,  517,  517,  517,  517,  517,  517,  367,
      314,  314,  314,  314,  314,  314,   93, 1213,  310,  310,
      310,  310,  310,  310,  310,  310,  315,  315,  315,  315,
      315,  315,  315,  315,  141, 1056,  315,  315,  315,  315,

      315,  315,  235,   94,  316,  316,  316,  316,  316,  316,
      316,  316,  266,   93,   94,  141,   94,  317,  317,  524,
      524,  524,  524,  524,  524,  367,  317,  317,  317,  317,
      317,  317,  318,  318,  319,  320,  320,  320,  320,  320,
      235,   94,   93,   94, 1205,  321,  321,   93,   94, 1205,
      374,  330,  374, 1205,  321,  321,  321,  321,  321,  321,
       93,  390,  317,  317,  317,  317,  317,  317,  317,  317,
      322,  322,  322,  322,  322,  322,  322,  322,  235, 1200,
      322,  322,  322,  322,  322,  322,  326,  326,  327,  328,
      328,  328,  328,  328,   93,   94, 1200,  235,   94,  329,

      329,  531,  531,  531,  531,  531,  531,  374,  329,  329,
      329,  329,  329,  329,  330, 1200,  331,  331,  331,  331,
      331,  331,  331,  331,  332,  348,   94,   93,   94,  333,
      333,   93,   94,   93,   94,  381, 1170,  381,  333,  333,
      333,  333,  333,  333,  334,  334,  334,  334,  334,  335,
      336,  336,  337, 1366,  339,  339,  339,  339,  339,  340,
      341,  341,  342,  390,  344,  344,  344,  344,  344,  345,
      346,  346,  348,   94,  349,  349,  349,  349,  349,  349,
      349,  349,  350,   93,   94,  348,   94,  351,  351,  538,
      538,  538,  538,  538,  538,  381,  351,  351,  351,  351,

      351,  351,  352,  352,  352,  352,  352,  353,  354,  354,
       93, 1238,  351,  351,  351,  351,  351,  351,  351,  351,
      359,  359,  359,  360,  361,  361,  361,  361,  296,  297,
      362,  362,  362,  362,  362,  362,  141,   94,  366,  366,
      366,  366,  366,  366,  366,  366,  367,   93,   94,  330,
     1006,  368,  368,  547,  547,  547,  547,  547,  547,  390,
      368,  368,  368,  368,  368,  368,  369,  369,  369,  369,
      369,  370,  371,  371,   93, 1162,  368,  368,  368,  368,
      368,  368,  368,  368,  235,   94,  373,  373,  373,  373,
      373,  373,  373,  373,  374,   93,   94,  475, 1162,  375,

      375,  554,  554,  554,  554,  554,  554,  477,  375,  375,
      375,  375,  375,  375,  376,  376,  376,  376,  376,  377,
      378,  378,   93, 1162,  375,  375,  375,  375,  375,  375,
      375,  375,  348,   94,  380,  380,  380,  380,  380,  380,
      380,  380,  381,   93,   94,   93,   94,  382,  382,   93,
       94,   93,   94,  350, 1070,  367,  382,  382,  382,  382,
      382,  382,  383,  383,  383,  383,  383,  384,  385,  385,
       93,  330,  382,  382,  382,  382,  382,  382,  382,  382,
      330,  543,  389,  389,  389,  389,  389,  389,  389,  389,
      390,   93,   94,   93,   94,  391,  391,   93,   94,   93,

       94,  374, 1222,  381,  391,  391,  391,  391,  391,  391,
      392,  392,  392,  392,  392,  393,  394,  394,  395,  395,
      396,  397,  397,  397,  397,  397,  330,  475,  398,  398,
      398,  398,  398,  398,  398,  398,  332,  550,  475, 1366,
     1222,  399,  399,   93,   94,   93,   94, 1065,  477,  477,
      399,  399,  399,  399,  399,  399,  400,  400,  401,  402,
      402,  402,  402,  402,   93,   94, 1213,  475, 1205,  403,
      403,  665,  665,  665,  665,  665,  665,  477,  403,  403,
      403,  403,  403,  403,  404,  404,  404,  404,  404,  404,
      404,  404,  330, 1205,  404,  404,  404,  404,  404,  404,

       93,   94,  332,  405,  405,  406,  407,  407,  407,  407,
      407,  337, 1048,  408,  408,  408,  408,  408,  408,  409,
      409,  410,  411,  411,  411,  411,  411,  342, 1200,  412,
      412,  412,  412,  412,  412,  138, 1200,  413,  413,  414,
      415,  415,  415,  415,  415,  348,   94,  416,  416,  416,
      416,  416,  416,  416,  416,  350,  497,   94,   93,   94,
      417,  417,   93,   94,   93,   94,  499, 1043,  499,  417,
      417,  417,  417,  417,  417,  418,  418,  419,  420,  420,
      420,  420,  420,   93,   94, 1127,  497,   94,  421,  421,
      687,  687,  687,  687,  687,  687,  499,  421,  421,  421,

      421,  421,  421,   93,  947,  417,  417,  417,  417,  417,
      417,  417,  417,  422,  422,  422,  422,  422,  422,  422,
      422,  348, 1120,  422,  422,  422,  422,  422,  422,  424,
      424,  425,  426,  426,  426,  426,  426,  361,  361,  361,
      361,  361,  361,  361,  361,   93,   94,  430,  430,  431,
      432,  432,  432,  432,  432,   93,   94,  940,  141,   94,
      433,  433,  704,  704,  704,  704,  704,  704,  513,  433,
      433,  433,  433,  433,  433,  141,   94,  434,  434,  434,
      434,  434,  434,  434,  434,  367,   93,   94,  141,   94,
      435,  435,   93,   94,   93,   94,  513, 1113,  513,  435,

      435,  435,  435,  435,  435,  436,  436,  437,  438,  438,
      438,  438,  438,   93,   94,  933,  235,   94,  439,  439,
      711,  711,  711,  711,  711,  711,  520,  439,  439,  439,
      439,  439,  439,   93, 1106,  435,  435,  435,  435,  435,
      435,  435,  435,  440,  440,  440,  440,  440,  440,  440,
      440,  141,  926,  440,  440,  440,  440,  440,  440,  235,
       94,  441,  441,  441,  441,  441,  441,  441,  441,  374,
       93,   94,  235,   94,  442,  442,   93,   94,   93,   94,
      520, 1099,  520,  442,  442,  442,  442,  442,  442,  443,
      443,  444,  445,  445,  445,  445,  445,   93,   94, 1170,

      348,   94,  446,  446,  718,  718,  718,  718,  718,  718,
      527,  446,  446,  446,  446,  446,  446,   93, 1006,  442,
      442,  442,  442,  442,  442,  442,  442,  447,  447,  447,
      447,  447,  447,  447,  447,  235,  991,  447,  447,  447,
      447,  447,  447,  348,   94,  448,  448,  448,  448,  448,
      448,  448,  448,  381,   93,   94,  348,   94,  449,  449,
       93,   94,   93,   94,  527, 1162,  527,  449,  449,  449,
      449,  449,  449,  450,  450,  451,  452,  452,  452,  452,
      452,   93,   94, 1162,  497,   94,  453,  453,  725,  725,
      725,  725,  725,  725,  534,  453,  453,  453,  453,  453,

      453,   93, 1070,  449,  449,  449,  449,  449,  449,  449,
      449,  454,  454,  454,  454,  454,  454,  454,  454,  348,
     1070,  454,  454,  454,  454,  454,  454,  458,  458,  459,
      460,  460,  460,  460,  460,   93,   94,  497,   94, 1070,
      461,  461,   93,   94, 1065,  534,  330,  534, 1065,  461,
      461,  461,  461,  461,  461,  330,  543,  462,  462,  462,
      462,  462,  462,  462,  462,  390,   93,   94, 1366, 1065,
      463,  463,  732,  732,  732,  732,  732,  732,  543,  463,
      463,  463,  463,  463,  463,  464,  464,  465,  466,  466,
      466,  466,  466,   93,   94, 1056,  330,  871,  467,  467,

      741,  741,  741,  741,  741,  741,  543,  467,  467,  467,
      467,  467,  467,  468,  468,  468,  468,  468,  468,  468,
      468,  330, 1048,  468,  468,  468,  468,  468,  468,   93,
       94,  390,  469,  475,  471,  471,  471,  471,  471,  472,
      473,  473,  475,  550,  476,  476,  476,  476,  476,  476,
      476,  476,  477,   93,   94, 1366, 1048,  478,  478,  748,
      748,  748,  748,  748,  748,  550,  478,  478,  478,  478,
      478,  478,  479,  479,  479,  479,  479,  480,  481,  481,
       93,   94,  483,  483,  483,  483,  483,  484,  485,  485,
      486,  475,  488,  488,  488,  488,  488,  489,  490,  490,

      491,  550,  493,  493,  493,  493,  493,  494,  495,  495,
      497,   94,  498,  498,  498,  498,  498,  498,  498,  498,
      499,   93,   94,  659, 1048,  500,  500,  755,  755,  755,
      755,  755,  755,  661,  500,  500,  500,  500,  500,  500,
      501,  501,  501,  501,  501,  502,  503,  503,   93,  330,
      500,  500,  500,  500,  500,  500,  500,  500,  504,  737,
      506,  506,  506,  506,  506,  507,  508,  508,  141,   94,
      512,  512,  512,  512,  512,  512,  512,  512,  513,   93,
       94,   93,   94,  514,  514,   93,   94,   93,   94,  499,
     1043,  513,  514,  514,  514,  514,  514,  514,  515,  515,

      515,  515,  515,  516,  517,  517,   93, 1043,  514,  514,
      514,  514,  514,  514,  514,  514,  235,   94,  519,  519,
      519,  519,  519,  519,  519,  519,  520,   93,   94,   93,
       94,  521,  521,  804,  804,  804,  804,  804,  804,  520,
      521,  521,  521,  521,  521,  521,  522,  522,  522,  522,
      522,  523,  524,  524,   93, 1043,  521,  521,  521,  521,
      521,  521,  521,  521,  348,   94,  526,  526,  526,  526,
      526,  526,  526,  526,  527,   93,   94,   93,   94,  528,
      528,   93,   94,   93,   94,  527, 1127,  534,  528,  528,
      528,  528,  528,  528,  529,  529,  529,  529,  529,  530,

      531,  531,   93, 1120,  528,  528,  528,  528,  528,  528,
      528,  528,  497,   94,  533,  533,  533,  533,  533,  533,
      533,  533,  534,  475,  659,  659, 1113,  535,  535,   93,
       94,   93,   94,  744,  751,  661,  535,  535,  535,  535,
      535,  535,  536,  536,  536,  536,  536,  537,  538,  538,
       93, 1366,  535,  535,  535,  535,  535,  535,  535,  535,
      330,  661,  542,  542,  542,  542,  542,  542,  542,  542,
      543,   93,   94,  659, 1106,  544,  544,  875,  875,  875,
      875,  875,  875,  661,  544,  544,  544,  544,  544,  544,
      545,  545,  545,  545,  545,  546,  547,  547,  475, 1099,

      549,  549,  549,  549,  549,  549,  549,  549,  550,  681,
       94,   93,   94,  551,  551,   93,   94,   93,   94,  683,
     1006,  683,  551,  551,  551,  551,  551,  551,  552,  552,
      552,  552,  552,  553,  554,  554,  555,  555,  556,  557,
      557,  557,  557,  557,  469,  828,  558,  558,  558,  558,
      558,  558,  559,  559,  560,  561,  561,  561,  561,  561,
      475,  798,  562,  562,  562,  562,  562,  562,  562,  562,
      477,  800,  800,  681,   94,  563,  563,  897,  897,  897,
      897,  897,  897,  683,  563,  563,  563,  563,  563,  563,
      564,  564,  565,  566,  566,  566,  566,  566,  141,   94,

       93,   94,  991,  567,  567,   93,   94,  991,  700,  991,
      700,  898,  567,  567,  567,  567,  567,  567,  568,  568,
      568,  568,  568,  568,  568,  568,  475, 1070,  568,  568,
      568,  568,  568,  568,   93,   94,  477,   93,   94,  569,
      569,  569,  569,  569,  569,  570,  570,  571,  572,  572,
      572,  572,  572,  486, 1070,  573,  573,  573,  573,  573,
      573,  574,  574,  575,  576,  576,  576,  576,  576,  491,
      885,  577,  577,  577,  577,  577,  577,  138, 1065,  578,
      578,  579,  580,  580,  580,  580,  580,  497,   94,  581,
      581,  581,  581,  581,  581,  581,  581,  499,  141,   94,

      235,   94,  582,  582,   93,   94,   93,   94,  700, 1065,
      707,  582,  582,  582,  582,  582,  582,  583,  583,  584,
      585,  585,  585,  585,  585,   93,   94,  235,   94,  880,
      586,  586,   93,   94, 1056,  707,  330,  707, 1048,  586,
      586,  586,  586,  586,  586,   93,  737,  582,  582,  582,
      582,  582,  582,  582,  582,  587,  587,  587,  587,  587,
      587,  587,  587,  497, 1048,  587,  587,  587,  587,  587,
      587,  588,  588,  589,  590,  590,  590,  590,  590,  504,
      863,  591,  591,  591,  591,  591,  591,   93,   94,  595,
      595,  596,  597,  597,  597,  597,  597,  348,   94,   93,

       94, 1043,  598,  598,   93,   94, 1043,  714,  858,  714,
      947,  598,  598,  598,  598,  598,  598,  141,   94,  599,
      599,  599,  599,  599,  599,  599,  599,  513,  348,   94,
      497,   94,  600,  600,   93,   94,   93,   94,  714,  751,
      721,  600,  600,  600,  600,  600,  600,  601,  601,  602,
      603,  603,  603,  603,  603,   93,   94,  497,   94,  940,
      604,  604,   93,   94,  744,  721, 1366,  721,  933,  604,
      604,  604,  604,  604,  604,   93,  737,  600,  600,  600,
      600,  600,  600,  600,  600,  605,  605,  605,  605,  605,
      605,  605,  605,  141,  737,  605,  605,  605,  605,  605,

      605,  235,   94,  606,  606,  606,  606,  606,  606,  606,
      606,  520,  681,   94,   93,   94,  607,  607,   93,   94,
      926, 1006,  728,  828,  728,  607,  607,  607,  607,  607,
      607,  608,  608,  609,  610,  610,  610,  610,  610,  681,
       94,  330,  475,  991,  611,  611,  991,  898,  898,  728,
     1366,  737,  744,  611,  611,  611,  611,  611,  611,   93,
      744,  607,  607,  607,  607,  607,  607,  607,  607,  612,
      612,  612,  612,  612,  612,  612,  612,  235,  898,  612,
      612,  612,  612,  612,  612,  348,   94,  613,  613,  613,
      613,  613,  613,  613,  613,  527,  891,  885,  475,  885,

      614,  614,  930,  930,  930,  930,  930,  930,  744,  614,
      614,  614,  614,  614,  614,  615,  615,  616,  617,  617,
      617,  617,  617,  885,  880,  880,  659,  880,  618,  618,
      937,  937,  937,  937,  937,  937,  751,  618,  618,  618,
      618,  618,  618,   93,  871,  614,  614,  614,  614,  614,
      614,  614,  614,  619,  619,  619,  619,  619,  619,  619,
      619,  348,  661,  619,  619,  619,  619,  619,  619,  497,
       94,  620,  620,  620,  620,  620,  620,  620,  620,  534,
      863,  863, 1366,  863,  621,  621,  944,  944,  944,  944,
      944,  944,  751,  621,  621,  621,  621,  621,  621,  622,

      622,  623,  624,  624,  624,  624,  624,  858,  858,  858,
      659,  947,  625,  625,  951,  951,  951,  951,  951,  951,
      751,  625,  625,  625,  625,  625,  625,   93,  940,  621,
      621,  621,  621,  621,  621,  621,  621,  626,  626,  626,
      626,  626,  626,  626,  626,  497,  933,  626,  626,  626,
      626,  626,  626,  630,  630,  631,  632,  632,  632,  632,
      632,  926,  924,  828,  869,  629,  633,  633,  952,  952,
      952,  952,  952,  952,  871,  633,  633,  633,  633,  633,
      633,  330,  800,  634,  634,  634,  634,  634,  634,  634,
      634,  543,   93,   94,  798,  909,  635,  635,  594,  688,

      898,  898,  683,  885,  800,  635,  635,  635,  635,  635,
      635,  636,  636,  637,  638,  638,  638,  638,  638, 1366,
      798,   93,   94,  885,  639,  639,  675,  880,  880,  800,
      800,  700,  670,  639,  639,  639,  639,  639,  639,  640,
      640,  640,  640,  640,  640,  640,  640,  330,  871,  640,
      640,  640,  640,  640,  640,  863,  863,  543,  475,  653,
      641,  641,  641,  641,  641,  641,  641,  641,  550,   93,
       94,   93,   94,  642,  642,  858,  858,  648,  751,  707,
      550,  714,  642,  642,  642,  642,  642,  642,  643,  643,
      644,  645,  645,  645,  645,  645,   93,   94,   93,   94,

      744,  646,  646,  543,  737,  828,  721,  629,  728,  681,
      646,  646,  646,  646,  646,  646,  647,  647,  647,  647,
      647,  647,  647,  647,  475,  497,  647,  647,  647,  647,
      647,  647,  348,  235,  550,  648,  330,  650,  650,  650,
      650,  650,  651,  652,  652,  653,  926,  655,  655,  655,
      655,  655,  656,  657,  657,  659,  475,  660,  660,  660,
      660,  660,  660,  660,  660,  661,  933,  659,  869,  141,
      662,  662,  800,  594,  688,  688,  688,  940,  947,  662,
      662,  662,  662,  662,  662,  663,  663,  663,  663,  663,
      664,  665,  665,   93,   94,  667,  667,  667,  667,  667,

      668,  669,  669,  670,  869,  672,  672,  672,  672,  672,
      673,  674,  674,  675,  871,  677,  677,  677,  677,  677,
      678,  679,  679,  681,   94,  682,  682,  682,  682,  682,
      682,  682,  682,  683, 1366,  869,  891,   94,  684,  684,
      681,  675,  675,  675,  871,  871,  893,  684,  684,  684,
      684,  684,  684,  685,  685,  685,  685,  685,  686,  687,
      687,   93,  330,  684,  684,  684,  684,  684,  684,  684,
      684,  688,  926,  690,  690,  690,  690,  690,  691,  692,
      692,  694,  694,  695,  696,  696,  696,  696,  696,  697,
      670,  670,   93,   94,  698,  698, 1060, 1060, 1060, 1060,

     1060, 1060,  893,  698,  698,  698,  698,  698,  698,  141,
       94,  699,  699,  699,  699,  699,  699,  699,  699,  700,
      891,   94, 1366,  670,  701,  701,  661,  477,  653,  653,
      893,  653,  926,  701,  701,  701,  701,  701,  701,  702,
      702,  702,  702,  702,  703,  704,  704,   93,  648,  701,
      701,  701,  701,  701,  701,  701,  701,  235,   94,  706,
      706,  706,  706,  706,  706,  706,  706,  707,  648,  648,
      330,  751,  708,  708, 1103, 1103, 1103, 1103, 1103, 1103,
      926,  708,  708,  708,  708,  708,  708,  709,  709,  709,
      709,  709,  710,  711,  711,   93,  744,  708,  708,  708,

      708,  708,  708,  708,  708,  348,   94,  713,  713,  713,
      713,  713,  713,  713,  713,  714,  737,  735,  475,  629,
      715,  715, 1110, 1110, 1110, 1110, 1110, 1110,  933,  715,
      715,  715,  715,  715,  715,  716,  716,  716,  716,  716,
      717,  718,  718,   93,  457,  715,  715,  715,  715,  715,
      715,  715,  715,  497,   94,  720,  720,  720,  720,  720,
      720,  720,  720,  721, 1366,  475,  659,  594,  722,  722,
      429,  504,  688,  688,  933,  933,  940,  722,  722,  722,
      722,  722,  722,  723,  723,  723,  723,  723,  724,  725,
      725,   93,  675,  722,  722,  722,  722,  722,  722,  722,

      722,  681,   94,  727,  727,  727,  727,  727,  727,  727,
      727,  728,  675,  491, 1366,  670,  729,  729, 1117, 1117,
     1117, 1117, 1117, 1117,  940,  729,  729,  729,  729,  729,
      729,  730,  730,  730,  730,  730,  731,  732,  732,   93,
      659,  729,  729,  729,  729,  729,  729,  729,  729,  330,
      940,  736,  736,  736,  736,  736,  736,  736,  736,  737,
      670,  486,  869,  661,  738,  738, 1124, 1124, 1124, 1124,
     1124, 1124,  947,  738,  738,  738,  738,  738,  738,  739,
      739,  739,  739,  739,  740,  741,  741,  475, 1366,  743,
      743,  743,  743,  743,  743,  743,  743,  744,  947,  653,

      869,  653,  745,  745, 1131, 1131, 1131, 1131, 1131, 1131,
      947,  745,  745,  745,  745,  745,  745,  746,  746,  746,
      746,  746,  747,  748,  748,  659, 1054,  750,  750,  750,
      750,  750,  750,  750,  750,  751, 1056,  469,   93,   94,
      752,  752, 1132, 1132, 1132, 1132, 1132, 1132,  893,  752,
      752,  752,  752,  752,  752,  753,  753,  753,  753,  753,
      754,  755,  755,  756,  756,  757,  758,  758,  758,  758,
      758,  648,  648,  759,  759,  759,  759,  759,  759,  760,
      760,  761,  762,  762,  762,  762,  762,  653,  648,  763,
      763,  763,  763,  763,  763,  764,  764,  765,  766,  766,

      766,  766,  766,  659,  330,  767,  767,  767,  767,  767,
      767,  767,  767,  661, 1099,  550,  475,  390,  768,  768,
     1161, 1161, 1161, 1161, 1161, 1161, 1106,  768,  768,  768,
      768,  768,  768,  769,  769,  770,  771,  771,  771,  771,
      771,  543,  629,  457,  659,  497,  772,  772, 1174, 1174,
     1174, 1174, 1174, 1174, 1113,  772,  772,  772,  772,  772,
      772,  773,  773,  773,  773,  773,  773,  773,  773,  659,
      348,  773,  773,  773,  773,  773,  773,  235,  141,  661,
       93,   94,  774,  774,  774,  774,  774,  774,  775,  775,
      776,  777,  777,  777,  777,  777,  670,  594,  778,  778,

      778,  778,  778,  778,  779,  779,  780,  781,  781,  781,
      781,  781,  675,  429,  782,  782,  782,  782,  782,  782,
      138,  504,  783,  783,  784,  785,  785,  785,  785,  785,
      681,   94,  786,  786,  786,  786,  786,  786,  786,  786,
      683,  869, 1054, 1054,  504,  787,  787,  504,  497,  491,
      491, 1120, 1127, 1056,  787,  787,  787,  787,  787,  787,
      788,  788,  789,  790,  790,  790,  790,  790, 1366, 1054,
     1168,  330,  491,  791,  791,  486,  486,  486, 1056, 1056,
     1170, 1099,  791,  791,  791,  791,  791,  791,   93,  477,
      787,  787,  787,  787,  787,  787,  787,  787,  792,  792,

      792,  792,  792,  792,  792,  792,  681,  332,  792,  792,
      792,  792,  792,  792,  793,  793,  794,  795,  795,  795,
      795,  795,  688,  469,  796,  796,  796,  796,  796,  796,
      798, 1366,  799,  799,  799,  799,  799,  799,  799,  799,
      800, 1099,  469,  330,  469,  801,  801, 1217, 1217, 1217,
     1217, 1217, 1217, 1099,  801,  801,  801,  801,  801,  801,
      802,  802,  802,  802,  802,  803,  804,  804,  141,   94,
      806,  806,  806,  806,  806,  806,  806,  806,  700,  475,
     1366,  475,  550,  807,  807,  543,  541,  457,  325, 1106,
     1106, 1106,  807,  807,  807,  807,  807,  807,   93,  511,

      807,  807,  807,  807,  807,  807,  807,  807,  809,  809,
      809,  809,  809,  809,  809,  809,  141,  429,  809,  809,
      809,  809,  809,  809,  235,   94,  810,  810,  810,  810,
      810,  810,  810,  810,  707,  659, 1366,  659,  304,  811,
      811,  504,  504,  491,  491, 1113, 1113, 1113,  811,  811,
      811,  811,  811,  811,   93,  342,  811,  811,  811,  811,
      811,  811,  811,  811,  813,  813,  813,  813,  813,  813,
      813,  813,  235,  486,  813,  813,  813,  813,  813,  813,
      348,   94,  814,  814,  814,  814,  814,  814,  814,  814,
      714,  869, 1366,  869,  486,  815,  815,  337,  477,  469,

      469, 1120, 1120, 1120,  815,  815,  815,  815,  815,  815,
       93,  390,  815,  815,  815,  815,  815,  815,  815,  815,
      817,  817,  817,  817,  817,  817,  817,  817,  348,  457,
      817,  817,  817,  817,  817,  817,  497,   94,  818,  818,
      818,  818,  818,  818,  818,  818,  721, 1054, 1366, 1054,
      325,  819,  819,  348,  235,  141,  429, 1127, 1127, 1127,
      819,  819,  819,  819,  819,  819,   93,  304,  819,  819,
      819,  819,  819,  819,  819,  819,  821,  821,  821,  821,
      821,  821,  821,  821,  497,  423,  821,  821,  821,  821,
      821,  821,  681,   94,  822,  822,  822,  822,  822,  822,

      822,  822,  728,  348,  342, 1211,  342,  823,  823, 1251,
     1251, 1251, 1251, 1251, 1251, 1213,  823,  823,  823,  823,
      823,  823,   93,  342,  823,  823,  823,  823,  823,  823,
      823,  823,  825,  825,  825,  825,  825,  825,  825,  825,
      681,  337,  825,  825,  825,  825,  825,  825,  829,  829,
      830,  831,  831,  831,  831,  831, 1168, 1366, 1168, 1211,
      337,  832,  832,  337,  332,  390, 1170, 1170, 1170, 1213,
      832,  832,  832,  832,  832,  832,  330, 1366,  833,  833,
      833,  833,  833,  833,  833,  833,  737, 1213, 1211,  388,
      325,  834,  834,  226,  365,  304,  213,  358, 1213,  357,

      834,  834,  834,  834,  834,  834,  835,  835,  836,  837,
      837,  837,  837,  837,  356,  355,  342,  342,  229,  838,
      838, 1321, 1321, 1321, 1321, 1321, 1321,  337,  838,  838,
      838,  838,  838,  838,  839,  839,  839,  839,  839,  839,
      839,  839,  330,  337,  839,  839,  839,  839,  839,  839,
      332,  325,  737,  475,  226,  840,  840,  840,  840,  840,
      840,  840,  840,  744,  235,  141,  304,  213,  841,  841,
     1351, 1351, 1351, 1351, 1351, 1351,  206,  841,  841,  841,
      841,  841,  841,  842,  842,  843,  844,  844,  844,  844,
      844,  295,  294,  293,  292,  235,  845,  845, 1364, 1364,

     1364, 1364, 1364, 1364,  229,  845,  845,  845,  845,  845,
      845,  846,  846,  846,  846,  846,  846,  846,  846,  475,
      229,  846,  846,  846,  846,  846,  846,  229,  273,  744,
      659,  226,  847,  847,  847,  847,  847,  847,  847,  847,
      751,  257,  213,  132,  206,  848,  848, 1365, 1365, 1365,
     1365, 1365, 1365,  206,  848,  848,  848,  848,  848,  848,
      849,  849,  850,  851,  851,  851,  851,  851,  206,  250,
      249,  248,  247,  852,  852,  246,  245,  244,  243,  242,
      229,  229,  852,  852,  852,  852,  852,  852,  853,  853,
      853,  853,  853,  853,  853,  853,  659,  227,  853,  853,

      853,  853,  853,  853,  226,  141,  751,  854,  854,  854,
      854,  854,  854,  854,  854,  855,  855,  855,  855,  855,
      856,  857,  857,  857,  857,  857,  857,  857,  857,  857,
      857,  858,  213,  860,  860,  860,  860,  860,  861,  862,
      862,  863,  132,  865,  865,  865,  865,  865,  866,  867,
      867,  869,  124,  870,  870,  870,  870,  870,  870,  870,
      870,  871,  206,  206,  205,  204,  872,  872,  203,  202,
      201,  200,  199,  198,  197,  872,  872,  872,  872,  872,
      872,  873,  873,  873,  873,  873,  874,  875,  875,   93,
       94,  877,  877,  877,  877,  877,  878,  879,  879,  880,

      196,  882,  882,  882,  882,  882,  883,  884,  884,  885,
      194,  887,  887,  887,  887,  887,  888,  889,  889,  891,
       94,  892,  892,  892,  892,  892,  892,  892,  892,  893,
       50,  141,  180,   83,  894,  894,  172,  132,   50,  124,
      124,  124,  164,  894,  894,  894,  894,  894,  894,  895,
      895,  895,  895,  895,  896,  897,  897,   93,  163,  894,
      894,  894,  894,  894,  894,  894,  894,  898,  162,  900,
      900,  900,  900,  900,  901,  902,  902,  903,  903,  904,
      905,  905,  905,  905,  905,  798,  161,  906,  906,  906,
      906,  906,  906,  906,  906,  800,  160,  159,  158,  157,

      907,  907,  156,  155,  154,  153,  152,  151,  150,  907,
      907,  907,  907,  907,  907,  910,  910,  910,  910,  910,
      910,  910,  910,  798,  149,  910,  910,  910,  910,  910,
      910,  138,  137,  800,  330,  132,  925,  925,  925,  925,
      925,  925,  925,  925,  926,   50,  124,  124,  122,  927,
      927,  121,  120,  119,  118,  117,  116,  115,  927,  927,
      927,  927,  927,  927,  928,  928,  928,  928,  928,  929,
      930,  930,  475,  112,  932,  932,  932,  932,  932,  932,
      932,  932,  933,  109,  108,  107,  106,  934,  934,  105,
      104,  103,  102,  101,  100,   50,  934,  934,  934,  934,

      934,  934,  935,  935,  935,  935,  935,  936,  937,  937,
      659,   90,  939,  939,  939,  939,  939,  939,  939,  939,
      940,   43,   81,   76,   73,  941,  941,   70,   69,   68,
       67,   66,   62,   61,  941,  941,  941,  941,  941,  941,
      942,  942,  942,  942,  942,  943,  944,  944,  869,   58,
      946,  946,  946,  946,  946,  946,  946,  946,  947,   57,
       56,   55,   47,  948,  948,   45,   44,   43, 1366, 1366,
     1366, 1366,  948,  948,  948,  948,  948,  948,  949,  949,
      949,  949,  949,  950,  951,  951,  857,  857,  857,  857,
      857,  857,  857,  857,  952,  952,  952,  952,  952,  952,

      952,  952,  953,  953,  954,  955,  955,  955,  955,  955,
      858, 1366,  956,  956,  956,  956,  956,  956,  957,  957,
      958,  959,  959,  959,  959,  959,  863, 1366,  960,  960,
      960,  960,  960,  960,  961,  961,  962,  963,  963,  963,
      963,  963,  869, 1366,  964,  964,  964,  964,  964,  964,
      964,  964,  871, 1366, 1366, 1366, 1366,  965,  965, 1366,
     1366, 1366, 1366, 1366, 1366, 1366,  965,  965,  965,  965,
      965,  965,  966,  966,  967,  968,  968,  968,  968,  968,
     1366, 1366, 1366, 1366, 1366,  969,  969, 1366, 1366, 1366,
     1366, 1366, 1366, 1366,  969,  969,  969,  969,  969,  969,

      970,  970,  970,  970,  970,  970,  970,  970,  869, 1366,
      970,  970,  970,  970,  970,  970, 1366, 1366,  871,   93,
       94,  971,  971,  971,  971,  971,  971,  972,  972,  973,
      974,  974,  974,  974,  974,  880, 1366,  975,  975,  975,
      975,  975,  975,  976,  976,  977,  978,  978,  978,  978,
      978,  885, 1366,  979,  979,  979,  979,  979,  979,  138,
     1366,  980,  980,  981,  982,  982,  982,  982,  982,  891,
       94,  983,  983,  983,  983,  983,  983,  983,  983,  893,
     1366, 1366, 1366, 1366,  984,  984, 1366, 1366, 1366, 1366,
     1366, 1366, 1366,  984,  984,  984,  984,  984,  984,   93,

     1366,  984,  984,  984,  984,  984,  984,  984,  984,  986,
      986,  986,  986,  986,  986,  986,  986,  891, 1366,  986,
      986,  986,  986,  986,  986,  987,  987,  988,  989,  989,
      989,  989,  989,  898, 1366,  990,  990,  990,  990,  990,
      990,  991, 1366,  993,  993,  993,  993,  993,  994,  995,
      995, 1007, 1007, 1008, 1009, 1009, 1009, 1009, 1009, 1366,
     1366, 1366, 1366, 1366, 1010, 1010, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1010, 1010, 1010, 1010, 1010, 1010,  330,
     1366, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,  926,
     1366, 1366, 1366, 1366, 1012, 1012, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1012, 1012, 1012, 1012, 1012, 1012, 1013,
     1013, 1014, 1015, 1015, 1015, 1015, 1015, 1366, 1366, 1366,
     1366, 1366, 1016, 1016, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1016, 1016, 1016, 1016, 1016, 1016, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017,  330, 1366, 1017, 1017, 1017,
     1017, 1017, 1017, 1366, 1366,  926,  475, 1366, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018,  933, 1366, 1366, 1366,
     1366, 1019, 1019, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1019, 1019, 1019, 1019, 1019, 1019, 1020, 1020, 1021, 1022,
     1022, 1022, 1022, 1022, 1366, 1366, 1366, 1366, 1366, 1023,

     1023, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1023, 1023,
     1023, 1023, 1023, 1023, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024,  475, 1366, 1024, 1024, 1024, 1024, 1024, 1024,
     1366, 1366,  933,  659, 1366, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025,  940, 1366, 1366, 1366, 1366, 1026, 1026,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1026, 1026, 1026,
     1026, 1026, 1026, 1027, 1027, 1028, 1029, 1029, 1029, 1029,
     1029, 1366, 1366, 1366, 1366, 1366, 1030, 1030, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1030, 1030, 1030, 1030, 1030,
     1030, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031,  659,

     1366, 1031, 1031, 1031, 1031, 1031, 1031, 1366, 1366,  940,
      869, 1366, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
      947, 1366, 1366, 1366, 1366, 1033, 1033, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1033, 1033, 1033, 1033, 1033, 1033,
     1034, 1034, 1035, 1036, 1036, 1036, 1036, 1036, 1366, 1366,
     1366, 1366, 1366, 1037, 1037, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1037, 1037, 1037, 1037, 1037, 1037, 1038, 1038,
     1038, 1038, 1038, 1038, 1038, 1038,  869, 1366, 1038, 1038,
     1038, 1038, 1038, 1038, 1366, 1366,  947, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1040, 1040, 1040, 1040, 1040,

     1041, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1043, 1366, 1045, 1045, 1045, 1045, 1045, 1046, 1047,
     1047, 1048, 1366, 1050, 1050, 1050, 1050, 1050, 1051, 1052,
     1052, 1054, 1366, 1055, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1056, 1366, 1366, 1366, 1366, 1057, 1057, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1057, 1057, 1057, 1057, 1057,
     1057, 1058, 1058, 1058, 1058, 1058, 1059, 1060, 1060,   93,
       94, 1062, 1062, 1062, 1062, 1062, 1063, 1064, 1064, 1065,
     1366, 1067, 1067, 1067, 1067, 1067, 1068, 1069, 1069, 1070,
     1366, 1072, 1072, 1072, 1072, 1072, 1073, 1074, 1074, 1077,

     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1078, 1078, 1078,
     1078, 1078, 1079, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1081, 1081, 1082, 1083, 1083, 1083, 1083,
     1083,  991, 1366, 1084, 1084, 1084, 1084, 1084, 1084, 1093,
     1093, 1094, 1095, 1095, 1095, 1095, 1095, 1096, 1366, 1366,
     1366, 1366, 1097, 1097, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1097, 1097, 1097, 1097, 1097, 1097,  330, 1366, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1099, 1366, 1366,
     1366, 1366, 1100, 1100, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1100, 1100, 1100, 1100, 1100, 1100, 1101, 1101, 1101,

     1101, 1101, 1102, 1103, 1103,  475, 1366, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1106, 1366, 1366, 1366, 1366,
     1107, 1107, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1107,
     1107, 1107, 1107, 1107, 1107, 1108, 1108, 1108, 1108, 1108,
     1109, 1110, 1110,  659, 1366, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1113, 1366, 1366, 1366, 1366, 1114, 1114,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1114, 1114, 1114,
     1114, 1114, 1114, 1115, 1115, 1115, 1115, 1115, 1116, 1117,
     1117,  869, 1366, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1120, 1366, 1366, 1366, 1366, 1121, 1121, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1121, 1121, 1121, 1121, 1121,
     1121, 1122, 1122, 1122, 1122, 1122, 1123, 1124, 1124, 1054,
     1366, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1127,
     1366, 1366, 1366, 1366, 1128, 1128, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1128, 1128, 1128, 1128, 1128, 1128, 1129,
     1129, 1129, 1129, 1129, 1130, 1131, 1131, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1042, 1132, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 1133, 1133, 1134, 1135, 1135, 1135, 1135,
     1135, 1043, 1366, 1136, 1136, 1136, 1136, 1136, 1136, 1137,
     1137, 1138, 1139, 1139, 1139, 1139, 1139, 1048, 1366, 1140,

     1140, 1140, 1140, 1140, 1140, 1141, 1141, 1142, 1143, 1143,
     1143, 1143, 1143, 1054, 1366, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1056, 1366, 1366, 1366, 1366, 1145, 1145,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1145, 1145, 1145,
     1145, 1145, 1145, 1146, 1146, 1147, 1148, 1148, 1148, 1148,
     1148, 1366, 1366, 1366, 1366, 1366, 1149, 1149, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1149, 1149, 1149, 1149, 1149,
     1149, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1054,
     1366, 1150, 1150, 1150, 1150, 1150, 1150, 1366, 1366, 1056,
       93,   94, 1151, 1151, 1151, 1151, 1151, 1151, 1152, 1152,

     1153, 1154, 1154, 1154, 1154, 1154, 1065, 1366, 1155, 1155,
     1155, 1155, 1155, 1155, 1156, 1156, 1157, 1158, 1158, 1158,
     1158, 1158, 1070, 1366, 1159, 1159, 1159, 1159, 1159, 1159,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1162, 1366, 1164, 1164,
     1164, 1164, 1164, 1165, 1166, 1166, 1168, 1366, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169, 1170, 1366, 1366, 1366,
     1366, 1171, 1171, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1171, 1171, 1171, 1171, 1171, 1171, 1172, 1172, 1172, 1172,
     1172, 1173, 1174, 1174,  330, 1366, 1176, 1176, 1176, 1176,

     1176, 1176, 1176, 1176, 1099, 1366, 1366, 1366, 1366, 1177,
     1177, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1177, 1177,
     1177, 1177, 1177, 1177, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179,  330, 1366, 1179, 1179, 1179, 1179, 1179, 1179,
     1366, 1366, 1099,  475, 1366, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1106, 1366, 1366, 1366, 1366, 1181, 1181,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1181, 1181, 1181,
     1181, 1181, 1181, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183,  475, 1366, 1183, 1183, 1183, 1183, 1183, 1183, 1366,
     1366, 1106,  659, 1366, 1184, 1184, 1184, 1184, 1184, 1184,

     1184, 1184, 1113, 1366, 1366, 1366, 1366, 1185, 1185, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1185, 1185, 1185, 1185,
     1185, 1185, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
      659, 1366, 1187, 1187, 1187, 1187, 1187, 1187, 1366, 1366,
     1113,  869, 1366, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1120, 1366, 1366, 1366, 1366, 1189, 1189, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1189, 1189, 1189, 1189, 1189,
     1189, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,  869,
     1366, 1191, 1191, 1191, 1191, 1191, 1191, 1366, 1366, 1120,
     1054, 1366, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,

     1127, 1366, 1366, 1366, 1366, 1193, 1193, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1193, 1193, 1193, 1193, 1193, 1193,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1054, 1366,
     1195, 1195, 1195, 1195, 1195, 1195, 1366, 1366, 1127, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1197, 1197, 1197,
     1197, 1197, 1198, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1200, 1366, 1202, 1202, 1202, 1202, 1202,
     1203, 1204, 1204, 1205, 1366, 1207, 1207, 1207, 1207, 1207,
     1208, 1209, 1209, 1211, 1366, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1213, 1366, 1366, 1366, 1366, 1214, 1214,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1214, 1214, 1214,
     1214, 1214, 1214, 1215, 1215, 1215, 1215, 1215, 1216, 1217,
     1217,   93,   94, 1219, 1219, 1219, 1219, 1219, 1220, 1221,
     1221, 1222, 1366, 1224, 1224, 1224, 1224, 1224, 1225, 1226,
     1226, 1228, 1228, 1229, 1230, 1230, 1230, 1230, 1230, 1162,
     1366, 1231, 1231, 1231, 1231, 1231, 1231, 1232, 1232, 1233,
     1234, 1234, 1234, 1234, 1234, 1168, 1366, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1170, 1366, 1366, 1366, 1366,
     1236, 1236, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1236,
     1236, 1236, 1236, 1236, 1236, 1239, 1239, 1239, 1239, 1239,

     1239, 1239, 1239, 1168, 1366, 1239, 1239, 1239, 1239, 1239,
     1239, 1366, 1366, 1170, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1252, 1252, 1253, 1254, 1254, 1254, 1254, 1254, 1200, 1366,
     1255, 1255, 1255, 1255, 1255, 1255, 1256, 1256, 1257, 1258,
     1258, 1258, 1258, 1258, 1205, 1366, 1259, 1259, 1259, 1259,
     1259, 1259, 1260, 1260, 1261, 1262, 1262, 1262, 1262, 1262,
     1211, 1366, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1213, 1366, 1366, 1366, 1366, 1264, 1264, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1264, 1264, 1264, 1264, 1264, 1264,

     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1211, 1366,
     1266, 1266, 1266, 1266, 1266, 1266, 1366, 1366, 1213,   93,
       94, 1267, 1267, 1267, 1267, 1267, 1267, 1268, 1268, 1269,
     1270, 1270, 1270, 1270, 1270, 1222, 1366, 1271, 1271, 1271,
     1271, 1271, 1271,   93,   94, 1273, 1273, 1273, 1273, 1273,
     1274, 1275, 1275, 1276, 1366, 1278, 1278, 1278, 1278, 1278,
     1279, 1280, 1280, 1289, 1289, 1289, 1289, 1289, 1289, 1289,
     1289, 1290, 1290, 1290, 1290, 1290, 1291, 1292, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1293, 1366, 1295,
     1295, 1295, 1295, 1295, 1296, 1297, 1297, 1298, 1366, 1300,

     1300, 1300, 1300, 1300, 1301, 1302, 1302,   93,   94, 1306,
     1306, 1306, 1306, 1306, 1307, 1308, 1308,   93,   94, 1309,
     1309, 1309, 1309, 1309, 1309, 1310, 1310, 1311, 1312, 1312,
     1312, 1312, 1312, 1276, 1366, 1313, 1313, 1313, 1313, 1313,
     1313, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1322, 1322, 1323,
     1324, 1324, 1324, 1324, 1324, 1293, 1366, 1325, 1325, 1325,
     1325, 1325, 1325, 1326, 1326, 1327, 1328, 1328, 1328, 1328,
     1328, 1298, 1366, 1329, 1329, 1329, 1329, 1329, 1329,   93,
       94, 1331, 1331, 1331, 1331, 1331, 1331, 1332, 1366, 1334,

     1334, 1334, 1334, 1334, 1335, 1336, 1336, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1338, 1338, 1338, 1338, 1338,
     1339, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1341, 1366, 1343, 1343, 1343, 1343, 1343, 1344, 1345,
     1345, 1347, 1347, 1348, 1349, 1349, 1349, 1349, 1349, 1332,
     1366, 1350, 1350, 1350, 1350, 1350, 1350, 1340, 1340, 1340,
     1340, 1340, 1340, 1340, 1340, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1352, 1352, 1353, 1354, 1354, 1354, 1354,
     1354, 1341, 1366, 1355, 1355, 1355, 1355, 1355, 1355, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1356, 1357, 1357, 1357,

     1357, 1357, 1358, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1361, 1361, 1361, 1361, 1361, 1362, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   46, 1366,
       46,   82, 1366,   82,   82,   82,   82,   82,   82,   82,
       89,   89, 1366,   89,   88,   88, 1366,   88,  125, 1366,

      125,  128, 1366,  128,  130,  130, 1366,  130,  131,  131,
     1366,  131,  168, 1366,  168,  169, 1366,  169,  169,  170,
      170, 1366,  170,  171,  171, 1366,  171,  179,  179, 1366,
      179,  207, 1366,  207,  210, 1366,  210,  211,  211, 1366,
      211,  212,  212, 1366,  212,  225,  225, 1366,  225,  230,
     1366,  230,  233, 1366,  233,  234,  234,  234,  234, 1366,
      234,  254, 1366,  254,  255,  255, 1366,  255,  256,  256,
     1366,  256,  264,  264,  264,  264, 1366,  264,  271,  271,
     1366,  271,  272,  272, 1366,  272,  281, 1366,  281,  298,
      298,  298,  301,  301,  301,  302,  302, 1366,  302,  303,

      303, 1366,  303,  323,  323, 1366,  323,  324,  324, 1366,
      324,  333,  333, 1366,  333,  338, 1366,  338,  341, 1366,
      341,  343, 1366,  343,  346, 1366,  346,  347,  347,  347,
      347, 1366,  347,  362,  362,  362,  363,  363, 1366,  363,
      364,  364, 1366,  364,  372,  372,  372,  372, 1366,  372,
      379,  379,  379,  379, 1366,  379,  386,  386, 1366,  386,
      387,  387, 1366,  387,  391,  391, 1366,  391,  399,  399,
     1366,  399,  341, 1366,  341,  408, 1366,  408,  346, 1366,
      346,  412, 1366,  412,   59, 1366, 1366,   59, 1366, 1366,
       59,  427,  427, 1366,  427,  428,  428, 1366,  428,  455,

      455, 1366,  455,  456,  456, 1366,  456,  463,  463, 1366,
      463,  470, 1366,  470,  473, 1366,  473,  474, 1366,  474,
      474, 1366,  474,  478,  478, 1366,  478,  482,  482,  482,
      485,  485,  485,  487, 1366,  487,  490, 1366,  490,  492,
     1366,  492,  495, 1366,  495,  496,  496,  496,  496, 1366,
      496,   59, 1366, 1366,   59, 1366, 1366,   59,  505, 1366,
      505,  508, 1366,  508,  509,  509, 1366,  509,  510,  510,
     1366,  510,  518,  518,  518,  518, 1366,  518,  525,  525,
      525,  525, 1366,  525,  532,  532,  532,  532, 1366,  532,
      539,  539, 1366,  539,  540,  540, 1366,  540,  544,  544,

     1366,  544,  548, 1366,  548,  548, 1366,  548,  551,  551,
     1366,  551,  473, 1366,  473,  558, 1366,  558,  563,  563,
     1366,  563,  485,  485,  485,  569,  569,  569,  490, 1366,
      490,  573, 1366,  573,  495, 1366,  495,  577, 1366,  577,
      508, 1366,  508,  591, 1366,  591,  592,  592, 1366,  592,
      593,  593, 1366,  593,  627,  627, 1366,  627,  628,  628,
     1366,  628,  635,  635, 1366,  635,  642,  642, 1366,  642,
      649, 1366,  649,  652, 1366,  652,  654, 1366,  654,  657,
     1366,  657,  658, 1366,  658,  658, 1366,  658,  662,  662,
     1366,  662,  666,  666,  666,  669,  669,  669,  671, 1366,

      671,  674, 1366,  674,  676, 1366,  676,  679, 1366,  679,
      680,  680,  680,  680, 1366,  680,  689, 1366,  689,  692,
     1366,  692,  693,  693, 1366,  693,  705,  705,  705,  705,
     1366,  705,  712,  712,  712,  712, 1366,  712,  719,  719,
      719,  719, 1366,  719,  726,  726,  726,  726, 1366,  726,
      733,  733, 1366,  733,  734,  734, 1366,  734,  738,  738,
     1366,  738,  742, 1366,  742,  742, 1366,  742,  745,  745,
     1366,  745,  749, 1366,  749,  749, 1366,  749,  752,  752,
     1366,  752,  652, 1366,  652,  759, 1366,  759,  657, 1366,
      657,  763, 1366,  763,  768,  768, 1366,  768,  669,  669,

      669,  774,  774,  774,  674, 1366,  674,  778, 1366,  778,
      679, 1366,  679,  782, 1366,  782,  692, 1366,  692,  796,
     1366,  796,  797,  797, 1366,  797,  805,  805,  805, 1366,
     1366,  805,  801,  801, 1366,  801,  808, 1366, 1366,  808,
      812, 1366, 1366,  812,  816, 1366, 1366,  816,  820, 1366,
     1366,  820,  824, 1366, 1366,  824,  826,  826, 1366,  826,
      827,  827, 1366,  827,  834,  834, 1366,  834,  841,  841,
     1366,  841,  848,  848, 1366,  848,  859, 1366,  859,  862,
     1366,  862,  864, 1366,  864,  867, 1366,  867,  868, 1366,
      868,  868, 1366,  868,  872,  872, 1366,  872,  876,  876,

      876,  879,  879,  879,  881, 1366,  881,  884, 1366,  884,
      886, 1366,  886,  889, 1366,  889,  890,  890,  890,  890,
     1366,  890,  899, 1366,  899,  902, 1366,  902,  908,  908,
     1366,  908,  907,  907, 1366,  907,  911,  911,  911, 1366,
     1366,  911,  912,  912,  912,  912, 1366,  912,  913,  913,
      913, 1366, 1366,  913,  914,  914,  914,  914, 1366,  914,
      915,  915,  915, 1366, 1366,  915,  916,  916,  916,  916,
     1366,  916,  917,  917,  917, 1366, 1366,  917,  918,  918,
      918,  918, 1366,  918,  919,  919,  919, 1366, 1366,  919,
      920,  920,  920,  920, 1366,  920,  921,  921,  921, 1366,

     1366,  921,  922,  922, 1366,  922,  923,  923, 1366,  923,
      927,  927, 1366,  927,  931, 1366,  931,  931, 1366,  931,
      934,  934, 1366,  934,  938, 1366,  938,  938, 1366,  938,
      941,  941, 1366,  941,  945, 1366,  945,  945, 1366,  945,
      948,  948, 1366,  948,  862, 1366,  862,  956, 1366,  956,
      867, 1366,  867,  960, 1366,  960,  965,  965, 1366,  965,
      879,  879,  879,  971,  971,  971,  884, 1366,  884,  975,
     1366,  975,  889, 1366,  889,  979, 1366,  979,  985, 1366,
     1366,  985,  902, 1366,  902,  990, 1366,  990,  992, 1366,
      992,  995, 1366,  995,  996, 1366,  996,  996, 1366,  996,

      997,  997,  997, 1366, 1366,  997,  998,  998,  998, 1366,
     1366,  998,  999,  999,  999, 1366, 1366,  999, 1000, 1000,
     1000, 1366, 1366, 1000, 1001, 1001, 1001, 1366, 1366, 1001,
     1002, 1002, 1002, 1366, 1366, 1002, 1003, 1003, 1003, 1366,
     1366, 1003, 1004, 1004, 1366, 1004, 1005, 1005, 1366, 1005,
     1012, 1012, 1366, 1012, 1019, 1019, 1366, 1019, 1026, 1026,
     1366, 1026, 1033, 1033, 1366, 1033, 1044, 1366, 1044, 1047,
     1366, 1047, 1049, 1366, 1049, 1052, 1366, 1052, 1053, 1366,
     1053, 1053, 1366, 1053, 1057, 1057, 1366, 1057, 1061, 1061,
     1061, 1064, 1064, 1064, 1066, 1366, 1066, 1069, 1366, 1069,

     1071, 1366, 1071, 1074, 1366, 1074, 1075, 1075, 1075, 1075,
     1366, 1075, 1076, 1076, 1076, 1366, 1366, 1076,  995, 1366,
      995, 1084, 1366, 1084, 1085, 1085, 1085, 1366, 1366, 1085,
     1086, 1086, 1086, 1366, 1366, 1086, 1087, 1087, 1087, 1366,
     1366, 1087, 1088, 1088, 1088, 1366, 1366, 1088, 1089, 1089,
     1089, 1366, 1366, 1089, 1090, 1090, 1090, 1366, 1366, 1090,
     1091, 1091, 1091, 1366, 1366, 1091, 1092, 1092, 1366, 1092,
     1100, 1100, 1366, 1100, 1104, 1366, 1104, 1104, 1366, 1104,
     1107, 1107, 1366, 1107, 1111, 1366, 1111, 1111, 1366, 1111,
     1114, 1114, 1366, 1114, 1118, 1366, 1118, 1118, 1366, 1118,

     1121, 1121, 1366, 1121, 1125, 1366, 1125, 1125, 1366, 1125,
     1128, 1128, 1366, 1128, 1047, 1366, 1047, 1136, 1366, 1136,
     1052, 1366, 1052, 1140, 1366, 1140, 1145, 1145, 1366, 1145,
     1064, 1064, 1064, 1151, 1151, 1151, 1069, 1366, 1069, 1155,
     1366, 1155, 1074, 1366, 1074, 1159, 1366, 1159, 1160, 1160,
     1160, 1366, 1366, 1160, 1163, 1366, 1163, 1166, 1366, 1166,
      909,  909,  909, 1366, 1366,  909, 1167, 1167, 1366, 1167,
     1175, 1366, 1366, 1175, 1171, 1171, 1366, 1171, 1178, 1366,
     1366, 1178, 1177, 1177, 1366, 1177, 1182, 1366, 1366, 1182,
     1181, 1181, 1366, 1181, 1186, 1366, 1366, 1186, 1185, 1185,

     1366, 1185, 1190, 1366, 1366, 1190, 1189, 1189, 1366, 1189,
     1194, 1366, 1366, 1194, 1193, 1193, 1366, 1193, 1201, 1366,
     1201, 1204, 1366, 1204, 1206, 1366, 1206, 1209, 1366, 1209,
     1210, 1366, 1210, 1210, 1366, 1210, 1214, 1214, 1366, 1214,
     1218, 1218, 1218, 1221, 1221, 1221, 1223, 1366, 1223, 1226,
     1366, 1226, 1227, 1227, 1227, 1366, 1366, 1227, 1166, 1366,
     1166, 1231, 1366, 1231, 1237, 1237, 1366, 1237, 1236, 1236,
     1366, 1236, 1240, 1366, 1366, 1240, 1241, 1366, 1241, 1241,
     1366, 1241, 1242, 1366, 1366, 1242, 1243, 1366, 1243, 1243,
     1366, 1243, 1244, 1366, 1366, 1244, 1245, 1366, 1245, 1245,

     1366, 1245, 1246, 1366, 1366, 1246, 1247, 1366, 1247, 1247,
     1366, 1247, 1248, 1366, 1366, 1248, 1249, 1366, 1249, 1249,
     1366, 1249, 1250, 1366, 1366, 1250, 1255, 1366, 1255, 1259,
     1366, 1259, 1265, 1366, 1366, 1265, 1264, 1264, 1366, 1264,
     1267, 1267, 1267, 1271, 1366, 1271, 1272, 1272, 1272, 1275,
     1275, 1275, 1277, 1366, 1277, 1280, 1366, 1280, 1281, 1366,
     1281, 1281, 1366, 1281, 1282, 1366, 1366, 1282, 1283, 1366,
     1366, 1283, 1284, 1366, 1366, 1284, 1285, 1366, 1366, 1285,
     1286, 1366, 1366, 1286, 1287, 1366, 1366, 1287, 1288, 1366,
     1366, 1288, 1294, 1366, 1294, 1297, 1366, 1297, 1299, 1366,

     1299, 1302, 1366, 1302, 1303, 1366, 1303, 1303, 1366, 1303,
     1304, 1366, 1366, 1304, 1305, 1305, 1305, 1308, 1308, 1308,
     1309, 1309, 1309, 1313, 1366, 1313, 1314, 1366, 1366, 1314,
     1315, 1366, 1366, 1315, 1316, 1366, 1366, 1316, 1317, 1366,
     1366, 1317, 1318, 1366, 1366, 1318, 1319, 1366, 1366, 1319,
     1320, 1366, 1366, 1320, 1325, 1366, 1325, 1329, 1366, 1329,
     1330, 1366, 1366, 1330, 1331, 1331, 1331, 1333, 1366, 1333,
     1336, 1366, 1336, 1238, 1366, 1366, 1238, 1342, 1366, 1342,
     1345, 1366, 1345, 1346, 1366, 1366, 1346, 1350, 1366, 1350,
     1355, 1366, 1355,    5, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366
    } ;

static yyconst flex_int16_t yy_chk[8751] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    4,    4,
       16,   38,   16,   16,   16,   16,   16,   16,   16,   16,
       16,  150,   38,   28,   28,   16,   16,   18,   18,   18,
       18,   18,   18,   28,   16,   16,   16,   16,   16,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   24,  150,

       39,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       36,   39,   36, 1355,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   34,   53,   53, 1350,   25,   25,   73,
     1345,   71,   34,  251,  251,   73,   25,   25,   25,   25,
       25,   25,   46,   46,   46,   46,   46,   46,   46,   46,
       48,   71,   48,   48,   48,   48,   48,   48,   48,   48,
       49,  129,   49,   49,   49,   49,   49,   49,   49,   49,

       49,  129, 1343,  169, 1342,   49,   49,   97,   97,   97,
       97,   97,   97,  169,   49,   49,   49,   49,   49,   49,
       52,   52,   52,   52,   52,   52,   52,   52,   54,   54,
       54,   54,   54,   54,   54,   54,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,  253,  253, 1336,  187,
      187,   55,   55,  135,  135,  135,  135,  135,  135,  187,
       55,   55,   55,   55,   55,   55,   60,   60,   60,   60,
       60,   60,   60,   60,  298,  298,  299,  299, 1334,   60,
       60,  183,  183,  183,  183,  183,  183,  183,   60,   60,
       60,   60,   60,   60,   83,   83,   83,   83,   83,   83,

       83,   83,   85,  336,   85,   85,   85,   85,   85,   85,
       85,   85,   87,  336,   87,   87,   87,   87,   87,   87,
       87,   87,   87,  188,  188,  193,  193,   87,   87,  301,
      301,  362,  362,  188, 1333,  193,   87,   87,   87,   87,
       87,   87,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,  360,  360,  360,  218,  218,   90,   90,  191,
      191,  191,  191,  191,  191,  218,   90,   90,   90,   90,
       90,   90,   94,   94,   94,   94,   94,   94,   94,   94,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  405,  405,  219,  219,   95,   95,  216,  216,  216,

      216,  216,  216,  219,   95,   95,   95,   95,   95,   95,
       96,   96,   96,   96,   96,   96,   96,   96,   98, 1329,
       98,   98,   98,   98,   98,   98,   98,   98,   99,   99,
       99,   99,   99,   99,   99,   99,  407,  407, 1328,  224,
      224,   99,   99,  222,  222,  222,  222,  222,  222,  224,
       99,   99,   99,   99,   99,   99,  123,  123,  123,  123,
      123,  123,  123,  123,  124,  124,  124,  124,  124,  124,
      124,  124,  127, 1326,  127,  127,  127,  127,  127,  127,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  234,  234,  264,  264,  133,  133,  482,  482,  483,

      483,  234, 1325,  264,  133,  133,  133,  133,  133,  133,
      134,  134,  134,  134,  134,  134,  134,  134,  136, 1313,
      136,  136,  136,  136,  136,  136,  136,  136,  139,  139,
      139,  139,  139,  139,  139,  139,  140,  140,  140,  140,
      140,  140,  140,  140,  141, 1312,  141,  141,  141,  141,
      141,  141,  141,  141,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  485,  485,  285,  285,  142,
      142,  276,  276,  276,  276,  276,  276,  285,  142,  142,
      142,  142,  142,  142,  143,  143,  143,  143,  143,  143,
      143,  143,  286,  286,  291,  291, 1310,  143,  143,  569,

      569, 1303,  286,  394,  291, 1302,  143,  143,  143,  143,
      143,  143,  144,  394,  144,  144,  144,  144,  144,  144,
      144,  144,  145,  145,  145,  145,  145,  145,  145,  145,
      146, 1300,  146,  146,  146,  146,  146,  146,  166, 1299,
      166,  166,  166,  166,  166,  166,  166,  166,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  570,  570,
     1297,  309,  309,  172,  172,  289,  289,  289,  289,  289,
      289,  309,  172,  172,  172,  172,  172,  172,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  572,
      572,  310,  310,  173,  173,  307,  307,  307,  307,  307,

      307,  310,  173,  173,  173,  173,  173,  173,  174,  174,
      174,  174,  174,  174,  174,  174,  666,  666, 1295,  315,
      315,  174,  174,  313,  313,  313,  313,  313,  313,  315,
      174,  174,  174,  174,  174,  174,  175, 1294,  175,  175,
      175,  175,  175,  175,  175,  175,  176,  176,  176,  176,
      176,  176,  176,  176,  177, 1281,  177,  177,  177,  177,
      177,  177,  182,  182,  182,  182,  182,  182,  182,  182,
      185, 1280,  185,  185,  185,  185,  185,  185,  185,  185,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  316,  316,  317,  317,  189,  189,  667,  667,  669,

      669,  316, 1278,  317,  189,  189,  189,  189,  189,  189,
      190,  190,  190,  190,  190,  190,  190,  190,  192, 1277,
      192,  192,  192,  192,  192,  192,  192,  192,  206,  206,
      206,  206,  206,  206,  206,  206,  209, 1271,  209,  209,
      209,  209,  209,  209,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  697,  697,  322,  322,  214,
      214,  320,  320,  320,  320,  320,  320,  322,  214,  214,
      214,  214,  214,  214,  215,  215,  215,  215,  215,  215,
      215,  215,  217, 1262,  217,  217,  217,  217,  217,  217,
      217,  217,  220,  220,  220,  220,  220,  220,  220,  220,

      220,  220,  220,  774,  774,  347,  347,  220,  220,  328,
      328,  328,  328,  328,  328,  347,  220,  220,  220,  220,
      220,  220,  221,  221,  221,  221,  221,  221,  221,  221,
      223, 1260,  223,  223,  223,  223,  223,  223,  223,  223,
      227,  227,  227,  227,  227,  227,  227,  227,  372,  372,
      379,  379, 1259,  227,  227,  775,  775, 1258,  372, 1256,
      379, 1255,  227,  227,  227,  227,  227,  227,  229,  229,
      229,  229,  229,  229,  229,  229,  232, 1249,  232,  232,
      232,  232,  232,  232,  235, 1247,  235,  235,  235,  235,
      235,  235,  235,  235,  236,  236,  236,  236,  236,  236,

      236,  236,  236,  236,  236,  398,  399,  404, 1245,  236,
      236,  777,  777,  805,  805,  398,  399,  404,  236,  236,
      236,  236,  236,  236,  237,  237,  237,  237,  237,  237,
      237,  237,  808,  808, 1243,  416,  416,  237,  237,  402,
      402,  402,  402,  402,  402,  416,  237,  237,  237,  237,
      237,  237,  238, 1241,  238,  238,  238,  238,  238,  238,
      238,  238,  239,  239,  239,  239,  239,  239,  239,  239,
      240, 1234,  240,  240,  240,  240,  240,  240,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  417,  417,

      422,  422, 1232,  257,  257,  812,  812, 1231,  417, 1226,
      422, 1224,  257,  257,  257,  257,  257,  257,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  816,
      816,  434,  434,  258,  258,  420,  420,  420,  420,  420,
      420,  434,  258,  258,  258,  258,  258,  258,  259,  259,
      259,  259,  259,  259,  259,  259,  820,  820, 1223,  435,
      435,  259,  259,  432,  432,  432,  432,  432,  432,  435,
      259,  259,  259,  259,  259,  259,  260, 1214,  260,  260,
      260,  260,  260,  260,  260,  260,  261,  261,  261,  261,
      261,  261,  261,  261,  262, 1210,  262,  262,  262,  262,

      262,  262,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  824,  824,  440,  440,  265,  265,  438,
      438,  438,  438,  438,  438,  440,  265,  265,  265,  265,
      265,  265,  266,  266,  266,  266,  266,  266,  266,  266,
      441,  441,  442,  442, 1209,  266,  266,  876,  876, 1207,
      441,  462,  442, 1206,  266,  266,  266,  266,  266,  266,
      267,  462,  267,  267,  267,  267,  267,  267,  267,  267,
      268,  268,  268,  268,  268,  268,  268,  268,  269, 1204,
      269,  269,  269,  269,  269,  269,  273,  273,  273,  273,
      273,  273,  273,  273,  877,  877, 1202,  447,  447,  273,

      273,  445,  445,  445,  445,  445,  445,  447,  273,  273,
      273,  273,  273,  273,  274, 1201,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  448,  448,  449,  449,  274,
      274,  879,  879,  908,  908,  448, 1171,  449,  274,  274,
      274,  274,  274,  274,  275,  275,  275,  275,  275,  275,
      275,  275,  279,  463,  279,  279,  279,  279,  279,  279,
      279,  279,  283,  463,  283,  283,  283,  283,  283,  283,
      283,  283,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  909,  909,  454,  454,  287,  287,  452,
      452,  452,  452,  452,  452,  454,  287,  287,  287,  287,

      287,  287,  288,  288,  288,  288,  288,  288,  288,  288,
      290, 1170,  290,  290,  290,  290,  290,  290,  290,  290,
      297,  297,  297,  297,  297,  297,  297,  297,  300,  300,
      300,  300,  300,  300,  300,  300,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  911,  911,  468,
     1167,  305,  305,  460,  460,  460,  460,  460,  460,  468,
      305,  305,  305,  305,  305,  305,  306,  306,  306,  306,
      306,  306,  306,  306,  308, 1166,  308,  308,  308,  308,
      308,  308,  308,  308,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  913,  913,  481, 1164,  311,

      311,  466,  466,  466,  466,  466,  466,  481,  311,  311,
      311,  311,  311,  311,  312,  312,  312,  312,  312,  312,
      312,  312,  314, 1163,  314,  314,  314,  314,  314,  314,
      314,  314,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  496,  496,  518,  518,  318,  318,  915,
      915,  917,  917,  496, 1159,  518,  318,  318,  318,  318,
      318,  318,  319,  319,  319,  319,  319,  319,  319,  319,
      321,  547,  321,  321,  321,  321,  321,  321,  321,  321,
      326,  547,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  525,  525,  532,  532,  326,  326,  919,  919,  921,

      921,  525, 1158,  532,  326,  326,  326,  326,  326,  326,
      327,  327,  327,  327,  327,  327,  327,  327,  330,  330,
      330,  330,  330,  330,  330,  330,  331,  554,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  554,  562,  563,
     1156,  331,  331,  971,  971,  972,  972, 1155,  562,  563,
      331,  331,  331,  331,  331,  331,  332,  332,  332,  332,
      332,  332,  332,  332,  974,  974, 1149,  568, 1143,  332,
      332,  566,  566,  566,  566,  566,  566,  568,  332,  332,
      332,  332,  332,  332,  334,  334,  334,  334,  334,  334,
      334,  334,  335, 1141,  335,  335,  335,  335,  335,  335,

      985,  985,  335,  337,  337,  337,  337,  337,  337,  337,
      337,  340, 1140,  340,  340,  340,  340,  340,  340,  342,
      342,  342,  342,  342,  342,  342,  342,  345, 1139,  345,
      345,  345,  345,  345,  345,  348, 1137,  348,  348,  348,
      348,  348,  348,  348,  348,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  581,  581,  582,  582,
      349,  349,  997,  997,  998,  998,  581, 1136,  582,  349,
      349,  349,  349,  349,  349,  350,  350,  350,  350,  350,
      350,  350,  350,  999,  999, 1128,  587,  587,  350,  350,
      585,  585,  585,  585,  585,  585,  587,  350,  350,  350,

      350,  350,  350,  351, 1125,  351,  351,  351,  351,  351,
      351,  351,  351,  352,  352,  352,  352,  352,  352,  352,
      352,  353, 1121,  353,  353,  353,  353,  353,  353,  358,
      358,  358,  358,  358,  358,  358,  358,  359,  359,  359,
      359,  359,  359,  359,  359,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365, 1000, 1000, 1118,  599,  599,
      365,  365,  597,  597,  597,  597,  597,  597,  599,  365,
      365,  365,  365,  365,  365,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  600,  600,  605,  605,
      366,  366, 1001, 1001, 1002, 1002,  600, 1114,  605,  366,

      366,  366,  366,  366,  366,  367,  367,  367,  367,  367,
      367,  367,  367, 1003, 1003, 1111,  606,  606,  367,  367,
      603,  603,  603,  603,  603,  603,  606,  367,  367,  367,
      367,  367,  367,  368, 1107,  368,  368,  368,  368,  368,
      368,  368,  368,  369,  369,  369,  369,  369,  369,  369,
      369,  370, 1104,  370,  370,  370,  370,  370,  370,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      607,  607,  612,  612,  373,  373, 1061, 1061, 1062, 1062,
      607, 1100,  612,  373,  373,  373,  373,  373,  373,  374,
      374,  374,  374,  374,  374,  374,  374, 1064, 1064, 1097,

      613,  613,  374,  374,  610,  610,  610,  610,  610,  610,
      613,  374,  374,  374,  374,  374,  374,  375, 1092,  375,
      375,  375,  375,  375,  375,  375,  375,  376,  376,  376,
      376,  376,  376,  376,  376,  377, 1084,  377,  377,  377,
      377,  377,  377,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  380,  380,  614,  614,  619,  619,  380,  380,
     1076, 1076, 1085, 1085,  614, 1083,  619,  380,  380,  380,
      380,  380,  380,  381,  381,  381,  381,  381,  381,  381,
      381, 1086, 1086, 1081,  620,  620,  381,  381,  617,  617,
      617,  617,  617,  617,  620,  381,  381,  381,  381,  381,

      381,  382, 1074,  382,  382,  382,  382,  382,  382,  382,
      382,  383,  383,  383,  383,  383,  383,  383,  383,  384,
     1072,  384,  384,  384,  384,  384,  384,  388,  388,  388,
      388,  388,  388,  388,  388,  621,  621,  626,  626, 1071,
      388,  388, 1087, 1087, 1069,  621,  634,  626, 1067,  388,
      388,  388,  388,  388,  388,  389,  634,  389,  389,  389,
      389,  389,  389,  389,  389,  389, 1088, 1088,  635, 1066,
      389,  389,  624,  624,  624,  624,  624,  624,  635,  389,
      389,  389,  389,  389,  389,  390,  390,  390,  390,  390,
      390,  390,  390, 1089, 1089, 1057,  640, 1053,  390,  390,

      632,  632,  632,  632,  632,  632,  640,  390,  390,  390,
      390,  390,  390,  392,  392,  392,  392,  392,  392,  392,
      392,  393, 1052,  393,  393,  393,  393,  393,  393, 1090,
     1090,  393,  396,  641,  396,  396,  396,  396,  396,  396,
      396,  396,  400,  641,  400,  400,  400,  400,  400,  400,
      400,  400,  400, 1091, 1091,  642, 1050,  400,  400,  638,
      638,  638,  638,  638,  638,  642,  400,  400,  400,  400,
      400,  400,  401,  401,  401,  401,  401,  401,  401,  401,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      410,  647,  410,  410,  410,  410,  410,  410,  410,  410,

      414,  647,  414,  414,  414,  414,  414,  414,  414,  414,
      418,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      418, 1151, 1151,  665, 1049,  418,  418,  645,  645,  645,
      645,  645,  645,  665,  418,  418,  418,  418,  418,  418,
      419,  419,  419,  419,  419,  419,  419,  419,  421,  741,
      421,  421,  421,  421,  421,  421,  421,  421,  425,  741,
      425,  425,  425,  425,  425,  425,  425,  425,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  680,
      680,  705,  705,  430,  430, 1152, 1152, 1154, 1154,  680,
     1047,  705,  430,  430,  430,  430,  430,  430,  431,  431,

      431,  431,  431,  431,  431,  431,  433, 1045,  433,  433,
      433,  433,  433,  433,  433,  433,  436,  436,  436,  436,
      436,  436,  436,  436,  436,  436,  436, 1160, 1160,  712,
      712,  436,  436,  696,  696,  696,  696,  696,  696,  712,
      436,  436,  436,  436,  436,  436,  437,  437,  437,  437,
      437,  437,  437,  437,  439, 1044,  439,  439,  439,  439,
      439,  439,  439,  439,  443,  443,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  719,  719,  726,  726,  443,
      443, 1218, 1218, 1219, 1219,  719, 1037,  726,  443,  443,
      443,  443,  443,  443,  444,  444,  444,  444,  444,  444,

      444,  444,  446, 1030,  446,  446,  446,  446,  446,  446,
      446,  446,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  748,  755,  767, 1023,  450,  450, 1221,
     1221, 1227, 1227,  748,  755,  767,  450,  450,  450,  450,
      450,  450,  451,  451,  451,  451,  451,  451,  451,  451,
      453,  768,  453,  453,  453,  453,  453,  453,  453,  453,
      458,  768,  458,  458,  458,  458,  458,  458,  458,  458,
      458, 1228, 1228,  773, 1016,  458,  458,  771,  771,  771,
      771,  771,  771,  773,  458,  458,  458,  458,  458,  458,
      459,  459,  459,  459,  459,  459,  459,  459,  464, 1010,

      464,  464,  464,  464,  464,  464,  464,  464,  464,  786,
      786,  787,  787,  464,  464, 1230, 1230, 1267, 1267,  786,
     1005,  787,  464,  464,  464,  464,  464,  464,  465,  465,
      465,  465,  465,  465,  465,  465,  469,  469,  469,  469,
      469,  469,  469,  469,  472, 1004,  472,  472,  472,  472,
      472,  472,  475,  475,  475,  475,  475,  475,  475,  475,
      476,  804,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  804,  996,  792,  792,  476,  476,  790,  790,  790,
      790,  790,  790,  792,  476,  476,  476,  476,  476,  476,
      477,  477,  477,  477,  477,  477,  477,  477,  806,  806,

      807,  807,  995,  477,  477, 1268, 1268,  993,  806,  992,
      807,  990,  477,  477,  477,  477,  477,  477,  479,  479,
      479,  479,  479,  479,  479,  479,  480,  982,  480,  480,
      480,  480,  480,  480, 1270, 1270,  480,  484,  484,  484,
      484,  484,  484,  484,  484,  486,  486,  486,  486,  486,
      486,  486,  486,  489,  980,  489,  489,  489,  489,  489,
      489,  491,  491,  491,  491,  491,  491,  491,  491,  494,
      979,  494,  494,  494,  494,  494,  494,  497,  978,  497,
      497,  497,  497,  497,  497,  497,  497,  498,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  809,  809,

      810,  810,  498,  498, 1272, 1272, 1273, 1273,  809,  976,
      810,  498,  498,  498,  498,  498,  498,  499,  499,  499,
      499,  499,  499,  499,  499,  811,  811,  813,  813,  975,
      499,  499, 1275, 1275,  969,  811,  833,  813,  963,  499,
      499,  499,  499,  499,  499,  500,  833,  500,  500,  500,
      500,  500,  500,  500,  500,  501,  501,  501,  501,  501,
      501,  501,  501,  502,  961,  502,  502,  502,  502,  502,
      502,  504,  504,  504,  504,  504,  504,  504,  504,  507,
      960,  507,  507,  507,  507,  507,  507,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  814,  814,  815,

      815,  959,  511,  511, 1305, 1305,  957,  814,  956,  815,
      948,  511,  511,  511,  511,  511,  511,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  817,  817,
      818,  818,  512,  512, 1306, 1306, 1308, 1308,  817,  945,
      818,  512,  512,  512,  512,  512,  512,  513,  513,  513,
      513,  513,  513,  513,  513,  819,  819,  821,  821,  941,
      513,  513, 1309, 1309,  938,  819,  834,  821,  934,  513,
      513,  513,  513,  513,  513,  514,  834,  514,  514,  514,
      514,  514,  514,  514,  514,  515,  515,  515,  515,  515,
      515,  515,  515,  516,  931,  516,  516,  516,  516,  516,

      516,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  822,  822,  823,  823,  519,  519, 1331, 1331,
      927,  923,  822,  922,  823,  519,  519,  519,  519,  519,
      519,  520,  520,  520,  520,  520,  520,  520,  520,  825,
      825,  839,  840,  905,  520,  520,  903,  902,  900,  825,
      841,  839,  840,  520,  520,  520,  520,  520,  520,  521,
      841,  521,  521,  521,  521,  521,  521,  521,  521,  522,
      522,  522,  522,  522,  522,  522,  522,  523,  899,  523,
      523,  523,  523,  523,  523,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  526,  897,  889,  846,  887,

      526,  526,  831,  831,  831,  831,  831,  831,  846,  526,
      526,  526,  526,  526,  526,  527,  527,  527,  527,  527,
      527,  527,  527,  886,  884,  882,  847,  881,  527,  527,
      837,  837,  837,  837,  837,  837,  847,  527,  527,  527,
      527,  527,  527,  528,  872,  528,  528,  528,  528,  528,
      528,  528,  528,  529,  529,  529,  529,  529,  529,  529,
      529,  530,  868,  530,  530,  530,  530,  530,  530,  533,
      533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
      867,  865,  848,  864,  533,  533,  844,  844,  844,  844,
      844,  844,  848,  533,  533,  533,  533,  533,  533,  534,

      534,  534,  534,  534,  534,  534,  534,  862,  860,  859,
      853,  852,  534,  534,  851,  851,  851,  851,  851,  851,
      853,  534,  534,  534,  534,  534,  534,  535,  845,  535,
      535,  535,  535,  535,  535,  535,  535,  536,  536,  536,
      536,  536,  536,  536,  536,  537,  838,  537,  537,  537,
      537,  537,  537,  541,  541,  541,  541,  541,  541,  541,
      541,  832,  828,  827,  875,  826,  541,  541,  856,  856,
      856,  856,  856,  856,  875,  541,  541,  541,  541,  541,
      541,  542,  801,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  890,  890,  906,  800,  542,  542,  797,  796,

      795,  793,  890,  785,  906,  542,  542,  542,  542,  542,
      542,  543,  543,  543,  543,  543,  543,  543,  543,  907,
      910,  912,  912,  783,  543,  543,  782,  781,  779,  907,
      910,  912,  778,  543,  543,  543,  543,  543,  543,  545,
      545,  545,  545,  545,  545,  545,  545,  546,  772,  546,
      546,  546,  546,  546,  546,  766,  764,  546,  549,  763,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  914,
      914,  916,  916,  549,  549,  762,  760,  759,  752,  914,
      749,  916,  549,  549,  549,  549,  549,  549,  550,  550,
      550,  550,  550,  550,  550,  550,  918,  918,  920,  920,

      745,  550,  550,  742,  738,  734,  918,  733,  920,  732,
      550,  550,  550,  550,  550,  550,  552,  552,  552,  552,
      552,  552,  552,  552,  553,  725,  553,  553,  553,  553,
      553,  553,  718,  711,  553,  556,  930,  556,  556,  556,
      556,  556,  556,  556,  556,  560,  930,  560,  560,  560,
      560,  560,  560,  560,  560,  564,  937,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  937,  944,  951,  704,
      564,  564,  698,  693,  692,  690,  689,  944,  951,  564,
      564,  564,  564,  564,  564,  565,  565,  565,  565,  565,
      565,  565,  565,  571,  571,  571,  571,  571,  571,  571,

      571,  571,  571,  575,  964,  575,  575,  575,  575,  575,
      575,  575,  575,  579,  964,  579,  579,  579,  579,  579,
      579,  579,  579,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  965,  970,  983,  983,  583,  583,
      687,  679,  677,  676,  965,  970,  983,  583,  583,  583,
      583,  583,  583,  584,  584,  584,  584,  584,  584,  584,
      584,  586, 1011,  586,  586,  586,  586,  586,  586,  586,
      586,  589, 1011,  589,  589,  589,  589,  589,  589,  589,
      589,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      674,  672,  984,  984,  594,  594,  968,  968,  968,  968,

      968,  968,  984,  594,  594,  594,  594,  594,  594,  595,
      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      986,  986, 1012,  671,  595,  595,  662,  658,  657,  655,
      986,  654, 1012,  595,  595,  595,  595,  595,  595,  596,
      596,  596,  596,  596,  596,  596,  596,  598,  652,  598,
      598,  598,  598,  598,  598,  598,  598,  601,  601,  601,
      601,  601,  601,  601,  601,  601,  601,  601,  650,  649,
     1017,  646,  601,  601, 1009, 1009, 1009, 1009, 1009, 1009,
     1017,  601,  601,  601,  601,  601,  601,  602,  602,  602,
      602,  602,  602,  602,  602,  604,  639,  604,  604,  604,

      604,  604,  604,  604,  604,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  633,  629, 1018,  628,
      608,  608, 1015, 1015, 1015, 1015, 1015, 1015, 1018,  608,
      608,  608,  608,  608,  608,  609,  609,  609,  609,  609,
      609,  609,  609,  611,  627,  611,  611,  611,  611,  611,
      611,  611,  611,  615,  615,  615,  615,  615,  615,  615,
      615,  615,  615,  615, 1019, 1024, 1025,  593,  615,  615,
      592,  591,  590,  588, 1019, 1024, 1025,  615,  615,  615,
      615,  615,  615,  616,  616,  616,  616,  616,  616,  616,
      616,  618,  580,  618,  618,  618,  618,  618,  618,  618,

      618,  622,  622,  622,  622,  622,  622,  622,  622,  622,
      622,  622,  578,  577, 1026,  576,  622,  622, 1022, 1022,
     1022, 1022, 1022, 1022, 1026,  622,  622,  622,  622,  622,
      622,  623,  623,  623,  623,  623,  623,  623,  623,  625,
     1031,  625,  625,  625,  625,  625,  625,  625,  625,  630,
     1031,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      574,  573, 1032,  567,  630,  630, 1029, 1029, 1029, 1029,
     1029, 1029, 1032,  630,  630,  630,  630,  630,  630,  631,
      631,  631,  631,  631,  631,  631,  631,  636, 1033,  636,
      636,  636,  636,  636,  636,  636,  636,  636, 1033,  561,

     1038,  559,  636,  636, 1036, 1036, 1036, 1036, 1036, 1036,
     1038,  636,  636,  636,  636,  636,  636,  637,  637,  637,
      637,  637,  637,  637,  637,  643, 1060,  643,  643,  643,
      643,  643,  643,  643,  643,  643, 1060,  558, 1075, 1075,
      643,  643, 1041, 1041, 1041, 1041, 1041, 1041, 1075,  643,
      643,  643,  643,  643,  643,  644,  644,  644,  644,  644,
      644,  644,  644,  648,  648,  648,  648,  648,  648,  648,
      648,  651,  557,  651,  651,  651,  651,  651,  651,  653,
      653,  653,  653,  653,  653,  653,  653,  656,  555,  656,
      656,  656,  656,  656,  656,  659,  659,  659,  659,  659,

      659,  659,  659,  660, 1103,  660,  660,  660,  660,  660,
      660,  660,  660,  660, 1103,  551, 1110,  548,  660,  660,
     1079, 1079, 1079, 1079, 1079, 1079, 1110,  660,  660,  660,
      660,  660,  660,  661,  661,  661,  661,  661,  661,  661,
      661,  544,  540,  539, 1117,  538,  661,  661, 1095, 1095,
     1095, 1095, 1095, 1095, 1117,  661,  661,  661,  661,  661,
      661,  663,  663,  663,  663,  663,  663,  663,  663,  664,
      531,  664,  664,  664,  664,  664,  664,  524,  517,  664,
      668,  668,  668,  668,  668,  668,  668,  668,  670,  670,
      670,  670,  670,  670,  670,  670,  673,  510,  673,  673,

      673,  673,  673,  673,  675,  675,  675,  675,  675,  675,
      675,  675,  678,  509,  678,  678,  678,  678,  678,  678,
      681,  508,  681,  681,  681,  681,  681,  681,  681,  681,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682, 1124, 1131, 1144,  506,  682,  682,  505,  503,  495,
      493, 1124, 1131, 1144,  682,  682,  682,  682,  682,  682,
      683,  683,  683,  683,  683,  683,  683,  683, 1145, 1150,
     1174, 1176,  492,  683,  683,  490,  488,  487, 1145, 1150,
     1174, 1176,  683,  683,  683,  683,  683,  683,  684,  478,
      684,  684,  684,  684,  684,  684,  684,  684,  685,  685,

      685,  685,  685,  685,  685,  685,  686,  474,  686,  686,
      686,  686,  686,  686,  688,  688,  688,  688,  688,  688,
      688,  688,  691,  473,  691,  691,  691,  691,  691,  691,
      694, 1177,  694,  694,  694,  694,  694,  694,  694,  694,
      694, 1177,  471, 1179,  470,  694,  694, 1148, 1148, 1148,
     1148, 1148, 1148, 1179,  694,  694,  694,  694,  694,  694,
      695,  695,  695,  695,  695,  695,  695,  695,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699, 1180,
     1181, 1183,  467,  699,  699,  461,  457,  456,  455, 1180,
     1181, 1183,  699,  699,  699,  699,  699,  699,  701,  429,

      701,  701,  701,  701,  701,  701,  701,  701,  702,  702,
      702,  702,  702,  702,  702,  702,  703,  428,  703,  703,
      703,  703,  703,  703,  706,  706,  706,  706,  706,  706,
      706,  706,  706,  706,  706, 1184, 1185, 1187,  427,  706,
      706,  426,  424,  415,  413, 1184, 1185, 1187,  706,  706,
      706,  706,  706,  706,  708,  412,  708,  708,  708,  708,
      708,  708,  708,  708,  709,  709,  709,  709,  709,  709,
      709,  709,  710,  411,  710,  710,  710,  710,  710,  710,
      713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
      713, 1188, 1189, 1191,  409,  713,  713,  408,  403,  397,

      395, 1188, 1189, 1191,  713,  713,  713,  713,  713,  713,
      715,  391,  715,  715,  715,  715,  715,  715,  715,  715,
      716,  716,  716,  716,  716,  716,  716,  716,  717,  387,
      717,  717,  717,  717,  717,  717,  720,  720,  720,  720,
      720,  720,  720,  720,  720,  720,  720, 1192, 1193, 1195,
      386,  720,  720,  385,  378,  371,  364, 1192, 1193, 1195,
      720,  720,  720,  720,  720,  720,  722,  363,  722,  722,
      722,  722,  722,  722,  722,  722,  723,  723,  723,  723,
      723,  723,  723,  723,  724,  356,  724,  724,  724,  724,
      724,  724,  727,  727,  727,  727,  727,  727,  727,  727,

      727,  727,  727,  354,  346, 1217,  344,  727,  727, 1198,
     1198, 1198, 1198, 1198, 1198, 1217,  727,  727,  727,  727,
      727,  727,  729,  343,  729,  729,  729,  729,  729,  729,
      729,  729,  730,  730,  730,  730,  730,  730,  730,  730,
      731,  341,  731,  731,  731,  731,  731,  731,  735,  735,
      735,  735,  735,  735,  735,  735, 1235, 1236, 1239, 1263,
      339,  735,  735,  338,  333,  329, 1235, 1236, 1239, 1263,
      735,  735,  735,  735,  735,  735,  736, 1264,  736,  736,
      736,  736,  736,  736,  736,  736,  736, 1264, 1266,  325,
      324,  736,  736,  323,  304,  303,  302,  296, 1266,  294,

      736,  736,  736,  736,  736,  736,  737,  737,  737,  737,
      737,  737,  737,  737,  293,  292,  284,  282,  281,  737,
      737, 1291, 1291, 1291, 1291, 1291, 1291,  280,  737,  737,
      737,  737,  737,  737,  739,  739,  739,  739,  739,  739,
      739,  739,  740,  278,  740,  740,  740,  740,  740,  740,
      277,  272,  740,  743,  271,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  270,  263,  256,  255,  743,  743,
     1339, 1339, 1339, 1339, 1339, 1339,  254,  743,  743,  743,
      743,  743,  743,  744,  744,  744,  744,  744,  744,  744,
      744,  250,  248,  246,  245,  241,  744,  744, 1358, 1358,

     1358, 1358, 1358, 1358,  233,  744,  744,  744,  744,  744,
      744,  746,  746,  746,  746,  746,  746,  746,  746,  747,
      231,  747,  747,  747,  747,  747,  747,  230,  226,  747,
      750,  225,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  213,  212,  211,  210,  750,  750, 1362, 1362, 1362,
     1362, 1362, 1362,  208,  750,  750,  750,  750,  750,  750,
      751,  751,  751,  751,  751,  751,  751,  751,  207,  205,
      204,  203,  202,  751,  751,  201,  200,  199,  198,  195,
      186,  184,  751,  751,  751,  751,  751,  751,  753,  753,
      753,  753,  753,  753,  753,  753,  754,  180,  754,  754,

      754,  754,  754,  754,  179,  178,  754,  756,  756,  756,
      756,  756,  756,  756,  756,  757,  757,  757,  757,  757,
      757,  757,  757,  758,  758,  758,  758,  758,  758,  758,
      758,  761,  171,  761,  761,  761,  761,  761,  761,  761,
      761,  765,  170,  765,  765,  765,  765,  765,  765,  765,
      765,  769,  168,  769,  769,  769,  769,  769,  769,  769,
      769,  769,  167,  165,  162,  161,  769,  769,  160,  159,
      158,  157,  155,  154,  152,  769,  769,  769,  769,  769,
      769,  770,  770,  770,  770,  770,  770,  770,  770,  776,
      776,  776,  776,  776,  776,  776,  776,  776,  776,  780,

      151,  780,  780,  780,  780,  780,  780,  780,  780,  784,
      149,  784,  784,  784,  784,  784,  784,  784,  784,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      148,  147,  138,  137,  788,  788,  132,  131,  130,  128,
      126,  125,  121,  788,  788,  788,  788,  788,  788,  789,
      789,  789,  789,  789,  789,  789,  789,  791,  120,  791,
      791,  791,  791,  791,  791,  791,  791,  794,  118,  794,
      794,  794,  794,  794,  794,  794,  794,  798,  798,  798,
      798,  798,  798,  798,  798,  799,  117,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  116,  115,  114,  113,

      799,  799,  111,  110,  109,  108,  107,  106,  102,  799,
      799,  799,  799,  799,  799,  802,  802,  802,  802,  802,
      802,  802,  802,  803,  100,  803,  803,  803,  803,  803,
      803,   93,   92,  803,  829,   89,  829,  829,  829,  829,
      829,  829,  829,  829,  829,   88,   86,   84,   81,  829,
      829,   80,   79,   78,   77,   76,   75,   74,  829,  829,
      829,  829,  829,  829,  830,  830,  830,  830,  830,  830,
      830,  830,  835,   72,  835,  835,  835,  835,  835,  835,
      835,  835,  835,   70,   69,   68,   67,  835,  835,   66,
       65,   64,   63,   62,   61,   51,  835,  835,  835,  835,

      835,  835,  836,  836,  836,  836,  836,  836,  836,  836,
      842,   50,  842,  842,  842,  842,  842,  842,  842,  842,
      842,   43,   40,   37,   35,  842,  842,   33,   32,   31,
       30,   29,   27,   26,  842,  842,  842,  842,  842,  842,
      843,  843,  843,  843,  843,  843,  843,  843,  849,   23,
      849,  849,  849,  849,  849,  849,  849,  849,  849,   22,
       21,   19,   15,  849,  849,   14,    9,    7,    5,    0,
        0,    0,  849,  849,  849,  849,  849,  849,  850,  850,
      850,  850,  850,  850,  850,  850,  854,  854,  854,  854,
      854,  854,  854,  854,  855,  855,  855,  855,  855,  855,

      855,  855,  858,  858,  858,  858,  858,  858,  858,  858,
      861,    0,  861,  861,  861,  861,  861,  861,  863,  863,
      863,  863,  863,  863,  863,  863,  866,    0,  866,  866,
      866,  866,  866,  866,  869,  869,  869,  869,  869,  869,
      869,  869,  870,    0,  870,  870,  870,  870,  870,  870,
      870,  870,  870,    0,    0,    0,    0,  870,  870,    0,
        0,    0,    0,    0,    0,    0,  870,  870,  870,  870,
      870,  870,  871,  871,  871,  871,  871,  871,  871,  871,
        0,    0,    0,    0,    0,  871,  871,    0,    0,    0,
        0,    0,    0,    0,  871,  871,  871,  871,  871,  871,

      873,  873,  873,  873,  873,  873,  873,  873,  874,    0,
      874,  874,  874,  874,  874,  874,    0,    0,  874,  878,
      878,  878,  878,  878,  878,  878,  878,  880,  880,  880,
      880,  880,  880,  880,  880,  883,    0,  883,  883,  883,
      883,  883,  883,  885,  885,  885,  885,  885,  885,  885,
      885,  888,    0,  888,  888,  888,  888,  888,  888,  891,
        0,  891,  891,  891,  891,  891,  891,  891,  891,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
        0,    0,    0,    0,  892,  892,    0,    0,    0,    0,
        0,    0,    0,  892,  892,  892,  892,  892,  892,  894,

        0,  894,  894,  894,  894,  894,  894,  894,  894,  895,
      895,  895,  895,  895,  895,  895,  895,  896,    0,  896,
      896,  896,  896,  896,  896,  898,  898,  898,  898,  898,
      898,  898,  898,  901,    0,  901,  901,  901,  901,  901,
      901,  904,    0,  904,  904,  904,  904,  904,  904,  904,
      904,  924,  924,  924,  924,  924,  924,  924,  924,    0,
        0,    0,    0,    0,  924,  924,    0,    0,    0,    0,
        0,    0,    0,  924,  924,  924,  924,  924,  924,  925,
        0,  925,  925,  925,  925,  925,  925,  925,  925,  925,
        0,    0,    0,    0,  925,  925,    0,    0,    0,    0,

        0,    0,    0,  925,  925,  925,  925,  925,  925,  926,
      926,  926,  926,  926,  926,  926,  926,    0,    0,    0,
        0,    0,  926,  926,    0,    0,    0,    0,    0,    0,
        0,  926,  926,  926,  926,  926,  926,  928,  928,  928,
      928,  928,  928,  928,  928,  929,    0,  929,  929,  929,
      929,  929,  929,    0,    0,  929,  932,    0,  932,  932,
      932,  932,  932,  932,  932,  932,  932,    0,    0,    0,
        0,  932,  932,    0,    0,    0,    0,    0,    0,    0,
      932,  932,  932,  932,  932,  932,  933,  933,  933,  933,
      933,  933,  933,  933,    0,    0,    0,    0,    0,  933,

      933,    0,    0,    0,    0,    0,    0,    0,  933,  933,
      933,  933,  933,  933,  935,  935,  935,  935,  935,  935,
      935,  935,  936,    0,  936,  936,  936,  936,  936,  936,
        0,    0,  936,  939,    0,  939,  939,  939,  939,  939,
      939,  939,  939,  939,    0,    0,    0,    0,  939,  939,
        0,    0,    0,    0,    0,    0,    0,  939,  939,  939,
      939,  939,  939,  940,  940,  940,  940,  940,  940,  940,
      940,    0,    0,    0,    0,    0,  940,  940,    0,    0,
        0,    0,    0,    0,    0,  940,  940,  940,  940,  940,
      940,  942,  942,  942,  942,  942,  942,  942,  942,  943,

        0,  943,  943,  943,  943,  943,  943,    0,    0,  943,
      946,    0,  946,  946,  946,  946,  946,  946,  946,  946,
      946,    0,    0,    0,    0,  946,  946,    0,    0,    0,
        0,    0,    0,    0,  946,  946,  946,  946,  946,  946,
      947,  947,  947,  947,  947,  947,  947,  947,    0,    0,
        0,    0,    0,  947,  947,    0,    0,    0,    0,    0,
        0,    0,  947,  947,  947,  947,  947,  947,  949,  949,
      949,  949,  949,  949,  949,  949,  950,    0,  950,  950,
      950,  950,  950,  950,    0,    0,  950,  953,  953,  953,
      953,  953,  953,  953,  953,  954,  954,  954,  954,  954,

      954,  954,  954,  955,  955,  955,  955,  955,  955,  955,
      955,  958,    0,  958,  958,  958,  958,  958,  958,  958,
      958,  962,    0,  962,  962,  962,  962,  962,  962,  962,
      962,  966,    0,  966,  966,  966,  966,  966,  966,  966,
      966,  966,    0,    0,    0,    0,  966,  966,    0,    0,
        0,    0,    0,    0,    0,  966,  966,  966,  966,  966,
      966,  967,  967,  967,  967,  967,  967,  967,  967,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  977,
        0,  977,  977,  977,  977,  977,  977,  977,  977,  981,
        0,  981,  981,  981,  981,  981,  981,  981,  981,  987,

      987,  987,  987,  987,  987,  987,  987,  988,  988,  988,
      988,  988,  988,  988,  988,  989,  989,  989,  989,  989,
      989,  989,  989,  991,  991,  991,  991,  991,  991,  991,
      991,  994,    0,  994,  994,  994,  994,  994,  994, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,    0,    0,
        0,    0, 1006, 1006,    0,    0,    0,    0,    0,    0,
        0, 1006, 1006, 1006, 1006, 1006, 1006, 1007,    0, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,    0,    0,
        0,    0, 1007, 1007,    0,    0,    0,    0,    0,    0,
        0, 1007, 1007, 1007, 1007, 1007, 1007, 1008, 1008, 1008,

     1008, 1008, 1008, 1008, 1008, 1013,    0, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013,    0,    0,    0,    0,
     1013, 1013,    0,    0,    0,    0,    0,    0,    0, 1013,
     1013, 1013, 1013, 1013, 1013, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1020,    0, 1020, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1020,    0,    0,    0,    0, 1020, 1020,
        0,    0,    0,    0,    0,    0,    0, 1020, 1020, 1020,
     1020, 1020, 1020, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1027,    0, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027,    0,    0,    0,    0, 1027, 1027,    0,    0,

        0,    0,    0,    0,    0, 1027, 1027, 1027, 1027, 1027,
     1027, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1034,
        0, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
        0,    0,    0,    0, 1034, 1034,    0,    0,    0,    0,
        0,    0,    0, 1034, 1034, 1034, 1034, 1034, 1034, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1039, 1039, 1039,
     1039, 1039, 1039, 1039, 1039, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1046,    0, 1046, 1046, 1046, 1046, 1046, 1046, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1051,    0, 1051,

     1051, 1051, 1051, 1051, 1051, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1055,    0, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1055,    0,    0,    0,    0, 1055, 1055,
        0,    0,    0,    0,    0,    0,    0, 1055, 1055, 1055,
     1055, 1055, 1055, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056,    0,    0,    0,    0,    0, 1056, 1056,    0,    0,
        0,    0,    0,    0,    0, 1056, 1056, 1056, 1056, 1056,
     1056, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1059,
        0, 1059, 1059, 1059, 1059, 1059, 1059,    0,    0, 1059,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1065, 1065,

     1065, 1065, 1065, 1065, 1065, 1065, 1068,    0, 1068, 1068,
     1068, 1068, 1068, 1068, 1070, 1070, 1070, 1070, 1070, 1070,
     1070, 1070, 1073,    0, 1073, 1073, 1073, 1073, 1073, 1073,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1082,    0, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1093,    0, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1093,    0,    0,    0,
        0, 1093, 1093,    0,    0,    0,    0,    0,    0,    0,
     1093, 1093, 1093, 1093, 1093, 1093, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1098,    0, 1098, 1098, 1098, 1098,

     1098, 1098, 1098, 1098, 1098,    0,    0,    0,    0, 1098,
     1098,    0,    0,    0,    0,    0,    0,    0, 1098, 1098,
     1098, 1098, 1098, 1098, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1102,    0, 1102, 1102, 1102, 1102, 1102, 1102,
        0,    0, 1102, 1105,    0, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105,    0,    0,    0,    0, 1105, 1105,
        0,    0,    0,    0,    0,    0,    0, 1105, 1105, 1105,
     1105, 1105, 1105, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1109,    0, 1109, 1109, 1109, 1109, 1109, 1109,    0,
        0, 1109, 1112,    0, 1112, 1112, 1112, 1112, 1112, 1112,

     1112, 1112, 1112,    0,    0,    0,    0, 1112, 1112,    0,
        0,    0,    0,    0,    0,    0, 1112, 1112, 1112, 1112,
     1112, 1112, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1116,    0, 1116, 1116, 1116, 1116, 1116, 1116,    0,    0,
     1116, 1119,    0, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119,    0,    0,    0,    0, 1119, 1119,    0,    0,
        0,    0,    0,    0,    0, 1119, 1119, 1119, 1119, 1119,
     1119, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1123,
        0, 1123, 1123, 1123, 1123, 1123, 1123,    0,    0, 1123,
     1126,    0, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,

     1126,    0,    0,    0,    0, 1126, 1126,    0,    0,    0,
        0,    0,    0,    0, 1126, 1126, 1126, 1126, 1126, 1126,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1130,    0,
     1130, 1130, 1130, 1130, 1130, 1130,    0,    0, 1130, 1133,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1134, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1138,    0, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1142,    0, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1146,    0, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146,    0,    0,    0,    0, 1146, 1146,

        0,    0,    0,    0,    0,    0,    0, 1146, 1146, 1146,
     1146, 1146, 1146, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1157,    0, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1165,
        0, 1165, 1165, 1165, 1165, 1165, 1165, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1169,    0, 1169, 1169, 1169,
     1169, 1169, 1169, 1169, 1169, 1169,    0,    0,    0,    0,
     1169, 1169,    0,    0,    0,    0,    0,    0,    0, 1169,
     1169, 1169, 1169, 1169, 1169, 1172, 1172, 1172, 1172, 1172,

     1172, 1172, 1172, 1173,    0, 1173, 1173, 1173, 1173, 1173,
     1173,    0,    0, 1173, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1203,    0,
     1203, 1203, 1203, 1203, 1203, 1203, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1208,    0, 1208, 1208, 1208, 1208,
     1208, 1208, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1212,    0, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212,    0,    0,    0,    0, 1212, 1212,    0,    0,    0,
        0,    0,    0,    0, 1212, 1212, 1212, 1212, 1212, 1212,

     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1216,    0,
     1216, 1216, 1216, 1216, 1216, 1216,    0,    0, 1216, 1220,
     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1225,    0, 1225, 1225, 1225,
     1225, 1225, 1225, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1233,    0, 1233, 1233, 1233, 1233, 1233,
     1233, 1233, 1233, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1257,    0, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1261,    0, 1261,

     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1269, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1279,    0, 1279, 1279, 1279, 1279, 1279,
     1279, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1296,    0, 1296, 1296, 1296,
     1296, 1296, 1296, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1301,    0, 1301, 1301, 1301, 1301, 1301, 1301, 1307,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1311,    0, 1311,

     1311, 1311, 1311, 1311, 1311, 1311, 1311, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1323, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1327,    0, 1327, 1327, 1327, 1327, 1327, 1327, 1327,
     1327, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1335,
        0, 1335, 1335, 1335, 1335, 1335, 1335, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1341, 1341, 1341, 1341, 1341, 1341, 1341,
     1341, 1344,    0, 1344, 1344, 1344, 1344, 1344, 1344, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1348, 1348, 1348,

     1348, 1348, 1348, 1348, 1348, 1349, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1354,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1356, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1360, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1367,
     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1368,    0,
     1368, 1369,    0, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1370, 1370,    0, 1370, 1371, 1371,    0, 1371, 1372,    0,

     1372, 1373,    0, 1373, 1374, 1374,    0, 1374, 1375, 1375,
        0, 1375, 1376,    0, 1376, 1377,    0, 1377, 1377, 1378,
     1378,    0, 1378, 1379, 1379,    0, 1379, 1380, 1380,    0,
     1380, 1381,    0, 1381, 1382,    0, 1382, 1383, 1383,    0,
     1383, 1384, 1384,    0, 1384, 1385, 1385,    0, 1385, 1386,
        0, 1386, 1387,    0, 1387, 1388, 1388, 1388, 1388,    0,
     1388, 1389,    0, 1389, 1390, 1390,    0, 1390, 1391, 1391,
        0, 1391, 1392, 1392, 1392, 1392,    0, 1392, 1393, 1393,
        0, 1393, 1394, 1394,    0, 1394, 1395,    0, 1395, 1396,
     1396, 1396, 1397, 1397, 1397, 1398, 1398,    0, 1398, 1399,

     1399,    0, 1399, 1400, 1400,    0, 1400, 1401, 1401,    0,
     1401, 1402, 1402,    0, 1402, 1403,    0, 1403, 1404,    0,
     1404, 1405,    0, 1405, 1406,    0, 1406, 1407, 1407, 1407,
     1407,    0, 1407, 1408, 1408, 1408, 1409, 1409,    0, 1409,
     1410, 1410,    0, 1410, 1411, 1411, 1411, 1411,    0, 1411,
     1412, 1412, 1412, 1412,    0, 1412, 1413, 1413,    0, 1413,
     1414, 1414,    0, 1414, 1415, 1415,    0, 1415, 1416, 1416,
        0, 1416, 1417,    0, 1417, 1418,    0, 1418, 1419,    0,
     1419, 1420,    0, 1420, 1421,    0,    0, 1421,    0,    0,
     1421, 1422, 1422,    0, 1422, 1423, 1423,    0, 1423, 1424,

     1424,    0, 1424, 1425, 1425,    0, 1425, 1426, 1426,    0,
     1426, 1427,    0, 1427, 1428,    0, 1428, 1429,    0, 1429,
     1429,    0, 1429, 1430, 1430,    0, 1430, 1431, 1431, 1431,
     1432, 1432, 1432, 1433,    0, 1433, 1434,    0, 1434, 1435,
        0, 1435, 1436,    0, 1436, 1437, 1437, 1437, 1437,    0,
     1437, 1438,    0,    0, 1438,    0,    0, 1438, 1439,    0,
     1439, 1440,    0, 1440, 1441, 1441,    0, 1441, 1442, 1442,
        0, 1442, 1443, 1443, 1443, 1443,    0, 1443, 1444, 1444,
     1444, 1444,    0, 1444, 1445, 1445, 1445, 1445,    0, 1445,
     1446, 1446,    0, 1446, 1447, 1447,    0, 1447, 1448, 1448,

        0, 1448, 1449,    0, 1449, 1449,    0, 1449, 1450, 1450,
        0, 1450, 1451,    0, 1451, 1452,    0, 1452, 1453, 1453,
        0, 1453, 1454, 1454, 1454, 1455, 1455, 1455, 1456,    0,
     1456, 1457,    0, 1457, 1458,    0, 1458, 1459,    0, 1459,
     1460,    0, 1460, 1461,    0, 1461, 1462, 1462,    0, 1462,
     1463, 1463,    0, 1463, 1464, 1464,    0, 1464, 1465, 1465,
        0, 1465, 1466, 1466,    0, 1466, 1467, 1467,    0, 1467,
     1468,    0, 1468, 1469,    0, 1469, 1470,    0, 1470, 1471,
        0, 1471, 1472,    0, 1472, 1472,    0, 1472, 1473, 1473,
        0, 1473, 1474, 1474, 1474, 1475, 1475, 1475, 1476,    0,

     1476, 1477,    0, 1477, 1478,    0, 1478, 1479,    0, 1479,
     1480, 1480, 1480, 1480,    0, 1480, 1481,    0, 1481, 1482,
        0, 1482, 1483, 1483,    0, 1483, 1484, 1484, 1484, 1484,
        0, 1484, 1485, 1485, 1485, 1485,    0, 1485, 1486, 1486,
     1486, 1486,    0, 1486, 1487, 1487, 1487, 1487,    0, 1487,
     1488, 1488,    0, 1488, 1489, 1489,    0, 1489, 1490, 1490,
        0, 1490, 1491,    0, 1491, 1491,    0, 1491, 1492, 1492,
        0, 1492, 1493,    0, 1493, 1493,    0, 1493, 1494, 1494,
        0, 1494, 1495,    0, 1495, 1496,    0, 1496, 1497,    0,
     1497, 1498,    0, 1498, 1499, 1499,    0, 1499, 1500, 1500,

     1500, 1501, 1501, 1501, 1502,    0, 1502, 1503,    0, 1503,
     1504,    0, 1504, 1505,    0, 1505, 1506,    0, 1506, 1507,
        0, 1507, 1508, 1508,    0, 1508, 1509, 1509, 1509,    0,
        0, 1509, 1510, 1510,    0, 1510, 1511,    0,    0, 1511,
     1512,    0,    0, 1512, 1513,    0,    0, 1513, 1514,    0,
        0, 1514, 1515,    0,    0, 1515, 1516, 1516,    0, 1516,
     1517, 1517,    0, 1517, 1518, 1518,    0, 1518, 1519, 1519,
        0, 1519, 1520, 1520,    0, 1520, 1521,    0, 1521, 1522,
        0, 1522, 1523,    0, 1523, 1524,    0, 1524, 1525,    0,
     1525, 1525,    0, 1525, 1526, 1526,    0, 1526, 1527, 1527,

     1527, 1528, 1528, 1528, 1529,    0, 1529, 1530,    0, 1530,
     1531,    0, 1531, 1532,    0, 1532, 1533, 1533, 1533, 1533,
        0, 1533, 1534,    0, 1534, 1535,    0, 1535, 1536, 1536,
        0, 1536, 1537, 1537,    0, 1537, 1538, 1538, 1538,    0,
        0, 1538, 1539, 1539, 1539, 1539,    0, 1539, 1540, 1540,
     1540,    0,    0, 1540, 1541, 1541, 1541, 1541,    0, 1541,
     1542, 1542, 1542,    0,    0, 1542, 1543, 1543, 1543, 1543,
        0, 1543, 1544, 1544, 1544,    0,    0, 1544, 1545, 1545,
     1545, 1545,    0, 1545, 1546, 1546, 1546,    0,    0, 1546,
     1547, 1547, 1547, 1547,    0, 1547, 1548, 1548, 1548,    0,

        0, 1548, 1549, 1549,    0, 1549, 1550, 1550,    0, 1550,
     1551, 1551,    0, 1551, 1552,    0, 1552, 1552,    0, 1552,
     1553, 1553,    0, 1553, 1554,    0, 1554, 1554,    0, 1554,
     1555, 1555,    0, 1555, 1556,    0, 1556, 1556,    0, 1556,
     1557, 1557,    0, 1557, 1558,    0, 1558, 1559,    0, 1559,
     1560,    0, 1560, 1561,    0, 1561, 1562, 1562,    0, 1562,
     1563, 1563, 1563, 1564, 1564, 1564, 1565,    0, 1565, 1566,
        0, 1566, 1567,    0, 1567, 1568,    0, 1568, 1569,    0,
        0, 1569, 1570,    0, 1570, 1571,    0, 1571, 1572,    0,
     1572, 1573,    0, 1573, 1574,    0, 1574, 1574,    0, 1574,

     1575, 1575, 1575,    0,    0, 1575, 1576, 1576, 1576,    0,
        0, 1576, 1577, 1577, 1577,    0,    0, 1577, 1578, 1578,
     1578,    0,    0, 1578, 1579, 1579, 1579,    0,    0, 1579,
     1580, 1580, 1580,    0,    0, 1580, 1581, 1581, 1581,    0,
        0, 1581, 1582, 1582,    0, 1582, 1583, 1583,    0, 1583,
     1584, 1584,    0, 1584, 1585, 1585,    0, 1585, 1586, 1586,
        0, 1586, 1587, 1587,    0, 1587, 1588,    0, 1588, 1589,
        0, 1589, 1590,    0, 1590, 1591,    0, 1591, 1592,    0,
     1592, 1592,    0, 1592, 1593, 1593,    0, 1593, 1594, 1594,
     1594, 1595, 1595, 1595, 1596,    0, 1596, 1597,    0, 1597,

     1598,    0, 1598, 1599,    0, 1599, 1600, 1600, 1600, 1600,
        0, 1600, 1601, 1601, 1601,    0,    0, 1601, 1602,    0,
     1602, 1603,    0, 1603, 1604, 1604, 1604,    0,    0, 1604,
     1605, 1605, 1605,    0,    0, 1605, 1606, 1606, 1606,    0,
        0, 1606, 1607, 1607, 1607,    0,    0, 1607, 1608, 1608,
     1608,    0,    0, 1608, 1609, 1609, 1609,    0,    0, 1609,
     1610, 1610, 1610,    0,    0, 1610, 1611, 1611,    0, 1611,
     1612, 1612,    0, 1612, 1613,    0, 1613, 1613,    0, 1613,
     1614, 1614,    0, 1614, 1615,    0, 1615, 1615,    0, 1615,
     1616, 1616,    0, 1616, 1617,    0, 1617, 1617,    0, 1617,

     1618, 1618,    0, 1618, 1619,    0, 1619, 1619,    0, 1619,
     1620, 1620,    0, 1620, 1621,    0, 1621, 1622,    0, 1622,
     1623,    0, 1623, 1624,    0, 1624, 1625, 1625,    0, 1625,
     1626, 1626, 1626, 1627, 1627, 1627, 1628,    0, 1628, 1629,
        0, 1629, 1630,    0, 1630, 1631,    0, 1631, 1632, 1632,
     1632,    0,    0, 1632, 1633,    0, 1633, 1634,    0, 1634,
     1635, 1635, 1635,    0,    0, 1635, 1636, 1636,    0, 1636,
     1637,    0,    0, 1637, 1638, 1638,    0, 1638, 1639,    0,
        0, 1639, 1640, 1640,    0, 1640, 1641,    0,    0, 1641,
     1642, 1642,    0, 1642, 1643,    0,    0, 1643, 1644, 1644,

        0, 1644, 1645,    0,    0, 1645, 1646, 1646,    0, 1646,
     1647,    0,    0, 1647, 1648, 1648,    0, 1648, 1649,    0,
     1649, 1650,    0, 1650, 1651,    0, 1651, 1652,    0, 1652,
     1653,    0, 1653, 1653,    0, 1653, 1654, 1654,    0, 1654,
     1655, 1655, 1655, 1656, 1656, 1656, 1657,    0, 1657, 1658,
        0, 1658, 1659, 1659, 1659,    0,    0, 1659, 1660,    0,
     1660, 1661,    0, 1661, 1662, 1662,    0, 1662, 1663, 1663,
        0, 1663, 1664,    0,    0, 1664, 1665,    0, 1665, 1665,
        0, 1665, 1666,    0,    0, 1666, 1667,    0, 1667, 1667,
        0, 1667, 1668,    0,    0, 1668, 1669,    0, 1669, 1669,

        0, 1669, 1670,    0,    0, 1670, 1671,    0, 1671, 1671,
        0, 1671, 1672,    0,    0, 1672, 1673,    0, 1673, 1673,
        0, 1673, 1674,    0,    0, 1674, 1675,    0, 1675, 1676,
        0, 1676, 1677,    0,    0, 1677, 1678, 1678,    0, 1678,
     1679, 1679, 1679, 1680,    0, 1680, 1681, 1681, 1681, 1682,
     1682, 1682, 1683,    0, 1683, 1684,    0, 1684, 1685,    0,
     1685, 1685,    0, 1685, 1686,    0,    0, 1686, 1687,    0,
        0, 1687, 1688,    0,    0, 1688, 1689,    0,    0, 1689,
     1690,    0,    0, 1690, 1691,    0,    0, 1691, 1692,    0,
        0, 1692, 1693,    0, 1693, 1694,    0, 1694, 1695,    0,

     1695, 1696,    0, 1696, 1697,    0, 1697, 1697,    0, 1697,
     1698,    0,    0, 1698, 1699, 1699, 1699, 1700, 1700, 1700,
     1701, 1701, 1701, 1702,    0, 1702, 1703,    0,    0, 1703,
     1704,    0,    0, 1704, 1705,    0,    0, 1705, 1706,    0,
        0, 1706, 1707,    0,    0, 1707, 1708,    0,    0, 1708,
     1709,    0,    0, 1709, 1710,    0, 1710, 1711,    0, 1711,
     1712,    0,    0, 1712, 1713, 1713, 1713, 1714,    0, 1714,
     1715,    0, 1715, 1716,    0,    0, 1716, 1717,    0, 1717,
     1718,    0, 1718, 1719,    0,    0, 1719, 1720,    0, 1720,
     1721,    0, 1721, 1366, 1366, 1366, 1366, 1366, 1366, 1366,

     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_policy_parser_flex_debug;
int yy_policy_parser_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yy_policy_parsertext;
#line 1 "policy.l"
#line 2 "policy.l"

#include <vector>
#include <string>
#include <sstream>

#include "policy_module.h"
#include "libxorp/xorp.h"
#include "policy/common/policy_utils.hh"
#include "policy_parser.hh"
#include "yacc.yy_policy_parser.cc.h"

#define yylval yy_policy_parserlval
#define yyerror yy_policy_parsererror
#define yyparse yy_policy_parserparse

void yyerror(const char *m);
extern int yyparse(void);

using namespace policy_parser;

// instantiate the globals here.
vector<Node*>* policy_parser::_parser_nodes;
unsigned policy_parser::_parser_lineno;

// try not to pollute
namespace {
	string _last_error;
	Term::BLOCKS _block;
}


#line 2943 "lex.yy_policy_parser.cc"

#define INITIAL 0
#define STR 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yy_policy_parserwrap (void );
#else
extern int yy_policy_parserwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yy_policy_parsertext, yy_policy_parserleng, 1, yy_policy_parserout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yy_policy_parserin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yy_policy_parserin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yy_policy_parserin))==0 && ferror(yy_policy_parserin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yy_policy_parserin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yy_policy_parserlex (void);

#define YY_DECL int yy_policy_parserlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yy_policy_parsertext and yy_policy_parserleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 62 "policy.l"


#line 3098 "lex.yy_policy_parser.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yy_policy_parserin )
			yy_policy_parserin = stdin;

		if ( ! yy_policy_parserout )
			yy_policy_parserout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yy_policy_parserensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_policy_parser_create_buffer(yy_policy_parserin,YY_BUF_SIZE );
		}

		yy_policy_parser_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yy_policy_parsertext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1367 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1366 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 64 "policy.l"
{ yylval.c_str = strdup(yy_policy_parsertext);
		  return YY_UINTRANGE;
		}  
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 68 "policy.l"
{ yylval.c_str = strdup(yy_policy_parsertext);
		  return YY_UINT;
		}  
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 72 "policy.l"
{ yylval.c_str = strdup(yy_policy_parsertext);
		  return YY_INT;
		}  
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 76 "policy.l"
{ yylval.c_str = strdup(yy_policy_parsertext);
		  return YY_BOOL;
		}  
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "policy.l"
{ yylval.c_str = strdup(yy_policy_parsertext);
		  return YY_BOOL;
		}  
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 84 "policy.l"
BEGIN(STR);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 86 "policy.l"
BEGIN(INITIAL);
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 88 "policy.l"
{ yylval.c_str = strdup(yy_policy_parsertext); 
		  _parser_lineno += policy_utils::count_nl(yy_policy_parsertext);
		  /* XXX: a string can be started with " but terminated with '
		   * and vice versa...
		   */ 
		  return YY_STR;
		}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 96 "policy.l"
{
		  yylval.c_str = strdup(yy_policy_parsertext);
		  return YY_IPV4RANGE;
		}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 101 "policy.l"
{
		  yylval.c_str = strdup(yy_policy_parsertext);
		  return YY_IPV4;
		}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 106 "policy.l"
{
		  yylval.c_str = strdup(yy_policy_parsertext);
		  return YY_IPV4NET;
		}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 112 "policy.l"
{
		  yylval.c_str = strdup(yy_policy_parsertext);
		  return YY_IPV6RANGE;
		}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 117 "policy.l"
{
		  yylval.c_str = strdup(yy_policy_parsertext);
		  return YY_IPV6;
		}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 122 "policy.l"
{
		  yylval.c_str = strdup(yy_policy_parsertext);
		  return YY_IPV6NET;
		}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 127 "policy.l"
{
		  // the colon is an alias for asignment in action and equality
		  // in the source / dest blocks.
		  if (_block == Term::ACTION)
		  	return YY_ASSIGN;
		  else
		  	return YY_EQ;
		}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 136 "policy.l"
return YY_LPAR;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 137 "policy.l"
return YY_RPAR;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 138 "policy.l"
return YY_EQ; 
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 139 "policy.l"
return YY_NE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 140 "policy.l"
return YY_LE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 141 "policy.l"
return YY_GE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 142 "policy.l"
return YY_LT;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 143 "policy.l"
return YY_GT;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 144 "policy.l"
return YY_ADD;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 145 "policy.l"
return YY_MUL;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 146 "policy.l"
return YY_SUB;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 147 "policy.l"
return YY_ASSIGN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 148 "policy.l"
return YY_PLUS_EQUALS;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 149 "policy.l"
return YY_MINUS_EQUALS;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 151 "policy.l"
return YY_IPNET_EQ;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 152 "policy.l"
return YY_IPNET_LT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 153 "policy.l"
return YY_IPNET_GT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 154 "policy.l"
return YY_IPNET_LE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 155 "policy.l"
return YY_IPNET_GE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 156 "policy.l"
return YY_AND;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 157 "policy.l"
return YY_OR;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 158 "policy.l"
return YY_XOR;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 159 "policy.l"
return YY_NOT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 160 "policy.l"
return YY_PLUS_EQUALS;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 161 "policy.l"
return YY_MINUS_EQUALS;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 162 "policy.l"
return YY_HEAD;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 163 "policy.l"
return YY_CTR;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 164 "policy.l"
return YY_NE_INT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 165 "policy.l"
return YY_ACCEPT;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 166 "policy.l"
return YY_REJECT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 167 "policy.l"
return YY_SET;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 168 "policy.l"
return YY_REGEX;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 169 "policy.l"
return YY_PROTOCOL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 170 "policy.l"
return YY_NEXT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 171 "policy.l"
return YY_POLICY;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 172 "policy.l"
return YY_TERM;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 174 "policy.l"
{ yylval.c_str = strdup(yy_policy_parsertext);
					  return YY_ID;
					}  
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 178 "policy.l"
return YY_SEMICOLON;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 180 "policy.l"
/* eat blanks */
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 182 "policy.l"
_parser_lineno++;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 184 "policy.l"
{ yyerror("Unknown character"); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 186 "policy.l"
ECHO;
	YY_BREAK
#line 3507 "lex.yy_policy_parser.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yy_policy_parserin at a new source and called
			 * yy_policy_parserlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yy_policy_parserin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yy_policy_parserwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yy_policy_parsertext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yy_policy_parserlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_policy_parserrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yy_policy_parserrestart(yy_policy_parserin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1367 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1367 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1366);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yy_policy_parserrestart(yy_policy_parserin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yy_policy_parserwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yy_policy_parsertext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yy_policy_parserrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yy_policy_parserensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_policy_parser_create_buffer(yy_policy_parserin,YY_BUF_SIZE );
	}

	yy_policy_parser_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_policy_parser_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_policy_parser_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yy_policy_parserpop_buffer_state();
	 *		yy_policy_parserpush_buffer_state(new_buffer);
     */
	yy_policy_parserensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_policy_parser_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yy_policy_parserwrap()) processing, but the only time this flag
	 * is looked at is after yy_policy_parserwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_policy_parser_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yy_policy_parserin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_policy_parser_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yy_policy_parseralloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_policy_parser_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_policy_parseralloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_policy_parser_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_policy_parser_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_policy_parser_create_buffer()
 * 
 */
    void yy_policy_parser_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_policy_parserfree((void *) b->yy_ch_buf  );

	yy_policy_parserfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yy_policy_parserrestart() or at EOF.
 */
    static void yy_policy_parser_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_policy_parser_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_policy_parser_init_buffer was _probably_
     * called from yy_policy_parserrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_policy_parser_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_policy_parser_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yy_policy_parserpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yy_policy_parserensure_buffer_stack();

	/* This block is copied from yy_policy_parser_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_policy_parser_switch_to_buffer. */
	yy_policy_parser_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yy_policy_parserpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_policy_parser_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_policy_parser_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yy_policy_parserensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yy_policy_parseralloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yy_policy_parserrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_policy_parser_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_policy_parseralloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_policy_parser_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_policy_parser_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yy_policy_parserlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_policy_parser_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_policy_parser_scan_string (yyconst char * yystr )
{
    
	return yy_policy_parser_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yy_policy_parserlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_policy_parser_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yy_policy_parseralloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_policy_parser_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_policy_parser_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_policy_parser_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yy_policy_parsertext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yy_policy_parsertext[yy_policy_parserleng] = (yy_hold_char); \
		(yy_c_buf_p) = yy_policy_parsertext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yy_policy_parserleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yy_policy_parserget_lineno  (void)
{
        
    return yy_policy_parserlineno;
}

/** Get the input stream.
 * 
 */
FILE *yy_policy_parserget_in  (void)
{
        return yy_policy_parserin;
}

/** Get the output stream.
 * 
 */
FILE *yy_policy_parserget_out  (void)
{
        return yy_policy_parserout;
}

/** Get the length of the current token.
 * 
 */
int yy_policy_parserget_leng  (void)
{
        return yy_policy_parserleng;
}

/** Get the current token.
 * 
 */

char *yy_policy_parserget_text  (void)
{
        return yy_policy_parsertext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yy_policy_parserset_lineno (int  line_number )
{
    
    yy_policy_parserlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_policy_parser_switch_to_buffer
 */
void yy_policy_parserset_in (FILE *  in_str )
{
        yy_policy_parserin = in_str ;
}

void yy_policy_parserset_out (FILE *  out_str )
{
        yy_policy_parserout = out_str ;
}

int yy_policy_parserget_debug  (void)
{
        return yy_policy_parser_flex_debug;
}

void yy_policy_parserset_debug (int  bdebug )
{
        yy_policy_parser_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yy_policy_parserlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yy_policy_parserin = stdin;
    yy_policy_parserout = stdout;
#else
    yy_policy_parserin = (FILE *) 0;
    yy_policy_parserout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yy_policy_parserlex_init()
     */
    return 0;
}

/* yy_policy_parserlex_destroy is for both reentrant and non-reentrant scanners. */
int yy_policy_parserlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_policy_parser_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yy_policy_parserpop_buffer_state();
	}

	/* Destroy the stack itself. */
	yy_policy_parserfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yy_policy_parserlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yy_policy_parseralloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yy_policy_parserrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yy_policy_parserfree (void * ptr )
{
	free( (char *) ptr );	/* see yy_policy_parserrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 186 "policy.l"



void yyerror(const char *m)
{
        ostringstream oss;
        oss << "Error on line " <<  _parser_lineno << " near (";

	for(int i = 0; i < yy_policy_parserleng; i++)
		oss << yy_policy_parsertext[i];
	oss << "): " << m;

        _last_error = oss.str();
}

// Everything is put in the lexer because of YY_BUFFER_STATE...
int 
policy_parser::policy_parse(vector<Node*>& outnodes, const Term::BLOCKS& block, 
			    const string& conf, string& outerr)
{

        YY_BUFFER_STATE yybuffstate = yy_policy_parser_scan_string(conf.c_str());

        _last_error = "No error";
        _parser_nodes = &outnodes;
        _parser_lineno = 1;
	_block = block;

        int res = yyparse();
        
        yy_policy_parser_delete_buffer(yybuffstate);
        outerr = _last_error;
        
        return res;
}

