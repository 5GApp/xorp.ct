#define yy_create_buffer yy_policy_parser_create_buffer
#define yy_delete_buffer yy_policy_parser_delete_buffer
#define yy_scan_buffer yy_policy_parser_scan_buffer
#define yy_scan_string yy_policy_parser_scan_string
#define yy_scan_bytes yy_policy_parser_scan_bytes
#define yy_flex_debug yy_policy_parser_flex_debug
#define yy_init_buffer yy_policy_parser_init_buffer
#define yy_flush_buffer yy_policy_parser_flush_buffer
#define yy_load_buffer_state yy_policy_parser_load_buffer_state
#define yy_switch_to_buffer yy_policy_parser_switch_to_buffer
#define yyin yy_policy_parserin
#define yyleng yy_policy_parserleng
#define yylex yy_policy_parserlex
#define yyout yy_policy_parserout
#define yyrestart yy_policy_parserrestart
#define yytext yy_policy_parsertext

#line 19 "lex.yy_policy_parser.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 * $FreeBSD: src/usr.bin/lex/flex.skl,v 1.8 2004/01/06 19:03:44 nectar Exp $
 */

#if defined(__FreeBSD__)
#include <sys/cdefs.h>
#else
#define __unused
#endif

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) __unused;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 41
#define YY_END_OF_BUFFER 42
static yyconst short int yy_accept[704] =
    {   0,
        0,    0,    0,    0,   42,   40,   38,   39,   40,    3,
       11,   12,   26,   23,   25,    1,    1,    1,   10,   37,
       17,   27,   18,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,    5,    4,   38,   14,    2,
        0,    1,    0,    0,    1,    1,    1,    8,   15,   13,
       16,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   20,   36,   36,   36,    5,    0,    0,    0,
        1,    0,    0,    8,    1,    1,    0,    8,    8,    8,
        8,   36,   36,   33,   36,   24,   19,   29,   36,   36,
       22,   36,   36,   21,    0,    0,    0,    0,    0,    1,

        0,    0,    0,    8,    8,    8,    8,    9,    9,    0,
        8,    0,    8,    8,    8,    8,   36,   36,   36,   28,
       36,   36,   36,    0,    0,    0,    0,    1,    0,    0,
        8,    8,    0,    8,    8,    8,    8,    9,    9,    9,
        0,    0,    0,    8,    8,    8,    8,    8,    8,    8,
       34,   36,   36,   36,   36,    0,    0,    0,    0,    0,
        0,    0,    0,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    9,    0,    0,    0,    0,    0,
        8,    0,    8,    0,    8,    8,    8,    8,   31,   30,
       36,   32,    6,    6,    6,    0,    0,    0,    8,    8,

        0,    8,    8,    8,    8,    8,    8,    0,    8,    8,
        8,    8,    0,    0,    0,    0,    0,    0,    0,    8,
        8,    8,    8,    8,    8,    8,   36,    0,    6,    6,
        6,    6,    0,    0,    0,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    8,    0,    8,    0,    8,    8,    8,
        8,   35,    7,    7,    7,    6,    0,    0,    8,    8,
        0,    8,    8,    8,    8,    8,    8,    0,    8,    8,
        8,    8,    8,    8,    0,    8,    8,    8,    8,    8,

        8,    8,    0,    0,    0,    0,    0,    0,    0,    0,
        8,    8,    8,    8,    8,    8,    8,    0,    0,    0,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    8,
        0,    8,    0,    8,    8,    8,    8,    0,    0,    8,
        8,    0,    8,    8,    8,    8,    8,    8,    0,    8,
        8,    8,    8,    8,    8,    0,    8,    8,    8,    8,
        8,    8,    0,    8,    8,    8,    8,    8,    8,    8,

        8,    0,    0,    0,    0,    0,    0,    0,    0,    8,
        8,    8,    8,    8,    8,    8,    0,    0,    0,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    8,    0,    8,    0,    8,
        8,    8,    8,    0,    0,    0,    0,    8,    0,    8,
        0,    8,    8,    8,    8,    8,    8,    0,    8,    8,
        8,    8,    8,    8,    0,    8,    8,    8,    8,    8,

        8,    0,    8,    8,    8,    8,    8,    8,    0,    8,
        8,    8,    8,    8,    8,    8,    8,    0,    0,    0,
        0,    0,    0,    0,    0,    8,    8,    8,    8,    8,
        8,    8,    0,    0,    0,    0,    0,    0,    0,    0,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    8,    0,    8,    0,    8,
        8,    8,    8,    0,    0,    0,    0,    0,    8,    8,
        0,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    0,    0,    0,    0,
        0,    0,    0,    0,    8,    8,    8,    8,    0,    0,
        0,    0,    0,    0,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    8,    8,    0,    0,    0,
        0,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    0,    0,    0,    0,    0,    8,    0,    0,
        0,    0,    0,    8,    8,    8,    8,    0,    0,    0,
        0,    0,    8,    8,    8,    8,    0,    8,    8,    8,
        8,    0,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    1,    6,    7,
        8,    9,   10,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   20,   20,   21,   22,   23,   24,
       25,   26,    1,    1,   27,   27,   27,   27,   28,   27,
       29,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   31,   32,   33,   30,   30,   30,   34,   30,   30,
        1,    1,    1,    1,   35,    1,   36,   27,   37,   38,

       39,   27,   30,   40,   41,   42,   30,   43,   30,   44,
       45,   46,   30,   47,   30,   48,   30,   30,   30,   49,
       30,   30,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[50] =
    {   0,
        1,    1,    1,    1,    2,    2,    1,    1,    1,    1,
        1,    3,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    1,    1,    1,    1,    7,    7,    1,    1,
        1,    1,    1,    1,    1,    7,    7,    7,    7,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[927] =
    {   0,
        0,    0,   45,   47, 3555, 3556, 3552, 3556, 3528, 3556,
     3556, 3556, 3556, 3556,    0,   42,   68,   57, 3530, 3556,
     3526, 3525, 3524,   76,  112, 3520, 3519,   98, 3498, 3506,
       98, 3497, 3496, 3503, 3496,    0, 3556, 3538, 3556,    0,
       51,  140, 3517, 3516,  166,   79,  174,  183, 3556, 3556,
     3556,  209,    0, 3508, 3503, 3498, 3496, 3482, 3468, 3476,
     3473, 3457,    0, 3453, 3452, 3444,    0, 3476,  237, 3472,
      247, 3459, 3454,  274,    0, 3460, 3453,  302,  328,  155,
       55,  336, 3436,    0, 3421,    0,    0,    0, 3418, 3411,
        0, 3400, 3406,    0,  130, 3424, 3421,  364, 3418, 3405,

     3398, 3394, 3390,  372,  398,  198,  125,    0,  149,  191,
      408,  434,  153,  460,   81,  196, 3386, 3370,  250,    0,
     3356, 3351, 3353, 3375,  470, 3372, 3365, 3352, 3349, 3344,
      479,  507,  533,  218,  559,  212,  222, 3556,    0,  262,
     3345,  569, 3336,  285,  287,  579,  605,  317,  228,  315,
        0, 3291, 3282, 3284, 3254,  289, 3287, 3284,  615, 3281,
     3260, 3253, 3246,  623,  649,  351,  349,  383,  385,  659,
      685,  423,  421,  444, 3556,  344, 3249, 3242,  695, 3236,
      445,  387,  703,  729,  446,  755,  218,  489,    0,    0,
     3192,    0, 3221,  764, 3164, 3162, 3149, 3146,  773,  801,

      827,  447,  853,  222,  491,  492,  863,  889,  517,  915,
      250,  519, 3123,  925, 3120, 3069, 3066,  935, 3063,  543,
      545,  945,  971,  594,  520,  592, 3029,  979, 3030, 3027,
      639, 2985, 2973, 2970, 2967,  989, 1015,  674,  546,  672,
      714, 1025, 1051,  744,  715,  742,  783,  785, 1061, 1087,
      816,  716,  814,  417, 2952, 2930, 1097, 2918,  449, 2915,
     2902, 1105, 2899,  786,  494, 1113, 1139,  836, 1165,  305,
      838,    0,  632,  522, 3556, 2879, 2857, 2854, 1174, 1202,
     1228,  839, 1254,  542,  874,  840, 1264, 1290,  875, 1316,
      582,  899,  876, 1326, 1352,  900, 1378,  662,  902, 2850,

     1387, 2803, 2789, 2779, 1397, 2760, 2757, 2756, 1407, 2741,
      956,  958, 1417, 1443, 1004, 1002, 1036, 2721, 2719, 2717,
     1453, 1479, 1076, 1037, 1074, 1124, 1489, 1515, 1154, 1038,
     1126, 1152, 1184, 1525, 1551, 1217, 1185, 1187, 1215, 1238,
     1561, 1587, 1279, 1239, 1241, 2725, 2724, 1306, 2723,  718,
     2709, 2699, 1597, 2681,  737, 2652, 2651, 1605, 2650, 1277,
      788, 1613, 1639, 1336, 1665,  804, 1338, 2639, 2615, 1674,
     1702, 1728, 1339, 1754,  836, 1362, 1363, 1764, 1790, 1364,
     1816,  872, 1428, 1365, 1826, 1852, 1429, 1878,  874, 1464,
     1430, 1888, 1914, 1465, 1940,  898, 1500, 2616, 2593, 1949,

     2592, 2592, 2591, 1959, 2581, 2564, 2563, 1969, 2562, 1502,
     1536, 1979, 2005, 1576, 1466, 1538, 2551, 2491, 2013, 2041,
     2067, 1628, 1574, 1626, 1649, 2077, 2103, 1689, 1650, 1652,
     1687, 1713, 2113, 2139, 1743, 1714, 1741, 1775, 1777, 2149,
     2175, 1805, 1715, 1803, 1837, 1839, 2185, 2211, 1867, 1865,
     1899, 2498, 2497, 1930, 2496,  960, 2496, 2465, 2221, 2463,
      998, 2462, 2461, 2229, 2460, 1900, 1040, 2237, 2263, 1901,
     2289, 1064, 1990, 2419, 2299, 2325, 2028, 2426, 2416, 2335,
        0, 1991, 2361, 1122, 2026, 1992, 2371,    0, 2051, 2397,
     1124, 2053, 2054, 2407,    0, 2087, 2433, 1141, 2089, 2090,

     2443,    0, 2123, 2469, 1183, 2125, 2126, 2479,    0, 2159,
     2505, 1205, 2161, 2424, 2423, 2514, 2392, 2391, 2390, 2524,
     2389, 2388, 2357, 2534, 2355, 2196, 2198, 2544, 2570, 2252,
     2162, 2250, 2344, 1243, 2580, 2343, 2342, 2606, 1267,  926,
     2320, 2273, 2275, 2318, 2310, 2312, 2346, 2317, 2348, 2382,
     2384, 2316, 2418, 2420, 2454, 2315, 2456, 2490, 2492, 2299,
     2555, 2283, 2281, 2596, 2280, 1298, 2280, 2249, 2616, 2248,
     1341, 2230, 2222, 2624, 2207, 2276, 1367, 2632,    0, 2556,
     2658, 1295, 2643, 2205, 2668, 2204, 1398, 1960, 2202, 2201,
     2525, 2169, 2557, 2167, 2644, 2166, 2645, 2165, 2668, 2133,

     2678, 2131, 2130, 2129, 2688, 2097, 2096, 2095, 2698, 2094,
     2062, 2060, 2708, 2059, 2718, 2720, 2057, 2722, 1432, 2025,
     2024, 2680, 1999, 1988, 1996, 1995, 1927, 1926, 1925, 1924,
     1923, 1907, 1906, 2732, 1905, 1468, 1905, 1865, 2740, 1864,
     1504, 1863, 1862, 2748, 1848, 2748, 1845, 1845, 2759, 1844,
     1843, 1801, 1800, 1799, 1785, 1783, 1782, 1781, 1780, 1739,
     2768, 1738, 1738, 1722, 2778, 1721, 1720, 1718, 1540, 1686,
     1685, 2788, 1684, 1660, 1657, 2795, 1656, 1570, 1656, 1625,
     2803, 1624, 1605, 1597, 2810, 1546, 1545, 1510, 1508, 2819,
     1472, 1437, 1346, 1276, 2828, 1249, 1195, 1192, 2835, 1150,

     1134, 1105, 3556, 2854, 1105, 2861, 1052, 2864, 2867, 2872,
     2875, 2876, 2879,  974, 2883,  972, 2888, 2889, 2891, 2894,
     2898,  918,  915, 2902, 2907, 2910, 2911, 2914, 2918,  854,
     2923, 2926, 2929, 2933,  801, 2938, 2939, 2942, 2946, 2951,
     2955,  730, 2960,  703, 2962, 2966, 2968, 2969, 2972, 2976,
     2980, 2985, 2988, 2991, 2994, 2997, 3001, 3005, 3006, 3009,
     3013, 3018, 3022, 3027, 3031,  623, 3036,  577, 3039,  561,
     3041, 3044, 3047, 3051, 3055, 3059, 3063, 3065, 3068, 3071,
     3074, 3077, 3080, 3084, 3087, 3090, 3094, 3099, 3103, 3108,
     3112, 3117, 3121, 3125,  559, 3128,  535, 3131,  507, 3133,

     3136, 3139, 3143, 3147, 3151, 3155, 3159, 3161, 3164, 3167,
     3170, 3173, 3176, 3180, 3183, 3187, 3192, 3196, 3201, 3205,
     3210, 3214, 3219, 3223, 3227,  478, 3230,  401, 3233,  399,
     3235, 3238, 3242, 3245, 3248, 3252, 3255, 3259, 3262, 3266,
     3269, 3273, 3276, 3280, 3284, 3286, 3289, 3292, 3295, 3298,
     3301, 3305,  372, 3308, 3311, 3315, 3320, 3324, 3329, 3333,
     3338, 3342, 3347, 3351, 3356, 3360, 3364,  356, 3367,  303,
     3370,  301, 3371, 3375, 3380, 3383, 3386, 3390, 3394, 3398,
     3402, 3406, 3410, 3414, 3418, 3420, 3423, 3426, 3429, 3432,
     3435, 3439,  268, 3444, 3446, 3450, 3454, 3458, 3462, 3466,

     3470, 3474,  255, 3477,  148, 3480, 3482, 3487, 3490, 3492,
     3496, 3498, 3501, 3504, 3506,  136, 3511, 3513,   50, 3516,
     3518, 3520, 3522, 3524, 3526, 3528
    } ;

static yyconst short int yy_def[927] =
    {   0,
      703,    1,  704,  704,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  705,  703,   16,   17,  703,  703,
      703,  703,  703,  703,   24,   25,   25,   24,   24,   25,
       25,   25,   25,   25,   25,  706,  703,  703,  703,  705,
      707,  703,  708,  709,   42,   45,   45,  703,  703,  703,
      703,   24,   25,   25,   25,   52,   52,   25,   25,   25,
       25,   25,   25,   25,   25,   25,  706,  710,  703,  711,
      703,  712,  713,  703,   71,   71,  714,  703,   78,   79,
      715,   52,   25,   25,   82,   82,   25,   25,   25,   25,
       25,   25,   25,   25,  716,  711,  717,  703,  703,  718,

      703,  719,  720,  703,  104,  105,  721,  722,  722,  723,
      703,  703,  724,  111,  114,  724,   25,   25,   25,   25,
       25,   25,   25,  725,  703,  726,  703,  718,  727,  728,
      703,  703,  703,  729,  132,  135,  729,  703,  730,  703,
      731,  703,  732,  733,  733,  703,  146,  147,  734,  733,
       25,   25,   25,   25,   25,  735,  726,  736,  703,  703,
      703,  737,  738,  703,  164,  165,  739,  740,  740,  703,
      170,  171,  741,  740,  703,  742,  732,  743,  703,  703,
      703,  744,  703,  703,  745,  183,  186,  745,   25,   25,
       25,   25,  746,  703,  747,  703,  748,  749,  703,  703,

      703,  750,  200,  203,  750,  703,  703,  703,  751,  207,
      210,  751,  752,  703,  753,  703,  754,  703,  755,  756,
      756,  703,  222,  223,  757,  756,   25,  703,  747,  758,
      703,  703,  703,  759,  760,  703,  236,  237,  761,  762,
      762,  703,  242,  243,  763,  762,  764,  764,  703,  249,
      250,  765,  764,  766,  753,  767,  703,  703,  768,  755,
      769,  703,  703,  703,  770,  703,  703,  771,  266,  269,
      771,   25,  228,  703,  703,  703,  772,  773,  703,  703,
      703,  774,  280,  283,  774,  703,  703,  703,  775,  287,
      290,  775,  703,  703,  703,  776,  294,  297,  776,  777,

      703,  778,  703,  779,  703,  780,  703,  781,  703,  782,
      783,  783,  703,  313,  314,  784,  783,  703,  785,  786,
      703,  321,  322,  787,  788,  788,  703,  327,  328,  789,
      788,  790,  790,  703,  334,  335,  791,  790,  792,  792,
      703,  341,  342,  793,  792,  778,  794,  703,  703,  795,
      780,  796,  703,  703,  797,  782,  798,  703,  703,  703,
      799,  703,  703,  800,  362,  365,  800,  801,  802,  703,
      703,  703,  803,  371,  374,  803,  703,  703,  703,  804,
      378,  381,  804,  703,  703,  703,  805,  385,  388,  805,
      703,  703,  703,  806,  392,  395,  806,  703,  807,  703,

      808,  703,  809,  703,  810,  703,  811,  703,  812,  813,
      813,  703,  412,  413,  814,  813,  703,  815,  703,  703,
      420,  421,  816,  817,  817,  703,  426,  427,  818,  817,
      819,  819,  703,  433,  434,  820,  819,  821,  821,  703,
      440,  441,  822,  821,  823,  823,  703,  447,  448,  824,
      823,  808,  825,  703,  703,  826,  810,  827,  703,  703,
      828,  812,  829,  703,  703,  703,  830,  703,  703,  831,
      468,  471,  831,  832,  703,  475,  476,  833,  834,  703,
      835,  836,  480,  483,  836,  703,  703,  837,  838,  487,
      490,  838,  703,  703,  839,  840,  494,  497,  840,  703,

      703,  841,  842,  501,  504,  842,  703,  703,  843,  844,
      508,  511,  844,  703,  845,  703,  846,  703,  847,  703,
      848,  703,  849,  703,  850,  851,  851,  703,  528,  529,
      852,  851,  703,  853,  703,  854,  855,  535,  538,  855,
      856,  857,  857,  858,  857,  859,  859,  860,  859,  861,
      861,  862,  861,  863,  863,  864,  863,  865,  865,  866,
      865,  846,  867,  703,  703,  868,  848,  869,  703,  703,
      870,  850,  871,  703,  703,  703,  872,  703,  873,  874,
      578,  581,  874,  875,  703,  876,  877,  877,  878,  703,
      877,  879,  703,  880,  703,  881,  703,  882,  703,  883,

      703,  884,  703,  885,  703,  886,  703,  887,  703,  888,
      703,  889,  703,  890,  891,  891,  892,  891,  893,  876,
      894,  703,  703,  703,  895,  896,  897,  898,  899,  900,
      901,  886,  902,  703,  703,  903,  888,  904,  703,  703,
      905,  890,  906,  703,  703,  703,  907,  908,  703,  909,
      703,  910,  703,  703,  703,  703,  703,  703,  703,  911,
      703,  912,  703,  913,  703,  914,  703,  915,  916,  909,
      917,  703,  703,  912,  918,  703,  703,  919,  914,  920,
      703,  703,  703,  921,  703,  922,  703,  703,  923,  703,
      924,  703,  922,  925,  703,  703,  924,  926,  703,  703,

      703,  703,    0,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703
    } ;

static yyconst short int yy_nxt[3606] =
    {   0,
        6,    7,    8,    9,   10,   10,   11,   12,   13,   14,
       15,    6,    6,   16,   16,   17,   18,   18,   18,   18,
       18,   19,   20,   21,   22,   23,   24,   24,   25,   25,
       26,   27,   25,   25,    6,   28,   29,   24,   24,   30,
       25,   25,   25,   31,   32,   33,   34,   25,   35,   37,
       37,   37,   37,   41,  691,   42,   42,   42,   42,   42,
       42,   42,   42,   43,   68,   68,   69,   77,   44,   44,
       47,   47,   47,   47,   47,   47,  112,   44,   44,   44,
       44,   45,   45,   45,   45,   45,   46,   47,   47,   52,
       52,   52,   52,   52,   52,   52,   52,   43,   76,   76,

      145,  145,   52,   52,   53,   53,   53,   53,   53,   53,
       53,   52,   52,   52,   52,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,  703,   56,   57,   61,   77,   53,   53,
      686,   58,   62,  124,  124,  125,  133,   53,   53,   53,
       53,   41,  666,   71,   71,   71,   71,   71,   71,   71,
       71,   43,  139,  139,  140,   77,   72,   72,  116,  116,
      116,  116,  116,  116,  112,   72,   72,   72,   72,   75,
       75,   75,   75,   75,   75,   75,   75,   76,   76,   76,
       76,   76,   76,   76,   76,   77,   78,   78,   79,   80,

       80,   80,   80,   80,  141,  141,  142,  110,   77,   81,
       81,  137,  137,  137,  137,  137,  137,  112,   81,   81,
       81,   81,   82,   82,   82,   82,   82,   82,   82,   82,
       77,  169,  169,  110,   77,   82,   82,  221,  221,  133,
       77,  241,  241,  133,   82,   82,   82,   82,   95,  184,
       97,   97,   97,   97,   97,   98,   99,   99,   41,  662,
      100,  100,  100,  100,  100,  100,  100,  100,   43,  248,
      248,   43,  650,  101,  101,  175,  175,  175,  175,  175,
      175,  175,  101,  101,  101,  101,   77,  104,  104,  105,
      106,  106,  106,  106,  106,  152,  110,   77,  703,   77,

      107,  107,  193,  193,  194,  614,  112,  610,  112,  107,
      107,  107,  107,  110,   77,  111,  111,  111,  111,  111,
      111,  111,  111,  112,  312,  312,  110,   77,  113,  113,
      188,  188,  188,  188,  188,  188,  112,  113,  113,  113,
      113,  114,  114,  114,  114,  114,  115,  116,  116,  117,
      117,  117,  117,  117,  117,  117,  117,  213,  213,  214,
      606,   77,  117,  117,  205,  205,  205,  205,  205,  205,
      201,  117,  117,  117,  117,   95,  586,  127,  127,  127,
      127,  127,  127,  110,   77,  132,  132,  132,  132,  132,
      132,  132,  132,  133,  110,   77,  703,   77,  134,  134,

      217,  217,  218,  525,  133,  521,  133,  134,  134,  134,
      134,  135,  135,  135,  135,  135,  136,  137,  137,  110,
       77,  144,  144,  144,  144,  144,  144,  144,  144,  112,
      300,  300,  301,   77,  145,  145,  212,  212,  212,  212,
      212,  212,  208,  145,  145,  145,  145,  146,  146,  147,
      148,  148,  148,  148,  148,  110,   77,   77,   77,   77,
      149,  149,  304,  304,  305,  133,  112,  184,  201,  149,
      149,  149,  149,  150,  150,  150,  150,  150,  150,  150,
      150,  156,  517,  158,  158,  158,  158,  158,  159,  160,
      160,   77,  164,  164,  165,  166,  166,  166,  166,  166,

      182,   77,  110,   77,   77,  167,  167,  308,  308,  309,
      184,  409,  201,  133,  167,  167,  167,  167,  110,   77,
      168,  168,  168,  168,  168,  168,  168,  168,  133,   77,
      182,   77,   77,  169,  169,  275,  275,  275,  208,  405,
      208,  267,  169,  169,  169,  169,  170,  170,  171,  172,
      172,  172,  172,  172,  182,   77,  703,   77,   77,  173,
      173,  326,  326,  401,  184,  310,  184,  281,  173,  173,
      173,  173,  174,  174,  174,  174,  174,  174,  174,  174,
      176,  306,  178,  178,  178,  178,  178,  179,  180,  180,
      182,   77,  183,  183,  183,  183,  183,  183,  183,  183,

      184,  333,  333,  182,   77,  185,  185,  271,  271,  271,
      271,  271,  271,  184,  185,  185,  185,  185,  186,  186,
      186,  186,  186,  187,  188,  188,  156,  302,  196,  196,
      196,  196,  196,  196,  110,   77,  200,  200,  200,  200,
      200,  200,  200,  200,  201,  275,  275,  275,  275,  202,
      202,  228,  276,  276,  276,  276,  276,  276,  202,  202,
      202,  202,  203,  203,  203,  203,  203,  204,  205,  205,
      182,   77,  207,  207,  207,  207,  207,  207,  207,  207,
      208,  340,  340,  110,   77,  209,  209,  285,  285,  285,
      285,  285,  285,  201,  209,  209,  209,  209,  210,  210,

      210,  210,  210,  211,  212,  212,  176,  219,  216,  216,
      216,  216,  216,  216,  182,   77,  220,  220,  220,  220,
      220,  220,  220,  220,  184,  703,   77,   77,   77,  221,
      221,  399,  399,  400,  215,  201,  288,  295,  221,  221,
      221,  221,  222,  222,  223,  224,  224,  224,  224,  224,
      403,  403,  404,  110,   77,  225,  225,  292,  292,  292,
      292,  292,  292,  201,  225,  225,  225,  225,  226,  226,
      226,  226,  226,  226,  226,  226,  228,  230,  230,  230,
      230,  230,  231,  232,  232,   77,  236,  236,  237,  238,
      238,  238,  238,  238,  182,   77,  703,   77,   77,  239,

      239,  407,  407,  408,  208,  195,  208,  184,  239,  239,
      239,  239,  110,   77,  240,  240,  240,  240,  240,  240,
      240,  240,  201,  411,  411,  182,   77,  241,  241,  299,
      299,  299,  299,  299,  299,  208,  241,  241,  241,  241,
      242,  242,  243,  244,  244,  244,  244,  244,   77,  265,
       77,   77,   77,  245,  245,  425,  425,  267,  175,  267,
      281,  201,  245,  245,  245,  245,  246,  246,  246,  246,
      246,  246,  246,  246,  182,   77,  247,  247,  247,  247,
      247,  247,  247,  247,  208,  110,   77,   77,   77,  248,
      248,  432,  432,  439,  439,  281,  288,  208,  248,  248,

      248,  248,  249,  249,  250,  251,  251,  251,  251,  251,
      182,   77,   77,  265,   77,  252,  252,  446,  446,  143,
      288,  295,  138,  295,  252,  252,  252,  252,  253,  253,
      253,  253,  253,  253,  253,  253,  254,  534,  256,  256,
      256,  256,  256,  257,  258,  258,  259,  536,  261,  261,
      261,  261,  261,  262,  263,  263,  265,   77,  266,  266,
      266,  266,  266,  266,  266,  266,  267,  265,   77,  703,
       77,  268,  268,  515,  515,  516,  126,  267,  108,  267,
      268,  268,  268,  268,  269,  269,  269,  269,  269,  270,
      271,  271,  273,  273,  273,  274,  275,  275,  275,  275,

      110,   77,  280,  280,  280,  280,  280,  280,  280,  280,
      281,  519,  519,  520,   77,  282,  282,  367,  367,  367,
      367,  367,  367,  363,  282,  282,  282,  282,  283,  283,
      283,  283,  283,  284,  285,  285,  182,   77,  287,  287,
      287,  287,  287,  287,  287,  287,  288,  265,   77,   77,
       77,  289,  289,  523,  523,  524,   70,  267,  372,  379,
      289,  289,  289,  289,  290,  290,  290,  290,  290,  291,
      292,  292,  265,   77,  294,  294,  294,  294,  294,  294,
      294,  294,  295,  527,  527,  110,   77,  296,  296,  376,
      376,  376,  376,  376,  376,  281,  296,  296,  296,  296,

      297,  297,  297,  297,  297,  298,  299,  299,  254,   40,
      303,  303,  303,  303,  303,  303,  259,   77,  307,  307,
      307,  307,  307,  307,  265,   77,  311,  311,  311,  311,
      311,  311,  311,  311,  267,  703,   77,  110,   77,  312,
      312,  543,  543,  547,  547,  281,   77,  281,  312,  312,
      312,  312,  313,  313,  314,  315,  315,  315,  315,  315,
      551,  551,   77,  182,   77,  316,  316,  383,  383,  383,
      383,  383,  383,  288,  316,  316,  316,  316,  317,  317,
      317,  317,  317,  317,  317,  317,   77,  321,  321,  322,
      323,  323,  323,  323,  323,  703,   77,   77,  182,   77,

      324,  324,  555,  555,   77,  288,  386,   77,  288,  324,
      324,  324,  324,  110,   77,  325,  325,  325,  325,  325,
      325,  325,  325,  281,  559,  559,  265,   77,  326,  326,
      390,  390,  390,  390,  390,  390,  295,  326,  326,  326,
      326,  327,  327,  328,  329,  329,  329,  329,  329,  703,
       77,   77,  265,   77,  330,  330,  584,  584,  585,  295,
      393,   77,  295,  330,  330,  330,  330,  331,  331,  331,
      331,  331,  331,  331,  331,  182,   77,  332,  332,  332,
      332,  332,  332,  332,  332,  288,  588,  588,   77,   77,
      333,  333,  397,  397,  397,  397,  397,  397,  267,  333,

      333,  333,  333,  334,  334,  335,  336,  336,  336,  336,
      336,  604,  604,  605,  616,  616,  337,  337,   77,  398,
      398,  398,  398,  398,  398,  337,  337,  337,  337,  338,
      338,  338,  338,  338,  338,  338,  338,  265,   77,  339,
      339,  339,  339,  339,  339,  339,  339,  295,   77,  361,
       77,   77,  340,  340,  608,  608,  609,  363,   77,  363,
      372,  340,  340,  340,  340,  341,  341,  342,  343,  343,
      343,  343,  343,  110,   77,   77,   77,   77,  344,  344,
      612,  612,  613,  372,  281,  379,  288,  344,  344,  344,
      344,  345,  345,  345,  345,  345,  345,  345,  345,   77,

      347,  347,  347,  347,  347,  348,  349,  349,  350,  534,
      352,  352,  352,  352,  352,  353,  354,  354,  355,  536,
      357,  357,  357,  357,  357,  358,  359,  359,  361,   77,
      362,  362,  362,  362,  362,  362,  362,  362,  363,  182,
       77,   77,   77,  364,  364,  648,  648,  649,  678,  379,
      386,  295,  364,  364,  364,  364,  365,  365,  365,  365,
      365,  366,  367,  367,  110,   77,  371,  371,  371,  371,
      371,  371,  371,  371,  372,  265,   77,   77,   77,  373,
      373,  660,  660,  661,   77,  386,  393,  469,  373,  373,
      373,  373,  374,  374,  374,  374,  374,  375,  376,  376,

      182,   77,  378,  378,  378,  378,  378,  378,  378,  378,
      379,  361,   77,  361,   77,  380,  380,  664,  664,  665,
       77,  393,   77,  363,  380,  380,  380,  380,  381,  381,
      381,  381,  381,  382,  383,  383,  265,   77,  385,  385,
      385,  385,  385,  385,  385,  385,  386,  703,   77,  361,
       77,  387,  387,  684,  684,  685,  669,  363,   77,  363,
      387,  387,  387,  387,  388,  388,  388,  388,  388,  389,
      390,  390,  361,   77,  392,  392,  392,  392,  392,  392,
      392,  392,  393,  689,  689,  690,   77,  394,  394,  473,
      473,  473,  473,  473,  473,  481,  394,  394,  394,  394,

      395,  395,  395,  395,  395,  396,  397,  397,  350,   77,
      402,  402,  402,  402,  402,  402,  355,   77,  406,  406,
      406,  406,  406,  406,  361,   77,  410,  410,  410,  410,
      410,  410,  410,  410,  363,  678,  678,  110,   77,  411,
      411,  485,  485,  485,  485,  485,  485,  372,  411,  411,
      411,  411,  412,  412,  413,  414,  414,  414,  414,  414,
      703,   77,   77,  110,   77,  415,  415,  678,   77,   77,
      372,  488,   77,  372,  415,  415,  415,  415,  416,  416,
      416,  416,  416,  416,  416,  416,   77,  420,  420,  421,
      422,  422,  422,  422,  422,  669,  669,  669,  182,   77,

      423,  423,  492,  492,  492,  492,  492,  492,  379,  423,
      423,  423,  423,  110,   77,  424,  424,  424,  424,  424,
      424,  424,  424,  372,  703,   77,   77,   77,  425,  425,
       77,  641,  678,  678,  379,  495,  502,  425,  425,  425,
      425,  426,  426,  427,  428,  428,  428,  428,  428,  636,
       77,   77,  182,   77,  429,  429,  499,  499,  499,  499,
      499,  499,  379,  429,  429,  429,  429,  430,  430,  430,
      430,  430,  430,  430,  430,  182,   77,  431,  431,  431,
      431,  431,  431,  431,  431,  379,  265,   77,  703,   77,
      432,  432,   77,   77,   77,   77,  386,   77,  386,  432,

      432,  432,  432,  433,  433,  434,  435,  435,  435,  435,
      435,   77,   77,   77,  265,   77,  436,  436,  506,  506,
      506,  506,  506,  506,  386,  436,  436,  436,  436,  437,
      437,  437,  437,  437,  437,  437,  437,  265,   77,  438,
      438,  438,  438,  438,  438,  438,  438,  386,  361,   77,
      703,   77,  439,  439,  619,  669,  669,   77,  393,  641,
      393,  439,  439,  439,  439,  440,  440,  441,  442,  442,
      442,  442,  442,  641,  641,  636,  636,   77,  443,  443,
      513,  513,  513,  513,  513,  513,  509,  443,  443,  443,
      443,  444,  444,  444,  444,  444,  444,  444,  444,  361,

       77,  445,  445,  445,  445,  445,  445,  445,  445,  393,
      361,   77,   77,   77,  446,  446,  636,   77,   77,   77,
      393,  363,  469,  446,  446,  446,  446,  447,  447,  448,
      449,  449,  449,  449,  449,   77,   77,   77,   77,   77,
      450,  450,   77,  514,  514,  514,  514,  514,  514,  450,
      450,  450,  450,  451,  451,  451,  451,  451,  451,  451,
      451,   77,  453,  453,  453,  453,  453,  454,  455,  455,
      456,  703,  458,  458,  458,  458,  458,  459,  460,  460,
      461,  536,  463,  463,  463,  463,  463,  464,  465,  465,
      467,   77,  468,  468,  468,  468,  468,  468,  468,  468,

      469,  467,   77,   77,   77,  470,  470,   77,   77,  536,
      619,  469,  481,  372,  470,  470,  470,  470,  471,  471,
      471,  471,  471,  472,  473,  473,  475,  475,  476,  477,
      477,  477,  477,  477,  478,  619,  619,  110,   77,  479,
      479,  540,  540,  540,  540,  540,  540,  481,  479,  479,
      479,  479,  110,   77,  480,  480,  480,  480,  480,  480,
      480,  480,  481,   77,  182,   77,   77,  482,  482,   77,
      641,  641,  488,  571,  488,  379,  482,  482,  482,  482,
      483,  483,  483,  483,  483,  484,  485,  485,  182,   77,
      487,  487,  487,  487,  487,  487,  487,  487,  488,   77,

      265,   77,   77,  489,  489,  636,  636,  566,  495,   77,
      495,  386,  489,  489,  489,  489,  490,  490,  490,  490,
      490,  491,  492,  492,  265,   77,  494,  494,  494,  494,
      494,  494,  494,  494,  495,   77,  361,   77,   77,  496,
      496,   77,   77,   77,  502,   77,  502,  393,  496,  496,
      496,  496,  497,  497,  497,  497,  497,  498,  499,  499,
      361,   77,  501,  501,  501,  501,  501,  501,  501,  501,
      502,   77,  467,   77,   77,  503,  503,   77,   77,   77,
      509,   77,  509,  579,  503,  503,  503,  503,  504,  504,
      504,  504,  504,  505,  506,  506,  467,   77,  508,  508,

      508,  508,  508,  508,  508,  508,  509,  467,   77,  703,
       77,  510,  510,   77,   77,  619,  619,  469,  571,  469,
      510,  510,  510,  510,  511,  511,  511,  511,  511,  512,
      513,  513,  456,  571,  518,  518,  518,  518,  518,  518,
      461,  571,  522,  522,  522,  522,  522,  522,  467,   77,
      526,  526,  526,  526,  526,  526,  526,  526,  469,  566,
      566,  467,   77,  527,  527,  583,  583,  583,  583,  583,
      583,  469,  527,  527,  527,  527,  528,  528,  529,  530,
      530,  530,  530,  530,  110,   77,  703,   77,   77,  531,
      531,  566,   77,   77,  481,   77,  481,  469,  531,  531,

      531,  531,  532,  532,  532,  532,  532,  532,  532,  532,
      534,   77,  535,  535,  535,  535,  535,  535,  535,  535,
      536,  110,   77,  182,   77,  537,  537,   77,   77,   77,
       77,  481,   77,  488,  537,  537,  537,  537,  538,  538,
      538,  538,  538,  539,  540,  540,  110,   77,  542,  542,
      542,  542,  542,  542,  542,  542,  481,  703,   77,  182,
       77,  543,  543,  536,  590,  419,  571,  488,  571,  488,
      543,  543,  543,  543,  545,  545,  545,  545,  545,  545,
      545,  545,  182,   77,  546,  546,  546,  546,  546,  546,
      546,  546,  488,  265,   77,  703,   77,  547,  547,  461,

      566,  566,  456,  495,   77,  495,  547,  547,  547,  547,
      549,  549,  549,  549,  549,  549,  549,  549,  265,   77,
      550,  550,  550,  550,  550,  550,  550,  550,  495,  265,
       77,  361,   77,  551,  551,   77,   77,  536,   77,  495,
      419,  502,  551,  551,  551,  551,  553,  553,  553,  553,
      553,  553,  553,  553,  361,   77,  554,  554,  554,  554,
      554,  554,  554,  554,  502,  703,   77,  361,   77,  555,
      555,  461,  461,  461,  456,  502,  456,  502,  555,  555,
      555,  555,  557,  557,  557,  557,  557,  557,  557,  557,
      467,   77,  558,  558,  558,  558,  558,  558,  558,  558,

      509,  467,   77,  703,   77,  559,  559,  456,   77,   77,
       77,  509,  419,  509,  559,  559,  559,  559,  561,  561,
      561,  561,  561,  561,  561,  561,   77,  563,  563,  563,
      563,  563,  564,  565,  565,  566,  534,  568,  568,  568,
      568,  568,  569,  570,  570,  571,  536,  573,  573,  573,
      573,  573,  574,  575,  575,  577,   77,  578,  578,  578,
      578,  578,  578,  578,  578,  579,  467,   77,   77,   77,
      580,  580,  320,  461,  461,  355,  509,  579,  481,  580,
      580,  580,  580,  581,  581,  581,  581,  581,  582,  583,
      583,  534,  456,  587,  587,  587,  587,  587,  587,  587,

      587,  536,  456,  350,   77,   77,  588,  588,   77,  603,
      603,  603,  603,  603,  603,  588,  588,  588,  588,  591,
      591,  591,  591,  591,  591,  591,  591,  566,   77,  607,
      607,  607,  607,  607,  607,  571,  419,  611,  611,  611,
      611,  611,  611,  577,   77,  615,  615,  615,  615,  615,
      615,  615,  615,  579,  577,   77,   77,   77,  616,  616,
      320,  355,  355,  355,  579,  488,  495,  616,  616,  616,
      616,  618,  618,  618,  618,  618,  618,  618,  618,  619,
       77,  621,  621,  621,  621,  621,  622,  623,  623,  502,
       77,  619,  350,  651,  651,  651,  651,  651,  651,  509,

       77,  633,  633,  633,  633,  633,  634,  635,  635,  636,
      350,  638,  638,  638,  638,  638,  639,  640,  640,  641,
      350,  643,  643,  643,  643,  643,  644,  645,  645,  577,
       77,  703,   77,  577,   77,   77,   77,   77,  370,  579,
      320,  579,  235,  579,   77,  659,  659,  659,  659,  659,
      659,  636,  355,  663,  663,  663,  663,  663,  663,  641,
       77,  667,  667,  667,  667,  667,  667,  355,  259,  579,
      669,  350,  671,  671,  671,  671,  671,  672,  673,  673,
       77,  675,  675,  675,  675,  675,  676,  677,  677,  678,
      350,  680,  680,  680,  680,  680,  681,  682,  682,  669,

      254,  687,  687,  687,  687,  687,  687,   77,  688,  688,
      688,  688,  688,  688,  678,   77,  692,  692,  692,  692,
      692,  692,   77,  694,  694,  694,  694,  694,  695,  696,
      696,   77,  698,  698,  698,  698,  698,  699,  700,  700,
       77,  701,  701,  701,  701,  701,  701,   77,  702,  702,
      702,  702,  702,  702,   36,   36,   36,   36,   36,   36,
       36,   67,   77,   67,   67,   67,   67,   67,   73,   73,
       73,   72,   72,   72,   96,  320,   96,   99,  235,   99,
      101,  101,  101,  102,  102,  102,  113,  113,  113,  113,
      127,  228,  127,  128,  128,  129,  129,  129,  130,  130,

      130,  134,  134,  134,  134,  145,  145,  145,  145,  157,
      259,  157,  160,  259,  160,  161,  161,  161,  162,  162,
      162,  169,  169,  169,  169,  177,  259,  177,  180,  254,
      180,  181,  181,  181,  181,  181,  185,  185,  185,  185,
      196,  254,  196,  197,  197,  197,  198,  198,  198,  202,
      202,  202,  202,  206,  206,  206,  206,  206,  209,  209,
      209,  209,  216,  254,  216,  221,  221,  221,  221,  229,
      229,  232,  232,  233,  233,  233,  234,  234,  234,  241,
      241,  241,  241,  248,  248,  248,  248,  255,  279,  255,
      258,  235,  258,  260,  163,  260,  263,  228,  263,  264,

      264,  264,  264,  264,  268,  268,  268,  268,  276,  276,
      277,  277,  277,  278,  278,  278,  282,  282,  282,  282,
      286,  286,  286,  286,  286,  289,  289,  289,  289,  293,
      293,  293,  293,  293,  296,  296,  296,  296,  303,  228,
      303,  307,  228,  307,  312,  312,  312,  312,  318,  318,
      318,  319,  319,  319,  326,  326,  326,  326,  333,  333,
      333,  333,  340,  340,  340,  340,  346,  346,  349,  349,
      351,  272,  351,  354,  259,  354,  356,  259,  356,  359,
      176,  359,  360,  360,  360,  360,  360,  364,  364,  364,
      364,  368,  368,  368,  369,  369,  369,  373,  373,  373,

      373,  377,  377,  377,  377,  377,  380,  380,  380,  380,
      384,  384,  384,  384,  384,  387,  387,  387,  387,  391,
      391,  391,  391,  391,  394,  394,  394,  394,  398,  398,
      402,  254,  402,  406,  254,  406,  411,  411,  411,  411,
      417,  417,  417,  418,  418,  418,  425,  425,  425,  425,
      432,  432,  432,  432,  439,  439,  439,  439,  446,  446,
      446,  446,  452,  452,  455,  455,  457,  235,  457,  460,
      163,  460,  462,  156,  462,  465,  228,  465,  466,  466,
      466,  466,  466,  470,  470,  470,  470,  474,  474,  474,
      482,  482,  482,  482,  486,  486,  486,  486,  486,  489,

      489,  489,  489,  493,  493,  493,  493,  493,  496,  496,
      496,  496,  500,  500,  500,  500,  500,  503,  503,  503,
      503,  507,  507,  507,  507,  507,  510,  510,  510,  510,
      514,  514,  518,  228,  518,  522,  227,  522,  527,  527,
      527,  527,  533,  533,  533,  541,  541,  176,  541,  537,
      537,  537,  544,  176,  544,  543,  543,  543,  543,  548,
      176,  548,  547,  547,  547,  547,  552,  199,  552,  551,
      551,  551,  551,  556,  163,  556,  555,  555,  555,  555,
      560,  103,  560,  559,  559,  559,  559,  562,  562,  565,
      565,  567,  156,  567,  570,  156,  570,  572,  156,  572,

      575,  192,  575,  576,  576,  576,  576,  576,  580,  580,
      580,  580,  589,  589,  589,  588,  588,  588,  592,  592,
      191,  592,  593,  593,  593,  593,  593,  594,  594,  190,
      594,  595,  595,  595,  595,  595,  596,  596,  189,  596,
      597,  597,  597,  597,  597,  598,  598,  176,  598,  599,
      599,  599,  599,  599,  600,  600,  176,  600,  601,  601,
      601,  601,  601,  602,  602,  163,  602,  603,  603,  607,
      103,  607,  611,  703,  611,  617,   95,  617,  616,  616,
      616,  616,  620,  156,  620,  623,  156,  623,  624,  155,
      624,  624,  624,  625,  625,  154,  625,  626,  626,  153,

      626,  627,  627,  151,  627,  628,  628,   43,  628,  629,
      629,  131,  629,  630,  630,  103,  630,  631,  631,   43,
      631,  632,  632,  635,  635,  637,   43,  637,  640,   95,
      640,  642,   95,  642,  645,   95,  645,  646,  646,  646,
      646,  646,  647,  647,  123,  647,  651,  122,  651,  652,
      652,  121,  652,  653,  653,  120,  653,  654,  654,  119,
      654,  655,  655,  118,  655,  656,  656,  109,  656,  657,
      657,  703,  657,  658,  658,  103,  658,  659,  659,  663,
       43,  663,  667,   95,  667,  668,  668,   95,  668,  670,
       94,  670,  673,   93,  673,  590,  590,   92,  590,  674,

      674,  677,  677,  679,   91,  679,  682,   90,  682,  683,
      683,   89,  683,  687,   88,  687,  688,  688,  692,   87,
      692,  693,  693,  696,  696,  697,  697,  700,  700,  701,
      701,  702,  702,   86,   85,   84,   83,   43,   74,   38,
       66,   65,   64,   63,   60,   59,   55,   54,   51,   50,
       49,   48,   39,   38,  703,    5,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  703,  703,  703,  703
    } ;

static yyconst short int yy_chk[3606] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    4,    4,   16,  919,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   41,   41,   41,   81,   16,   16,
       18,   18,   18,   18,   18,   18,   81,   16,   16,   16,
       16,   17,   17,   17,   17,   17,   17,   17,   17,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   46,   46,

      115,  115,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   28,   28,   31,  107,   25,   25,
      916,   28,   31,   95,   95,   95,  107,   25,   25,   25,
       25,   42,  905,   42,   42,   42,   42,   42,   42,   42,
       42,   42,  109,  109,  109,  113,   42,   42,   80,   80,
       80,   80,   80,   80,  113,   42,   42,   42,   42,   45,
       45,   45,   45,   45,   45,   45,   45,   47,   47,   47,
       47,   47,   47,   47,   47,   48,   48,   48,   48,   48,

       48,   48,   48,   48,  110,  110,  110,  116,  116,   48,
       48,  106,  106,  106,  106,  106,  106,  116,   48,   48,
       48,   48,   52,   52,   52,   52,   52,   52,   52,   52,
      134,  136,  136,  137,  137,   52,   52,  187,  187,  134,
      149,  204,  204,  137,   52,   52,   52,   52,   69,  149,
       69,   69,   69,   69,   69,   69,   69,   69,   71,  903,
       71,   71,   71,   71,   71,   71,   71,   71,   71,  211,
      211,  119,  893,   71,   71,  140,  140,  140,  140,  140,
      140,  140,   71,   71,   71,   71,   74,   74,   74,   74,
       74,   74,   74,   74,   74,  119,  144,  144,  145,  145,

       74,   74,  156,  156,  156,  872,  144,  870,  145,   74,
       74,   74,   74,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,  270,  270,  150,  150,   78,   78,
      148,  148,  148,  148,  148,  148,  150,   78,   78,   78,
       78,   79,   79,   79,   79,   79,   79,   79,   79,   82,
       82,   82,   82,   82,   82,   82,   82,  176,  176,  176,
      868,  167,   82,   82,  166,  166,  166,  166,  166,  166,
      167,   82,   82,   82,   82,   98,  853,   98,   98,   98,
       98,   98,   98,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  168,  168,  169,  169,  104,  104,

      182,  182,  182,  830,  168,  828,  169,  104,  104,  104,
      104,  105,  105,  105,  105,  105,  105,  105,  105,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      254,  254,  254,  173,  111,  111,  172,  172,  172,  172,
      172,  172,  173,  111,  111,  111,  111,  112,  112,  112,
      112,  112,  112,  112,  112,  174,  174,  181,  185,  202,
      112,  112,  259,  259,  259,  174,  181,  185,  202,  112,
      112,  112,  112,  114,  114,  114,  114,  114,  114,  114,
      114,  125,  826,  125,  125,  125,  125,  125,  125,  125,
      125,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      188,  188,  205,  205,  206,  131,  131,  265,  265,  265,
      188,  799,  205,  206,  131,  131,  131,  131,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  209,
      212,  212,  225,  132,  132,  274,  274,  274,  209,  797,
      212,  225,  132,  132,  132,  132,  133,  133,  133,  133,
      133,  133,  133,  133,  220,  220,  221,  221,  239,  133,
      133,  284,  284,  795,  220,  770,  221,  239,  133,  133,
      133,  133,  135,  135,  135,  135,  135,  135,  135,  135,
      142,  768,  142,  142,  142,  142,  142,  142,  142,  142,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,

      146,  291,  291,  226,  226,  146,  146,  224,  224,  224,
      224,  224,  224,  226,  146,  146,  146,  146,  147,  147,
      147,  147,  147,  147,  147,  147,  159,  766,  159,  159,
      159,  159,  159,  159,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  273,  273,  273,  273,  164,
      164,  231,  231,  231,  231,  231,  231,  231,  164,  164,
      164,  164,  165,  165,  165,  165,  165,  165,  165,  165,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  298,  298,  240,  240,  170,  170,  238,  238,  238,
      238,  238,  238,  240,  170,  170,  170,  170,  171,  171,

      171,  171,  171,  171,  171,  171,  179,  744,  179,  179,
      179,  179,  179,  179,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  241,  241,  245,  252,  183,
      183,  350,  350,  350,  742,  241,  245,  252,  183,  183,
      183,  183,  184,  184,  184,  184,  184,  184,  184,  184,
      355,  355,  355,  246,  246,  184,  184,  244,  244,  244,
      244,  244,  244,  246,  184,  184,  184,  184,  186,  186,
      186,  186,  186,  186,  186,  186,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  247,  247,  248,  248,  264,  199,

      199,  361,  361,  361,  247,  735,  248,  264,  199,  199,
      199,  199,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  366,  366,  253,  253,  200,  200,  251,
      251,  251,  251,  251,  251,  253,  200,  200,  200,  200,
      201,  201,  201,  201,  201,  201,  201,  201,  268,  271,
      271,  282,  286,  201,  201,  375,  375,  268,  730,  271,
      282,  286,  201,  201,  201,  201,  203,  203,  203,  203,
      203,  203,  203,  203,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  285,  285,  289,  293,  207,
      207,  382,  382,  389,  389,  285,  289,  293,  207,  207,

      207,  207,  208,  208,  208,  208,  208,  208,  208,  208,
      292,  292,  296,  299,  299,  208,  208,  396,  396,  723,
      292,  296,  722,  299,  208,  208,  208,  208,  210,  210,
      210,  210,  210,  210,  210,  210,  214,  540,  214,  214,
      214,  214,  214,  214,  214,  214,  218,  540,  218,  218,
      218,  218,  218,  218,  218,  218,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  311,  311,  312,
      312,  222,  222,  456,  456,  456,  716,  311,  714,  312,
      222,  222,  222,  222,  223,  223,  223,  223,  223,  223,
      223,  223,  228,  228,  228,  228,  228,  228,  228,  228,

      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  461,  461,  461,  316,  236,  236,  315,  315,  315,
      315,  315,  315,  316,  236,  236,  236,  236,  237,  237,
      237,  237,  237,  237,  237,  237,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  317,  317,  324,
      330,  242,  242,  467,  467,  467,  707,  317,  324,  330,
      242,  242,  242,  242,  243,  243,  243,  243,  243,  243,
      243,  243,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  472,  472,  325,  325,  249,  249,  323,
      323,  323,  323,  323,  323,  325,  249,  249,  249,  249,

      250,  250,  250,  250,  250,  250,  250,  250,  257,  705,
      257,  257,  257,  257,  257,  257,  262,  702,  262,  262,
      262,  262,  262,  262,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  326,  326,  331,  331,  266,
      266,  484,  484,  491,  491,  326,  701,  331,  266,  266,
      266,  266,  267,  267,  267,  267,  267,  267,  267,  267,
      498,  498,  700,  332,  332,  267,  267,  329,  329,  329,
      329,  329,  329,  332,  267,  267,  267,  267,  269,  269,
      269,  269,  269,  269,  269,  269,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  333,  333,  337,  338,  338,

      279,  279,  505,  505,  698,  333,  337,  697,  338,  279,
      279,  279,  279,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  512,  512,  339,  339,  280,  280,
      336,  336,  336,  336,  336,  336,  339,  280,  280,  280,
      280,  281,  281,  281,  281,  281,  281,  281,  281,  340,
      340,  344,  345,  345,  281,  281,  534,  534,  534,  340,
      344,  696,  345,  281,  281,  281,  281,  283,  283,  283,
      283,  283,  283,  283,  283,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  539,  539,  694,  360,
      287,  287,  343,  343,  343,  343,  343,  343,  360,  287,

      287,  287,  287,  288,  288,  288,  288,  288,  288,  288,
      288,  566,  566,  566,  582,  582,  288,  288,  348,  348,
      348,  348,  348,  348,  348,  288,  288,  288,  288,  290,
      290,  290,  290,  290,  290,  290,  290,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  364,  367,
      367,  373,  294,  294,  571,  571,  571,  364,  693,  367,
      373,  294,  294,  294,  294,  295,  295,  295,  295,  295,
      295,  295,  295,  376,  376,  377,  380,  384,  295,  295,
      577,  577,  577,  376,  377,  380,  384,  295,  295,  295,
      295,  297,  297,  297,  297,  297,  297,  297,  297,  301,

      301,  301,  301,  301,  301,  301,  301,  301,  305,  587,
      305,  305,  305,  305,  305,  305,  305,  305,  309,  587,
      309,  309,  309,  309,  309,  309,  309,  309,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  383,
      383,  387,  391,  313,  313,  619,  619,  619,  692,  383,
      387,  391,  313,  313,  313,  313,  314,  314,  314,  314,
      314,  314,  314,  314,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  390,  390,  394,  415,  321,
      321,  636,  636,  636,  691,  390,  394,  415,  321,  321,
      321,  321,  322,  322,  322,  322,  322,  322,  322,  322,

      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  397,  397,  410,  410,  327,  327,  641,  641,  641,
      689,  397,  688,  410,  327,  327,  327,  327,  328,  328,
      328,  328,  328,  328,  328,  328,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  411,  411,  416,
      416,  334,  334,  669,  669,  669,  687,  411,  686,  416,
      334,  334,  334,  334,  335,  335,  335,  335,  335,  335,
      335,  335,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  678,  678,  678,  423,  341,  341,  414,
      414,  414,  414,  414,  414,  423,  341,  341,  341,  341,

      342,  342,  342,  342,  342,  342,  342,  342,  353,  684,
      353,  353,  353,  353,  353,  353,  358,  683,  358,  358,
      358,  358,  358,  358,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  682,  680,  424,  424,  362,
      362,  422,  422,  422,  422,  422,  422,  424,  362,  362,
      362,  362,  363,  363,  363,  363,  363,  363,  363,  363,
      425,  425,  429,  430,  430,  363,  363,  679,  677,  675,
      425,  429,  674,  430,  363,  363,  363,  363,  365,  365,
      365,  365,  365,  365,  365,  365,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  673,  671,  670,  431,  431,

      370,  370,  428,  428,  428,  428,  428,  428,  431,  370,
      370,  370,  370,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  432,  432,  436,  443,  371,  371,
      668,  667,  666,  664,  432,  436,  443,  371,  371,  371,
      371,  372,  372,  372,  372,  372,  372,  372,  372,  663,
      662,  660,  437,  437,  372,  372,  435,  435,  435,  435,
      435,  435,  437,  372,  372,  372,  372,  374,  374,  374,
      374,  374,  374,  374,  374,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  438,  438,  439,  439,
      378,  378,  659,  658,  657,  656,  438,  655,  439,  378,

      378,  378,  378,  379,  379,  379,  379,  379,  379,  379,
      379,  654,  653,  652,  444,  444,  379,  379,  442,  442,
      442,  442,  442,  442,  444,  379,  379,  379,  379,  381,
      381,  381,  381,  381,  381,  381,  381,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  445,  445,
      446,  446,  385,  385,  651,  650,  648,  647,  445,  645,
      446,  385,  385,  385,  385,  386,  386,  386,  386,  386,
      386,  386,  386,  643,  642,  640,  638,  450,  386,  386,
      449,  449,  449,  449,  449,  449,  450,  386,  386,  386,
      386,  388,  388,  388,  388,  388,  388,  388,  388,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      451,  451,  466,  470,  392,  392,  637,  635,  633,  632,
      451,  466,  470,  392,  392,  392,  392,  393,  393,  393,
      393,  393,  393,  393,  393,  631,  630,  629,  628,  627,
      393,  393,  454,  454,  454,  454,  454,  454,  454,  393,
      393,  393,  393,  395,  395,  395,  395,  395,  395,  395,
      395,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      404,  588,  404,  404,  404,  404,  404,  404,  404,  404,
      408,  588,  408,  408,  408,  408,  408,  408,  408,  408,
      412,  412,  412,  412,  412,  412,  412,  412,  412,  412,

      412,  473,  473,  482,  486,  412,  412,  626,  625,  624,
      623,  473,  482,  486,  412,  412,  412,  412,  413,  413,
      413,  413,  413,  413,  413,  413,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  621,  620,  485,  485,  419,
      419,  477,  477,  477,  477,  477,  477,  485,  419,  419,
      419,  419,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  489,  492,  492,  493,  420,  420,  617,
      614,  612,  489,  611,  492,  493,  420,  420,  420,  420,
      421,  421,  421,  421,  421,  421,  421,  421,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  496,

      499,  499,  500,  426,  426,  610,  608,  607,  496,  606,
      499,  500,  426,  426,  426,  426,  427,  427,  427,  427,
      427,  427,  427,  427,  433,  433,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  503,  506,  506,  507,  433,
      433,  604,  603,  602,  503,  600,  506,  507,  433,  433,
      433,  433,  434,  434,  434,  434,  434,  434,  434,  434,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  510,  513,  513,  531,  440,  440,  598,  596,  594,
      510,  592,  513,  531,  440,  440,  440,  440,  441,  441,
      441,  441,  441,  441,  441,  441,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  526,  526,  527,
      527,  447,  447,  590,  589,  586,  584,  526,  575,  527,
      447,  447,  447,  447,  448,  448,  448,  448,  448,  448,
      448,  448,  459,  573,  459,  459,  459,  459,  459,  459,
      464,  572,  464,  464,  464,  464,  464,  464,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  570,
      568,  532,  532,  468,  468,  530,  530,  530,  530,  530,
      530,  532,  468,  468,  468,  468,  469,  469,  469,  469,
      469,  469,  469,  469,  542,  542,  543,  543,  576,  469,
      469,  567,  565,  563,  542,  562,  543,  576,  469,  469,

      469,  469,  471,  471,  471,  471,  471,  471,  471,  471,
      475,  560,  475,  475,  475,  475,  475,  475,  475,  475,
      475,  545,  545,  546,  546,  475,  475,  556,  552,  548,
      544,  545,  541,  546,  475,  475,  475,  475,  476,  476,
      476,  476,  476,  476,  476,  476,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  547,  547,  549,
      549,  480,  480,  537,  536,  533,  525,  547,  523,  549,
      480,  480,  480,  480,  483,  483,  483,  483,  483,  483,
      483,  483,  487,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  550,  550,  551,  551,  487,  487,  522,

      521,  519,  518,  550,  517,  551,  487,  487,  487,  487,
      490,  490,  490,  490,  490,  490,  490,  490,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  553,
      553,  554,  554,  494,  494,  515,  514,  479,  478,  553,
      474,  554,  494,  494,  494,  494,  497,  497,  497,  497,
      497,  497,  497,  497,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  555,  555,  557,  557,  501,
      501,  465,  463,  462,  460,  555,  458,  557,  501,  501,
      501,  501,  504,  504,  504,  504,  504,  504,  504,  504,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,

      508,  558,  558,  559,  559,  508,  508,  457,  455,  453,
      452,  558,  418,  559,  508,  508,  508,  508,  511,  511,
      511,  511,  511,  511,  511,  511,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  520,  591,  520,  520,  520,
      520,  520,  520,  520,  520,  524,  591,  524,  524,  524,
      524,  524,  524,  524,  524,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  561,  561,  580,  593,
      528,  528,  417,  409,  407,  406,  561,  580,  593,  528,
      528,  528,  528,  529,  529,  529,  529,  529,  529,  529,
      529,  535,  405,  535,  535,  535,  535,  535,  535,  535,

      535,  535,  403,  402,  401,  399,  535,  535,  564,  564,
      564,  564,  564,  564,  564,  535,  535,  535,  535,  538,
      538,  538,  538,  538,  538,  538,  538,  569,  398,  569,
      569,  569,  569,  569,  569,  574,  369,  574,  574,  574,
      574,  574,  574,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  583,  583,  595,  597,  578,  578,
      368,  359,  357,  356,  583,  595,  597,  578,  578,  578,
      578,  581,  581,  581,  581,  581,  581,  581,  581,  585,
      599,  585,  585,  585,  585,  585,  585,  585,  585,  599,
      601,  622,  354,  622,  622,  622,  622,  622,  622,  601,

      605,  605,  605,  605,  605,  605,  605,  605,  605,  609,
      352,  609,  609,  609,  609,  609,  609,  609,  609,  613,
      351,  613,  613,  613,  613,  613,  613,  613,  613,  615,
      615,  616,  616,  618,  618,  349,  347,  346,  320,  615,
      319,  616,  318,  618,  634,  634,  634,  634,  634,  634,
      634,  639,  310,  639,  639,  639,  639,  639,  639,  644,
      646,  644,  644,  644,  644,  644,  644,  308,  307,  646,
      649,  306,  649,  649,  649,  649,  649,  649,  649,  649,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  665,
      304,  665,  665,  665,  665,  665,  665,  665,  665,  672,

      303,  672,  672,  672,  672,  672,  672,  676,  676,  676,
      676,  676,  676,  676,  681,  302,  681,  681,  681,  681,
      681,  681,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      695,  695,  695,  695,  695,  695,  695,  699,  699,  699,
      699,  699,  699,  699,  704,  704,  704,  704,  704,  704,
      704,  706,  300,  706,  706,  706,  706,  706,  708,  708,
      708,  709,  709,  709,  710,  278,  710,  711,  277,  711,
      712,  712,  712,  713,  713,  713,  715,  715,  715,  715,
      717,  276,  717,  718,  718,  719,  719,  719,  720,  720,

      720,  721,  721,  721,  721,  724,  724,  724,  724,  725,
      263,  725,  726,  261,  726,  727,  727,  727,  728,  728,
      728,  729,  729,  729,  729,  731,  260,  731,  732,  258,
      732,  733,  733,  733,  733,  733,  734,  734,  734,  734,
      736,  256,  736,  737,  737,  737,  738,  738,  738,  739,
      739,  739,  739,  740,  740,  740,  740,  740,  741,  741,
      741,  741,  743,  255,  743,  745,  745,  745,  745,  746,
      746,  747,  747,  748,  748,  748,  749,  749,  749,  750,
      750,  750,  750,  751,  751,  751,  751,  752,  235,  752,
      753,  234,  753,  754,  233,  754,  755,  232,  755,  756,

      756,  756,  756,  756,  757,  757,  757,  757,  758,  758,
      759,  759,  759,  760,  760,  760,  761,  761,  761,  761,
      762,  762,  762,  762,  762,  763,  763,  763,  763,  764,
      764,  764,  764,  764,  765,  765,  765,  765,  767,  230,
      767,  769,  229,  769,  771,  771,  771,  771,  772,  772,
      772,  773,  773,  773,  774,  774,  774,  774,  775,  775,
      775,  775,  776,  776,  776,  776,  777,  777,  778,  778,
      779,  227,  779,  780,  219,  780,  781,  217,  781,  782,
      216,  782,  783,  783,  783,  783,  783,  784,  784,  784,
      784,  785,  785,  785,  786,  786,  786,  787,  787,  787,

      787,  788,  788,  788,  788,  788,  789,  789,  789,  789,
      790,  790,  790,  790,  790,  791,  791,  791,  791,  792,
      792,  792,  792,  792,  793,  793,  793,  793,  794,  794,
      796,  215,  796,  798,  213,  798,  800,  800,  800,  800,
      801,  801,  801,  802,  802,  802,  803,  803,  803,  803,
      804,  804,  804,  804,  805,  805,  805,  805,  806,  806,
      806,  806,  807,  807,  808,  808,  809,  198,  809,  810,
      197,  810,  811,  196,  811,  812,  195,  812,  813,  813,
      813,  813,  813,  814,  814,  814,  814,  815,  815,  815,
      816,  816,  816,  816,  817,  817,  817,  817,  817,  818,

      818,  818,  818,  819,  819,  819,  819,  819,  820,  820,
      820,  820,  821,  821,  821,  821,  821,  822,  822,  822,
      822,  823,  823,  823,  823,  823,  824,  824,  824,  824,
      825,  825,  827,  193,  827,  829,  191,  829,  831,  831,
      831,  831,  832,  832,  832,  833,  833,  180,  833,  834,
      834,  834,  835,  178,  835,  836,  836,  836,  836,  837,
      177,  837,  838,  838,  838,  838,  839,  163,  839,  840,
      840,  840,  840,  841,  162,  841,  842,  842,  842,  842,
      843,  161,  843,  844,  844,  844,  844,  845,  845,  846,
      846,  847,  160,  847,  848,  158,  848,  849,  157,  849,

      850,  155,  850,  851,  851,  851,  851,  851,  852,  852,
      852,  852,  854,  854,  854,  855,  855,  855,  856,  856,
      154,  856,  857,  857,  857,  857,  857,  858,  858,  153,
      858,  859,  859,  859,  859,  859,  860,  860,  152,  860,
      861,  861,  861,  861,  861,  862,  862,  143,  862,  863,
      863,  863,  863,  863,  864,  864,  141,  864,  865,  865,
      865,  865,  865,  866,  866,  130,  866,  867,  867,  869,
      129,  869,  871,  128,  871,  873,  127,  873,  874,  874,
      874,  874,  875,  126,  875,  876,  124,  876,  877,  123,
      877,  877,  877,  878,  878,  122,  878,  879,  879,  121,

      879,  880,  880,  118,  880,  881,  881,  117,  881,  882,
      882,  103,  882,  883,  883,  102,  883,  884,  884,  101,
      884,  885,  885,  886,  886,  887,  100,  887,  888,   99,
      888,  889,   97,  889,  890,   96,  890,  891,  891,  891,
      891,  891,  892,  892,   93,  892,  894,   92,  894,  895,
      895,   90,  895,  896,  896,   89,  896,  897,  897,   85,
      897,  898,  898,   83,  898,  899,  899,   77,  899,  900,
      900,   76,  900,  901,  901,   73,  901,  902,  902,  904,
       72,  904,  906,   70,  906,  907,  907,   68,  907,  908,
       66,  908,  909,   65,  909,  910,  910,   64,  910,  911,

      911,  912,  912,  913,   62,  913,  914,   61,  914,  915,
      915,   60,  915,  917,   59,  917,  918,  918,  920,   58,
      920,  921,  921,  922,  922,  923,  923,  924,  924,  925,
      925,  926,  926,   57,   56,   55,   54,   44,   43,   38,
       35,   34,   33,   32,   30,   29,   27,   26,   23,   22,
       21,   19,    9,    7,    5,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  703,  703,

      703,  703,  703,  703,  703
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "policy.l"
#define INITIAL 0
#line 2 "policy.l"

#include "config.h"
#include "policy/common/policy_utils.hh"
#include <vector>
#include <string>
#include <sstream>
#include "policy_parser.hh"
#include "yacc.yy_policy_parser.cc.h"

#define yylval yy_policy_parserlval
#define yyerror yy_policy_parsererror
#define yyparse yy_policy_parserparse

void yyerror(const char *m);
extern int yyparse(void);

using namespace policy_parser;

// instantiate the globals here.
vector<Node*>* policy_parser::_parser_nodes;
unsigned policy_parser::_parser_lineno;

// try not to pollute
namespace {
	string _last_error;
	Term::BLOCKS _block;
}

#define YY_NO_UNPUT 1
#define STR 1

#line 1498 "lex.yy_policy_parser.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 59 "policy.l"


#line 1652 "lex.yy_policy_parser.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 704 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3556 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 61 "policy.l"
{ yylval.c_str = strdup(yytext);
		  return YY_UINT;
		}  
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 65 "policy.l"
{ yylval.c_str = strdup(yytext);
		  return YY_INT;
		}  
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 69 "policy.l"
BEGIN(STR);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 71 "policy.l"
BEGIN(INITIAL);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "policy.l"
{ yylval.c_str = strdup(yytext); 
		  _parser_lineno += policy_utils::count_nl(yytext);
		  /* XXX: a string can be started with " but terminated with '
		   * and vice versa...
		   */ 
		  return YY_STR;
		}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV4;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 86 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV4NET;
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 92 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV6;
		}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 97 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV6NET;
		}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 102 "policy.l"
{
		  // the colon is an alias for asignment in action and equality
		  // in the source / dest blocks.
		  if (_block == Term::ACTION)
		  	return YY_ASSIGN;
		  else
		  	return YY_EQ;
		}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 111 "policy.l"
return YY_LPAR;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 112 "policy.l"
return YY_RPAR;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 114 "policy.l"
return YY_EQ; 
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 115 "policy.l"
return YY_NE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 116 "policy.l"
return YY_LE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 117 "policy.l"
return YY_GE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 118 "policy.l"
return YY_LT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 119 "policy.l"
return YY_GT;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 121 "policy.l"
return YY_AND;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 122 "policy.l"
return YY_OR;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 123 "policy.l"
return YY_XOR;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 124 "policy.l"
return YY_NOT;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 126 "policy.l"
return YY_ADD;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 127 "policy.l"
return YY_ADD;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 128 "policy.l"
return YY_SUB;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 129 "policy.l"
return YY_MUL;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 130 "policy.l"
return YY_ASSIGN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 132 "policy.l"
return YY_HEAD;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 133 "policy.l"
return YY_CTR;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 134 "policy.l"
return YY_NE_INT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 136 "policy.l"
return YY_ACCEPT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 137 "policy.l"
return YY_REJECT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 139 "policy.l"
return YY_SET;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 140 "policy.l"
return YY_REGEX;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 142 "policy.l"
return YY_PROTOCOL;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 144 "policy.l"
{ yylval.c_str = strdup(yytext);
					  return YY_ID;
					}  
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 148 "policy.l"
return YY_SEMICOLON;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 150 "policy.l"
/* eat blanks */
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 152 "policy.l"
_parser_lineno++;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 154 "policy.l"
{ yyerror("Unknown character"); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 156 "policy.l"
ECHO;
	YY_BREAK
#line 1971 "lex.yy_policy_parser.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 704 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 704 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 703);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 156 "policy.l"


void yyerror(const char *m)
{
        ostringstream oss;
        oss << "Error on line " <<  _parser_lineno << " near (";

	for(int i = 0; i < yyleng; i++)
		oss << yytext[i];
	oss << "): " << m;

        _last_error = oss.str();
}

// Everything is put in the lexer because of YY_BUFFER_STATE...
int 
policy_parser::policy_parse(vector<Node*>& outnodes, const Term::BLOCKS& block, 
			    const string& conf, string& outerr)
{

        YY_BUFFER_STATE yybuffstate = yy_scan_string(conf.c_str());

        _last_error = "No error";
        _parser_nodes = &outnodes;
        _parser_lineno = 1;
	_block = block;

        int res = yyparse();
        
        yy_delete_buffer(yybuffstate);
        outerr = _last_error;
        
        return res;
}
