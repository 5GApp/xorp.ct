#define yy_create_buffer yy_policy_parser_create_buffer
#define yy_delete_buffer yy_policy_parser_delete_buffer
#define yy_scan_buffer yy_policy_parser_scan_buffer
#define yy_scan_string yy_policy_parser_scan_string
#define yy_scan_bytes yy_policy_parser_scan_bytes
#define yy_flex_debug yy_policy_parser_flex_debug
#define yy_init_buffer yy_policy_parser_init_buffer
#define yy_flush_buffer yy_policy_parser_flush_buffer
#define yy_load_buffer_state yy_policy_parser_load_buffer_state
#define yy_switch_to_buffer yy_policy_parser_switch_to_buffer
#define yyin yy_policy_parserin
#define yyleng yy_policy_parserleng
#define yylex yy_policy_parserlex
#define yyout yy_policy_parserout
#define yyrestart yy_policy_parserrestart
#define yytext yy_policy_parsertext

#line 19 "lex.yy_policy_parser.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 * $FreeBSD: src/usr.bin/lex/flex.skl,v 1.8 2004/01/06 19:03:44 nectar Exp $
 */

#if defined(__FreeBSD__)
#include <sys/cdefs.h>
#else
#define __unused
#endif

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) __unused;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 37
#define YY_END_OF_BUFFER 38
static yyconst short int yy_accept[690] =
    {   0,
        0,    0,    0,    0,   38,   36,   34,   35,   36,    3,
       11,   12,   25,   23,   24,    1,    1,    1,   10,   33,
       17,   26,   18,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,    5,    4,   34,   14,    2,    0,    1,
        0,    0,    1,    1,    1,    8,   15,   13,   16,   32,
       32,   32,   32,   32,   32,   32,   20,   32,   32,   32,
        5,    0,    0,    0,    1,    0,    0,    8,    1,    1,
        0,    8,    8,    8,    8,   32,   32,   29,   32,   19,
       22,   32,   32,   21,    0,    0,    0,    0,    0,    1,
        0,    0,    0,    8,    8,    8,    8,    9,    9,    0,

        8,    0,    8,    8,    8,    8,   32,   32,   32,   32,
       32,    0,    0,    0,    0,    1,    0,    0,    8,    8,
        0,    8,    8,    8,    8,    9,    9,    9,    0,    0,
        0,    8,    8,    8,    8,    8,    8,    8,   30,   32,
       32,   32,    0,    0,    0,    0,    0,    0,    0,    0,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    9,    0,    0,    0,    0,    0,    8,    0,    8,
        0,    8,    8,    8,    8,   27,   32,   28,    6,    6,
        6,    0,    0,    0,    8,    8,    0,    8,    8,    8,
        8,    8,    8,    0,    8,    8,    8,    8,    0,    0,

        0,    0,    0,    0,    0,    8,    8,    8,    8,    8,
        8,    8,   32,    0,    6,    6,    6,    6,    0,    0,
        0,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    8,
        0,    8,    0,    8,    8,    8,    8,   31,    7,    7,
        7,    6,    0,    0,    8,    8,    0,    8,    8,    8,
        8,    8,    8,    0,    8,    8,    8,    8,    8,    8,
        0,    8,    8,    8,    8,    8,    8,    8,    0,    0,
        0,    0,    0,    0,    0,    0,    8,    8,    8,    8,

        8,    8,    8,    0,    0,    0,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    8,    0,    8,    0,    8,
        8,    8,    8,    0,    0,    8,    8,    0,    8,    8,
        8,    8,    8,    8,    0,    8,    8,    8,    8,    8,
        8,    0,    8,    8,    8,    8,    8,    8,    0,    8,
        8,    8,    8,    8,    8,    8,    8,    0,    0,    0,
        0,    0,    0,    0,    0,    8,    8,    8,    8,    8,

        8,    8,    0,    0,    0,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    8,    0,    8,    0,    8,    8,    8,    8,    0,
        0,    0,    0,    8,    0,    8,    0,    8,    8,    8,
        8,    8,    8,    0,    8,    8,    8,    8,    8,    8,
        0,    8,    8,    8,    8,    8,    8,    0,    8,    8,
        8,    8,    8,    8,    0,    8,    8,    8,    8,    8,

        8,    8,    8,    0,    0,    0,    0,    0,    0,    0,
        0,    8,    8,    8,    8,    8,    8,    8,    0,    0,
        0,    0,    0,    0,    0,    0,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    8,    0,    8,    0,    8,    8,    8,    8,    0,
        0,    0,    0,    0,    8,    8,    0,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    0,    0,    0,    0,    0,    0,    0,    0,

        8,    8,    8,    8,    0,    0,    0,    0,    0,    0,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    8,    8,    0,    0,    0,    0,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    0,    0,
        0,    0,    0,    8,    0,    0,    0,    0,    0,    8,
        8,    8,    8,    0,    0,    0,    0,    0,    8,    8,
        8,    8,    0,    8,    8,    8,    8,    0,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    1,    1,    6,
        7,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   19,   19,   20,   21,   22,   23,
       24,   25,    1,    1,   26,   26,   26,   26,   27,   26,
       28,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   30,   31,   32,   29,   29,   29,   33,   29,   29,
        1,    1,    1,    1,   34,    1,   35,   26,   36,   37,

       38,   26,   29,   29,   29,   39,   29,   40,   29,   41,
       42,   43,   29,   44,   29,   45,   29,   29,   29,   46,
       29,   29,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[47] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
        3,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        6,    1,    1,    1,    1,    7,    7,    8,    8,    8,
        8,    8,    8,    8,    7,    7,    7,    7,    8,    8,
        8,    8,    8,    8,    8,    8
    } ;

static yyconst short int yy_base[914] =
    {   0,
        0,    0, 3419, 3418, 3422, 3425, 3419, 3425, 3396, 3425,
     3425, 3425, 3425, 3425,    0,   36,   62,   51, 3398, 3425,
     3394, 3393, 3392,   70,    0, 3388, 3387,   81, 3371, 3368,
     3367, 3372, 3367,    0, 3425, 3406, 3425,    0,   45,  112,
     3386, 3385,  138,   73,  146,  155, 3425, 3425, 3425,  181,
        0, 3377, 3372, 3367, 3365, 3356,    0, 3358, 3347, 3337,
        0, 3367,  209, 3363,  219, 3350, 3343,  246,    0, 3349,
     3343,  274,  300,  127,   49,  308, 3327,    0, 3312,    0,
        0, 3302, 3304,    0,  105, 3327, 3323,  165, 3319, 3305,
     3301, 3297, 3293,  336,  362,  196,  125,    0,  121,  164,

      372,  398,  168,  424,   75,  194, 3290, 3269,  200, 3257,
     3260, 3282,  434, 3275, 3271, 3257, 3253, 3249,  443,  471,
      497,  229,  523,  167,  256, 3425,    0, 3246, 3251,  533,
     3245,  258,  285,  543,  569,  323,  230,  287,    0, 3208,
     3214, 3198,  189, 3229, 3226,  233, 3221, 3202, 3193, 3184,
      579,  605,  351,  259,  321,  349,  615,  641,  387,  385,
      408, 3425,  234, 3185, 3176,  411, 3157,  411,  261,  651,
      677,  452,  703,  283,  454,    0, 3123,    0, 3150,  712,
     3147, 3137, 3120, 3113,  721,  749,  775,  455,  801,  285,
      482,  456,  811,  837,  483,  863,  310,  507, 3116,  873,

     3109, 3103, 3092,  883, 3089,  509,  554,  893,  919,  594,
      484,  556, 3003,  927, 3028, 3025,  625, 3022, 2980, 2977,
     2926,  937,  963,  666,  510,  592,  627,  973,  999,  692,
      628,  664,  690,  731, 1009, 1035,  764,  732,  734,  381,
     2933, 2930,  785, 2927,  413, 2898, 2895,  787, 2853,  762,
      486, 1045, 1071,  787, 1097,  339,  822,    0,  558,  512,
     3425, 2849, 2837, 2834, 1106, 1134, 1160,  788, 1186,  452,
      824,  846, 1196, 1222,  847, 1248,  582,  849,  850, 1258,
     1284,  903, 1310,  627,  905, 2818, 1319, 2796, 2785, 2782,
     1329, 2769, 2766, 2747, 1339, 2734,  948,  950, 1349, 1375,

      988,  906,  986, 2721, 2707, 2703, 1385, 1411, 1024, 1022,
     1056, 1058, 1421, 1447, 1086, 1084, 1116, 1118, 1145, 1457,
     1483, 1175, 1119, 1147, 1173, 1207, 1493, 1519, 1237, 1208,
     1235, 2698, 2697, 1268, 2696,  685, 2696, 2694, 1270, 2668,
      736, 2667, 2666, 1272, 2663, 1209,  758, 1529, 1555, 1293,
     1581,  654, 1295, 2652, 2642, 1590, 1618, 1644, 1296, 1670,
      820, 1360, 1297, 1680, 1706, 1361, 1732,  822, 1396, 1362,
     1742, 1768, 1397, 1794,  846, 1432, 1398, 1804, 1830, 1433,
     1856,  902, 1468, 2632, 2629, 1865, 2628, 2626, 2625, 1875,
     2611, 2610, 2608, 1885, 2593, 1470, 1504, 1895, 1921, 1544,

     1434, 1506, 2573, 2561, 1929, 1957, 1983, 1570, 1542, 1568,
     1600, 1993, 2019, 1633, 1601, 1603, 1631, 1654, 2029, 2055,
     1695, 1655, 1657, 1693, 1716, 2065, 2091, 1757, 1717, 1719,
     1755, 1778, 2101, 2127, 1819, 1779, 1781, 2569, 2568, 1839,
     2567,  952, 2567, 2566, 1841, 2565, 1018, 2564, 2536, 1843,
     2535, 1817, 1060, 2137, 2163, 1843, 2189,  976, 1906, 2524,
     2199, 2225, 1944, 2532, 2487, 2235,    0, 1907, 2261, 1073,
     1942, 1908, 2271,    0, 1967, 2297, 1075, 1969, 1970, 2307,
        0, 2003, 2333, 1115, 2005, 2006, 2343,    0, 2039, 2369,
     1143, 2041, 2042, 2379,    0, 2075, 2405, 1145, 2077, 2480,

     2463, 2414, 2462, 2462, 2461, 2424, 2457, 2401, 2399, 2434,
     2398, 2112, 2114, 2444, 2470, 2152, 2078, 2150, 2387, 1168,
     2480, 2386, 2355, 2506, 1205,  874, 2362, 2173, 2175, 2361,
     2210, 2212, 2246, 2360, 2248, 2282, 2284, 2359, 2318, 2320,
     2354, 2328, 2356, 2390, 2392, 2326, 2455, 2325, 2324, 2490,
     2323, 1230, 2293, 2291, 2458, 2290, 1364, 2289, 2288, 2492,
     2257, 2176, 1400, 2516,    0, 2492, 2542, 1207, 2527, 2255,
     2552, 2254, 1330, 1876, 2252, 2251, 2425, 2220, 2493, 2218,
     2528, 2217, 2529, 2216, 2552, 2215, 2562, 2199, 2183, 2181,
     2572, 2180, 2180, 2149, 2582, 2148, 2123, 2121, 2592, 2120,

     2602, 2604, 2118, 2606, 1436, 2118, 2086, 2609, 2084, 2073,
     2081, 2049, 2047, 2046, 2045, 2013, 2011, 2010, 2009, 2612,
     1977, 1472, 1976, 1975, 2615, 1974, 1508, 1941, 1940, 2619,
     1915, 2621, 1913, 1913, 2632, 1912, 1842, 1816, 1815, 1814,
     1789, 1786, 1785, 1784, 1753, 1752, 2641, 1727, 1725, 1724,
     2651, 1723, 1692, 1690, 1538, 1666, 1663, 2661, 1662, 1660,
     1629, 2663, 1628, 1563, 1612, 1609, 2665, 1608, 1606, 1514,
     2674, 1512, 1479, 1476, 1440, 2683, 1404, 1369, 1303, 1301,
     2692, 1300, 1274, 1270, 2694, 1155, 1126, 1124, 3425, 2714,
     1073, 2718, 2726, 1071, 2730, 2733, 2738, 2741, 2742, 2745,

      965, 2749,  963, 2754, 2755, 2757, 2760, 2764,  920,  918,
     2768, 2773, 2776, 2777, 2780, 2784,  864, 2789, 2792, 2795,
     2799,  839, 2804, 2805, 2808, 2812, 2817, 2821,  798, 2826,
      792, 2828, 2832, 2834, 2835, 2838, 2842, 2846, 2851, 2854,
     2857, 2860, 2863, 2867, 2871, 2872, 2875, 2879, 2884, 2888,
     2893, 2897,  749, 2902,  638, 2905,  571, 2907, 2910, 2913,
     2917, 2921, 2925, 2929, 2931, 2934, 2937, 2940, 2943, 2946,
     2950, 2953, 2956, 2960, 2965, 2969, 2974, 2978, 2983, 2987,
     2991,  540, 2994,  524, 2997,  497, 2999, 3002, 3005, 3009,
     3013, 3017, 3021, 3025, 3027, 3030, 3033, 3036, 3039, 3042,

     3046, 3049, 3053, 3058, 3062, 3067, 3071, 3076, 3080, 3085,
     3089, 3093,  469, 3096,  441, 3099,  416, 3101, 3104, 3108,
     3111, 3114, 3118, 3121, 3125, 3128, 3132, 3135, 3139, 3142,
     3146, 3150, 3152, 3155, 3158, 3161, 3164, 3167, 3171,  326,
     3174, 3177, 3181, 3186, 3190, 3195, 3199, 3204, 3208, 3213,
     3217, 3222, 3226, 3230,  302, 3233,  273, 3236,  226, 3237,
     3241, 3246, 3249, 3252, 3256, 3260, 3264, 3268, 3272, 3276,
     3280, 3284, 3286, 3289, 3292, 3295, 3298, 3301, 3305,  183,
     3310, 3312, 3316, 3320, 3324, 3328, 3332, 3336, 3340,  178,
     3343,  119, 3346, 3348, 3353, 3356, 3358, 3362, 3364, 3367,

     3370, 3372,  116, 3377, 3379,   43, 3382, 3384, 3386, 3388,
     3390, 3392, 3394
    } ;

static yyconst short int yy_def[914] =
    {   0,
      689,    1,  690,  690,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  691,  689,   16,   17,  689,  689,
      689,  689,  689,  689,  692,  692,  692,   24,  692,  692,
      692,  692,  692,  693,  689,  689,  689,  691,  694,  689,
      695,  696,   40,   43,   43,  689,  689,  689,  689,   24,
      692,  692,  692,   50,  692,  692,  692,  692,  692,  692,
      693,  697,  689,  698,  689,  699,  700,  689,   65,   65,
      701,  689,   72,   73,  702,   50,  692,  692,   76,  692,
      692,  692,  692,  692,  703,  698,  704,  704,  689,  705,
      689,  706,  707,  689,   94,   95,  708,  709,  709,  710,

      689,  689,  711,  101,  104,  711,  692,  692,  692,  692,
      692,  712,  689,  713,  689,  705,  714,  715,  689,  689,
      689,  716,  120,  123,  716,  689,  717,  717,  718,  689,
      719,  720,  720,  689,  134,  135,  721,  720,  692,  692,
      692,  692,  722,  713,  723,  723,  689,  689,  724,  725,
      689,  151,  152,  726,  727,  727,  689,  157,  158,  728,
      727,  689,  729,  719,  730,  730,  689,  689,  731,  689,
      689,  732,  170,  173,  732,  692,  692,  692,  733,  689,
      734,  689,  735,  736,  689,  689,  689,  737,  186,  189,
      737,  689,  689,  689,  738,  193,  196,  738,  739,  689,

      740,  689,  741,  689,  742,  743,  743,  689,  208,  209,
      744,  743,  692,  689,  734,  745,  745,  689,  689,  746,
      747,  689,  222,  223,  748,  749,  749,  689,  228,  229,
      750,  749,  751,  751,  689,  235,  236,  752,  751,  753,
      740,  754,  754,  689,  755,  742,  756,  756,  689,  689,
      757,  689,  689,  758,  252,  255,  758,  692,  214,  689,
      689,  689,  759,  760,  689,  689,  689,  761,  266,  269,
      761,  689,  689,  689,  762,  273,  276,  762,  689,  689,
      689,  763,  280,  283,  763,  764,  689,  765,  689,  766,
      689,  767,  689,  768,  689,  769,  770,  770,  689,  299,

      300,  771,  770,  689,  772,  773,  689,  307,  308,  774,
      775,  775,  689,  313,  314,  776,  775,  777,  777,  689,
      320,  321,  778,  777,  779,  779,  689,  327,  328,  780,
      779,  765,  781,  781,  689,  782,  767,  783,  783,  689,
      784,  769,  785,  785,  689,  689,  786,  689,  689,  787,
      348,  351,  787,  788,  789,  689,  689,  689,  790,  357,
      360,  790,  689,  689,  689,  791,  364,  367,  791,  689,
      689,  689,  792,  371,  374,  792,  689,  689,  689,  793,
      378,  381,  793,  689,  794,  689,  795,  689,  796,  689,
      797,  689,  798,  689,  799,  800,  800,  689,  398,  399,

      801,  800,  689,  802,  689,  689,  406,  407,  803,  804,
      804,  689,  412,  413,  805,  804,  806,  806,  689,  419,
      420,  807,  806,  808,  808,  689,  426,  427,  809,  808,
      810,  810,  689,  433,  434,  811,  810,  795,  812,  812,
      689,  813,  797,  814,  814,  689,  815,  799,  816,  816,
      689,  689,  817,  689,  689,  818,  454,  457,  818,  819,
      689,  461,  462,  820,  821,  689,  822,  823,  466,  469,
      823,  689,  689,  824,  825,  473,  476,  825,  689,  689,
      826,  827,  480,  483,  827,  689,  689,  828,  829,  487,
      490,  829,  689,  689,  830,  831,  494,  497,  831,  689,

      832,  689,  833,  689,  834,  689,  835,  689,  836,  689,
      837,  838,  838,  689,  514,  515,  839,  838,  689,  840,
      689,  841,  842,  521,  524,  842,  843,  844,  844,  845,
      844,  846,  846,  847,  846,  848,  848,  849,  848,  850,
      850,  851,  850,  852,  852,  853,  852,  833,  854,  854,
      689,  855,  835,  856,  856,  689,  857,  837,  858,  858,
      689,  689,  859,  689,  860,  861,  564,  567,  861,  862,
      689,  863,  864,  864,  865,  689,  864,  866,  689,  867,
      689,  868,  689,  869,  689,  870,  689,  871,  689,  872,
      689,  873,  689,  874,  689,  875,  689,  876,  689,  877,

      878,  878,  879,  878,  880,  863,  881,  881,  689,  689,
      882,  883,  884,  885,  886,  887,  888,  873,  889,  889,
      689,  890,  875,  891,  891,  689,  892,  877,  893,  893,
      689,  689,  894,  895,  689,  896,  689,  897,  689,  689,
      689,  689,  689,  689,  689,  898,  689,  899,  689,  900,
      689,  901,  689,  902,  903,  896,  904,  904,  689,  899,
      905,  905,  689,  906,  901,  907,  907,  689,  689,  908,
      689,  909,  689,  689,  910,  689,  911,  689,  909,  912,
      912,  689,  911,  913,  913,  689,  689,  689,    0,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,

      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,

      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,

      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689
    } ;

static yyconst short int yy_nxt[3472] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
        6,    6,   16,   16,   17,   18,   18,   18,   18,   18,
       19,   20,   21,   22,   23,   24,   24,   25,   25,   26,
       27,   25,   25,    6,   28,   24,   24,   24,   25,   25,
       29,   30,   31,   32,   25,   33,   39,  677,   40,   40,
       40,   40,   40,   40,   40,   40,   41,   62,   62,   63,
       71,   42,   42,   45,   45,   45,   45,   45,   45,  102,
       42,   42,   42,   42,   43,   43,   43,   43,   43,   44,
       45,   45,   50,   50,   50,   50,   50,   50,   50,   50,
       41,   70,   70,  133,  133,   50,   50,   51,   51,   51,

       51,   51,   51,   51,   50,   50,   50,   50,   51,   51,
       51,   51,   51,   51,   51,   51,   54,  112,  112,  113,
      672,   55,   39,  652,   65,   65,   65,   65,   65,   65,
       65,   65,   41,  127,  127,  128,   71,   66,   66,  106,
      106,  106,  106,  106,  106,  121,   66,   66,   66,   66,
       69,   69,   69,   69,   69,   69,   69,   69,   70,   70,
       70,   70,   70,   70,   70,   70,   71,   72,   72,   73,
       74,   74,   74,   74,   74,   85,  129,  129,  130,   71,
       75,   75,  648,  689,  689,  156,  156,  636,  102,   75,
       75,   75,   75,   76,   76,   76,   76,   76,   76,   76,

       76,  179,  179,  180,  100,   71,   76,   76,  125,  125,
      125,  125,  125,  125,  102,   76,   76,   76,   76,   85,
       41,   87,   87,   87,   87,   87,   88,   89,   89,   39,
      600,   90,   90,   90,   90,   90,   90,   90,   90,   41,
       71,   71,  140,  143,   91,   91,  199,  199,  200,  121,
      171,  689,  689,   91,   91,   91,   91,   71,   94,   94,
       95,   96,   96,   96,   96,   96,  100,   71,  100,   71,
       71,   97,   97,  203,  203,  204,  121,  596,  102,  187,
       97,   97,   97,   97,  100,   71,  101,  101,  101,  101,
      101,  101,  101,  101,  102,  689,   71,  100,   71,  103,

      103,  207,  207,  227,  227,  102,  592,  102,  103,  103,
      103,  103,  104,  104,  104,  104,  104,  105,  106,  106,
      107,  107,  107,  107,  107,  107,  107,  107,  234,  234,
      572,  100,   71,  107,  107,  175,  175,  175,  175,  175,
      175,  121,  107,  107,  107,  107,  100,   71,  120,  120,
      120,  120,  120,  120,  120,  120,  121,  298,  298,  689,
       71,  122,  122,  191,  191,  191,  191,  191,  191,  121,
      122,  122,  122,  122,  123,  123,  123,  123,  123,  124,
      125,  125,  100,   71,  132,  132,  132,  132,  132,  132,
      132,  132,  102,  286,  286,  287,   71,  133,  133,  198,

      198,  198,  198,  198,  198,  194,  133,  133,  133,  133,
      134,  134,  135,  136,  136,  136,  136,  136,  100,   71,
      511,  163,   71,  137,  137,  290,  290,  291,  121,  689,
      689,  102,  137,  137,  137,  137,  138,  138,  138,  138,
      138,  138,  138,  138,  143,  507,  145,  145,  145,  145,
      145,  146,  147,  147,   71,  151,  151,  152,  153,  153,
      153,  153,  153,   71,  169,   71,   71,   71,  154,  154,
      312,  312,  171,  503,  171,  187,  121,  154,  154,  154,
      154,  100,   71,  155,  155,  155,  155,  155,  155,  155,
      155,  121,  100,   71,   71,   71,  156,  156,  294,  294,

      295,  395,  187,  194,  253,  156,  156,  156,  156,  157,
      157,  158,  159,  159,  159,  159,  159,  169,   71,  169,
       71,   71,  160,  160,  261,  261,  261,  194,  391,  171,
      267,  160,  160,  160,  160,  161,  161,  161,  161,  161,
      161,  161,  161,  163,  387,  165,  165,  165,  165,  165,
      166,  167,  167,  169,   71,  170,  170,  170,  170,  170,
      170,  170,  170,  171,  689,   71,  169,   71,  172,  172,
      261,  261,  261,  261,  171,  296,  171,  172,  172,  172,
      172,  173,  173,  173,  173,  173,  174,  175,  175,  100,
       71,  186,  186,  186,  186,  186,  186,  186,  186,  187,

      319,  319,  100,   71,  188,  188,  257,  257,  257,  257,
      257,  257,  187,  188,  188,  188,  188,  189,  189,  189,
      189,  189,  190,  191,  191,  169,   71,  193,  193,  193,
      193,  193,  193,  193,  193,  194,  214,  689,   71,   71,
      195,  195,  292,  689,  689,  326,  326,  187,  274,  195,
      195,  195,  195,  196,  196,  196,  196,  196,  197,  198,
      198,  169,   71,  206,  206,  206,  206,  206,  206,  206,
      206,  171,  397,  397,  100,   71,  207,  207,  271,  271,
      271,  271,  271,  271,  187,  207,  207,  207,  207,  208,
      208,  209,  210,  210,  210,  210,  210,  385,  385,  386,

      169,   71,  211,  211,  278,  278,  278,  278,  278,  278,
      194,  211,  211,  211,  211,  212,  212,  212,  212,  212,
      212,  212,  212,  214,  216,  216,  216,  216,  216,  217,
      218,  218,   71,  222,  222,  223,  224,  224,  224,  224,
      224,  689,   71,   71,  169,   71,  225,  225,  389,  389,
      390,  194,  281,  288,  194,  225,  225,  225,  225,  100,
       71,  226,  226,  226,  226,  226,  226,  226,  226,  187,
      393,  393,  394,   71,  227,  227,  285,  285,  285,  285,
      285,  285,  171,  227,  227,  227,  227,  228,  228,  229,
      230,  230,  230,  230,  230,  240,  205,  245,   71,   71,

      231,  231,  201,  689,  689,  689,  689,  253,  267,  231,
      231,  231,  231,  232,  232,  232,  232,  232,  232,  232,
      232,  169,   71,  233,  233,  233,  233,  233,  233,  233,
      233,  194,  251,   71,  100,   71,  234,  234,  411,  411,
      418,  418,  253,  181,  267,  234,  234,  234,  234,  235,
      235,  236,  237,  237,  237,  237,  237,   71,   71,  169,
       71,   71,  238,  238,  425,  425,  187,  274,  162,  274,
      194,  238,  238,  238,  238,  239,  239,  239,  239,  239,
      239,  239,  239,  240,  520,  242,  242,  242,  242,  242,
      243,  244,  244,  245,  522,  247,  247,  247,  247,  247,

      248,  249,  249,  251,   71,  252,  252,  252,  252,  252,
      252,  252,  252,  253,   71,  251,   71,   71,  254,  254,
      432,  432,  131,  281,  126,  281,  349,  254,  254,  254,
      254,  255,  255,  255,  255,  255,  256,  257,  257,  259,
      259,  259,  260,  261,  261,  261,  261,  100,   71,  266,
      266,  266,  266,  266,  266,  266,  266,  267,  251,   71,
      689,   71,  268,  268,  501,  501,  502,  114,  253,   98,
      253,  268,  268,  268,  268,  269,  269,  269,  269,  269,
      270,  271,  271,  169,   71,  273,  273,  273,  273,  273,
      273,  273,  273,  274,  513,  513,  251,   71,  275,  275,

      353,  353,  353,  353,  353,  353,  253,  275,  275,  275,
      275,  276,  276,  276,  276,  276,  277,  278,  278,  251,
       71,  280,  280,  280,  280,  280,  280,  280,  280,  281,
      505,  505,  506,   71,  282,  282,  362,  362,  362,  362,
      362,  362,  358,  282,  282,  282,  282,  283,  283,  283,
      283,  283,  284,  285,  285,  251,   71,  297,  297,  297,
      297,  297,  297,  297,  297,  253,  100,   71,  689,   71,
      298,  298,  509,  509,  510,   64,  267,   38,  267,  298,
      298,  298,  298,  299,  299,  300,  301,  301,  301,  301,
      301,  529,  529,  533,  533,   71,  302,  302,  369,  369,

      369,  369,  369,  369,  365,  302,  302,  302,  302,  303,
      303,  303,  303,  303,  303,  303,  303,   71,  307,  307,
      308,  309,  309,  309,  309,  309,  100,   71,  169,   71,
       71,  310,  310,  537,  537,   71,  267,   71,  274,  372,
      310,  310,  310,  310,  100,   71,  311,  311,  311,  311,
      311,  311,  311,  311,  267,  689,   71,  169,   71,  312,
      312,  541,  541,  545,  545,  274,   71,  274,  312,  312,
      312,  312,  313,  313,  314,  315,  315,  315,  315,  315,
      570,  570,  571,  251,   71,  316,  316,  376,  376,  376,
      376,  376,  376,  281,  316,  316,  316,  316,  317,  317,

      317,  317,  317,  317,  317,  317,  169,   71,  318,  318,
      318,  318,  318,  318,  318,  318,  274,  689,   71,   71,
       71,  319,  319,  574,  574,  602,  602,  281,  379,  253,
      319,  319,  319,  319,  320,  320,  321,  322,  322,  322,
      322,  322,  590,  590,  591,  251,   71,  323,  323,  383,
      383,  383,  383,  383,  383,  281,  323,  323,  323,  323,
      324,  324,  324,  324,  324,  324,  324,  324,  251,   71,
      325,  325,  325,  325,  325,  325,  325,  325,  281,   71,
      336,   71,  341,  326,  326,   71,  689,  689,  689,  689,
      689,  689,  326,  326,  326,  326,  327,  327,  328,  329,

      329,  329,  329,  329,   71,  347,   71,   71,   71,  330,
      330,   71,   71,  349,   71,  349,  358,  267,  330,  330,
      330,  330,  331,  331,  331,  331,  331,  331,  331,  331,
       71,  333,  333,  333,  333,  333,  334,  335,  335,  336,
      520,  338,  338,  338,  338,  338,  339,  340,  340,  341,
      522,  343,  343,  343,  343,  343,  344,  345,  345,  347,
       71,  348,  348,  348,  348,  348,  348,  348,  348,  349,
      100,   71,   71,   71,  350,  350,  594,  594,  595,  664,
      358,  365,  274,  350,  350,  350,  350,  351,  351,  351,
      351,  351,  352,  353,  353,  100,   71,  357,  357,  357,

      357,  357,  357,  357,  357,  358,  169,   71,   71,   71,
      359,  359,  598,  598,  599,   71,  365,  372,  281,  359,
      359,  359,  359,  360,  360,  360,  360,  360,  361,  362,
      362,  169,   71,  364,  364,  364,  364,  364,  364,  364,
      364,  365,  251,   71,   71,   71,  366,  366,  634,  634,
      635,   71,  372,  379,  455,  366,  366,  366,  366,  367,
      367,  367,  367,  367,  368,  369,  369,  251,   71,  371,
      371,  371,  371,  371,  371,  371,  371,  372,  347,   71,
      347,   71,  373,  373,  646,  646,  647,   71,  379,  655,
      349,  373,  373,  373,  373,  374,  374,  374,  374,  374,

      375,  376,  376,  347,   71,  378,  378,  378,  378,  378,
      378,  378,  378,  379,  689,   71,  347,   71,  380,  380,
      650,  650,  651,   71,  349,   71,  349,  380,  380,  380,
      380,  381,  381,  381,  381,  381,  382,  383,  383,  347,
       71,  396,  396,  396,  396,  396,  396,  396,  396,  349,
      670,  670,  671,   71,  397,  397,  459,  459,  459,  459,
      459,  459,  467,  397,  397,  397,  397,  398,  398,  399,
      400,  400,  400,  400,  400,  675,  675,  676,  100,   71,
      401,  401,  471,  471,  471,  471,  471,  471,  358,  401,
      401,  401,  401,  402,  402,  402,  402,  402,  402,  402,

      402,   71,  406,  406,  407,  408,  408,  408,  408,  408,
      689,   71,   71,  100,   71,  409,  409,   71,  664,  664,
      358,  474,  664,  358,  409,  409,  409,  409,  100,   71,
      410,  410,  410,  410,  410,  410,  410,  410,  358,   71,
       71,  169,   71,  411,  411,  478,  478,  478,  478,  478,
      478,  365,  411,  411,  411,  411,  412,  412,  413,  414,
      414,  414,  414,  414,  689,   71,   71,  169,   71,  415,
      415,   71,  655,  655,  365,  481,  655,  365,  415,  415,
      415,  415,  416,  416,  416,  416,  416,  416,  416,  416,
      169,   71,  417,  417,  417,  417,  417,  417,  417,  417,

      365,   71,  627,  251,   71,  418,  418,  485,  485,  485,
      485,  485,  485,  372,  418,  418,  418,  418,  419,  419,
      420,  421,  421,  421,  421,  421,  689,   71,   71,  251,
       71,  422,  422,  664,  664,  622,  372,  488,   71,  372,
      422,  422,  422,  422,  423,  423,  423,  423,  423,  423,
      423,  423,  251,   71,  424,  424,  424,  424,  424,  424,
      424,  424,  372,   71,   71,  347,   71,  425,  425,  492,
      492,  492,  492,  492,  492,  379,  425,  425,  425,  425,
      426,  426,  427,  428,  428,  428,  428,  428,  689,   71,
       71,  347,   71,  429,  429,   71,   71,   71,  379,  495,

       71,  379,  429,  429,  429,  429,  430,  430,  430,  430,
      430,  430,  430,  430,  347,   71,  431,  431,  431,  431,
      431,  431,  431,  431,  379,   71,   71,   71,   71,  432,
      432,  499,  499,  499,  499,  499,  499,  349,  432,  432,
      432,  432,  433,  433,  434,  435,  435,  435,  435,  435,
       71,  442,  605,  447,   71,  436,  436,  689,  689,  689,
      689,  689,  689,  455,  436,  436,  436,  436,  437,  437,
      437,  437,  437,  437,  437,  437,   71,  439,  439,  439,
      439,  439,  440,  441,  441,  442,  689,  444,  444,  444,
      444,  444,  445,  446,  446,  447,  522,  449,  449,  449,

      449,  449,  450,  451,  451,  453,   71,  454,  454,  454,
      454,  454,  454,  454,  454,  455,  453,   71,   71,   71,
      456,  456,  655,  655,   71,  627,  455,  467,  358,  456,
      456,  456,  456,  457,  457,  457,  457,  457,  458,  459,
      459,  461,  461,  462,  463,  463,  463,  463,  463,  464,
      627,  627,  100,   71,  465,  465,  526,  526,  526,  526,
      526,  526,  467,  465,  465,  465,  465,  100,   71,  466,
      466,  466,  466,  466,  466,  466,  466,  467,   71,  169,
       71,   71,  468,  468,  622,  622,  622,  474,   71,  474,
      365,  468,  468,  468,  468,  469,  469,  469,  469,  469,

      470,  471,  471,  169,   71,  473,  473,  473,  473,  473,
      473,  473,  473,  474,   71,  251,   71,   71,  475,  475,
       71,   71,   71,  481,   71,  481,  372,  475,  475,  475,
      475,  476,  476,  476,  476,  476,  477,  478,  478,  251,
       71,  480,  480,  480,  480,  480,  480,  480,  480,  481,
       71,  347,   71,   71,  482,  482,   71,   71,   71,  488,
       71,  488,  379,  482,  482,  482,  482,  483,  483,  483,
      483,  483,  484,  485,  485,  347,   71,  487,  487,  487,
      487,  487,  487,  487,  487,  488,   71,  453,   71,   71,
      489,  489,   71,  522,  605,  495,  605,  495,  565,  489,

      489,  489,  489,  490,  490,  490,  490,  490,  491,  492,
      492,  453,   71,  494,  494,  494,  494,  494,  494,  494,
      494,  495,  453,   71,  689,   71,  496,  496,  605,   71,
      627,  627,  455,  557,  455,  496,  496,  496,  496,  497,
      497,  497,  497,  497,  498,  499,  499,  453,   71,  512,
      512,  512,  512,  512,  512,  512,  512,  455,  622,  622,
      453,   71,  513,  513,  569,  569,  569,  569,  569,  569,
      455,  513,  513,  513,  513,  514,  514,  515,  516,  516,
      516,  516,  516,  100,   71,  689,   71,   71,  517,  517,
      552,   71,   71,  467,   71,  467,  455,  517,  517,  517,

      517,  518,  518,  518,  518,  518,  518,  518,  518,  520,
       71,  521,  521,  521,  521,  521,  521,  521,  521,  522,
      100,   71,  169,   71,  523,  523,   71,   71,   71,   71,
      467,   71,  474,  523,  523,  523,  523,  524,  524,  524,
      524,  524,  525,  526,  526,  100,   71,  528,  528,  528,
      528,  528,  528,  528,  528,  467,  689,   71,  169,   71,
      529,  529,   71,   71,  605,  605,  474,  557,  474,  529,
      529,  529,  529,  531,  531,  531,  531,  531,  531,  531,
      531,  169,   71,  532,  532,  532,  532,  532,  532,  532,
      532,  474,  251,   71,  689,   71,  533,  533,  557,  557,

      552,  552,  481,  552,  481,  533,  533,  533,  533,  535,
      535,  535,  535,  535,  535,  535,  535,  251,   71,  536,
      536,  536,  536,  536,  536,  536,  536,  481,  251,   71,
      347,   71,  537,  537,   71,   71,   71,   71,  481,   71,
      488,  537,  537,  537,  537,  539,  539,  539,  539,  539,
      539,  539,  539,  347,   71,  540,  540,  540,  540,  540,
      540,  540,  540,  488,  689,   71,  347,   71,  541,  541,
       71,   71,   71,   71,  488,  522,  488,  541,  541,  541,
      541,  543,  543,  543,  543,  543,  543,  543,  543,  453,
       71,  544,  544,  544,  544,  544,  544,  544,  544,  495,

      453,   71,  689,   71,  545,  545,  576,  405,  557,  557,
      495,  447,  495,  545,  545,  545,  545,  547,  547,  547,
      547,  547,  547,  547,  547,   71,  549,  549,  549,  549,
      549,  550,  551,  551,  552,  520,  554,  554,  554,  554,
      554,  555,  556,  556,  557,  522,  559,  559,  559,  559,
      559,  560,  561,  561,  563,   71,  564,  564,  564,  564,
      564,  564,  564,  564,  565,  453,   71,  552,  552,  566,
      566,  552,  442,   71,   71,  495,  689,  689,  566,  566,
      566,  566,  567,  567,  567,  567,  567,  568,  569,  569,
      520,   71,  573,  573,  573,  573,  573,  573,  573,  573,

      522,   71,  557,   71,   71,  574,  574,  522,  689,  689,
      689,  689,  565,  467,  574,  574,  574,  574,  577,  577,
      577,  577,  577,  577,  577,  577,  563,   71,  601,  601,
      601,  601,  601,  601,  601,  601,  565,  563,   71,   71,
       71,  602,  602,   71,  405,  447,  447,  565,  474,  481,
      602,  602,  602,  602,  604,  604,  604,  604,  604,  604,
      604,  604,  605,   71,  607,  607,  607,  607,  607,  608,
      609,  609,  488,   71,  447,  442,  442,  442,   71,   71,
       71,  405,  495,   71,  619,  619,  619,  619,  619,  620,
      621,  621,  622,  306,  624,  624,  624,  624,  624,  625,

      626,  626,  627,  447,  629,  629,  629,  629,  629,  630,
      631,  631,  563,   71,  689,   71,  563,   71,  447,  605,
      341,  442,  565,   71,  565,  622,  565,  689,  689,  627,
      689,  689,   71,  689,  689,  442,  336,  689,  689,   71,
       71,  565,  655,   71,  657,  657,  657,  657,  657,  658,
      659,  659,   71,  661,  661,  661,  661,  661,  662,  663,
      663,  664,  405,  666,  666,  666,  666,  666,  667,  668,
      668,  655,  306,  341,   71,  664,  341,  341,  336,  689,
      689,  689,  689,  689,  689,   71,  680,  680,  680,  680,
      680,  681,  682,  682,   71,  684,  684,  684,  684,  684,

      685,  686,  686,   71,  336,   71,  336,   71,   71,   71,
      689,  689,  689,  689,   34,   34,   34,   34,   34,   34,
       34,   34,   51,  356,   51,   51,   61,  306,   61,   61,
       61,   61,   61,   61,   67,   67,   67,   66,   66,   66,
       86,  221,   86,   89,  341,   89,   91,   91,   91,   92,
       92,   92,  103,  103,  103,  103,  115,  341,  115,  116,
      116,  117,  117,  117,  118,  118,  118,  122,  122,  122,
      122,  133,  133,  133,  133,  144,  245,  144,  147,  336,
      147,  148,  148,  148,  149,  149,  149,  156,  156,  156,
      156,  164,  336,  164,  167,  240,  167,  168,  168,  168,

      168,  168,  172,  172,  172,  172,  182,   71,  182,  183,
      183,  183,  184,  184,  184,  188,  188,  188,  188,  192,
      192,  192,  192,  192,  195,  195,  195,  195,  202,   71,
      202,  207,  207,  207,  207,  215,  215,  218,  218,  219,
      219,  219,  220,  220,  220,  227,  227,  227,  227,  234,
      234,  234,  234,  241,  306,  241,  244,  221,  244,  246,
      214,  246,  249,  245,  249,  250,  250,  250,  250,  250,
      254,  254,  254,  254,  262,  262,  263,  263,  263,  264,
      264,  264,  268,  268,  268,  268,  272,  272,  272,  272,
      272,  275,  275,  275,  275,  279,  279,  279,  279,  279,

      282,  282,  282,  282,  289,  245,  289,  293,  245,  293,
      298,  298,  298,  298,  304,  304,  304,  305,  305,  305,
      312,  312,  312,  312,  319,  319,  319,  319,  326,  326,
      326,  326,  332,  332,  335,  335,  337,  240,  337,  340,
      240,  340,  342,  240,  342,  345,  265,  345,  346,  346,
      346,  346,  346,  350,  350,  350,  350,  354,  354,  354,
      355,  355,  355,  359,  359,  359,  359,  363,  363,  363,
      363,  363,  366,  366,  366,  366,  370,  370,  370,  370,
      370,  373,  373,  373,  373,  377,  377,  377,  377,  377,
      380,  380,  380,  380,  384,  384,  388,  221,  388,  392,

      150,  392,  397,  397,  397,  397,  403,  403,  403,  404,
      404,  404,  411,  411,  411,  411,  418,  418,  418,  418,
      425,  425,  425,  425,  432,  432,  432,  432,  438,  438,
      441,  441,  443,  214,  443,  446,  214,  446,  448,  214,
      448,  451,  258,  451,  452,  452,  452,  452,  452,  456,
      456,  456,  456,  460,  460,  460,  468,  468,  468,  468,
      472,  472,  472,  472,  472,  475,  475,  475,  475,  479,
      479,  479,  479,  479,  482,  482,  482,  482,  486,  486,
      486,  486,  486,  489,  489,  489,  489,  493,  493,  493,
      493,  493,  496,  496,  496,  496,  500,  500,  504,  245,

      504,  508,  245,  508,  513,  513,  513,  513,  519,  519,
      519,  527,  527,  163,  527,  523,  523,  523,  530,  240,
      530,  529,  529,  529,  529,  534,  240,  534,  533,  533,
      533,  533,  538,  221,  538,  537,  537,  537,  537,  542,
      150,  542,  541,  541,  541,  541,  546,  143,  546,  545,
      545,  545,  545,  548,  548,  551,  551,  553,  214,  553,
      556,  214,  556,  558,  213,  558,  561,  163,  561,  562,
      562,  562,  562,  562,  566,  566,  566,  566,  575,  575,
      575,  574,  574,  574,  578,  578,  163,  578,  579,  579,
      579,  579,  579,  580,  580,  163,  580,  581,  581,  581,

      581,  581,  582,  582,  185,  582,  583,  583,  583,  583,
      583,  584,  584,  150,  584,  585,  585,  585,  585,  585,
      586,  586,   93,  586,  587,  587,  587,  587,  587,  588,
      588,  143,  588,  589,  589,  593,  143,  593,  597,  143,
      597,  603,  178,  603,  602,  602,  602,  602,  606,  177,
      606,  609,  176,  609,  610,  163,  610,  610,  610,  611,
      611,  163,  611,  612,  612,  689,  612,  613,  613,  150,
      613,  614,  614,   93,  614,  615,  615,  689,  615,  616,
      616,   85,  616,  617,  617,  143,  617,  618,  618,  621,
      621,  623,  143,  623,  626,  142,  626,  628,  141,  628,

      631,  139,  631,  632,  632,  632,  632,  632,  633,  633,
       41,  633,  637,  119,  637,  638,  638,   93,  638,  639,
      639,   41,  639,  640,  640,   41,  640,  641,  641,   85,
      641,  642,  642,   85,  642,  643,  643,   85,  643,  644,
      644,  111,  644,  645,  645,  649,  110,  649,  653,  109,
      653,  654,  654,  108,  654,  656,   99,  656,  659,  689,
      659,  576,  576,   93,  576,  660,  660,  663,  663,  665,
       41,  665,  668,   85,  668,  669,  669,   85,  669,  673,
       84,  673,  674,  674,  678,   83,  678,  679,  679,  682,
      682,  683,  683,  686,  686,  687,  687,  688,  688,   82,

       81,   80,   79,   78,   77,   41,   68,   36,   60,   59,
       58,   57,   56,   53,   52,   49,   48,   47,   46,   37,
       36,  689,   35,   35,    5,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689
    } ;

static yyconst short int yy_chk[3472] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   16,  906,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   39,   39,   39,
       75,   16,   16,   18,   18,   18,   18,   18,   18,   75,
       16,   16,   16,   16,   17,   17,   17,   17,   17,   17,
       17,   17,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   44,   44,  105,  105,   24,   24,   24,   24,   24,

       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   28,   85,   85,   85,
      903,   28,   40,  892,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   99,   99,   99,   97,   40,   40,   74,
       74,   74,   74,   74,   74,   97,   40,   40,   40,   40,
       43,   43,   43,   43,   43,   43,   43,   43,   45,   45,
       45,   45,   45,   45,   45,   45,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   88,  100,  100,  100,  103,
       46,   46,  890,   88,   88,  124,  124,  880,  103,   46,
       46,   46,   46,   50,   50,   50,   50,   50,   50,   50,

       50,  143,  143,  143,  106,  106,   50,   50,   96,   96,
       96,   96,   96,   96,  106,   50,   50,   50,   50,   63,
      109,   63,   63,   63,   63,   63,   63,   63,   63,   65,
      859,   65,   65,   65,   65,   65,   65,   65,   65,   65,
      122,  137,  109,  146,   65,   65,  163,  163,  163,  122,
      137,  146,  146,   65,   65,   65,   65,   68,   68,   68,
       68,   68,   68,   68,   68,   68,  125,  125,  132,  132,
      154,   68,   68,  169,  169,  169,  125,  857,  132,  154,
       68,   68,   68,   68,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,  133,  133,  138,  138,   72,

       72,  174,  174,  190,  190,  133,  855,  138,   72,   72,
       72,   72,   73,   73,   73,   73,   73,   73,   73,   73,
       76,   76,   76,   76,   76,   76,   76,   76,  197,  197,
      840,  155,  155,   76,   76,  136,  136,  136,  136,  136,
      136,  155,   76,   76,   76,   76,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,  256,  256,  156,
      156,   94,   94,  153,  153,  153,  153,  153,  153,  156,
       94,   94,   94,   94,   95,   95,   95,   95,   95,   95,
       95,   95,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  240,  240,  240,  160,  101,  101,  159,

      159,  159,  159,  159,  159,  160,  101,  101,  101,  101,
      102,  102,  102,  102,  102,  102,  102,  102,  161,  161,
      817,  166,  168,  102,  102,  245,  245,  245,  161,  166,
      166,  168,  102,  102,  102,  102,  104,  104,  104,  104,
      104,  104,  104,  104,  113,  815,  113,  113,  113,  113,
      113,  113,  113,  113,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  172,  175,  175,  188,  192,  119,  119,
      270,  270,  172,  813,  175,  188,  192,  119,  119,  119,
      119,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  191,  191,  195,  211,  120,  120,  251,  251,

      251,  786,  191,  195,  211,  120,  120,  120,  120,  121,
      121,  121,  121,  121,  121,  121,  121,  198,  198,  206,
      206,  225,  121,  121,  260,  260,  260,  198,  784,  206,
      225,  121,  121,  121,  121,  123,  123,  123,  123,  123,
      123,  123,  123,  130,  782,  130,  130,  130,  130,  130,
      130,  130,  130,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  207,  207,  212,  212,  134,  134,
      259,  259,  259,  259,  207,  757,  212,  134,  134,  134,
      134,  135,  135,  135,  135,  135,  135,  135,  135,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,

      277,  277,  226,  226,  151,  151,  210,  210,  210,  210,
      210,  210,  226,  151,  151,  151,  151,  152,  152,  152,
      152,  152,  152,  152,  152,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  217,  227,  227,  231,
      157,  157,  755,  217,  217,  284,  284,  227,  231,  157,
      157,  157,  157,  158,  158,  158,  158,  158,  158,  158,
      158,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  352,  352,  232,  232,  170,  170,  224,  224,
      224,  224,  224,  224,  232,  170,  170,  170,  170,  171,
      171,  171,  171,  171,  171,  171,  171,  336,  336,  336,

      233,  233,  171,  171,  230,  230,  230,  230,  230,  230,
      233,  171,  171,  171,  171,  173,  173,  173,  173,  173,
      173,  173,  173,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  234,  234,  238,  239,  239,  185,  185,  341,  341,
      341,  234,  238,  753,  239,  185,  185,  185,  185,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      347,  347,  347,  250,  186,  186,  237,  237,  237,  237,
      237,  237,  250,  186,  186,  186,  186,  187,  187,  187,
      187,  187,  187,  187,  187,  243,  731,  248,  254,  268,

      187,  187,  729,  243,  243,  248,  248,  254,  268,  187,
      187,  187,  187,  189,  189,  189,  189,  189,  189,  189,
      189,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  257,  257,  271,  271,  193,  193,  361,  361,
      368,  368,  257,  722,  271,  193,  193,  193,  193,  194,
      194,  194,  194,  194,  194,  194,  194,  272,  275,  278,
      278,  279,  194,  194,  375,  375,  272,  275,  717,  278,
      279,  194,  194,  194,  194,  196,  196,  196,  196,  196,
      196,  196,  196,  200,  526,  200,  200,  200,  200,  200,
      200,  200,  200,  204,  526,  204,  204,  204,  204,  204,

      204,  204,  204,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  282,  285,  285,  302,  208,  208,
      382,  382,  710,  282,  709,  285,  302,  208,  208,  208,
      208,  209,  209,  209,  209,  209,  209,  209,  209,  214,
      214,  214,  214,  214,  214,  214,  214,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  297,  297,
      298,  298,  222,  222,  442,  442,  442,  703,  297,  701,
      298,  222,  222,  222,  222,  223,  223,  223,  223,  223,
      223,  223,  223,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  458,  458,  303,  303,  228,  228,

      301,  301,  301,  301,  301,  301,  303,  228,  228,  228,
      228,  229,  229,  229,  229,  229,  229,  229,  229,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      447,  447,  447,  310,  235,  235,  309,  309,  309,  309,
      309,  309,  310,  235,  235,  235,  235,  236,  236,  236,
      236,  236,  236,  236,  236,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  311,  311,  312,  312,
      252,  252,  453,  453,  453,  694,  311,  691,  312,  252,
      252,  252,  252,  253,  253,  253,  253,  253,  253,  253,
      253,  470,  470,  477,  477,  316,  253,  253,  315,  315,

      315,  315,  315,  315,  316,  253,  253,  253,  253,  255,
      255,  255,  255,  255,  255,  255,  255,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  317,  317,  318,  318,
      323,  265,  265,  484,  484,  688,  317,  687,  318,  323,
      265,  265,  265,  265,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  319,  319,  324,  324,  266,
      266,  491,  491,  498,  498,  319,  686,  324,  266,  266,
      266,  266,  267,  267,  267,  267,  267,  267,  267,  267,
      520,  520,  520,  325,  325,  267,  267,  322,  322,  322,
      322,  322,  322,  325,  267,  267,  267,  267,  269,  269,

      269,  269,  269,  269,  269,  269,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  326,  326,  330,
      346,  273,  273,  525,  525,  568,  568,  326,  330,  346,
      273,  273,  273,  273,  274,  274,  274,  274,  274,  274,
      274,  274,  552,  552,  552,  331,  331,  274,  274,  329,
      329,  329,  329,  329,  329,  331,  274,  274,  274,  274,
      276,  276,  276,  276,  276,  276,  276,  276,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  334,
      339,  684,  344,  280,  280,  683,  334,  334,  339,  339,
      344,  344,  280,  280,  280,  280,  281,  281,  281,  281,

      281,  281,  281,  281,  350,  353,  353,  359,  363,  281,
      281,  682,  680,  350,  679,  353,  359,  363,  281,  281,
      281,  281,  283,  283,  283,  283,  283,  283,  283,  283,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  291,
      573,  291,  291,  291,  291,  291,  291,  291,  291,  295,
      573,  295,  295,  295,  295,  295,  295,  295,  295,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      362,  362,  366,  370,  299,  299,  557,  557,  557,  678,
      362,  366,  370,  299,  299,  299,  299,  300,  300,  300,
      300,  300,  300,  300,  300,  307,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  307,  369,  369,  373,  377,
      307,  307,  563,  563,  563,  677,  369,  373,  377,  307,
      307,  307,  307,  308,  308,  308,  308,  308,  308,  308,
      308,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  376,  376,  380,  401,  313,  313,  605,  605,
      605,  675,  376,  380,  401,  313,  313,  313,  313,  314,
      314,  314,  314,  314,  314,  314,  314,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  383,  383,
      396,  396,  320,  320,  622,  622,  622,  674,  383,  673,
      396,  320,  320,  320,  320,  321,  321,  321,  321,  321,

      321,  321,  321,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  397,  397,  402,  402,  327,  327,
      627,  627,  627,  672,  397,  670,  402,  327,  327,  327,
      327,  328,  328,  328,  328,  328,  328,  328,  328,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      655,  655,  655,  409,  348,  348,  400,  400,  400,  400,
      400,  400,  409,  348,  348,  348,  348,  349,  349,  349,
      349,  349,  349,  349,  349,  664,  664,  664,  410,  410,
      349,  349,  408,  408,  408,  408,  408,  408,  410,  349,
      349,  349,  349,  351,  351,  351,  351,  351,  351,  351,

      351,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      411,  411,  415,  416,  416,  356,  356,  669,  668,  666,
      411,  415,  665,  416,  356,  356,  356,  356,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  663,
      661,  417,  417,  357,  357,  414,  414,  414,  414,  414,
      414,  417,  357,  357,  357,  357,  358,  358,  358,  358,
      358,  358,  358,  358,  418,  418,  422,  423,  423,  358,
      358,  660,  659,  657,  418,  422,  656,  423,  358,  358,
      358,  358,  360,  360,  360,  360,  360,  360,  360,  360,
      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,

      364,  654,  653,  424,  424,  364,  364,  421,  421,  421,
      421,  421,  421,  424,  364,  364,  364,  364,  365,  365,
      365,  365,  365,  365,  365,  365,  425,  425,  429,  430,
      430,  365,  365,  652,  650,  649,  425,  429,  648,  430,
      365,  365,  365,  365,  367,  367,  367,  367,  367,  367,
      367,  367,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  646,  645,  431,  431,  371,  371,  428,
      428,  428,  428,  428,  428,  431,  371,  371,  371,  371,
      372,  372,  372,  372,  372,  372,  372,  372,  432,  432,
      436,  437,  437,  372,  372,  644,  643,  642,  432,  436,

      641,  437,  372,  372,  372,  372,  374,  374,  374,  374,
      374,  374,  374,  374,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  640,  639,  638,  452,  378,
      378,  435,  435,  435,  435,  435,  435,  452,  378,  378,
      378,  378,  379,  379,  379,  379,  379,  379,  379,  379,
      440,  445,  637,  450,  456,  379,  379,  440,  440,  445,
      445,  450,  450,  456,  379,  379,  379,  379,  381,  381,
      381,  381,  381,  381,  381,  381,  386,  386,  386,  386,
      386,  386,  386,  386,  386,  390,  574,  390,  390,  390,
      390,  390,  390,  390,  390,  394,  574,  394,  394,  394,

      394,  394,  394,  394,  394,  398,  398,  398,  398,  398,
      398,  398,  398,  398,  398,  398,  459,  459,  468,  472,
      398,  398,  636,  634,  633,  631,  459,  468,  472,  398,
      398,  398,  398,  399,  399,  399,  399,  399,  399,  399,
      399,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      629,  628,  471,  471,  405,  405,  463,  463,  463,  463,
      463,  463,  471,  405,  405,  405,  405,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  475,  478,
      478,  479,  406,  406,  626,  624,  623,  475,  621,  478,
      479,  406,  406,  406,  406,  407,  407,  407,  407,  407,

      407,  407,  407,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  482,  485,  485,  486,  412,  412,
      619,  618,  617,  482,  616,  485,  486,  412,  412,  412,
      412,  413,  413,  413,  413,  413,  413,  413,  413,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      489,  492,  492,  493,  419,  419,  615,  614,  613,  489,
      612,  492,  493,  419,  419,  419,  419,  420,  420,  420,
      420,  420,  420,  420,  420,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  496,  499,  499,  517,
      426,  426,  611,  610,  609,  496,  607,  499,  517,  426,

      426,  426,  426,  427,  427,  427,  427,  427,  427,  427,
      427,  433,  433,  433,  433,  433,  433,  433,  433,  433,
      433,  433,  512,  512,  513,  513,  433,  433,  606,  603,
      600,  598,  512,  597,  513,  433,  433,  433,  433,  434,
      434,  434,  434,  434,  434,  434,  434,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  596,  594,
      518,  518,  454,  454,  516,  516,  516,  516,  516,  516,
      518,  454,  454,  454,  454,  455,  455,  455,  455,  455,
      455,  455,  455,  528,  528,  529,  529,  562,  455,  455,
      593,  592,  590,  528,  589,  529,  562,  455,  455,  455,

      455,  457,  457,  457,  457,  457,  457,  457,  457,  461,
      588,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      531,  531,  532,  532,  461,  461,  586,  584,  582,  580,
      531,  578,  532,  461,  461,  461,  461,  462,  462,  462,
      462,  462,  462,  462,  462,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  533,  533,  535,  535,
      466,  466,  576,  575,  572,  570,  533,  561,  535,  466,
      466,  466,  466,  469,  469,  469,  469,  469,  469,  469,
      469,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  536,  536,  537,  537,  473,  473,  559,  558,

      556,  554,  536,  553,  537,  473,  473,  473,  473,  476,
      476,  476,  476,  476,  476,  476,  476,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  539,  539,
      540,  540,  480,  480,  551,  549,  548,  546,  539,  542,
      540,  480,  480,  480,  480,  483,  483,  483,  483,  483,
      483,  483,  483,  487,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  541,  541,  543,  543,  487,  487,
      538,  534,  530,  527,  541,  523,  543,  487,  487,  487,
      487,  490,  490,  490,  490,  490,  490,  490,  490,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  494,

      544,  544,  545,  545,  494,  494,  522,  519,  511,  509,
      544,  508,  545,  494,  494,  494,  494,  497,  497,  497,
      497,  497,  497,  497,  497,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  506,  577,  506,  506,  506,  506,
      506,  506,  506,  506,  510,  577,  510,  510,  510,  510,
      510,  510,  510,  510,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  547,  547,  507,  555,  514,
      514,  505,  504,  503,  501,  547,  555,  555,  514,  514,
      514,  514,  515,  515,  515,  515,  515,  515,  515,  515,
      521,  500,  521,  521,  521,  521,  521,  521,  521,  521,

      521,  550,  560,  566,  579,  521,  521,  465,  550,  550,
      560,  560,  566,  579,  521,  521,  521,  521,  524,  524,
      524,  524,  524,  524,  524,  524,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  569,  569,  581,
      583,  564,  564,  464,  460,  451,  449,  569,  581,  583,
      564,  564,  564,  564,  567,  567,  567,  567,  567,  567,
      567,  567,  571,  585,  571,  571,  571,  571,  571,  571,
      571,  571,  585,  587,  448,  446,  444,  443,  441,  439,
      438,  404,  587,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  595,  403,  595,  595,  595,  595,  595,  595,

      595,  595,  599,  395,  599,  599,  599,  599,  599,  599,
      599,  599,  601,  601,  602,  602,  604,  604,  393,  608,
      392,  391,  601,  620,  602,  625,  604,  608,  608,  630,
      620,  620,  632,  625,  625,  389,  388,  630,  630,  387,
      385,  632,  635,  384,  635,  635,  635,  635,  635,  635,
      635,  635,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  651,  355,  651,  651,  651,  651,  651,  651,  651,
      651,  658,  354,  345,  662,  667,  343,  342,  340,  658,
      658,  662,  662,  667,  667,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  681,  338,  685,  337,  335,  333,  332,
      681,  681,  685,  685,  690,  690,  690,  690,  690,  690,
      690,  690,  692,  306,  692,  692,  693,  305,  693,  693,
      693,  693,  693,  693,  695,  695,  695,  696,  696,  696,
      697,  304,  697,  698,  296,  698,  699,  699,  699,  700,
      700,  700,  702,  702,  702,  702,  704,  294,  704,  705,
      705,  706,  706,  706,  707,  707,  707,  708,  708,  708,
      708,  711,  711,  711,  711,  712,  293,  712,  713,  292,
      713,  714,  714,  714,  715,  715,  715,  716,  716,  716,
      716,  718,  290,  718,  719,  289,  719,  720,  720,  720,

      720,  720,  721,  721,  721,  721,  723,  288,  723,  724,
      724,  724,  725,  725,  725,  726,  726,  726,  726,  727,
      727,  727,  727,  727,  728,  728,  728,  728,  730,  286,
      730,  732,  732,  732,  732,  733,  733,  734,  734,  735,
      735,  735,  736,  736,  736,  737,  737,  737,  737,  738,
      738,  738,  738,  739,  264,  739,  740,  263,  740,  741,
      262,  741,  742,  249,  742,  743,  743,  743,  743,  743,
      744,  744,  744,  744,  745,  745,  746,  746,  746,  747,
      747,  747,  748,  748,  748,  748,  749,  749,  749,  749,
      749,  750,  750,  750,  750,  751,  751,  751,  751,  751,

      752,  752,  752,  752,  754,  247,  754,  756,  246,  756,
      758,  758,  758,  758,  759,  759,  759,  760,  760,  760,
      761,  761,  761,  761,  762,  762,  762,  762,  763,  763,
      763,  763,  764,  764,  765,  765,  766,  244,  766,  767,
      242,  767,  768,  241,  768,  769,  221,  769,  770,  770,
      770,  770,  770,  771,  771,  771,  771,  772,  772,  772,
      773,  773,  773,  774,  774,  774,  774,  775,  775,  775,
      775,  775,  776,  776,  776,  776,  777,  777,  777,  777,
      777,  778,  778,  778,  778,  779,  779,  779,  779,  779,
      780,  780,  780,  780,  781,  781,  783,  220,  783,  785,

      219,  785,  787,  787,  787,  787,  788,  788,  788,  789,
      789,  789,  790,  790,  790,  790,  791,  791,  791,  791,
      792,  792,  792,  792,  793,  793,  793,  793,  794,  794,
      795,  795,  796,  218,  796,  797,  216,  797,  798,  215,
      798,  799,  213,  799,  800,  800,  800,  800,  800,  801,
      801,  801,  801,  802,  802,  802,  803,  803,  803,  803,
      804,  804,  804,  804,  804,  805,  805,  805,  805,  806,
      806,  806,  806,  806,  807,  807,  807,  807,  808,  808,
      808,  808,  808,  809,  809,  809,  809,  810,  810,  810,
      810,  810,  811,  811,  811,  811,  812,  812,  814,  205,

      814,  816,  203,  816,  818,  818,  818,  818,  819,  819,
      819,  820,  820,  202,  820,  821,  821,  821,  822,  201,
      822,  823,  823,  823,  823,  824,  199,  824,  825,  825,
      825,  825,  826,  184,  826,  827,  827,  827,  827,  828,
      183,  828,  829,  829,  829,  829,  830,  182,  830,  831,
      831,  831,  831,  832,  832,  833,  833,  834,  181,  834,
      835,  179,  835,  836,  177,  836,  837,  167,  837,  838,
      838,  838,  838,  838,  839,  839,  839,  839,  841,  841,
      841,  842,  842,  842,  843,  843,  165,  843,  844,  844,
      844,  844,  844,  845,  845,  164,  845,  846,  846,  846,

      846,  846,  847,  847,  150,  847,  848,  848,  848,  848,
      848,  849,  849,  149,  849,  850,  850,  850,  850,  850,
      851,  851,  148,  851,  852,  852,  852,  852,  852,  853,
      853,  147,  853,  854,  854,  856,  145,  856,  858,  144,
      858,  860,  142,  860,  861,  861,  861,  861,  862,  141,
      862,  863,  140,  863,  864,  131,  864,  864,  864,  865,
      865,  129,  865,  866,  866,  128,  866,  867,  867,  118,
      867,  868,  868,  117,  868,  869,  869,  116,  869,  870,
      870,  115,  870,  871,  871,  114,  871,  872,  872,  873,
      873,  874,  112,  874,  875,  111,  875,  876,  110,  876,

      877,  108,  877,  878,  878,  878,  878,  878,  879,  879,
      107,  879,  881,   93,  881,  882,  882,   92,  882,  883,
      883,   91,  883,  884,  884,   90,  884,  885,  885,   89,
      885,  886,  886,   87,  886,  887,  887,   86,  887,  888,
      888,   83,  888,  889,  889,  891,   82,  891,  893,   79,
      893,  894,  894,   77,  894,  895,   71,  895,  896,   70,
      896,  897,  897,   67,  897,  898,  898,  899,  899,  900,
       66,  900,  901,   64,  901,  902,  902,   62,  902,  904,
       60,  904,  905,  905,  907,   59,  907,  908,  908,  909,
      909,  910,  910,  911,  911,  912,  912,  913,  913,   58,

       56,   55,   54,   53,   52,   42,   41,   36,   33,   32,
       31,   30,   29,   27,   26,   23,   22,   21,   19,    9,
        7,    5,    4,    3,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "policy.l"
#define INITIAL 0
#line 2 "policy.l"

#include "config.h"
#include "policy/common/policy_utils.hh"
#include <vector>
#include <string>
#include <sstream>
#include "policy_parser.hh"
#include "yacc.yy_policy_parser.cc.h"

#define yylval yy_policy_parserlval
#define yyerror yy_policy_parsererror
#define yyparse yy_policy_parserparse

void yyerror(const char *m);
extern int yyparse(void);

using namespace policy_parser;

// instantiate the globals here.
vector<Node*>* policy_parser::_parser_nodes;
unsigned policy_parser::_parser_lineno;

// try not to pollute
namespace {
	string _last_error;
	Term::BLOCKS _block;
}

#define YY_NO_UNPUT 1
#define STR 1

#line 1463 "lex.yy_policy_parser.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 59 "policy.l"


#line 1617 "lex.yy_policy_parser.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 690 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3425 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 61 "policy.l"
{ yylval.c_str = strdup(yytext);
		  return YY_UINT;
		}  
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 65 "policy.l"
{ yylval.c_str = strdup(yytext);
		  return YY_INT;
		}  
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 69 "policy.l"
BEGIN(STR);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 71 "policy.l"
BEGIN(INITIAL);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "policy.l"
{ yylval.c_str = strdup(yytext); 
		  _parser_lineno += policy_utils::count_nl(yytext);
		  return YY_STR;
		}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 78 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV4;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 83 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV4NET;
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 89 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV6;
		}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 94 "policy.l"
{
		  yylval.c_str = strdup(yytext);
		  return YY_IPV6NET;
		}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 99 "policy.l"
{
		  // the colon is an alias for asignment in action and equality
		  // in the source / dest blocks.
		  if (_block == Term::ACTION)
		  	return YY_ASSIGN;
		  else
		  	return YY_EQ;
		}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 108 "policy.l"
return YY_LPAR;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 109 "policy.l"
return YY_RPAR;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 111 "policy.l"
return YY_EQ; 
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 112 "policy.l"
return YY_NE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 113 "policy.l"
return YY_LE;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 114 "policy.l"
return YY_GE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 115 "policy.l"
return YY_LT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 116 "policy.l"
return YY_GT;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 118 "policy.l"
return YY_AND;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 119 "policy.l"
return YY_OR;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 120 "policy.l"
return YY_XOR;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 121 "policy.l"
return YY_NOT;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 123 "policy.l"
return YY_ADD;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 124 "policy.l"
return YY_SUB;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 125 "policy.l"
return YY_MUL;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 127 "policy.l"
return YY_ASSIGN;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 129 "policy.l"
return YY_ACCEPT;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 130 "policy.l"
return YY_REJECT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 132 "policy.l"
return YY_SET;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 133 "policy.l"
return YY_REGEX;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 135 "policy.l"
return YY_PROTOCOL;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 137 "policy.l"
{ yylval.c_str = strdup(yytext);
					  return YY_ID;
					}  
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 141 "policy.l"
return YY_SEMICOLON;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 143 "policy.l"
/* eat blanks */
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 145 "policy.l"
_parser_lineno++;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 147 "policy.l"
{ yyerror("Unknown character"); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 149 "policy.l"
ECHO;
	YY_BREAK
#line 1913 "lex.yy_policy_parser.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 690 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 690 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 689);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 149 "policy.l"


void yyerror(const char *m)
{
        ostringstream oss;
        oss << "Error on line " <<  _parser_lineno << " near (";

	for(int i = 0; i < yyleng; i++)
		oss << yytext[i];
	oss << "): " << m;

        _last_error = oss.str();
}

// Everything is put in the lexer because of YY_BUFFER_STATE...
int 
policy_parser::policy_parse(vector<Node*>& outnodes, const Term::BLOCKS& block, 
			    const string& conf, string& outerr)
{

        YY_BUFFER_STATE yybuffstate = yy_scan_string(conf.c_str());

        _last_error = "No error";
        _parser_nodes = &outnodes;
        _parser_lineno = 1;
	_block = block;

        int res = yyparse();
        
        yy_delete_buffer(yybuffstate);
        outerr = _last_error;
        
        return res;
}
