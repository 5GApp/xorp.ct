dnl -*- sh -*-
dnl
dnl $XORP: xorp/configure.in,v 1.188 2007/04/11 00:58:32 pavlin Exp $
dnl
dnl ---------------------------------------------------------------------------
dnl Process this file with autoconf to produce a configure script.
dnl ---------------------------------------------------------------------------
dnl
dnl	Ordering:
dnl	  Autoconf setup
dnl	  Autoheader setup
dnl	  Automake setup
dnl	  Installation prefixes
dnl	  Operating system probing
dnl	  Toolchain probing
dnl	  Libtool setup
dnl	  Command-line options
dnl	  Additional tool probing
dnl	  Check for libraries
dnl	  Check for header files and types
dnl	  Check for typedefs and structures
dnl	  Check for library functions
dnl	  Check for system services
dnl	  Check for compiler characteristics
dnl	  Setup compiler flags
dnl	  Output (e.g., 'AC_OUTPUT([FILE...])', etc.)
dnl
dnl To disable config.cache loading and saving, redefine the following two
dnl macros _before_ calling AC_INIT, but make sure to keep the trailing dnl.
dnl
dnl define([AC_CACHE_LOAD], )dnl
dnl define([AC_CACHE_SAVE], )dnl

dnl ---------------------------------------------------------------------------
dnl Boilerplate
dnl ---------------------------------------------------------------------------

AC_INIT(xorp, [1.5-WIP], [feedback@xorp.org])
AC_PREREQ(2.61)
AC_REVISION([$XORP: xorp/configure.in,v 1.188 2007/04/11 00:58:32 pavlin Exp $])
AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_TARGET
AC_CONFIG_SUBDIRS(cli/libtecla)

builtin(include, config/ahxorp.m4)
AC_CONFIG_HEADERS(config.h)

dnl ---------------------------------------------------------------------------
dnl automake options
dnl ---------------------------------------------------------------------------

AM_INIT_AUTOMAKE(xorp, 1.5-WIP)
dnl AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE
AC_CACHE_SAVE

dnl ---------------------------------------------------------------------------
dnl Set host, host_alias, host_cpu, host_vendor, host_os
dnl ---------------------------------------------------------------------------

case "${host_os}" in
    bsdi* )
	AC_DEFINE(HOST_OS_BSDI, 1, [Define to 1 if the OS is BSDI])
	AC_DEFINE(HOST_OS_NAME, "BSDI", [Define the OS name])
    ;;
    darwin* )
	AC_DEFINE(HOST_OS_MACOSX, 1, [Define to 1 if the OS is MacOS X])
	AC_DEFINE(HOST_OS_NAME, "MacOS X", [Define the OS name])
    ;;
    dragonfly* )
	AC_DEFINE(HOST_OS_DRAGONFLYBSD, 1, [Define to 1 if the OS is DragonFlyBSD])
	AC_DEFINE(HOST_OS_NAME, "DragonFlyBSD", [Define the OS name])
    ;;
    freebsd* )
	AC_DEFINE(HOST_OS_FREEBSD, 1, [Define to 1 if the OS is FreeBSD])
	AC_DEFINE(HOST_OS_NAME, "FreeBSD", [Define the OS name])
    ;;
    linux* )
	AC_DEFINE(HOST_OS_LINUX, 1, [Define to 1 if the OS is Linux])
	AC_DEFINE(HOST_OS_NAME, "Linux", [Define the OS name])
    ;;
    netbsd* )
	AC_DEFINE(HOST_OS_NETBSD, 1, [Define to 1 if the OS is NetBSD])
	AC_DEFINE(HOST_OS_NAME, "NetBSD", [Define the OS name])
    ;;
    openbsd* )
	AC_DEFINE(HOST_OS_OPENBSD, 1, [Define to 1 if the OS is OpenBSD])
	AC_DEFINE(HOST_OS_NAME, "OpenBSD", [Define the OS name])
    ;;
    solaris* )
	AC_DEFINE(HOST_OS_SOLARIS, 1, [Define to 1 if the OS is Solaris])
	AC_DEFINE(HOST_OS_NAME, "Solaris", [Define the OS name])
    ;;
    *cygwin )
	AC_MSG_ERROR([Cygwin is not (and will not be) supported.])
    ;;
    *mingw* )
	AC_DEFINE(HOST_OS_WINDOWS, 1, [Define to 1 if the OS is Windows])
	AC_DEFINE(HOST_OS_NAME, "Windows", [Define the OS name])
	_USING_WINDOWS="1"
	dnl This has to be here to stop the ssize_t test from telling lies.
	dnl Also, <routprot.h> and friends need the MPR version to be defined
	dnl before inclusion.
	CPPFLAGS="${CPPFLAGS} -D_NO_OLDNAMES -DMPR50=1"
    ;;
esac
AC_CACHE_SAVE

dnl ---------------------------------------------------------------------------
dnl Set the default installation prefix (and deal with Windows correctly)
dnl ---------------------------------------------------------------------------

dnl This macro is always expanded once, unconditionally.
dnl Therefore it needs to be explicitly overridden on Windows.
AC_PREFIX_DEFAULT([/usr/local/xorp])

if test "${_USING_WINDOWS}" = "1"; then
	ac_default_prefix="C:/XORP"
	_REAL_BUILD_ROOT="`pwd -W`"
	_REAL_SRC_ROOT="`cd ${srcdir} && pwd -W`"
else
	_REAL_BUILD_ROOT="${PWD}"
	_REAL_SRC_ROOT="`cd ${srcdir} && echo ${PWD}`"
fi

test "$prefix" = NONE && prefix="${ac_default_prefix}"
AC_DEFINE_UNQUOTED(XORP_ROOT, "${prefix}",
		   [Define the path to the root of the XORP installation])
AC_DEFINE_UNQUOTED(XORP_BUILD_ROOT, "${_REAL_BUILD_ROOT}",
		   [Define path to the top-level build directory])
AC_DEFINE_UNQUOTED(XORP_INSTALL_ROOT, "${prefix}",
		   [Define the path to the root of the XORP installation])
# We'd like to use ac_abs_srcdir, except it's not available just here.
AC_DEFINE_UNQUOTED(XORP_SRC_ROOT, "${_REAL_SRC_ROOT}",
		   [Define path to the top-level source directory])

dnl ---------------------------------------------------------------------------
dnl Compiler probing and basic tools (libtool prerequisites)
dnl ---------------------------------------------------------------------------

AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_INSTALL
AC_PROG_LN_S

AC_LANG(C++)

AC_CACHE_SAVE

dnl
dnl Include the macros for testing compiler-supported command-line options
dnl
builtin(include, config/compiler_flags.m4)

dnl ---------------------------------------------------------------------------
dnl  Get project-specific macros
dnl ---------------------------------------------------------------------------

builtin(include, config/acxorp.m4)

dnl ---------------------------------------------------------------------------
dnl libtool options
dnl ---------------------------------------------------------------------------

AC_DISABLE_SHARED
AC_DISABLE_FAST_INSTALL
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)
AC_CACHE_SAVE

dnl ---------------------------------------------------------------------------
dnl Command line options
dnl ---------------------------------------------------------------------------

dnl -----------------------------------------
dnl --disable-debug (XXX: enabled by default)
dnl -----------------------------------------
AC_ARG_ENABLE([debug],
	      AC_HELP_STRING([--disable-debug],
			     [disable compiler debug information]),
	      [],
	      [enable_debug=yes;])

dnl -----------------------------------------
dnl --enable-debug-msgs
dnl -----------------------------------------
AC_ARG_ENABLE([debug-msgs],
	      AC_HELP_STRING([--enable-debug-msgs],
			     [enable debug messages]))

dnl -----------------------------------------
dnl --enable-debug-linker-maps
dnl -----------------------------------------
AC_ARG_ENABLE([debug-linker-maps],
	      AC_HELP_STRING([--enable-debug-linker-maps],
			     [enable linker map file output to stderr]))

dnl -----------------------------------------
dnl --enable-debug-fnames (GCC)
dnl -----------------------------------------
AC_ARG_ENABLE([debug-fnames],
	      AC_HELP_STRING([--enable-debug-fnames],
			     [enable function names in debug messages (requires GCC)]))

dnl -----------------------------------------
dnl --enable-stl-debug (GCC)
dnl -----------------------------------------
AC_ARG_ENABLE([stl-debug],
	      AC_HELP_STRING([--enable-stl-debug],
			     [enable STL debugging (requires GCC)]))

dnl -----------------------------------------
dnl --enable-optimize
dnl -----------------------------------------
AC_ARG_ENABLE([optimize],
	      AC_HELP_STRING([--enable-optimize],
			     [enable compiler optimizations]))

dnl -----------------------------------------
dnl --enable-profile
dnl -----------------------------------------
AC_ARG_ENABLE([profile],
	      AC_HELP_STRING([--enable-profile],
			     [enable profiling]))

dnl -----------------------------------------
dnl --disable-compiler-pipe (XXX: enabled by default)
dnl -----------------------------------------
AC_ARG_ENABLE([compiler-pipe],
	      AC_HELP_STRING([--disable-compiler-pipe],
			     [disable compiler's -pipe compilation option]),
	      [],
	      [enable_compiler_pipe=yes;])

dnl -----------------------------------------
dnl --enable-callback-debug
dnl -----------------------------------------
AC_ARG_ENABLE([callback-debug],
	      AC_HELP_STRING([--enable-callback-debug],
			     [enable callback debugging]),
	      AC_DEFINE(DEBUG_CALLBACKS, 1,
			[Define to enable callback debugging]))

dnl -----------------------------------------
dnl --disable-ipv6 (XXX: enabled by default)
dnl -----------------------------------------
AC_ARG_ENABLE([ipv6],
	      AC_HELP_STRING([--disable-ipv6],
			     [disable IPv6 support]),
	      [],
	      [enable_ipv6=yes;])

dnl -----------------------------------------
dnl --enable-sim
dnl -----------------------------------------
TRY_USE_SIM=false
AC_ARG_ENABLE([sim],
	      AC_HELP_STRING([--enable-sim],
			     [enable simulator (unimplemented)]),
if test "${enable_sim}" = "yes"; then
	TRY_USE_SIM=true;
else
	TRY_USE_SIM=false;
fi
)
AM_CONDITIONAL(TRY_USE_SIM, test "${enable_sim}" = "yes")

dnl -----------------------------------------
dnl --disable-advanced-multicast-api (XXX: enabled by default)
dnl -----------------------------------------
AC_ARG_ENABLE([advanced-multicast-api],
	      AC_HELP_STRING([--disable-advanced-multicast-api],
			     [disable use of the advanced multicast API]),
	      [],
	      [enable_advanced_multicast_api=yes;])

if test "${enable_advanced_multicast_api}" = "yes" ; then
	AC_DEFINE(ENABLE_ADVANCED_MULTICAST_API, 1,
		  [Define to 1 to enable advanced multicast API (if supported)])
fi

dnl -----------------------------------------
dnl --with-dmalloc
dnl -----------------------------------------
dnl XXX: XR_WITH_DMALLOC_DIR (a local modified version of AM_WITH_DMALLOC)
dnl is specified later, so it will overwrite -ld
builtin(include, config/dmalloc.m4)

dnl -----------------------------------------
dnl --with-openssl
dnl -----------------------------------------
AC_ARG_WITH([openssl],
	    AC_HELP_STRING([--with-openssl],
			   [specify path to OpenSSL installation root]),
	    [ xr_openssl_prefix="$withval" ])

dnl -----------------------------------------
dnl --with-snmp
dnl -----------------------------------------
AC_ARG_WITH([snmp],
	    AC_HELP_STRING([--with-snmp],
			   [build XORP MIBs for Net-SNMP]),
	 [ snmp="yes";
	   MIBS="mibs";
	   AC_CONFIG_SUBDIRS(mibs)
	 ],
	 [ snmp="no";
	   MIBS="";
	 ]
)
AC_SUBST(MIBS)

dnl -----------------------------------------
dnl --with-path-to-snmpd
dnl -----------------------------------------
AC_ARG_WITH([path-to-snmpd],
	    AC_HELP_STRING([--with-path-to-snmpd=DIR],
			   [specify path to the snmpd executable]),
	    [snmpd=${withval}/snmpd;],
	    [snmpd="not_found";]
)

dnl -----------------------------------------
dnl --with-path-to-net-snmp-config
dnl -----------------------------------------
AC_ARG_WITH([path-to-net-snmp-config],
	    AC_HELP_STRING([--with-path-to-net-snmp-config=DIR],
			   [specify path to the net-snmp-config executable]),
	    [net_snmp_config_dir=${withval};
	     net_snmp_config=${net_snmp_config_dir}/net-snmp-config;],
	    [net_snmp_config_dir="";
	     net_snmp_config="net-snmp-config";]
)

dnl ---------------------------------------------------------------------------
dnl Additional tool probes
dnl ---------------------------------------------------------------------------

dnl -----------------------------------------
dnl CPP GNU variable arguments
dnl -----------------------------------------

AC_CACHE_CHECK(
	[whether preprocessor supports GNU variadic macros],
	xorp_cv_cpp_gnu_va_args,
	AC_TRY_CPP(
		[
			#define SOME_PRINTF(args...) printf(args)
			SOME_PRINTF("hello %s %d", "world", '\n');
		],
		xorp_cv_cpp_gnu_va_args=yes,
		xorp_cv_cpp_gnu_va_args=no
	)
)
if test "${xorp_cv_cpp_gnu_va_args}" = "yes" ; then
	AC_DEFINE(CPP_SUPPORTS_GNU_VA_ARGS, 1,
 [Define to 1 if the preprocessor supports GNU style variadic macros])
fi

AC_CACHE_CHECK(
	[whether preprocessor supports C99 variadic macros],
	xorp_cv_cpp_c99_va_args,
	AC_TRY_CPP(
		[
			#define SOME_PRINTF(foo, ...) printf(args, __VA_ARGS__)
			SOME_PRINTF("hello %s %d", "world", '\n');
		],
		xorp_cv_cpp_c99_va_args=yes,
		xorp_cv_cpp_c99_va_args=no
	)
)
if test "${xorp_cv_cpp_c99_va_args}" = "yes" ; then
	AC_DEFINE(CPP_SUPPORTS_C99_VA_ARGS, 1,
 [Define to 1 if the preprocessor supports C99 style variadic macros])
fi

AC_CACHE_CHECK([if GNU make is installed], xorp_cv_gmake_name,
		for g in ${GMAKE} make gmake gnumake; do
		  if ($g -version) < /dev/null > /dev/null 2>&1 ; then
		    GMAKE_NAME="$g"
		    break
		  fi
		done
		xorp_cv_gmake_name=${GMAKE_NAME})

dnl -----------------------------------------
dnl Python related checks
dnl -----------------------------------------

dnl
dnl XXX: A better mechanism for Python-related checks.
dnl This mechanism doesn't work for older automake version (e.g., 1.5),
dnl and should be enabled after we move to newer automake (e.g., 1.9).
dnl
dnl AM_PATH_PYTHON(2.0,			dnl Min. required Python version
dnl   [PYTHON_BUILD=''],
dnl   [PYTHON_BUILD="#"])
dnl AC_SUBST(PYTHON_BUILD)

dnl
dnl The older mechanism for Python-related checks. Should be removed
dnl after the newer AM_PATH_PYTHON() mechanism is enabled (see above).
dnl
AC_CHECK_PROGS(PYTHON, python2.2 python2 python, "NO_PYTHON")
if test "${PYTHON}" != "NO_PYTHON" ; then
  AC_CACHE_CHECK(
    [python version 2.0 or above], xorp_python_good,
    changequote(<<,>>)dnl
    python_version=`$PYTHON -c 'import sys; print sys.version[[:3]]' | tr -cd '[[:digit:]]'`
    changequote([,])dnl
    if test 0${python_version} -ge 20 ; then
      xorp_python_good="yes"
    else
      xorp_python_good="no"
    fi
  )
fi
PYTHON_BUILD="#"
if test "${xorp_python_good}" = "yes" ; then
   PYTHON_BUILD=''
fi
AC_SUBST(PYTHON_BUILD)
AC_SUBST(PYTHON)
dnl
dnl End of older Python-related mechanism
dnl

dnl ---------------------------------------------------------------------------
dnl OpenSSL (Strictly OpenSSL MD5 implementation)
dnl ---------------------------------------------------------------------------

fail_openssl()
{
	echo "Could not find part of OpenSSL or one it's components in $1"
	echo "Use --with-openssl=DIR to specify OpenSSL installation root."
	exit 1
}

if test "${xr_openssl_prefix}" = "" ; then
# User has not specified an OpenSSL prefix, may be in cache, otherwise take
# a guess
    AC_CACHE_CHECK(
	[OpenSSL installation prefix],
	xr_cv_openssl_prefix,
	[
	    # Prefer base install over local install, assume base if not found
	    xorp_openssl_found="no"
	    xorp_openssl_dirs="/usr /usr/local /usr/local/ssl /mingw /gnuwin32 /opt /usr/sfw"
	    for xr_cv_openssl_prefix in ${xorp_openssl_dirs} ; do
		if test -d ${xr_cv_openssl_prefix}/include/openssl; then
		    xorp_openssl_found="yes"
		    break
		fi
	    done
	    if test "${xorp_openssl_found}" != "yes" ; then
		fail_openssl "${xorp_openssl_dirs}"
	    fi
	])
elif test "${xr_openssl_prefix}" != "${xr_cv_openssl_prefix}"; then

    # User has specified a new OpenSSL prefix, flush cache state of
    # header files and libraries that we care about to force a
    # re-check.
    unset ac_cv_header_openssl_md5_h
    unset ac_cv_lib_crypto_MD5_Init
    unset xr_cv_openssl_prefix

    # This cache check is doomed to fail because we unset variable,
    # but use it for consistent looking output.
    AC_CACHE_CHECK([OpenSSL installation prefix],
		   xr_cv_openssl_prefix,
		   xr_cv_openssl_prefix="${xr_openssl_prefix}")
fi

if test -d ${xr_cv_openssl_prefix}/include/openssl; then
    if test "${xr_cv_openssl_prefix}" != "/usr"; then
	CPPFLAGS="${CPPFLAGS} -I${xr_cv_openssl_prefix}/include"
	LIBS="${LIBS} -L${xr_cv_openssl_prefix} -L${xr_cv_openssl_prefix}/lib"
    fi
    AC_CHECK_HEADER(openssl/md5.h, , fail_openssl "${xr_cv_openssl_prefix}")
    AC_CHECK_LIB(crypto, MD5_Init, , fail_openssl "${xr_cv_openssl_prefix}")
else
    fail_openssl "${xr_cv_openssl_prefix}"
fi

dnl ---------------------------------------------------------------------------
dnl Check for libraries
dnl ---------------------------------------------------------------------------

dnl XXX Into C to avoid name mangling problems when checking libraries
AC_LANG_PUSH(C)

AC_SEARCH_LIBS(socket, socket)
AC_SEARCH_LIBS(inet_addr, nsl)
AC_SEARCH_LIBS(dlopen, dl)
AC_SEARCH_LIBS(hstrerror, resolv)
AC_SEARCH_LIBS(regcomp, pcreposix, , , [-lpcre])

dnl
dnl Select the optional CLI-related curses library
dnl
CLI_CURSES_LIB=""
AC_CHECK_LIB(curses, tigetstr, [CLI_CURSES_LIB="-lcurses"], [
  AC_CHECK_LIB(ncurses, tigetstr, [CLI_CURSES_LIB="-lncurses"], [
    AC_CHECK_LIB(curses, tgetstr, [CLI_CURSES_LIB="-lcurses"])
  ])
])
AC_SUBST(CLI_CURSES_LIB)

dnl Replace main with a function in -lc:
dnl AC_CHECK_LIB(c, main)
dnl XXX: XR_WITH_DMALLOC_DIR must be after -lc otherwise it won't have efect
dnl XXX: XR_WITH_DMALLOC_DIR is a local modified version of AM_WITH_DMALLOC
XR_WITH_DMALLOC_DIR
dnl Replace main with a function in -lutil:
dnl AC_CHECK_LIB(util, main)
dnl AC_CHECK_LIB(crypt, crypt)

AC_LANG_POP(C)

dnl ---------------------------------------------------------------------------
dnl Check for header files and types
dnl ---------------------------------------------------------------------------

dnl
dnl Check for ANSI C Runtime Environment.
dnl
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h])

dnl
dnl Check for POSIX 1003.1 headers.
dnl
AC_CHECK_HEADERS([glob.h grp.h pwd.h regex.h termios.h sys/cdefs.h sys/errno.h sys/ioctl.h sys/resource.h sys/select.h sys/signal.h sys/socket.h sys/stat.h sys/syslog.h sys/time.h sys/types.h sys/uio.h sys/un.h sys/utsname.h sys/wait.h])
dnl XXX: <sys/mount.h> might need <sys/param.h>
AC_CHECK_HEADERS([sys/param.h sys/mount.h], [], [],
[[
#ifdef HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif
]])
AC_HEADER_TIME
AC_HEADER_STAT

dnl
dnl Check for the PCRE POSIX compatibility header (equivalent to regex.h).
dnl
AC_CHECK_HEADERS([pcreposix.h])

dnl
dnl Check for headers commonly found on UNIX systems (BSD, SYSV etc).
dnl
AC_CHECK_HEADERS([paths.h stropts.h sysexits.h inet/nd.h sys/param.h])
AC_HEADER_SYS_WAIT

dnl
dnl Check for typical BSD-like networking stack header files.
dnl
AC_CHECK_HEADERS([ifaddrs.h netdb.h arpa/inet.h arpa/telnet.h net/if_dl.h net/if_media.h net/if_types.h netinet/in.h netinet/in_systm.h netinet/tcp.h sys/sockio.h])
dnl XXX: <net/if.h>, <net/if_arp.h> and <net/route.h> might need <sys/socket.h>
dnl XXX: <net/if_arp.h> and <net/route.h> might need <sys/types.h>
AC_CHECK_HEADERS([sys/types.h sys/socket.h net/if.h net/if_arp.h net/route.h], [], [],
[[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
]])
dnl XXX: <net/if_var.h> might need <sys/socket.h> and <net/if.h>
AC_CHECK_HEADERS([sys/socket.h net/if.h net/if_var.h], [], [],
[[
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#ifdef HAVE_NET_IF_H
#include <net/if.h>
#endif
]])
dnl XXX: <netinet/in_var.h> might need <sys/socket.h> <net/if.h> <net/if_var.h>
dnl and <netinet/in.h>
AC_CHECK_HEADERS([sys/socket.h net/if.h net/if_var.h netinet/in.h netinet/in_var.h], [], [],
[[
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#ifdef HAVE_NET_IF_H
#include <net/if.h>
#endif
#ifdef HAVE_NET_IF_VAR_H
#include <net/if_var.h>
#endif
#ifdef HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
]])
dnl XXX: <netinet/ip.h> might need <sys/types.h> <netinet/in.h>
dnl and <netinet/in_systm.h>
AC_CHECK_HEADERS([sys/types.h netinet/in.h netinet/in_systm.h netinet/ip.h], [], [],
[[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
#ifdef HAVE_NETINET_IN_SYSTM_H
#include <netinet/in_systm.h>
#endif
]])

dnl
dnl Check for BSD-specific header files.
dnl
AC_CHECK_HEADERS([sys/sysctl.h])
dnl XXX: <sys/linker.h> might need <sys/param.h>
AC_CHECK_HEADERS([sys/param.h sys/linker.h], [], [],
[[
#ifdef HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif
]])

dnl
dnl Check for Linux-specific header files.
dnl
AC_CHECK_HEADERS([linux/ethtool.h linux/rtnetlink.h linux/types.h linux/sockios.h linux/mroute6.h])

dnl
dnl Check for Windows-specific header files.
dnl
if test "${_USING_WINDOWS}" = "1"
then
AC_CHECK_HEADERS([windows.h winsock2.h ws2tcpip.h iphlpapi.h ipifcons.h iptypes.h iprtrmib.h routprot.h rtinfo.h rtmv2.h mgm.h mprapi.h mprerror.h stm.h process.h])
fi

dnl
dnl Check for Ethernet-related types and functions.
dnl
AC_CHECK_HEADERS([sys/ethernet.h net/ethernet.h net/if.h net/if_ether.h netinet/in.h netinet/ether.h])
dnl XXX: <netinet/if_ether.h> might need <sys/types.h> <sys/socket.h>
dnl and <netinet/in.h>
AC_CHECK_HEADERS([sys/types.h sys/socket.h netinet/in.h netinet/if_ether.h], [], [],
[[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#ifdef HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
]])

dnl
dnl Check for headers where 'struct ether_addr' is typically defined.
dnl
dnl XXX: It is preferable to use C instead of C++, because in DragonFlyBSD-1.6
dnl file <machine/atomic.h> (indirectly included by <netinet/if_ether.h>)
dnl is not C++ safe.
dnl
AC_LANG_PUSH(C)
AC_CHECK_HEADER(sys/types.h,
  [test_sys_types_h="#include <sys/types.h>"],
  [test_sys_types_h=""])
AC_CHECK_HEADER(sys/socket.h,
  [test_sys_socket_h="#include <sys/socket.h>"],
  [test_sys_socket_h=""])
AC_CHECK_HEADER(sys/ethernet.h,
  [test_sys_ethernet_h="#include <sys/ethernet.h>"],
  [test_sys_ethernet_h=""])
AC_CHECK_HEADER(net/ethernet.h,
  [test_net_ethernet_h="#include <net/ethernet.h>"],
  [test_net_ethernet_h=""])
dnl File <net/if.h> is needed by <netinet/if_ether.h> on Solaris-10
AC_CHECK_HEADER(net/if.h,
  [test_net_if_h="#include <net/if.h>"],
  [test_net_if_h=""])
AC_CHECK_HEADER(net/if_ether.h,
  [test_net_if_ether_h="#include <net/if_ether.h>"],
  [test_net_if_ether_h=""])
dnl File <netinet/in.h> is needed by <netinet/if_ether.h> on FreeBSD-4.10
AC_CHECK_HEADER(netinet/in.h,
  [test_netinet_in_h="#include <netinet/in.h>"],
  [test_netinet_in_h=""])
AC_CHECK_HEADER(netinet/if_ether.h,
  [test_netinet_if_ether_h="#include <netinet/if_ether.h>"],
  [test_netinet_if_ether_h=""])
AC_CHECK_HEADER(netinet/ether.h,
  [test_netinet_ether_h="#include <netinet/ether.h>"],
  [test_netinet_ether_h=""])
test_ethernet_header_files=["
${test_sys_types_h}
${test_sys_socket_h}
${test_sys_ethernet_h}
${test_net_ethernet_h}
${test_net_if_h}
${test_net_if_ether_h}
${test_netinet_in_h}
${test_netinet_if_ether_h}
${test_netinet_ether_h}
"]
AC_CHECK_TYPES([struct ether_addr], , , [${test_ethernet_header_files}])
AC_CHECK_FUNCS([ether_ntoa ether_aton])
AC_LANG_POP(C)

dnl
dnl Tests for presentation and name lookup related functions.
dnl
builtin(include, config/acinet.m4)


dnl ---------------------------------------------------------------------------
dnl Check for standard integer size types.
dnl The defaults are only valid on some systems so we hope that
dnl <inttypes.h> or <stdint.h> exists when they're wrong.
dnl ---------------------------------------------------------------------------
AC_CHECK_HEADERS([inttypes.h stdint.h])
AC_CHECK_HEADER(inttypes.h,
  [test_inttypes_h="#include <inttypes.h>"],
  [test_inttypes_h=""])
AC_CHECK_HEADER(stdint.h,
  [test_stdint_h="#include <stdint.h>"],
  [test_stdint_h=""])
test_standard_size_types_header_files=["
${test_inttypes_h}
${test_stdint_h}
"]
AC_CHECK_TYPES([int8_t, int16_t, int32_t, int64_t,
		uint8_t, uint16_t, uint32_t, uint64_t], , ,
  [${test_standard_size_types_header_files}])

dnl 
dnl TODO: the following two macros cause autoconf to complain.
dnl 
AC_C_BIGENDIAN
AC_C_CHAR_UNSIGNED

dnl ---------------------------------------------------------------------------
dnl Check for typedefs and structures
dnl ---------------------------------------------------------------------------

AC_STRUCT_TM
XR_TYPE_SIG_T
AC_TYPE_MODE_T
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL

AC_CHECK_TYPE([uid_t], ,
  [AC_DEFINE(NEED_UID_T, 1,
	     [Define to 1 if your system does not define uid_t])])

AC_CHECK_TYPE([ssize_t], ,
  [AC_DEFINE(NEED_SSIZE_T, 1,
	     [Define to 1 if your system does not define ssize_t])],
[
#include <sys/types.h>
])

dnl XXX move this above
AC_HEADER_TIOCGWINSZ

dnl XXX needed by cli code. C90
AC_FUNC_STRFTIME

dnl XXX needed by libxipc. C99
AC_FUNC_STRTOD

dnl XXX needed in many places it shouldn't be
AC_FUNC_FORK

dnl XXX needed in router manager
AC_CHECK_FUNCS([realpath])

dnl XXX We have a library check but we need to know if the function exists.
AC_CHECK_FUNCS([hstrerror])

dnl XXX The autoconf 2.59 generated test for random() fails indiscriminately.
dnl We need to manually break out detection of the function.
if test ! "${_USING_WINDOWS}"
then
   AC_DEFINE(HAVE_RANDOM, 1,
             [Define to 1 if you have the `random' function.])
fi

dnl
dnl XXX: This is a hack. Look for getopt in unistd.h by grepping for it.
dnl If it's not there, then look for the getopt.h header file.
dnl This assumes that the system's getopt declaration comes before the GNU one,
dnl if getopt.h is being picked up from a GNU C library include directory.
dnl Note that the HAVE_DECL_GETOPT definition might not be used elsewhere,
dnl but is used here as a guard against checking for <getopt.h>.
dnl
dnl For Windows, we always force HAVE_GETOPT_H to be defined so that it
dnl gets included.
dnl
if test ! "${_USING_WINDOWS}"
then
 AC_EGREP_HEADER(getopt, unistd.h, xr_cv_unistd_getopt=yes)
 if test "${xr_cv_unistd_getopt}" = "yes"
 then
    AC_DEFINE(HAVE_DECL_GETOPT, 1,
	      [Define to 1 if system getopt() is in unistd.h])
 else
    AC_CHECK_HEADERS([getopt.h])
 fi
else
    AC_DEFINE(HAVE_GETOPT_H, 1,
	      [Define to 1 if you have the <getopt.h> header file.])
fi

dnl ---------------------------------------------------------------------------
dnl Check for library functions
dnl ---------------------------------------------------------------------------

AC_CHECK_FUNCS([strerror])
AC_CHECK_FUNCS([getifaddrs])
AC_CHECK_FUNCS([if_nametoindex])
AC_CHECK_FUNCS([if_indextoname])
AC_CHECK_FUNCS([uname])
AC_CHECK_FUNCS([strptime])

dnl ---------------------------------------------------------------------------
dnl Misc. other system-related checks
dnl ---------------------------------------------------------------------------

dnl Check whether the system has va_copy()
AC_LANG_PUSH(C)
AC_MSG_CHECKING(whether the build environment has va_copy() support)
AC_TRY_LINK([
#include <stdio.h>
#include <stdarg.h>

/*
 * XXX: If we are using the autoconf macros to test-compile or test-link,
 * the main body we are trying to compile/link is automatically wrapped
 * within "main() { ... }", hence we have to move the foo() function to the
 * section with the header files.
 */
void
foo(const char *format, ...)
{
    va_list ap, ap_copy;

    va_start(ap, format);
    va_copy(ap_copy, ap);
    va_end(ap);
}
],
[
{
    foo("%s %s", "my_foo", "my_bar");
    return (0);
}
],
  [AC_DEFINE(HAVE_VA_COPY, 1,
	[Define to 1 if the host has va_copy() support in the build environment])
   AC_MSG_RESULT(yes)],
 [AC_MSG_RESULT(no)])
AC_LANG_POP(C)

dnl ---------------------------------------------------------------------------
dnl Check for system services
dnl ---------------------------------------------------------------------------

dnl
dnl Socket implementation checks
dnl
builtin(include, config/acsocket.m4)

dnl
dnl IPv4 stack checks
dnl
builtin(include, config/acipv4.m4)

dnl
dnl IPv6 stack checks
dnl
if test ! "${_USING_WINDOWS}"
then
builtin(include, config/acipv6.m4)
fi

dnl
dnl Advanced Multicast API checks
dnl
builtin(include, config/acipmrt.m4)

dnl
dnl Firewall code checks
dnl
builtin(include, config/acfirewall.m4)

dnl
dnl Linux-specific checks
dnl
builtin(include, config/aclinux.m4)

dnl
dnl Interface configuration method checks
dnl
builtin(include, config/acifconf.m4)


dnl ---------------------------------------------------------------------------
dnl utils/flower_malloc related
dnl ---------------------------------------------------------------------------

dnl flower_malloc in utils is an interposer and is only known to
dnl work on systems supporting -shared.  AFAICT this needs some work for
dnl a real test.  As a stop gap, we assume that if we are on *BSD or Linux
dnl things work okay.  Only known failure case is OS X.

case "${host_os}" in
    *bsd*)  FLOWER_MALLOC=flower_malloc ;;
    linux*) FLOWER_MALLOC=flower_malloc ;;
    *) ;;
esac
AC_SUBST(FLOWER_MALLOC)

dnl ---------------------------------------------------------------------------
dnl Debug flags
dnl ---------------------------------------------------------------------------

if test "${enable_debug_msgs}" = "yes" ; then
	AC_DEFINE(DEBUG_LOGGING_GLOBAL, 1,
		[Define to 1 to enable globally debug messages output])
fi

dnl ---------------------------------------------------------------------------
dnl Check for compiler characteristics
dnl ---------------------------------------------------------------------------

dnl ---------------------------------------------------------------------------
dnl Check whether Intel C++ compiler is used
dnl ---------------------------------------------------------------------------
AC_MSG_CHECKING([whether we are using the Intel compiler])
AC_EGREP_CPP([yes],
    [
#if defined __INTEL_COMPILER
yes
#endif
    ],
    [AC_MSG_RESULT([yes]); ICC="yes"],
    [AC_MSG_RESULT([no]); ICC="no"]
)

dnl -----------------------------------------
dnl GCC-specific warning flags
dnl -----------------------------------------

if test "${GCC}" = "yes" ; then
	dnl
	dnl Filter-out the "-g" flag
	dnl
	CFLAGS=`echo $CFLAGS |  sed 's/-g//g'`
	CXXFLAGS=`echo $CXXFLAGS |  sed 's/-g//g'`

	dnl
	dnl If debugging is enabled, try to add the "-g" flag
	dnl
	if test "${enable_debug}" = "yes" ; then
		XR_TRY_ADD_CFLAGS("-g")
		XR_TRY_ADD_CXXFLAGS("-g")
	fi

	dnl
	dnl TODO: add -ansi -pedantic
	dnl XXX: Flag -Wtraditional is not recommended for C, because:
	dnl	- On FreeBSD-4.5 macros like IN_CLASSA(i) from netinet/in.h
	dnl	  create a warning for gcc 2.95.3
	dnl	- On Linux RedHat 7.2, #elif creates a warning for gcc 2.96
	dnl
	dnl XXX: Flag -Wnon-const-format is not included, because it appears
	dnl	 to exist only on earlier versions of gcc (e.g., gcc-2.95.x),
	dnl	 and only on FreeBSD, but not on Linux. In addition, this flag
	dnl	 appears to be problematic, because if it is enabled we cannot
	dnl	 use statements like "vfprintf(stderr, fmt, ap);" where "fmt"
	dnl	 is a variable (e.g., defined as "const char *").
	dnl
	dnl XXX: For extra debugging, the following g++ flag may be enabled
	dnl	 and added to CXXFLAGS:
	dnl	 -D_GLIBCXX_DEBUG
	dnl
	dnl XXX: Intel compiler, although tries to mimic GCC, has different
	dnl	 warnings handling:
	dnl	 - It doesn't support most of the GCC -W<feature> options.
	dnl	   The XR_TRY_ADD_* macros should handle this, but they don't.
	dnl	 - Option -Wall has different meaning than in GCC, it really
	dnl	   means ALL warnings and remarks the compiler knows about.
	dnl
	if test "${ICC}" = "yes" ; then
	    CPARANOIDFLAGS="-Werror"
	    CXXPARANOIDFLAGS="-Werror"
	else
	    CPARANOIDFLAGS="-W -Wall -Wwrite-strings -Wbad-function-cast -Wmissing-prototypes -Wcast-qual -Wmissing-declarations -Werror -Wpointer-arith -Wcast-align -Wstrict-prototypes -Wnested-externs"
	    CXXPARANOIDFLAGS="-W -Wall -Wwrite-strings -Wcast-qual -Werror -Wpointer-arith -Wcast-align -Wstrict-prototypes -Woverloaded-virtual -Wtraditional"
	fi

	XR_TRY_ADD_CFLAGS($CPARANOIDFLAGS)
	XR_TRY_ADD_CXXFLAGS($CXXPARANOIDFLAGS)
	XR_TRY_ADD_CXXFLAGS("-ftemplate-depth-25")

	dnl
	dnl Try to add the -pipe option, which can significantly speed up
	dnl compile runs by avoiding the use of temporary files.
	dnl
	if test "${enable_compiler_pipe}" == "yes" ; then
		XR_TRY_ADD_CFLAGS("-pipe")
		XR_TRY_ADD_CXXFLAGS("-pipe")
	fi

	dnl
	dnl Default compiler flags have optimization turned on which
	dnl can cause helpful debugging info to be optimized out.
	dnl
	if test "${enable_optimize}" != "yes" ; then
		dnl Could just append -O0, but two -O args are icky
		dnl We make assumption change is O2 because extended regexps
		dnl are not portable...
		changequote(<<, >>)dnl preserve braces in sed expressions
		CFLAGS=`echo $CFLAGS | sed 's/-O2//g'`
		CXXFLAGS=`echo $CXXFLAGS | sed 's/-O2//g'`
		changequote([, ])dnl
	fi
	if test "${enable_profile}" = "yes" ; then
		CFLAGS="${CFLAGS} -pg"
		CXXFLAGS="${CXXFLAGS} -pg"
	fi
	if test "${enable_debug_fnames}" = "yes" ; then
		AC_DEFINE(DEBUG_PRINT_FUNCTION_NAME, 1,
			[Define to 1 to enable printing function name in debug messages])
	fi
	if test "${enable_stl_debug}" = "yes" ; then
		CXXFLAGS="${CXXFLAGS} -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC"
	fi

	dnl
	dnl Conditionally add the user-specified flags that must be after
	dnl all other compiler flags.
	dnl
	dnl Those are specified in the "CFLAGS_END" and "CXXFLAGS_END"
	dnl environmental variables (for the C and C++ compiler respectively).
	dnl
	XR_TRY_ADD_CFLAGS($CFLAGS_END)
	XR_TRY_ADD_CXXFLAGS($CXXFLAGS_END)
fi

dnl
dnl Win32/64 specific flags go here.
dnl
if test "${_USING_WINDOWS}" = "1"; then
	LDFLAGS="${LDFLAGS} -mconsole"
	LIBS="${LIBS} -lws2_32 -liphlpapi -lmprapi -ladvapi32"
fi

dnl
dnl Deal with linker file generation last (it might not work.)
dnl
if test "${enable_debug_linker_maps}" = "yes" ; then
	LDFLAGS="--Wl,-M --Wl,--cref ${LDFLAGS}"
fi

dnl ---------------------------------------------------------------------------
dnl Add files to under-go substitution here.
dnl ---------------------------------------------------------------------------

AC_OUTPUT(
	Jamrules
	Makefile
	MakefileRootCheck
	bgp/Makefile
	bgp/harness/Makefile
	bgp/tools/Makefile
	cli/Makefile
	cli/tools/Makefile
	contrib/Makefile
	docs/Makefile
	docs/bgp/Makefile
	docs/design_arch/Makefile
	docs/fea/Makefile
	docs/libxipc/Makefile
	docs/libxorp/Makefile
	docs/mfea/Makefile
	docs/mld6igmp/Makefile
	docs/multicast/Makefile
	docs/pim/Makefile
	docs/pim_testsuite/Makefile
	docs/rib/Makefile
	docs/rtrmgr/Makefile
	docs/slides/Makefile
	docs/slides/status_2004_02/Makefile
	docs/snmp/Makefile
	docs/test_harness/Makefile
	docs/user_manual/Makefile
	docs/xorpdev_101/Makefile
	etc/Makefile
	etc/templates/Makefile
	fea/Makefile
	fea/MakefileRootCheck
	fea/tools/Makefile
	fib2mrib/Makefile
	libcomm/Makefile
	libfeaclient/Makefile
	libproto/Makefile
	libxipc/Makefile
	libxorp/Makefile
	mld6igmp/Makefile
	mrt/Makefile
	ospf/Makefile
	ospf/tools/Makefile
	pim/Makefile
	policy/Makefile
	policy/backend/Makefile
	policy/common/Makefile
	policy/test/Makefile
	rib/Makefile
	rib/tools/Makefile
	rip/Makefile
	rip/tools/Makefile
	rtrmgr/Makefile
	static_routes/Makefile
	utils/Makefile
	utils/flower_malloc/Makefile
	xrl/Makefile
	xrl/interfaces/Makefile
	xrl/targets/Makefile
	xrl/tests/Makefile
,
	echo timestamp > stamp-h
)


dnl -----------------------------------------
dnl Print the compiler flags
dnl -----------------------------------------
echo "Compiler C flags = $CFLAGS"
echo "Compiler C++ flags = $CXXFLAGS"
echo "C preprocessor flags = $CPPFLAGS"
echo "Linker flags = $LDFLAGS"


dnl ---------------------------------------------------------------------------
dnl Warn if default make is not gmake
dnl ---------------------------------------------------------------------------

if test -z "${xorp_cv_gmake_name}" ; then
   echo "=============================================================================="
   echo "GNU make was not found during configure process and is essential for building"
   echo "XORP.  If you believe this is an error, please let feedback@xorp.org know."
   echo "=============================================================================="
   echo
elif test "${xorp_cv_gmake_name}" != "make" ; then
   echo
   echo "=============================================================================="
   echo "GNU make is required when building XORP.  This appears to be installed as"
   echo "\"${xorp_cv_gmake_name}\".  If this does not work, please let feedback@xorp.org know."
   echo "=============================================================================="
   echo
fi

dnl ---------------------------------------------------------------------------
dnl END
dnl ---------------------------------------------------------------------------
