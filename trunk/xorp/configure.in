dnl -*- sh -*-
dnl
dnl $XORP: xorp/configure.in,v 1.236 2009/01/29 18:56:59 jtc Exp $
dnl
dnl ---------------------------------------------------------------------------
dnl Process this file with autoconf to produce a configure script.
dnl ---------------------------------------------------------------------------
dnl
dnl Ordering:
dnl	Autoconf setup
dnl	Autoheader setup
dnl	Automake setup
dnl	Installation prefixes
dnl	Operating system probing
dnl	Toolchain probing
dnl	Libtool setup
dnl	Command-line options
dnl	Additional tool probing
dnl	Check for libraries
dnl	Check for header files and types
dnl	Check for typedefs and structures
dnl	Check for library functions
dnl	Check for system services
dnl	Check for compiler characteristics
dnl	Setup compiler flags
dnl	Output (e.g., 'AC_OUTPUT([FILE...])', etc.)
dnl
dnl To disable config.cache loading and saving, redefine the following two
dnl macros _before_ calling AC_INIT, but make sure to keep the trailing dnl.
dnl
dnl define([AC_CACHE_LOAD], )dnl
dnl define([AC_CACHE_SAVE], )dnl

dnl ---------------------------------------------------------------------------
dnl Boilerplate
dnl ---------------------------------------------------------------------------

AC_INIT([xorp], [1.7-WIP], [feedback@xorp.org])
AC_PREREQ(2.61)
AC_REVISION([$XORP: xorp/configure.in,v 1.236 2009/01/29 18:56:59 jtc Exp $])
AC_CONFIG_AUX_DIR(config)
AC_CONFIG_MACRO_DIR(config)
AC_CANONICAL_TARGET
AC_CONFIG_SUBDIRS(cli/libtecla)

builtin(include, config/ahxorp.m4)
AC_CONFIG_HEADERS(xorp_config.h)

dnl ---------------------------------------------------------------------------
dnl automake options
dnl ---------------------------------------------------------------------------

AM_INIT_AUTOMAKE([foreign])
AM_MAINTAINER_MODE
AC_CACHE_SAVE

dnl ---------------------------------------------------------------------------
dnl Set host, host_alias, host_cpu, host_vendor, host_os
dnl ---------------------------------------------------------------------------

_USING_LINUX="0"
_USING_WINDOWS="0"
case "${host_os}" in
    bsdi* )
	AC_DEFINE(HOST_OS_BSDI, 1, [Define to 1 if the OS is BSDI])
	AC_DEFINE(HOST_OS_NAME, "BSDI", [Define the OS name])
    ;;
    darwin* )
	AC_DEFINE(HOST_OS_MACOSX, 1, [Define to 1 if the OS is MacOS X])
	AC_DEFINE(HOST_OS_NAME, "MacOS X", [Define the OS name])
    ;;
    dragonfly* )
	AC_DEFINE(HOST_OS_DRAGONFLYBSD, 1, [Define to 1 if the OS is DragonFlyBSD])
	AC_DEFINE(HOST_OS_NAME, "DragonFlyBSD", [Define the OS name])
    ;;
    freebsd* )
	AC_DEFINE(HOST_OS_FREEBSD, 1, [Define to 1 if the OS is FreeBSD])
	AC_DEFINE(HOST_OS_NAME, "FreeBSD", [Define the OS name])
    ;;
    linux* )
	AC_DEFINE(HOST_OS_LINUX, 1, [Define to 1 if the OS is Linux])
	AC_DEFINE(HOST_OS_NAME, "Linux", [Define the OS name])
	_USING_LINUX="1"
    ;;
    netbsd* )
	AC_DEFINE(HOST_OS_NETBSD, 1, [Define to 1 if the OS is NetBSD])
	AC_DEFINE(HOST_OS_NAME, "NetBSD", [Define the OS name])
    ;;
    openbsd* )
	AC_DEFINE(HOST_OS_OPENBSD, 1, [Define to 1 if the OS is OpenBSD])
	AC_DEFINE(HOST_OS_NAME, "OpenBSD", [Define the OS name])
    ;;
    solaris* )
	AC_DEFINE(HOST_OS_SOLARIS, 1, [Define to 1 if the OS is Solaris])
	AC_DEFINE(HOST_OS_NAME, "Solaris", [Define the OS name])
    ;;
    *cygwin )
	AC_MSG_ERROR([Cygwin is not (and will not be) supported.])
    ;;
    *mingw* )
	AC_DEFINE(HOST_OS_WINDOWS, 1, [Define to 1 if the OS is Windows])
	AC_DEFINE(HOST_OS_NAME, "Windows", [Define the OS name])
	_USING_WINDOWS="1"
	dnl This has to be here to stop the ssize_t test from telling lies.
	dnl Also, <routprot.h> and friends need the MPR version to be defined
	dnl before inclusion.
	CPPFLAGS="${CPPFLAGS} -DMPR50=1"
    ;;
esac
AC_CACHE_SAVE

dnl ---------------------------------------------------------------------------
dnl Set the default installation prefix (and deal with Windows correctly)
dnl ---------------------------------------------------------------------------

dnl This macro is always expanded once, unconditionally.
dnl Therefore it needs to be explicitly overridden on Windows.
AC_PREFIX_DEFAULT([/usr/local/xorp])

if test "${_USING_WINDOWS}" = "1" ; then
    ac_default_prefix="C:/XORP"
    _REAL_BUILD_ROOT="`pwd -W`"
    _REAL_SRC_ROOT="`cd ${srcdir} && pwd -W`"
else
    _REAL_BUILD_ROOT="${PWD}"
    _REAL_SRC_ROOT="`cd ${srcdir} && echo ${PWD}`"
fi

test "$prefix" = NONE && prefix="${ac_default_prefix}"
AC_DEFINE_UNQUOTED(XORP_ROOT, "${prefix}",
		   [Define the path to the root of the XORP installation])
AC_DEFINE_UNQUOTED(XORP_BUILD_ROOT, "${_REAL_BUILD_ROOT}",
		   [Define path to the top-level build directory])
AC_DEFINE_UNQUOTED(XORP_INSTALL_ROOT, "${prefix}",
		   [Define the path to the root of the XORP installation])
# We'd like to use ac_abs_srcdir, except it's not available just here.
AC_DEFINE_UNQUOTED(XORP_SRC_ROOT, "${_REAL_SRC_ROOT}",
		   [Define path to the top-level source directory])

dnl Default to building no contrib components.
CONTRIB_SUBDIRS=""

dnl ---------------------------------------------------------------------------
dnl Compiler probing and basic tools (libtool prerequisites)
dnl ---------------------------------------------------------------------------

AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_INSTALL
AC_PROG_LN_S

AC_LANG(C++)

AC_CACHE_SAVE

dnl
dnl Include the macros for testing compiler-supported command-line options
dnl
builtin(include, config/compiler_flags.m4)

dnl ---------------------------------------------------------------------------
dnl  Get project-specific macros
dnl ---------------------------------------------------------------------------

builtin(include, config/acxorp.m4)

dnl ---------------------------------------------------------------------------
dnl libtool options
dnl ---------------------------------------------------------------------------

AC_DISABLE_STATIC
AC_DISABLE_FAST_INSTALL
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL
AC_SUBST(LIBTOOL_DEPS)
AC_CACHE_SAVE

dnl ---------------------------------------------------------------------------
dnl Command line options
dnl ---------------------------------------------------------------------------

dnl -----------------------------------------
dnl --disable-debug (XXX: enabled by default)
dnl -----------------------------------------
AC_ARG_ENABLE([debug],
	      AC_HELP_STRING([--disable-debug],
			     [disable compiler debug information]),
	      [],
	      [enable_debug="yes";])

dnl -----------------------------------------
dnl --enable-debug-msgs
dnl -----------------------------------------
AC_ARG_ENABLE([debug-msgs],
	      AC_HELP_STRING([--enable-debug-msgs],
			     [enable debug messages]))

dnl -----------------------------------------
dnl --enable-debug-linker-maps
dnl -----------------------------------------
AC_ARG_ENABLE([debug-linker-maps],
	      AC_HELP_STRING([--enable-debug-linker-maps],
			     [enable linker map file output to stderr]))

dnl -----------------------------------------
dnl --enable-debug-fnames (GCC)
dnl -----------------------------------------
AC_ARG_ENABLE([debug-fnames],
	      AC_HELP_STRING([--enable-debug-fnames],
			     [enable function names in debug messages (requires GCC)]))

dnl -----------------------------------------
dnl --enable-stl-debug (GCC)
dnl -----------------------------------------
AC_ARG_ENABLE([stl-debug],
	      AC_HELP_STRING([--enable-stl-debug],
			     [enable STL debugging (requires GCC)]))

dnl -----------------------------------------
dnl --enable-optimize
dnl -----------------------------------------
AC_ARG_ENABLE([optimize],
	      AC_HELP_STRING([--enable-optimize],
			     [enable compiler optimizations]))

dnl -----------------------------------------
dnl --enable-profile
dnl -----------------------------------------
AC_ARG_ENABLE([profile],
	      AC_HELP_STRING([--enable-profile],
			     [enable profiling]))

dnl -----------------------------------------
dnl --disable-compiler-pipe (XXX: enabled by default)
dnl -----------------------------------------
AC_ARG_ENABLE([compiler-pipe],
	      AC_HELP_STRING([--disable-compiler-pipe],
			     [disable compiler's -pipe compilation option]),
	      [],
	      [enable_compiler_pipe="yes";])

dnl -----------------------------------------
dnl --enable-callback-debug
dnl -----------------------------------------
AC_ARG_ENABLE([callback-debug],
	      AC_HELP_STRING([--enable-callback-debug],
			     [enable callback debugging]),
	      AC_DEFINE(DEBUG_CALLBACKS, 1,
			[Define to enable callback debugging]))

dnl -----------------------------------------
dnl --disable-ipv6 (XXX: enabled by default, except on Windows)
dnl -----------------------------------------
AC_ARG_ENABLE([ipv6],
	      AC_HELP_STRING([--disable-ipv6],
			     [disable IPv6 support (disabled by default on Windows)]),
	      [],
	      [if test "${_USING_WINDOWS}" = "1" ; then
		   enable_ipv6="no";
	       else
		   enable_ipv6="yes";
	       fi
	      ]
)

dnl -----------------------------------------
dnl --enable-sim
dnl -----------------------------------------
TRY_USE_SIM=false
AC_ARG_ENABLE([sim],
	      AC_HELP_STRING([--enable-sim],
			     [enable simulator (unimplemented)]),
	      [if test "${enable_sim}" = "yes" ; then
		   TRY_USE_SIM=true;
	       else
		   TRY_USE_SIM=false;
	       fi
	      ]
)
AM_CONDITIONAL(TRY_USE_SIM, test "${enable_sim}" = "yes")

dnl -----------------------------------------
dnl --disable-advanced-multicast-api (XXX: enabled by default)
dnl -----------------------------------------
AC_ARG_ENABLE([advanced-multicast-api],
	      AC_HELP_STRING([--disable-advanced-multicast-api],
			     [disable use of the advanced multicast API]),
	      [],
	      [enable_advanced_multicast_api="yes";])
if test "${enable_advanced_multicast_api}" = "yes" ; then
    AC_DEFINE(ENABLE_ADVANCED_MULTICAST_API, 1,
	      [Define to 1 to enable advanced multicast API (if supported)])
fi

dnl -----------------------------------------
dnl --with-dmalloc
dnl -----------------------------------------
dnl XXX: XR_WITH_DMALLOC_DIR (a local modified version of AM_WITH_DMALLOC)
dnl is specified later, so it will overwrite -ld
builtin(include, config/dmalloc.m4)

dnl -----------------------------------------
dnl --with-openssl
dnl -----------------------------------------
builtin(include, config/acopenssl.m4)

dnl -----------------------------------------
dnl --with-snmp (default no)
dnl -----------------------------------------
AC_ARG_WITH([snmp],
	    AC_HELP_STRING([--with-snmp],
			   [build XORP MIBs for Net-SNMP]),
	    [snmp=${withval};],
	    [snmp="no";
	     MIBS="";]
)
AS_IF([test "x$snmp" != xno],
	[MIBS="mibs";
	AC_CONFIG_SUBDIRS(mibs)]
)
AC_SUBST(MIBS)

dnl -----------------------------------------
dnl --with-mld6igmp_lite (default no)
dnl -----------------------------------------
AC_ARG_WITH([mld6igmp_lite],
	    AS_HELP_STRING([--with-mld6igmp_lite],
			   [build LightWeightIGMPv3/MLDv2 implementation in contrib/mld6igmp_lite]),
	    [mld6igmp_lite="yes";
	     CONTRIB_SUBDIRS="$CONTRIB_SUBDIRS mld6igmp_lite";
	     # Conditionally save the current templates and copy the new ones
	     ( cd ${srcdir}/etc/templates
	     if test ! -f igmp.tp.acsaved ; then
	         cp -p igmp.tp igmp.tp.acsaved
		 cp -p ../../contrib/mld6igmp_lite/igmp.tp .
	     fi
	     if test ! -f mld.tp.acsaved ; then
	         cp -p mld.tp mld.tp.acsaved
		 cp -p ../../contrib/mld6igmp_lite/mld.tp .
	     fi )
	    ],
	    [mld6igmp_lite="no";
	     # Conditionally restore the original templates
	     ( cd ${srcdir}/etc/templates
	     if test -f igmp.tp.acsaved ; then
	         mv igmp.tp.acsaved igmp.tp
	     fi
	     if test -f mld.tp.acsaved ; then
	         mv mld.tp.acsaved mld.tp
	     fi )
	    ]
)

dnl -----------------------------------------
dnl --with-olsr (default yes)
dnl -----------------------------------------
AC_ARG_WITH([olsr],
	    AS_HELP_STRING([--with-olsr],
			   [build OLSRv1 implementation in contrib/olsr]),
	    [olsr=$withval;],
	    [olsr="yes";
	     CONTRIB_SUBDIRS="$CONTRIB_SUBDIRS olsr";]
)

dnl -----------------------------------------
dnl --with-path-to-snmpd
dnl -----------------------------------------
AC_ARG_WITH([path-to-snmpd],
	    AC_HELP_STRING([--with-path-to-snmpd=DIR],
			   [specify path to the snmpd executable]),
	    [snmpd=${withval}/snmpd;],
	    [snmpd="not_found";]
)

dnl -----------------------------------------
dnl --with-path-to-net-snmp-config
dnl -----------------------------------------
AC_ARG_WITH([path-to-net-snmp-config],
	    AC_HELP_STRING([--with-path-to-net-snmp-config=DIR],
			   [specify path to the net-snmp-config executable]),
	    [net_snmp_config_dir=${withval};
	     net_snmp_config=${net_snmp_config_dir}/net-snmp-config;],
	    [net_snmp_config_dir="";
	     net_snmp_config="net-snmp-config";]
)

dnl ---------------------------------------------------------------------------
dnl Additional tool probes
dnl ---------------------------------------------------------------------------

dnl -----------------------------------------
dnl CPP GNU variable arguments
dnl -----------------------------------------

AC_CACHE_CHECK([whether preprocessor supports GNU variadic macros],
	       [xorp_cv_cpp_gnu_va_args],
	       [AC_TRY_CPP([
			    #define SOME_PRINTF(args...) printf(args)
			    SOME_PRINTF("hello %s %d", "world", '\n');
			   ],
			   [xorp_cv_cpp_gnu_va_args="yes";],
			   [xorp_cv_cpp_gnu_va_args="no";])
	       ]
)
if test "${xorp_cv_cpp_gnu_va_args}" = "yes" ; then
    AC_DEFINE(CPP_SUPPORTS_GNU_VA_ARGS, 1,
	      [Define to 1 if the preprocessor supports GNU style variadic macros])
fi

AC_CACHE_CHECK([whether preprocessor supports C99 variadic macros],
	       [xorp_cv_cpp_c99_va_args],
	       [AC_TRY_CPP([
			    #define SOME_PRINTF(foo, ...) printf(args, __VA_ARGS__)
			    SOME_PRINTF("hello %s %d", "world", '\n');
			   ],
			   [xorp_cv_cpp_c99_va_args="yes";],
			   [xorp_cv_cpp_c99_va_args="no";])
	       ]
)
if test "${xorp_cv_cpp_c99_va_args}" = "yes" ; then
    AC_DEFINE(CPP_SUPPORTS_C99_VA_ARGS, 1,
	      [Define to 1 if the preprocessor supports C99 style variadic macros])
fi

AC_CACHE_CHECK([if GNU make is installed],
	       [xorp_cv_gmake_name],
	       [for g in ${GMAKE} make gmake gnumake ; do
		    if ($g -version) < /dev/null > /dev/null 2>&1 ; then
			GMAKE_NAME="$g"
			break
		    fi
		done
		xorp_cv_gmake_name=${GMAKE_NAME}
	       ]
)

dnl -----------------------------------------
dnl Python related checks
dnl -----------------------------------------

AM_PATH_PYTHON(2.0,			dnl Min. required Python version
    [PYTHON_BUILD=''],
    [PYTHON_BUILD="#"])
AC_SUBST(PYTHON_BUILD)

dnl ---------------------------------------------------------------------------
dnl Check for libraries
dnl ---------------------------------------------------------------------------

dnl XXX Into C to avoid name mangling problems when checking libraries
AC_LANG_PUSH(C)

AC_SEARCH_LIBS(socket, socket)
AC_SEARCH_LIBS(inet_addr, nsl)
AC_SEARCH_LIBS(dlopen, dl)
AC_SEARCH_LIBS(hstrerror, resolv)
AC_SEARCH_LIBS(regcomp, pcreposix, , , [-lpcre])

dnl
dnl Select the optional CLI-related curses library
dnl
CLI_CURSES_LIB=""
AC_CHECK_LIB(curses, tigetstr, [CLI_CURSES_LIB="-lcurses"], [
    AC_CHECK_LIB(ncurses, tigetstr, [CLI_CURSES_LIB="-lncurses"], [
	AC_CHECK_LIB(curses, tgetstr, [CLI_CURSES_LIB="-lcurses"])
    ])
])
AC_SUBST(CLI_CURSES_LIB)

dnl Replace main with a function in -lc:
dnl AC_CHECK_LIB(c, main)
dnl XXX: XR_WITH_DMALLOC_DIR must be after -lc otherwise it won't have efect
dnl XXX: XR_WITH_DMALLOC_DIR is a local modified version of AM_WITH_DMALLOC
XR_WITH_DMALLOC_DIR
dnl Replace main with a function in -lutil:
dnl AC_CHECK_LIB(util, main)
dnl AC_CHECK_LIB(crypt, crypt)

AC_LANG_POP(C)

dnl ---------------------------------------------------------------------------
dnl Check for header files and types
dnl ---------------------------------------------------------------------------

dnl
dnl Check for ANSI C Runtime Environment.
dnl
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h])

dnl
dnl Check for X/Open Syslog header.
dnl
AC_CHECK_HEADERS([syslog.h])

dnl
dnl Check for POSIX 1003.1 headers.
dnl
AC_CHECK_HEADERS([glob.h grp.h pwd.h regex.h termios.h sys/cdefs.h sys/errno.h sys/ioctl.h sys/resource.h sys/select.h sys/signal.h sys/socket.h sys/stat.h sys/syslog.h sys/time.h sys/types.h sys/uio.h sys/un.h sys/utsname.h sys/wait.h])

dnl XXX: Header file <sys/mount.h> might need <sys/param.h>
AC_CHECK_HEADERS([sys/param.h])
AC_CHECK_HEADERS([sys/mount.h], [], [],
[
#ifdef HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif
])

AC_HEADER_TIME
AC_HEADER_STAT

dnl ---------------------------------------------------------------------------
dnl Check for standard integer size types.
dnl The defaults are only valid on some systems so we hope that
dnl <inttypes.h> or <stdint.h> exists when they're wrong.
dnl ---------------------------------------------------------------------------
AC_CHECK_HEADERS([inttypes.h stdint.h])
AC_CHECK_TYPES([int8_t, int16_t, int32_t, int64_t,
		uint8_t, uint16_t, uint32_t, uint64_t], [], [],
[
#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#endif
#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif
])

dnl
dnl Check for the PCRE POSIX compatibility header (equivalent to regex.h).
dnl

dnl XXX: Header file <pcreposix.h> might need <pcre.h>
AC_CHECK_HEADERS([pcre.h])
AC_CHECK_HEADERS([pcreposix.h], [], [],
[
#ifdef HAVE_PCRE_H
#include <pcre.h>
#endif
])

dnl
dnl Check for headers commonly found on UNIX systems (BSD, SYSV etc).
dnl
AC_CHECK_HEADERS([paths.h stropts.h sysexits.h inet/nd.h sys/param.h])
AC_HEADER_SYS_WAIT

dnl
dnl Check for typical BSD-like networking stack header files.
dnl
AC_CHECK_HEADERS([ifaddrs.h netdb.h arpa/inet.h arpa/telnet.h net/if_dl.h net/if_media.h net/if_types.h netinet/in.h netinet/in_systm.h netinet/tcp.h sys/sockio.h])

dnl XXX: Header files <net/if.h>, <net/if_arp.h> and <net/route.h>
dnl might need <sys/types.h> and <sys/socket.h>
AC_CHECK_HEADERS([sys/types.h sys/socket.h])
AC_CHECK_HEADERS([net/if.h net/if_arp.h net/route.h], [], [],
[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
])

dnl XXX: Header file <net/if_var.h> might need <sys/types.h> <sys/socket.h>
dnl and <net/if.h>
AC_CHECK_HEADERS([sys/types.h sys/socket.h net/if.h])
AC_CHECK_HEADERS([net/if_var.h], [], [],
[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#ifdef HAVE_NET_IF_H
#include <net/if.h>
#endif
])

dnl XXX: Header file <netinet/in_var.h> might need <sys/types.h>
dnl <sys/socket.h> <net/if.h> <net/if_var.h> and <netinet/in.h>
AC_CHECK_HEADERS([sys/types.h sys/socket.h net/if.h net/if_var.h netinet/in.h])
AC_CHECK_HEADERS([netinet/in_var.h], [], [],
[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#ifdef HAVE_NET_IF_H
#include <net/if.h>
#endif
#ifdef HAVE_NET_IF_VAR_H
#include <net/if_var.h>
#endif
#ifdef HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
])

dnl XXX: Header file <netinet/ip.h> might need <sys/types.h> <netinet/in.h>
dnl and <netinet/in_systm.h>
AC_CHECK_HEADERS([sys/types.h netinet/in.h netinet/in_systm.h])
AC_CHECK_HEADERS([netinet/ip.h], [], [],
[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
#ifdef HAVE_NETINET_IN_SYSTM_H
#include <netinet/in_systm.h>
#endif
])

dnl
dnl Check for BSD-specific header files.
dnl

dnl XXX: Header files <sys/linker.h> and <sys/sysctl.h> might need
dnl <sys/param.h>
AC_CHECK_HEADERS([sys/param.h])
AC_CHECK_HEADERS([sys/linker.h sys/sysctl.h], [], [],
[
#ifdef HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif
])

dnl
dnl Check for Windows-specific header files.
dnl
if test "${_USING_WINDOWS}" = "1" ; then
    AC_CHECK_HEADERS([windows.h winsock2.h ws2tcpip.h])

    dnl XXX: Header files <iphlpapi.h> <iptypes.h> <iprtrmib.h> <routprot.h>
    dnl <rtmv2.h> <mprapi.h> and <stm.h> might need <windows.h>
    dnl XXX: Header files <ipifcons.h> <rtinfo.h> <mprerror.h> and <process.h>
    dnl might not require <windows.h> but we add them here to play it safe.
    AC_CHECK_HEADERS([iphlpapi.h iptypes.h iprtrmib.h routprot.h rtmv2.h mprapi.h stm.h ipifcons.h rtinfo.h mprerror.h process.h], [], [],
[
#ifdef HAVE_WINDOWS_H
#include <windows.h>
#endif
])

    dnl XXX: Header file <mgm.h> might need <windows.h> and <iprtrmib.h>
    AC_CHECK_HEADERS([mgm.h], [], [],
[
#ifdef HAVE_WINDOWS_H
#include <windows.h>
#endif
#ifdef HAVE_IPRTRMIB_H
#include <iprtrmib.h>
#endif
])

fi

dnl
dnl Check for Ethernet-related types and functions.
dnl
AC_CHECK_HEADERS([sys/ethernet.h net/ethernet.h netinet/ether.h])

dnl XXX: Header file <net/if_ether.h> might need <sys/types.h>
dnl <sys/socket.h> and <net/if.h>
AC_CHECK_HEADERS([sys/types.h sys/socket.h net/if.h])
AC_CHECK_HEADERS([net/if_ether.h], [], [],
[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#ifdef HAVE_NET_IF_H
#include <net/if.h>
#endif
])

dnl XXX: Header file <netinet/if_ether.h> might need <sys/types.h>
dnl <sys/socket.h> <net/if.h> and <netinet/in.h>
AC_CHECK_HEADERS([sys/types.h sys/socket.h net/if.h netinet/in.h])
AC_CHECK_HEADERS([netinet/if_ether.h], [], [],
[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#ifdef HAVE_NET_IF_H
#include <net/if.h>
#endif
#ifdef HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
])

dnl
dnl Check for headers where 'struct ether_addr' is typically defined.
dnl
dnl XXX: It is preferable to use C instead of C++, because in DragonFlyBSD-1.6
dnl file <machine/atomic.h> (indirectly included by <netinet/if_ether.h>)
dnl is not C++ safe.
dnl XXX: We leverage on earlier tests for various Ethernet-related header
dnl files hence we don't repeat those tests here.
dnl
AC_LANG_PUSH(C)
AC_CHECK_TYPES([struct ether_addr], [], [],
[
#ifdef HAVE_SYS_TYPES_H
#include <sys/types.h>
#endif
#ifdef HAVE_SYS_SOCKET_H
#include <sys/socket.h>
#endif
#ifdef HAVE_SYS_ETHERHET_H
#include <sys/ethernet.h>
#endif
#ifdef HAVE_NET_ETHERNET_H
#include <net/ethernet.h>
#endif
#ifdef HAVE_NET_IF_H
#include <net/if.h>
#endif
#ifdef HAVE_NET_IF_ETHER_H
#include <net/if_ether.h>
#endif
#ifdef HAVE_NETINET_IN_H
#include <netinet/in.h>
#endif
#ifdef HAVE_NETINET_IF_ETHER_H
#include <netinet/if_ether.h>
#endif
#ifdef HAVE_NETINET_ETHER_H
#include <netinet/ether.h>
#endif
])

dnl ----------------------------------------------
dnl Check for Ethernet address conversion routines
dnl ----------------------------------------------
AC_CHECK_FUNCS([ether_ntoa ether_aton ether_ntoa_r ether_aton_r])
AC_LANG_POP(C)

dnl
dnl Tests for presentation and name lookup related functions.
dnl
builtin(include, config/acinet.m4)

dnl ---------------------------------------------------------------------------
dnl Check for typedefs and structures
dnl ---------------------------------------------------------------------------

dnl Check for sig_t and for its type
AC_CHECK_HEADERS([signal.h])
AC_CHECK_TYPES([sig_t], [], [],
[
#ifdef HAVE_SIGNAL_H
#include <signal.h>
#endif
])
AC_TYPE_SIGNAL

AC_STRUCT_TM
AC_TYPE_MODE_T
AC_TYPE_SIZE_T
AC_HEADER_TIOCGWINSZ

dnl XXX needed by cli code. C90
dnl XXX: The AC_FUNC_STRFTIME check might fail on NetBSD-1.3 and OpenBSD-4.0
dnl if the compiler is C++ hence we explicitly use the C compiler.
AC_LANG_PUSH(C)
AC_FUNC_STRFTIME
AC_LANG_POP(C)

dnl XXX needed by libxipc. C99
AC_FUNC_STRTOD

dnl XXX needed in many places it shouldn't be
AC_FUNC_FORK

dnl XXX needed in router manager
AC_CHECK_FUNCS([realpath])

dnl For syslog support
AC_CHECK_FUNCS([syslog])

dnl XXX We have a library check but we need to know if the function exists.
AC_CHECK_FUNCS([hstrerror])

dnl
dnl Test whether getopt() is in unistd.h.
dnl If it is not there, then look for the getopt.h header file.
dnl This assumes that the system's getopt declaration comes before the GNU one,
dnl if getopt.h is being picked up from a GNU C library include directory.
dnl
dnl Note that we use the getopt() check only as a guard against checking
dnl for <getopt.h>.
dnl
AC_CHECK_HEADERS([unistd.h])
AC_MSG_CHECKING(whether the system has getopt() in <unistd.h>)
AC_TRY_COMPILE([
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
],
[
    int my_argc = 0;
    char **my_argv = NULL;
    int ch;

    ch = getopt(my_argc, my_argv, "bf:");

    return (0);
],
    [AC_MSG_RESULT(yes)],
    [AC_MSG_RESULT(no)
     AC_CHECK_HEADERS([getopt.h])
    ])

dnl Check for "struct timespec"
AC_CHECK_HEADERS([time.h])
AC_CHECK_TYPES([struct timespec], [], [],
[
#ifdef HAVE_TIME_H
#include <time.h>
#endif
])

dnl ---------------------------------------------------------------------------
dnl Check for library functions
dnl ---------------------------------------------------------------------------

AC_CHECK_FUNCS([strlcpy])
AC_CHECK_FUNCS([strerror])
AC_CHECK_FUNCS([getifaddrs])
AC_CHECK_FUNCS([if_nametoindex])
AC_CHECK_FUNCS([if_indextoname])
AC_CHECK_FUNCS([uname])
AC_CHECK_FUNCS([strptime])
dnl XXX: On Linux, clock_gettime() requires linking with the librt library
AC_CHECK_LIB(rt, clock_gettime, [LIBS="${LIBS} -lrt"])
AC_CHECK_FUNCS([clock_gettime])

dnl ---------------------------------------------------------------------------
dnl Misc. other system-related checks
dnl ---------------------------------------------------------------------------

dnl Check for system endianness
AC_C_BIGENDIAN

dnl Check whether the C type "char" is unsigned
AC_C_CHAR_UNSIGNED

dnl Check for the CLOCK_MONOTONIC argument to clock_gettime()
builtin(include, config/actime.m4)

dnl Check whether the system has va_copy()
AC_LANG_PUSH(C)
AC_MSG_CHECKING(whether the build environment has va_copy() support)
AC_TRY_LINK([
#include <stdio.h>
#include <stdarg.h>

/*
 * XXX: If we are using the autoconf macros to test-compile or test-link,
 * the main body we are trying to compile/link is automatically wrapped
 * within "main() { ... }", hence we have to move the foo() function to the
 * section with the header files.
 */
void
foo(const char *format, ...)
{
    va_list ap, ap_copy;

    va_start(ap, format);
    va_copy(ap_copy, ap);
    va_end(ap);
}
],
[
{
    foo("%s %s", "my_foo", "my_bar");
    return (0);
}
],
    [AC_DEFINE(HAVE_VA_COPY, 1,
	       [Define to 1 if the host has va_copy() support in the build environment])
     AC_MSG_RESULT(yes)],
    [AC_MSG_RESULT(no)]
)
AC_LANG_POP(C)

dnl ---------------------------------------------------------------------------
dnl Check for system services
dnl ---------------------------------------------------------------------------

dnl
dnl Raw link-level I/O access checks
dnl
builtin(include, config/aciolink.m4)

dnl
dnl Socket implementation checks
dnl
builtin(include, config/acsocket.m4)

dnl
dnl IPv4 stack checks
dnl
builtin(include, config/acipv4.m4)

dnl
dnl IPv6 stack checks
dnl
if test "${enable_ipv6}" = "yes" ; then
    builtin(include, config/acipv6.m4)
fi

dnl
dnl Multicast-related checks
dnl
builtin(include, config/acipmrt.m4)

dnl
dnl Firewall code checks
dnl
builtin(include, config/acfirewall.m4)

dnl
dnl Linux-specific checks
dnl
if test "${_USING_LINUX}" = "1" ; then
    builtin(include, config/aclinux.m4)
fi

dnl
dnl Interface configuration method checks
dnl
builtin(include, config/acifconf.m4)

dnl
dnl VLAN interface configuration method checks
dnl
builtin(include, config/acvlan.m4)

dnl ---------------------------------------------------------------------------
dnl Debug flags
dnl ---------------------------------------------------------------------------

if test "${enable_debug_msgs}" = "yes" ; then
    AC_DEFINE(DEBUG_LOGGING_GLOBAL, 1,
	      [Define to 1 to enable globally debug messages output])
fi

dnl ---------------------------------------------------------------------------
dnl Check for compiler characteristics
dnl ---------------------------------------------------------------------------

dnl ---------------------------------------------------------------------------
dnl Check whether Intel C++ compiler is used
dnl ---------------------------------------------------------------------------
AC_MSG_CHECKING([whether we are using the Intel compiler])
AC_EGREP_CPP([yes],
	     [
#if defined __INTEL_COMPILER
yes
#endif
	     ],
	     [AC_MSG_RESULT([yes]); ICC="yes"],
	     [AC_MSG_RESULT([no]); ICC="no"]
)

dnl -----------------------------------------
dnl GCC-specific warning flags
dnl -----------------------------------------

if test "${GCC}" = "yes" ; then
    dnl
    dnl Filter-out the "-g" flag
    dnl
    CFLAGS=`echo $CFLAGS |  sed 's/-g//g'`
    CXXFLAGS=`echo $CXXFLAGS |  sed 's/-g//g'`

    dnl
    dnl If debugging is enabled, try to add the "-g" flag
    dnl
    if test "${enable_debug}" = "yes" ; then
	XR_TRY_ADD_CFLAGS("-g")
	XR_TRY_ADD_CXXFLAGS("-g")
    fi

    dnl
    dnl TODO: add the following flags to gcc/g++:
    dnl       -ansi -pedantic -Wformat=2
    dnl
    dnl XXX: Flag -Wtraditional is not recommended for C, because:
    dnl   - On FreeBSD-4.5 macros like IN_CLASSA(i) from netinet/in.h
    dnl     create a warning for gcc 2.95.3
    dnl   - On Linux RedHat 7.2, #elif creates a warning for gcc 2.96
    dnl
    dnl XXX: Flag -Wnon-const-format is not included, because it appears
    dnl to exist only on earlier versions of gcc (e.g., gcc-2.95.x),
    dnl and only on FreeBSD, but not on Linux. In addition, this flag
    dnl appears to be problematic, because if it is enabled we cannot
    dnl use statements like "vfprintf(stderr, fmt, ap);" where "fmt"
    dnl is a variable (e.g., defined as "const char *").
    dnl
    dnl XXX: For extra debugging, the following g++ flag may be enabled
    dnl and added to CXXFLAGS: -D_GLIBCXX_DEBUG
    dnl
    dnl XXX: -Wstrict-prototypes and other prototype warning flags will
    dnl cause compilation to fail under MinGW, as the __CRT_INLINE header
    dnl file macro does not declare before defining functions in the MinGW
    dnl system headers.
    dnl
    dnl XXX: Intel compiler, although tries to mimic GCC, has different
    dnl warnings handling:
    dnl   - It doesn't support most of the GCC -W<feature> options.
    dnl     The XR_TRY_ADD_* macros should handle this, but they don't.
    dnl   - Option -Wall has different meaning than in GCC, it really
    dnl     means ALL warnings and remarks the compiler knows about.
    dnl
    dnl XXX: The first flag to check (and eventually use for further checks)
    dnl should be "-Werror". Otherwise warnings about a flag being valid
    dnl for C only for example might not be detected.
    dnl
    if test "${ICC}" = "yes" ; then
	CPARANOIDFLAGS="-Werror"
	CXXPARANOIDFLAGS="-Werror"
    elif test "${_USING_WINDOWS}" = "1" ; then
	CPARANOIDFLAGS="-Werror -W -Wall -Wwrite-strings -Wbad-function-cast -Wcast-qual -Wpointer-arith -Wcast-align -Wnested-externs"
	CXXPARANOIDFLAGS="-Werror -W -Wall -Wwrite-strings -Wcast-qual -Wpointer-arith -Wcast-align -Wstrict-prototypes -Woverloaded-virtual -Wtraditional"
    else
	CPARANOIDFLAGS="-Werror -W -Wall -Wwrite-strings -Wbad-function-cast -Wmissing-prototypes -Wcast-qual -Wmissing-declarations -Wpointer-arith -Wcast-align -Wstrict-prototypes -Wnested-externs"
	CXXPARANOIDFLAGS="-Werror -W -Wall -Wwrite-strings -Wcast-qual -Wpointer-arith -Wcast-align -Wstrict-prototypes -Woverloaded-virtual -Wtraditional"
    fi

    XR_TRY_ADD_CFLAGS($CPARANOIDFLAGS)
    XR_TRY_ADD_CXXFLAGS($CXXPARANOIDFLAGS)
    XR_TRY_ADD_CXXFLAGS("-ftemplate-depth-25")

    dnl
    dnl Try to add the -pipe option, which can significantly speed up
    dnl compile runs by avoiding the use of temporary files.
    dnl
    if test "${enable_compiler_pipe}" = "yes" ; then
	XR_TRY_ADD_CFLAGS("-pipe")
	XR_TRY_ADD_CXXFLAGS("-pipe")
    fi

    dnl
    dnl Default compiler flags have optimization turned on which
    dnl can cause helpful debugging info to be optimized out.
    dnl
    if test "${enable_optimize}" != "yes" ; then
	dnl
	dnl Could just append -O0, but two -O args are icky
	dnl We make assumption change is O2 because extended regexps
	dnl are not portable...
	dnl
	changequote(<<, >>)dnl preserve braces in sed expressions
	CFLAGS=`echo $CFLAGS | sed 's/-O2//g'`
	CXXFLAGS=`echo $CXXFLAGS | sed 's/-O2//g'`
	changequote([, ])dnl
    fi
    if test "${enable_profile}" = "yes" ; then
	CFLAGS="${CFLAGS} -pg"
	CXXFLAGS="${CXXFLAGS} -pg"
    fi
    if test "${enable_debug_fnames}" = "yes" ; then
	AC_DEFINE(DEBUG_PRINT_FUNCTION_NAME, 1,
		  [Define to 1 to enable printing function name in debug messages])
    fi
    if test "${enable_stl_debug}" = "yes" ; then
	CXXFLAGS="${CXXFLAGS} -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC"
    fi

    dnl
    dnl Conditionally add the user-specified flags that must be after
    dnl all other compiler flags.
    dnl
    dnl Those are specified in the "CFLAGS_END" and "CXXFLAGS_END"
    dnl environmental variables (for the C and C++ compiler respectively).
    dnl
    XR_TRY_ADD_CFLAGS($CFLAGS_END)
    XR_TRY_ADD_CXXFLAGS($CXXFLAGS_END)
fi

dnl
dnl Win32/64 specific flags go here.
dnl
if test "${_USING_WINDOWS}" = "1" ; then
    LDFLAGS="${LDFLAGS} -mconsole"
    LIBS="${LIBS} -lws2_32 -liphlpapi -lmprapi -ladvapi32"
fi

dnl
dnl Deal with linker file generation last (it might not work.)
dnl
if test "${enable_debug_linker_maps}" = "yes" ; then
    LDFLAGS="--Wl,-M --Wl,--cref ${LDFLAGS}"
fi

dnl -------------------------------------------------------------
dnl Generate makefiles for optional components in contrib.
dnl -------------------------------------------------------------

dnl This is crude and tedious, but it's about as modular as
dnl autoconf gets.  These are NOT separate autoconf packages
dnl (more developer overhead), unlike snmp, which has to be
dnl because it needs shared linkage.
dnl
dnl We need to make sure that we invoke AC_SUBST for CONTRIB_SUBDIRS
dnl before AC_CONFIG_FILE is invoked to generate contrib/Makefile,
dnl or they will not be built by a top level "gmake" command.
dnl
dnl Whilst this means CONTRIB_SUBDIRS is spammed to all the Makefiles,
dnl that's the price of using an antiquitated build system.

with_mld6igmp_lite=false
with_olsr=false
if test "x${CONTRIB_SUBDIRS}" != "x" ; then
    for c in ${CONTRIB_SUBDIRS} ; do
	case $c in
	    mld6igmp_lite)
		with_mld6igmp_lite=true
		AC_CONFIG_FILES([contrib/mld6igmp_lite/Makefile])
		;;
	    olsr)
		with_olsr=true
		AC_CONFIG_FILES([contrib/olsr/Makefile])
		AC_CONFIG_FILES([contrib/olsr/tools/Makefile])
		;;
        esac
    done
fi
AM_CONDITIONAL(WITH_MLD6IGMP_LITE, $with_mld6igmp_lite)
AM_CONDITIONAL(WITH_OLSR, $with_olsr)
AC_SUBST(CONTRIB_SUBDIRS)

dnl -------------------------------------------------------------
dnl Generate makefiles for core XORP components.
dnl -------------------------------------------------------------

AC_CONFIG_FILES([
    Makefile
    MakefileRootCheck
    bgp/Makefile
    bgp/harness/Makefile
    bgp/tools/Makefile
    cli/Makefile
    cli/tools/Makefile
    contrib/Makefile
    docs/Makefile
    docs/bgp/Makefile
    docs/design_arch/Makefile
    docs/fea/Makefile
    docs/libxipc/Makefile
    docs/libxorp/Makefile
    docs/mfea/Makefile
    docs/mld6igmp/Makefile
    docs/multicast/Makefile
    docs/olsr/Makefile
    docs/pim/Makefile
    docs/pim_testsuite/Makefile
    docs/rib/Makefile
    docs/rtrmgr/Makefile
    docs/slides/Makefile
    docs/slides/status_2004_02/Makefile
    docs/snmp/Makefile
    docs/test_harness/Makefile
    docs/user_manual/Makefile
    docs/xorpdev_101/Makefile
    etc/Makefile
    etc/templates/Makefile
    fea/Makefile
    fea/MakefileRootCheck
    fea/data_plane/Makefile
    fea/data_plane/control_socket/Makefile
    fea/data_plane/fibconfig/Makefile
    fea/data_plane/firewall/Makefile
    fea/data_plane/ifconfig/Makefile
    fea/data_plane/io/Makefile
    fea/data_plane/managers/Makefile
    fea/tools/Makefile
    fib2mrib/Makefile
    libcomm/Makefile
    libfeaclient/Makefile
    libproto/Makefile
    libxipc/Makefile
    libxorp/Makefile
    mld6igmp/Makefile
    mrt/Makefile
    ospf/Makefile
    ospf/tools/Makefile
    pim/Makefile
    policy/Makefile
    policy/backend/Makefile
    policy/common/Makefile
    policy/test/Makefile
    rib/Makefile
    rib/tools/Makefile
    rip/Makefile
    rip/tools/Makefile
    rtrmgr/Makefile
    rtrmgr/config/Makefile
    static_routes/Makefile
    utils/Makefile
    vrrp/Makefile
    vrrp/test/Makefile
    xrl/Makefile
    xrl/interfaces/Makefile
    xrl/targets/Makefile
    xrl/tests/Makefile
])


dnl -------------------------------------------------------
dnl Perform substitutions.
dnl -------------------------------------------------------

AC_OUTPUT

dnl -----------------------------------------
dnl Print the compiler flags
dnl -----------------------------------------
echo "Compiler C flags = $CFLAGS"
echo "Compiler C++ flags = $CXXFLAGS"
echo "C preprocessor flags = $CPPFLAGS"
echo "Linker flags = $LDFLAGS"


dnl ---------------------------------------------------------------------------
dnl Warn if default make is not gmake
dnl ---------------------------------------------------------------------------

if test -z "${xorp_cv_gmake_name}" ; then
    echo "=============================================================================="
    echo "GNU make was not found during configure process and is essential for building"
    echo "XORP.  If you believe this is an error, please let feedback@xorp.org know."
    echo "=============================================================================="
    echo
elif test "${xorp_cv_gmake_name}" != "make" ; then
    echo
    echo "=============================================================================="
    echo "GNU make is required when building XORP.  This appears to be installed as"
    echo "\"${xorp_cv_gmake_name}\".  If this does not work, please let feedback@xorp.org know."
    echo "=============================================================================="
    echo
fi

dnl ---------------------------------------------------------------------------
dnl END
dnl ---------------------------------------------------------------------------
