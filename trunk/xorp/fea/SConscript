# Copyright (c) 2009 XORP, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, Version 2, June
# 1991 as published by the Free Software Foundation. Redistribution
# and/or modification of this program under the terms of any other
# version of the GNU General Public License is not permitted.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. For more details,
# see the GNU General Public License, Version 2, a copy of which can be
# found in the XORP LICENSE.gpl file.
#
# XORP Inc, 2953 Bunker Hill Lane, Suite 204, Santa Clara, CA 95054, USA;
# http://xorp.net

# $XORP$

import os
Import('env')

subdirs = [
	'data_plane',
	'tests',
	'tools',
    ]

SConscript(dirs = subdirs, exports='env')

env = env.Clone()

is_shared = env.has_key('SHAREDLIBS')

env.AppendUnique(CPPPATH = [
    '#',
    '$BUILDDIR',
    ])

env.PrependUnique(LIBPATH = [
    '$BUILDDIR/fea',
    '$BUILDDIR/fea/data_plane/managers',
    '$BUILDDIR/fea/data_plane/fibconfig',
    '$BUILDDIR/fea/data_plane/firewall',
    '$BUILDDIR/fea/data_plane/ifconfig',
    '$BUILDDIR/fea/data_plane/io',
    '$BUILDDIR/fea/data_plane/control_socket',
    '.',
    '$BUILDDIR/mrt',
    '$BUILDDIR/cli',
    '$BUILDDIR/cli/libtecla',
    '$BUILDDIR/xrl/interfaces',
    '$BUILDDIR/xrl/targets',
    '$BUILDDIR/libfeaclient',
    '$BUILDDIR/libproto',
    '$BUILDDIR/libxipc',
    '$BUILDDIR/libxorp',
    '$BUILDDIR/libcomm',
    ])

libfdp_srcs = [
     'fea_data_plane_manager.cc',
     'fibconfig_forwarding.cc',
     'ifconfig_property.cc',
     'iftree.cc',
     'io_ip.cc',
     'io_link.cc',
     'io_tcpudp.cc',
]

libfea_linkorder = [
    'xorp_data_plane_managers',
    'xorp_fibconfig',
    'xorp_firewall', # XXX?
    'xorp_ifconfig',
    'xorp_io',
    'xorp_control_socket',
    ]

if not is_shared:
    libfea_linkorder.append('libfea_data_plane_base')

libfea_linkorder += [
    'feafibclientxif',
    'fearawlinkclientxif',
    'fearawpkt4clientxif',
    'fearawpkt6clientxif',
    'socket4userxif',
    'socket6userxif',
    'findereventnotifierxif',
    'cli',
    'cliprocessorxif',
    'feaclient',
    'feaifmgrmirrorxif',   # XXX?
    'feaifmgrreplicatorxif', # XXX?
    'feaifmgrmirrorbase', # XXX?
    'climanagerxif',
    'mfeaclientxif',
    'profileclientxif',
    'clibase',
    'feabase',
    'mfeabase',
    'mrt',
    'tecla_xorp',
    'proto',
    'xipc',
    'comm',
    'xorp'
    ]

env.PrependUnique(LIBS = libfea_linkorder)

if is_shared:
    env.AppendUnique(LINKFLAGS = [ '-Wl,-z,defs', ])

libfeasrcs = [
     'fea_io.cc',
     'fea_node.cc',
     'fibconfig.cc',
     'fibconfig_transaction.cc',
     'firewall_entry.cc',
     'firewall_manager.cc',
     'firewall_transaction.cc',
     'ifconfig.cc',
     'ifconfig_reporter.cc',
     'ifconfig_transaction.cc',
     'io_ip_manager.cc',
     'io_link_manager.cc',
     'io_tcpudp_manager.cc',
     'libfeaclient_bridge.cc',
     'mfea_config.cc',
     'mfea_dataflow.cc',
     'mfea_mrouter.cc',
     'mfea_node.cc',
     'mfea_node_cli.cc',
     'mfea_vif.cc',
     'nexthop_port_mapper.cc',
     'profile_vars.cc',
     'xrl_fea_io.cc',
     'xrl_fea_node.cc',
     'xrl_fea_target.cc',
     'xrl_fib_client_manager.cc',
     'xrl_io_ip_manager.cc',
     'xrl_io_link_manager.cc',
     'xrl_io_tcpudp_manager.cc',
     'xrl_mfea_node.cc'
    ]

if is_shared:
    libfeasrcs += libfdp_srcs
    libfea = env.SharedLibrary(target = 'libfea', source = libfeasrcs)
    env.Alias('install',
              env.InstallLibrary('$libdir', libfea))
else:
    # Use an intermediate static lib to deal with some dependencies.
    libfdp = env.StaticLibrary(target = 'libfea_data_plane_base', source = libfdp_srcs)
    env.PrependUnique(LIBS = [ libfdp ])
    libfea = env.StaticLibrary(target = 'libfea', source = libfeasrcs)

#######################

# new path
#feapath = '$bindir'

# old path
feapath = '$exec_prefix/fea'

#######################

env = env.Clone()

if is_shared:
    env.PrependUnique(LIBS = [
        'fea',
    ])
else:
    env.PrependUnique(LIBS = [ libfea ])

feasrcs = [
          'xorp_fea.cc',
          ]

fea = env.Program(target = 'xorp_fea', source = feasrcs)

env.Alias('install',
          env.InstallProgram(feapath, fea))

#######################

env = env.Clone()

env['OBJPREFIX'] = 'dummy-'

env.AppendUnique(CPPDEFINES = 'FEA_DUMMY=1')

feadummysrcs = [
          'xorp_fea.cc',
          ]

feadummy = env.Program(target = 'xorp_fea_dummy', source = feadummysrcs)

env.Alias('install',
          env.InstallProgram(feapath, feadummy))

#######################

clickgen = 'xorp_fea_click_config_generator'

env.Alias('install',
          env.InstallScript(feapath, clickgen))

#######################

Default(libfea, fea, feadummy)
