#
# $XORP$
#

TODO
~~~~

1) None of the packet decode routines check the type field in the header
against their own type field. Could probably put the approriate check
in the standard header decode code.

2) I don't think that the LSA routines check their own type field either.

7) Can an interface a peer in our code have more than one subnet
associated with it?

12) Point 2 Point and Point 2 Multipoint.
When coding this we will need to be told neigbour addresses. When we
are told them just create the neighbour structures and we should be
done. Need to be careful that we don't destroy the neighbour
structures when the timers expire.

16) A data description packet carries a number of LSA headers. There
is a count in the packet of the number of LSA header. We don't store
this information as its unnecessary. Need to verify that we actually
write this information out when encoding a packet. Should perhaps also
check it on input rather than just stepping over it.

17) When decoding a link state update packet if an LSA is not
decodable either due to being an unknown type or some other problem
the whole packet is discarded. Only the bad LSA should be dropped. See
section 13 of the RFC.

18) The peer manager has a method that tests an address against
interface addresses. At the moment it checks against configured
interfaces. When the fea client interface watcher is linked in we
should get this information from the FEA.

19) The delayed ACKs are not delayed. The peer should probably hold a
delayed ack list that is transmitted ocassionally.

21) When the support for Virtual links is added make sure the RFC 2328
secction 8.2, receiving protocol packets covers the virtual link
backbone checks.

22) Perform authentication.

23) In peer.cc "_peer.schedule_event("BackupSeen")" is an event that
is not understood by process_scheduled_events().

Possible issues
~~~~~~~~~~~~~~~

1) Received hello packets are demultiplex on the source address of the
packet or on the router ID, depending on the linktype that the packet
arrived on. If a packet is being demultipled on the source address and
the router ID changes is this likely to be a problem?

2) In the OSPFv2 case when generating router links the state backup is
treated the same as DR_other, which generates links. Previously the
backup state generated no links. In the OSPFv3 case in state backup we
generate no links. Its not clear what the correct behaviour should be.

3) All LSAs carried in Link State Update Packets now have
InfTransDelay added to them. InfTransDelay is being added to self
originated LSAs as well is this correct?

Done
~~~~

3) The Network Mask field in OSPFv2 hello packets currently we seem to
be setting an index not a mask, check the spec to see what we should
be doing.

[This field is a mask and the code treats it as an opaque
quantity. The test code treats it as a mask]

4) The LsaDecoder should have a method that can be used to check if LS
types are valid. This method should be used by data_description_received.

[DONE]

5) Are external-LSAs allowed in NSSAs?

[NO]

13) Provide a mechanism to set the interface prefix length. Checkout
get_interface_prefix_length().

[DONE]

14) Provide a mechanism to set the interface cost. Checkout
get_interface_cost().

[DONE]

15) I think the age needs to have the link cost added to it as well as
updating the time.

[Done. When marshaling a link state update packet InfTransDelay is
added to the age field of each LSA that is being carried].

8) Constructor for the AreaRouter should take all the information to
fill in the Router LSA.

[Wrong]

20) Virtual links are currently handled incorrectly. Peers/interfaces
are typed (BROADCAST, NBMA, PointToMultiPoint, PointToPoint, and
VirtualLink). A Virtual Link should be an attribute of the Neighbour
structure any type of interface can also have neighbours of virtual
links (except PointToPoint). A simple way of handling the problem
would be have the neighbour hold its own copy of the linktype which
could include VirtualLink. Never allow peer to be created with a
linktype of Virtual link.

[DONE]

10) Section 3.3 Classification of routers. Add an OSPF enumeration for the
four classifications. Note that the classifications are
overlapping. Add four predicate methods to the peer manager that will
return the status of the router. For example if the router is only
configured with one area internal_router_p will return true.

[DONE]

9) Figure out under what conditions the E-bit should be set.

[When the router is an AS boundary router]
