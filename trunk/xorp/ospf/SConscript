# Copyright (c) 2009 XORP, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, Version 2, June
# 1991 as published by the Free Software Foundation. Redistribution
# and/or modification of this program under the terms of any other
# version of the GNU General Public License is not permitted.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. For more details,
# see the GNU General Public License, Version 2, a copy of which can be
# found in the XORP LICENSE.gpl file.
#
# XORP Inc, 2953 Bunker Hill Lane, Suite 204, Santa Clara, CA 95054, USA;
# http://xorp.net

# $XORP$

import os
Import('env')

subdirs = [
	'tests',
	'tools',
]

SConscript(dirs = subdirs, exports='env')

env = env.Clone()
is_shared = env.has_key('SHAREDLIBS')

env.AppendUnique(CPPPATH = [
    '#',
    '$BUILDDIR',
    ])

env.PrependUnique(LIBPATH = [
    '$BUILDDIR/libxorp',
    '$BUILDDIR/libcomm',
    '$BUILDDIR/libxipc',
    '$BUILDDIR/libproto',
    '$BUILDDIR/libfeaclient',
    '$BUILDDIR/policy/backend',
    '$BUILDDIR/policy/common',
    '$BUILDDIR/xrl/interfaces',
    '$BUILDDIR/xrl/targets',
    '$BUILDDIR/mrt',
    '.'
    ])

env.AppendUnique(LIBS = [
    'ospf',
    'ospfv2base',
    'ospfv3base',
    'policybackend',
    'policycommon',
    'feaclient',
    'ribxif',
    'findereventnotifierxif',
    'feaifmgrmirrorxif',
    'feaifmgrreplicatorxif',
    'profileclientxif',
    'fearawpkt4xif',
    'fearawpkt6xif',
    'feaifmgrmirrorbase',
    'xipc',
    'xorp',
    'xorp_proto',
    'comm',
])

libospfsrcs = [
	     'auth.cc',
	     'area_router.cc',
	     'external.cc',
	     'fletcher_checksum.cc',
	     'lsa.cc',
	     'ospf.cc',
	     'packet.cc',
	     'peer_manager.cc',
	     'peer.cc',
	     'policy_varrw.cc',
	     'routing_table.cc',
	     'xrl_io.cc',
	     'xrl_target.cc',
	     'vlink.cc'
             ]

if is_shared:
    libospf = env.SharedLibrary(target = 'libospf', source = libospfsrcs, LIBS = '')
else:
    libospf = env.StaticLibrary(target = 'libospf', source = libospfsrcs, LIBS = '')

ospfv2srcs = [
          'xorp_ospfv2.cc',
          ]

ospfv2 = env.Program(target = 'xorp_ospfv2', source = ospfv2srcs)

ospfv3srcs = [
          'xorp_ospfv3.cc',
          ]

ospfv3 = env.Program(target = 'xorp_ospfv3', source = ospfv3srcs)

#ospfpath = '$bindir'
ospfpath = '$exec_prefix/ospf'

env.Alias('install',
          env.InstallProgram(ospfpath, ospfv2))

env.Alias('install',
          env.InstallProgram(ospfpath, ospfv3))

if is_shared:
    env.Alias('install',
              env.InstallLibrary('$libdir', libospf))

Default(ospfv2, ospfv3)
