#Copyright (c) 2009 XORP, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, Version 2, June
# 1991 as published by the Free Software Foundation. Redistribution
# and/or modification of this program under the terms of any other
# version of the GNU General Public License is not permitted.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. For more details,
# see the GNU General Public License, Version 2, a copy of which can be
# found in the XORP LICENSE.gpl file.
#
# XORP Inc, 2953 Bunker Hill Lane, Suite 204, Santa Clara, CA 95054, USA;
# http://xorp.net

# $ID$

# TODO build static and shared libraries. do so concisely and without bugs.
# TODO make shared library linker flags portable to non-gnu linkers.
# TODO tone down linker line spamming, -lpcre etc; stage use of LIBS please.
# TODO cross compiles.
# TODO Add separate toolchain test for C99 varargs macros.
# TODO Add separate toolchain test for GNU varargs macros.
# TODO Fix default include/lib paths, pass in from environment.
# TODO Pass in DEBUG_CALLBACKS DEBUG_LOGGING_GLOBAL DEBUG_PRINT_FUNCTION_NAME
# from command line easily.
# TODO Merge scons-unfamiliar syntactic sugar from YHC's sconsfiles.
# TODO support non-gnu strip
# TODO support static *and* shared library build in same tree/run
# TODO disambiguate arch specification cross-platform
# TODO conditionalize new directory layout here

Help("""
    cross=true if you are doing a cross build. Default is false.
    arch={i686} to identify the target architecture.
    os={linux|freebsd|..} to identify the target os.
    rel={public17|..} to identify the target release.
    builddir=<some path> to specify a different build directory.
        Default is "obj/<arch>-<os>-<rel>".
    prefix=<some path> to specify a different install directory.
        Default is "/usr/local/xorp".
""")

import sys
import os
import string
import SCons
from SCons.Script.SConscript import SConsEnvironment
import SCons.Action
import SCons.Builder

vars = Variables()

vars.AddVariables(
    BoolVariable('shared', 'build with shared libraries', False),
    BoolVariable('strip',  'strip executables and libraries when installed', False),
    BoolVariable('debug_stl',  'Build with checked STL operations', False),
    BoolVariable('debug_msg',  'Build with debug messages', False),
    BoolVariable('debug_fn',  'Build with function names in debug_msg output', False),
    BoolVariable('debug_cb',  'Build with callback debugging', False),
    )

build_arch = os.uname()[4].lower()
build_os = os.uname()[0].lower()

host_arch = ARGUMENTS.get('arch')
if not host_arch:
	host_arch = build_arch

host_os = ARGUMENTS.get('os')
if not host_os:
	host_os = build_os

cross = ARGUMENTS.get('cross', build_os != host_os or build_arch != host_arch)
rel = ARGUMENTS.get('rel', 'public17')

sourcedir=Dir(".").abspath
builddir=Dir(ARGUMENTS.get('builddir', '#obj/' + host_arch+'-'+host_os+'-'+rel)).abspath

prefix = ARGUMENTS.get('prefix', '/usr/local/xorp')

print 'Cross build:      ', cross
print 'Architecture:     ', host_arch
print 'Operating System: ', host_os
print 'Release:          ', rel
print 'Source path:      ', sourcedir
print 'Build path:       ', builddir
print 'Install path:     ', prefix

env = Environment(
		  TOOLS = ['default', 'autotest', 'clntgen', 'tgtgen',
		           'TOOL_SUBST'],
		  ENV = os.environ,
		  CROSS = cross,
		  ARCH = host_arch,
		  OS = host_os,
		  REL = rel,
		  BUILDDIR = builddir,
		  CPPPATH=['/usr/sfw/include', '/opt/local/include', '/usr/local/include', '$BUILDDIR'],
		  LIBPATH=['/usr/sfw/lib', '/opt/local/lib', '/usr/local/lib'],
		  variables = vars)

env['DESTDIR'] = ARGUMENTS.get('DESTDIR', '')

if env['strip']:
    env['strip'] = True
    env['STRIP'] = "strip"
print 'Strip binaries:   ', env.has_key('strip')

if env['shared']:
    env['SHAREDLIBS'] = "defined"
print 'Shared libraries: ', env.has_key('SHAREDLIBS')

print 'Debug STL:        ', env['debug_stl']
# XXX Enabling debug messages for the whole tree may not be what you want,
# as it can lead to premature timeouts.
print 'Debug messages:   ', env['debug_msg']
print 'Debug function names: ', env['debug_fn']
print 'Debug callbacks:  ', env['debug_cb']

env['CONFIGURELOG'] = str(builddir) + os.sep + 'config.log'
env['CONFIGUREDIR'] = str(builddir) + os.sep + '.sconf_temp'

SConsEnvironment.Chmod = SCons.Action.ActionFactory(os.chmod,
    lambda dest, mode: 'Chmod("%s", 0%o)' % (dest, mode))

def InstallProgram(env, dest, files, perm = 0755):
    if env.has_key('DESTDIR'):
    	# NB: use simple concatenation
    	dest = env.Dir(env['DESTDIR'] + env.Dir(dest).path)
    obj = env.Install(dest, files)
    for i in obj:
	env.AddPostAction(i, env.Chmod(str(i), perm))
	if env.has_key('strip') and env.has_key('STRIP'):
	    env.AddPostAction(i, Action("$STRIP $TARGET"))
    return obj 
SConsEnvironment.InstallProgram = InstallProgram

def InstallScript(env, dest, files, perm = 0555):
    if env.has_key('DESTDIR'):
    	# NB: use simple concatenation
    	dest = env.Dir(env['DESTDIR'] + env.Dir(dest).path)
    obj = env.Install(dest, files)
    for i in obj:
	env.AddPostAction(i, env.Chmod(str(i), perm))
    return obj 
SConsEnvironment.InstallScript = InstallScript

def InstallLibrary(env, dest, files, perm = 0644):
    if env.has_key('DESTDIR'):
    	# NB: use simple concatenation
    	dest = env.Dir(env['DESTDIR'] + env.Dir(dest).path)
    obj = env.Install(dest, files)
    for i in obj:
	env.AddPostAction(i, env.Chmod(str(i), perm))
	if env.has_key('strip') and env.has_key('STRIP'):
	    env.AddPostAction(i, Action("$STRIP --strip-unneeded $TARGET"))
    return obj
SConsEnvironment.InstallLibrary = InstallLibrary

def InstallData(env, dest, files, perm = 0644):
    if env.has_key('DESTDIR'):
    	# NB: use simple concatenation
    	dest = env.Dir(env['DESTDIR'] + env.Dir(dest).path)
    obj = env.Install(dest, files)
    for i in obj:
	env.AddPostAction(i, env.Chmod(str(i), perm))
    return obj
SConsEnvironment.InstallData = InstallData

# only bindir, libdir actually used just now.
# follow freebsd hier(5) unless we've got better suggestions-
# what is equivalent ref for red hat / debian based systems?

env['prefix'] = prefix
exec_prefix = ARGUMENTS.get('exec_prefix', '$prefix')
env['exec_prefix'] = exec_prefix
env['bindir'] = ARGUMENTS.get('bindir', '$exec_prefix/bin')
env['sbindir'] = ARGUMENTS.get('sbindir', '$exec_prefix/sbin')
# TODO the routing daemons themselves should go here (never executed
# directly by users)
env['libexecdir'] = ARGUMENTS.get('libexecdir', '$exec_prefix/libexec')
# TODO put templates and .xrl files here.
env['datarootdir'] = ARGUMENTS.get('datarootdir', '$prefix/share')
# TODO ?
env['datadir'] = ARGUMENTS.get('datadir', '$datarootdir')
# TODO xorp.conf goes here.
env['sysconfdir'] = ARGUMENTS.get('sysconfdir', '$prefix/etc')
# TODO we don't have this state yet, and we should use /var for it.
env['localstatedir'] = ARGUMENTS.get('localstatedir', '$prefix/var')
# TODO libraries clearly go here.
env['libdir'] = ARGUMENTS.get('libdir', '$exec_prefix/lib')
# TODO incorporate a man page.
env['mandir'] = ARGUMENTS.get('mandir', '$datarootdir/man')

# XXX needed by scons xrl idl wrappers
# ...and rtrmgr/util.cc
env['XORP_SOURCEDIR'] = sourcedir
env['XORP_BUILDDIR'] = builddir

# turnoff bgp, olsr for now.
# XXX bgp is always built, olsr never built.
env['WITH_BGP'] = ARGUMENTS.get('enable-bgp', False)
env['WITH_OLSR'] = ARGUMENTS.get('enable-olsr', False)

########## start configure magic

if not env.GetOption('clean') and not env.GetOption('help'):
    from config.endian import CheckEndianness
    from config.member import CheckTypeMember
    from config.sysctl import CheckSysctl

    my_custom_tests = {
	'CheckEndianness' : CheckEndianness,
	'CheckTypeMember' : CheckTypeMember,
	'CheckSysctl' :     CheckSysctl
    }

    conf = env.Configure(config_h = str(builddir) + '/xorp_config.h',
			 log_file = str(builddir) + '/config.log',
			 custom_tests = my_custom_tests) 

    ##########
    # target os

    # friendly name of target
    osname = host_os
    if host_os == 'freebsd':
        osname = "FreeBSD"
        conf.Define('HOST_OS_FREEBSD')
        conf.Define('ENABLE_ADVANCED_MULTICAST_API')
    elif host_os == 'linux':
        osname = "Linux"
        conf.Define('HOST_OS_LINUX')
        conf.Define('HAVE_PROC_LINUX')
        conf.Define('ENABLE_ADVANCED_MULTICAST_API')
    elif host_os == 'netbsd':
	osname = "NetBSD"
	conf.Define('HOST_OS_NETBSD')
        conf.Define('ENABLE_ADVANCED_MULTICAST_API')
    elif host_os == 'sunos':
        osname = "Solaris"
        conf.Define('HOST_OS_SOLARIS')
    else:
	osname = sys.platform.upper()
    conf.Define('HOST_OS_NAME', '"' + osname + '"')

    # toolchain
    conf.Define('CPP_SUPPORTS_C99_VA_ARGS')
    conf.Define('CPP_SUPPORTS_GNU_VA_ARGS')

    # Big ball of mud.
    from config.allconfig import DoAllConfig
    DoAllConfig(env, conf, host_os)

    # Note: hard-coded paths pushed down to rtrmgr/util.cc environment.

    conf.Finish()

########## end configure magic

env['CFLAGS'] = Split(ARGUMENTS.get('CFLAGS', "-g"))
env['CXXFLAGS'] = Split(ARGUMENTS.get('CXXFLAGS', "-g"))

env.AppendUnique(CPPDEFINES = [
    ( '_FORTIFY_SOURCE', 0 ),
    ])

env.AppendUnique(CFLAGS = [
    '-Werror',
    '-W',
    '-Wall',
    '-Wwrite-strings',
    '-Wbad-function-cast',
    '-Wmissing-prototypes',
    '-Wcast-qual',
    '-Wmissing-declarations',
    '-Wpointer-arith',
    '-Wcast-align',
    '-Wstrict-prototypes',
    '-Wnested-externs'
    ])

env.AppendUnique(CXXFLAGS = [
    '-Werror',
    '-W',
    '-Wall',
    '-Wwrite-strings',
    '-Wcast-qual',
    '-Wpointer-arith',
    '-Wcast-align',
    '-Woverloaded-virtual',
    '-ftemplate-depth-25'
    ])

# XXX For GNU STL only at this time.
if env['debug_stl']:
    env.AppendUnique(CXXFLAGS = [
        '-D_GLIBCXX_DEBUG',
        '-D_GLIBCXX_DEBUG_PEDANTIC',
    ])

# XXX DEBUG_LOGGING_GLOBAL current a no-op.
if env['debug_msg']:
    env.AppendUnique(CFLAGS = [
        '-DDEBUG_LOGGING',
    ])
    env.AppendUnique(CXXFLAGS = [
        '-DDEBUG_LOGGING',
    ])

if env['debug_fn']:
    env.AppendUnique(CFLAGS = [
        '-DDEBUG_PRINT_FUNCTION_NAME',
    ])
    env.AppendUnique(CXXFLAGS = [
        '-DDEBUG_PRINT_FUNCTION_NAME',
    ])

if env['debug_cb']:
    env.AppendUnique(CFLAGS = [
        '-DDEBUG_CALLBACKS',
    ])
    env.AppendUnique(CXXFLAGS = [
        '-DDEBUG_CALLBACKS',
    ])

env.AppendUnique(RPATH = [
    '$libdir',
    ])

env.SConscript(['SConscript'], variant_dir='$BUILDDIR', exports='env', duplicate=0)

env.Help(vars.GenerateHelpText(env))
