# Copyright (c) 2009 XORP, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, Version 2, June
# 1991 as published by the Free Software Foundation. Redistribution
# and/or modification of this program under the terms of any other
# version of the GNU General Public License is not permitted.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. For more details,
# see the GNU General Public License, Version 2, a copy of which can be
# found in the XORP LICENSE.gpl file.
#
# XORP Inc, 2953 Bunker Hill Lane, Suite 204, Santa Clara, CA 95054, USA;
# http://xorp.net

# $XORP$

import os
Import('env')

e = env.Clone()

is_shared = env.has_key('SHAREDLIBS')

# XXX
#rippath = '$bindir'
rippath = '$exec_prefix/rip'

subdirs = ['tools']

SConscript(dirs = subdirs, exports = 'env')

#
# NB: The same sources are used for RIP and RIPng.  We use separate
# scons environments with different CPPDEFINES and SHOBJPREFIXES to
# support this.
#

# RIP/RIPng Library Sources.
libripsrcs = [
    'auth.cc',
    'output_table.cc',
    'output_updates.cc',
    'packet_queue.cc',
    'peer.cc',
    'port.cc',
    'redist.cc',
    'rib_notifier_base.cc',
    'rip_varrw.cc',
    'route_db.cc',
    'route_entry.cc',
    'update_queue.cc'
    ]

# RIP/RIPng XRL Library Sources.
libripxrlsrc = [
    'xrl_config.cc',
    'xrl_port_manager.cc',
    'xrl_port_io.cc',
    'xrl_process_spy.cc',
    'xrl_redist_manager.cc',
    'xrl_rib_notifier.cc'
    ]

# RIP Main/Driver Sources
ripsrcs = [
    'xorp_rip_main.cc',
    'xrl_target_rip.cc'
    ]

# RIPng Main/Driver Sources
ripngsrcs = [
    'xorp_rip_main.cc',
    'xrl_target_ripng.cc'
    ]


#
# RIP
#

e['OBJPREFIX'] = 'rip-'
e['SHOBJPREFIX'] = 'rip-'

e.AppendUnique(CPPPATH = [
    '#',
    '$BUILDDIR'
    ])

e.AppendUnique(CPPDEFINES = [
    'INSTANTIATE_IPV4'
    ])

e.AppendUnique(LIBPATH = [
    '../libxorp',
    '../libcomm',
    '../libxipc',
    '../libproto',
    '../libfeaclient',
    '../policy/backend',
    '../policy/common',
    '../xrl/interfaces',
    '../xrl/targets',
    '.'
    ])

e.AppendUnique(LIBS = [
    'rip',
    'ripxrl',
    'ripbase',
    'findereventnotifierxif',
    'feaclient',
    'feaifmgrmirrorxif',
    'feaifmgrreplicatorxif',
    'feaifmgrmirrorbase',
    'socket4xif',
    'policybackend',
    'policycommon',
    'ribxif',
    'xipc',
    'xorp',
    'proto',
    'comm',
])


librip = e.SharedLibrary(target = 'librip', source = libripsrcs, LIBS = '')

libripxrl = e.SharedLibrary(target = 'libripxrl', source = libripxrlsrc, LIBS = '')

rip = e.Program(target = 'xorp_rip', source = ripsrcs)

e.Alias('install',
          [ e.InstallProgram(rippath, rip),
            e.InstallLibrary('$libdir', librip),
            e.InstallLibrary('$libdir', libripxrl) ])

#
# RIPng
#
e = env.Clone()

e['OBJPREFIX'] = 'ripng-'
e['SHOBJPREFIX'] = 'ripng-'

e.AppendUnique(CPPPATH = [
    '#',
    '$BUILDDIR',
    ])

e.AppendUnique(CPPDEFINES = [
    'INSTANTIATE_IPV6'
    ])

e.AppendUnique(LIBPATH = [
    '../libxorp',
    '../libcomm',
    '../libxipc',
    '../libproto',
    '../libfeaclient',
    '../policy/backend',
    '../policy/common',
    '../xrl/interfaces',
    '../xrl/targets',
    '.'
    ])

e.AppendUnique(LIBS = [
    'ripng',
    'ripngxrl',
    'ripngbase',
    'findereventnotifierxif',
    'feaclient',
    'feaifmgrmirrorxif',
    'feaifmgrreplicatorxif',
    'feaifmgrmirrorbase',
    'socket6xif',
    'policybackend',
    'policycommon',
    'ribxif',
    'xipc',
    'xorp',
    'proto',
    'comm',
])


if is_shared:
    libripng = e.SharedLibrary(target = 'libripng', source = libripsrcs, LIBS = '')
    libripngxrl = e.SharedLibrary(target = 'libripngxrl', source = libripxrlsrc, LIBS = '')
    e.Alias('install',
                [ e.InstallLibrary('$libdir', libripng),
                  e.InstallLibrary('$libdir', libripngxrl) ])
else:
    libripng = e.StaticLibrary(target = 'libripng', source = libripsrcs, LIBS = '')
    libripngxrl = e.StaticLibrary(target = 'libripngxrl', source = libripxrlsrc, LIBS = '')

ripng = e.Program(target = 'xorp_ripng', source = ripngsrcs)

e.Alias('install', e.InstallProgram(rippath, ripng))

Default(rip, ripng)
