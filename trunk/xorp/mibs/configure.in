dnl -*- sh -*-
dnl
dnl $XORP: xorp/mibs/configure.in,v 1.31 2008/07/21 14:14:19 bms Exp $
dnl

dnl ---------------------------------------------------------------------------
dnl Process this file with autoconf to produce a configure script.
dnl ---------------------------------------------------------------------------

dnl ---------------------------------------------------------------------------
dnl Boilerplate
dnl ---------------------------------------------------------------------------

AC_INIT
AC_PREREQ(2.61)
AC_REVISION([$XORP: xorp/mibs/configure.in,v 1.31 2008/07/21 14:14:19 bms Exp $])
AC_CONFIG_AUX_DIR(../config)
AC_CANONICAL_TARGET

dnl ----------------------------
dnl automake options
dnl ----------------------------
AM_INIT_AUTOMAKE(mibs, 1.6-WIP)
AM_MAINTAINER_MODE

dnl ---------------------------------------------------------------------------
dnl Compiler probing and basic tools (libtool prerequisites)
dnl ---------------------------------------------------------------------------

AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_INSTALL
AC_PROG_LN_S

AC_LANG(C++)

dnl
dnl Include the macros for testing compiler-supported command-line options
dnl
builtin(include, ../config/compiler_flags.m4)

dnl ----------------------------
dnl  Get project-specific macros
dnl ----------------------------

builtin(include, ../config/acxorp.m4)

dnl ----------------------------
dnl libtool options
dnl ----------------------------
AC_DISABLE_STATIC
AC_DISABLE_FAST_INSTALL

dnl
dnl A hack to fix the generation of shared libraries.
dnl Apparently, libtool insists of using the C compiler to link the shared
dnl libraries, but this doesn't work for C++ shared libraries.
dnl Hence, we temporary replace the CC value with the CXX value.
dnl
_old_cc="${CC}"
CC="${CXX}"
AC_PROG_LIBTOOL
CC="${_old_cc}"

AC_VALIDATE_CACHED_SYSTEM_TUPLE(
    echo "Removing stale config.cache and restarting configure"
    rm -f config.cache
    exec ./configure
)

dnl
dnl Append "mibs" to the installation prefix, because we are using
dnl a separate configure.in to configure the mibs stuff, and we want
dnl to install everything relative to the xorp/mibs sub-directory.
dnl
prefix="${prefix}/mibs"

dnl ---------------------------------------------------------------------------
dnl Command line options
dnl ---------------------------------------------------------------------------

dnl -----------------------------------------
dnl --disable-debug (XXX: enabled by default)
dnl -----------------------------------------
AC_ARG_ENABLE([debug],
	      AC_HELP_STRING([--disable-debug],
			     [disable compiler debug information]),
	      [],
	      [enable_debug="yes";])

dnl -----------------------------------------
dnl --enable-stl-debug (GCC)
dnl -----------------------------------------
AC_ARG_ENABLE([stl-debug],
	      AC_HELP_STRING([--enable-stl-debug],
			     [enable STL debugging (requires GCC)]))

dnl ----------------------------
dnl --enable-optimize
dnl ----------------------------
AC_ARG_ENABLE([optimize],
	      AC_HELP_STRING([--enable-optimize],
			     [enable compiler optimizations]))

dnl ----------------------------
dnl --enable-profile
dnl ----------------------------
AC_ARG_ENABLE([profile],
	      AC_HELP_STRING([--enable-profile],
			     [enable profiling]))

dnl ----------------------------------------
dnl --disable-compiler-pipe (XXX: enabled by default)
dnl ----------------------------------------
AC_ARG_ENABLE([compiler-pipe],
	      AC_HELP_STRING([--disable-compiler-pipe],
			     [disable compiler's -pipe compilation option]),
	      [],
	      [enable_compiler_pipe="yes";])

dnl ----------------------------
dnl --with-dmalloc
dnl ----------------------------
dnl XXX: XR_WITH_DMALLOC_DIR (a local modified version of AM_WITH_DMALLOC)
dnl is specified later, so it will overwrite -ld
builtin(include, ../config/dmalloc.m4)

dnl ----------------------------
dnl --with-openssl
dnl ----------------------------
builtin(include, ../config/acopenssl.m4)

dnl ----------------------------
dnl --with-snmp (XXX: disabled by default)
dnl ----------------------------
AC_ARG_WITH([snmp],
	    AC_HELP_STRING([--with-snmp],
			  [build XORP MIBs for Net-SNMP]),
	    [],
	    [with_snmp="false";]
)

dnl ----------------------------
dnl --with-path-to-snmpd
dnl ----------------------------
AC_ARG_WITH([path-to-snmpd],
	    AC_HELP_STRING([--with-path-to-snmpd=DIR],
			   [specify path to the snmpd executable]),
	    [snmpd=${withval}/snmpd;],
	    [snmpd="not_found";]
)

dnl ----------------------------
dnl --with-path-to-net-snmp-config
dnl ----------------------------
AC_ARG_WITH([path-to-net-snmp-config],
	    AC_HELP_STRING([--with-path-to-net-snmp-config=DIR],
			   [specify path to the net-snmp-config executable]),
	    [net_snmp_config_dir=${withval};
	     net_snmp_config=${net_snmp_config_dir}/net-snmp-config;],
	    [net_snmp_config_dir="";
	     net_snmp_config="net-snmp-config";]
)

dnl ---------------------------------------------------------------------------
dnl Check for programs
dnl ---------------------------------------------------------------------------

dnl ---------------------------------------------------------------------------
dnl SNMP
dnl ---------------------------------------------------------------------------

if test "${with_snmp}" = "yes"; then
    dnl
    dnl Test for the "net-snmp-config" program
    dnl
    if test "${net_snmp_config_dir}" = ""; then
	AC_CHECK_PROG(net_snmp_found, net-snmp-config, "true", "false")
    else
	AC_CHECK_PROG(net_snmp_found, net-snmp-config, "true", "false",
		      ${net_snmp_config_dir})
    fi
else
    net_snmp_found="skip_check"
    snmpd="skip_check"
fi

if test "${net_snmp_found}" = "true";  then
    net_snmp_v=`${net_snmp_config} --version`
    net_snmp_maj=`echo $net_snmp_v | cut -f 1 -d.`
    net_snmp_min=`echo $net_snmp_v | cut -f 2 -d.`
    net_snmp_rev=`echo $net_snmp_v | cut -f 3 -d.`
    dnl
    dnl XXX: if the revision number is missing, then give it value of 0
    dnl
    if test "${net_snmp_rev}" = ""; then
	net_snmp_rev=0
    fi
    AC_CACHE_CHECK([if net-snmp version equal or newer than 5.0.6],
		   [ac_cv_net_snmp_usable],
		   [
		    net_snmp_too_old="true"
		    while test "${net_snmp_too_old}" = "true"; do
			if test "${net_snmp_maj}" -lt "5" ; then
			    break;
			fi
			if test "${net_snmp_maj}" -gt "5" ; then
			    net_snmp_too_old="false"
			    break;
			fi
			if test "${net_snmp_min}" -lt "0" ; then
			    break;
			fi
			if test "${net_snmp_min}" -gt "0" ; then
			    net_snmp_too_old="false"
			    break;
			fi
			if test "${net_snmp_rev}" -lt "6" ; then
			    break;
			fi
			if test "${net_snmp_rev}" -gt "6" ; then
			    net_snmp_too_old="false"
			    break;
			fi
			net_snmp_too_old="false"
			break;
		    done
		    if test "${net_snmp_too_old}" != "true"; then
			ac_cv_net_snmp_usable="yes"
		    else
			ac_cv_net_snmp_usable="no"
			snmpd="skip_check"
		    fi
		    if test "${net_snmp_maj}" -eq "5" -a "${net_snmp_min}" -le "1"; then
			ac_cv_net_snmp_broken_inline="yes"
		    else
			ac_cv_net_snmp_broken_inline="no"
		    fi
		    dnl
		    dnl XXX: As of net-snmp-5.2, the ASN_IPADDRESS values are
		    dnl returned in network order.
		    dnl
		    if test "${net_snmp_maj}" -eq "5" -a "${net_snmp_min}" -lt "2"; then
			ac_cv_net_snmp_asn_ipaddresses_in_host_order="yes"
		    else
			ac_cv_net_snmp_asn_ipaddresses_in_host_order="no"
		    fi
		   ]
    )
    if test "${ac_cv_net_snmp_usable}" != "yes" ; then
	AC_MSG_WARN(net-snmp version too old)
    fi
    if test "${ac_cv_net_snmp_broken_inline}" = "yes" ; then
	AC_MSG_WARN(net-snmp version has broken inlining defines)
	AC_DEFINE(HAVE_BROKEN_NETSNMP_INLINE, 1, [])
    fi
    if test "${ac_cv_net_snmp_asn_ipaddresses_in_host_order}" = "yes" ; then
	AC_MSG_WARN(net-snmp version returns ASN_IPADDRESS in host order)
	AC_DEFINE(HAVE_NETSNMP_ASN_IPADDRESS_IN_HOST_ORDER)
    fi
elif test "${net_snmp_found}" = "false"; then
    AC_MSG_WARN(Net-SNMP not found! MIB modules will not be built)
    snmpd="skip_check"
fi


if test "${snmpd}" = "not_found"; then
    AC_PATH_PROG(snmpd, snmpd, "not_found", /usr/local/sbin)
fi

if test "${snmpd}" = "not_found";  then
    echo "checking again for snmpd in another directory"
    AC_PATH_PROG(snmpd2, snmpd, "not_found", /usr/sbin)
    snmpd=$snmpd2
fi

snmpd_valid="no"
if test "${snmpd}" = "not_found" ; then
    AC_MSG_WARN(snmpd not found:  snmp test scripts will not work)
elif test "${snmpd}" = "skip_check"; then
    AC_MSG_CHECKING(if snmpd can be started)
    AC_MSG_RESULT(skipped)
else
    AC_MSG_CHECKING(if snmpd can be started)
    # use the dlmod directive to see if the agent was compiled with dynamic
    # MIB support.  dummy MIB modules will only generate warnings
    echo 'dlmod dummy doubledummy' > conftestsnmp.conf
    test_ports='51510 51520 51530 51540 51550'

    #
    # If net-snmp version is >= 5.2 then the logfile argument is "-Lf <file>",
    # otherwise it is "-l <file>".
    #
    snmpd_log_output_arg="-l"
    if test "${net_snmp_maj}" -gt "5" ; then
	snmpd_log_output_arg="-Lf"
    fi
    if test "${net_snmp_maj}" -eq "5" -a "${net_snmp_min}" -ge "2"; then
	snmpd_log_output_arg="-Lf"
    fi

    snmpd_base_args="-f -r ${snmpd_log_output_arg} conftestsnmp.log -c conftestsnmp.conf"
    # On Linux snmpd seems to need the "-p" flag.
    for args in "" "-p"; do
	for p in ${test_ports}; do
	    ${snmpd} ${snmpd_base_args} ${args} udp:localhost:$p&
	    pid=$!
	    sleep 3
	    if ps -p ${pid} > /dev/null ; then
		kill ${pid}
		snmpd_valid="yes"
		break 2
	    fi
	done
    done
    if test "${snmpd_valid}" = "yes" ; then
	# Verify that dlmod directive was recognized
	if ( grep -i -e 'Unknown.*token.*dlmod' conftestsnmp.log ); then
	    echo "-------------------------------------------------------------"
	    echo "It looks like your Net-SNMP agent was not compiled with      "
	    echo "support for shared libraries.  This is option is enabled by  "
	    echo "default if your platform supports it.  You may try to recom- "
	    echo "compile Net-SNMP with the option --enable-shared.            "
            echo "If you are running Linux and Net-SNMP v 5.0.8 you may have   "
	    echo -n "to apply this patch: "
	    echo "http://sf.net/tracker/index.php?func=detail&aid=708409&group_id=12694&atid=112694"
	    echo ""
            echo "For Linux and Net-SNMP v 5.0.9 the patch is:"
	    echo "http://sourceforge.net/tracker/index.php?func=detail&aid=905573&group_id=12694&atid=456380"
	    echo ""
	    echo "If you don't know how to resolve the problem and do not want to "
	    echo "see this message again, run ./configure --without-snmp          "
	    echo "-------------------------------------------------------------"
	    snmpd_valid="no"
	fi
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
        echo "-------------------------------------------------------------   "
        echo "Unable to start snmpd. This is the snmpd log file:              "
	echo
	cat conftestsnmp.log
	echo ""
	echo "If you don't know how to resolve the problem and do not want to "
	echo "see this message again, run ./configure --without-snmp          "
        echo "-------------------------------------------------------------   "
    fi
fi

oldCPPFLAGS=${CPPFLAGS}
while test "${net_snmp_found}" = "true"; do
    NETSNMPCFLAGS=`${net_snmp_config} --cflags`

    # Some versions of net-snmp are broken with respect to the use of
    # the 'inline' keyword and various C++ compilers, so can't be
    # explicitly told not to inline.
    # It is OK to say -DNETSNMP_NO_INLINE to net-snmp >= 5.2.1,
    # but not < 5.1.0.
    if test "${ac_cv_net_snmp_broken_inline}" = "no"; then
	NETSNMPCFLAGS="${NETSNMPCFLAGS} -DNETSNMP_NO_INLINE"
	XR_TRY_ADD_CFLAGS("-DNETSNMP_NO_INLINE")
	XR_TRY_ADD_CXXFLAGS("-DNETSNMP_NO_INLINE")
    fi

    # Darwin 7.0.0 / OS X 10.3 on ppc gives ppc and i386 arch flags which
    # the default compiler cannot compile.
    XR_CHECK_CFLAG(${NETSNMPCFLAGS}, snmpd_flags_valid="yes", snmpd_flags_valid="no")
    if test "${snmpd_flags_valid}" = "no" ; then
	echo "-------------------------------------------------------------   "
	echo "'${net_snmp_config} --cflags' gave invalid cflags!              "
	echo "-------------------------------------------------------------   "
	snmpd_valid="no"
	break
    fi

    AC_SUBST(NETSNMPCFLAGS)

    CPPFLAGS=${NETSNMPCFLAGS}
    AC_CHECK_HEADERS([net-snmp/agent/net-snmp-agent-includes.h],
		     [net_snmp_agent_includes_bug="no"],
		     [net_snmp_agent_includes_bug="yes"],
		     [
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
		     ]
    )
    if test "${net_snmp_agent_includes_bug}" = "yes" ; then
	AC_MSG_WARN(File <net-snmp/agent/net-snmp-agent-includes.h> does not appear usable)
	snmpd_valid="no"
	break
    fi
    AC_CHECK_HEADERS([net-snmp/library/container.h],
		     [net_snmp_container_bug="no"],
		     [net_snmp_container_bug="yes"],
		     [
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
		     ]
    )
    if test "${net_snmp_container_bug}" = "yes" ; then
	AC_MSG_WARN(File <net-snmp/library/container.h> does not appear usable)
	snmpd_valid="no"
	break
    fi
    break
done
CPPFLAGS=${oldCPPFLAGS}

if test "${snmpd_valid}" = "yes" ; then
    MIBS="mibs"
else
    AC_MSG_WARN(XORP MIBs will not be built)
    MIBS=""
fi

AC_SUBST(MIBS)

dnl ---------------------------------------------------------------------------
dnl Check for libraries
dnl ---------------------------------------------------------------------------

dnl XXX Into C to avoid name mangling problems when checking libraries
AC_LANG_C

AC_SEARCH_LIBS(socket, socket)
AC_SEARCH_LIBS(inet_addr, nsl)
AC_SEARCH_LIBS(dlopen, dl)
AC_SEARCH_LIBS(hstrerror, resolv)

dnl Replace main with a function in -lc:
dnl AC_CHECK_LIB(c, main)
dnl XXX: XR_WITH_DMALLOC_DIR must be after -lc otherwise it won't have efect
dnl XXX: XR_WITH_DMALLOC_DIR is a local modified version of AM_WITH_DMALLOC
XR_WITH_DMALLOC_DIR
dnl Replace main with a function in -lutil:
dnl AC_CHECK_LIB(util, main)
dnl AC_CHECK_LIB(crypt, crypt)

dnl -- Back to C++ now we've finished checking for libraries
AC_LANG_CPLUSPLUS


dnl ---------------------------------------------------------------------------
dnl Check for system services
dnl ---------------------------------------------------------------------------


dnl ---------------------------------------------------------------------------
dnl Check for compiler characteristics
dnl ---------------------------------------------------------------------------

dnl ----------------------------
dnl GCC-specific warning flags
dnl ----------------------------

if test "${GCC}" = "yes" ; then
    dnl
    dnl Filter-out the "-g" flag
    dnl
    CFLAGS=`echo $CFLAGS |  sed 's/-g//g'`
    CXXFLAGS=`echo $CXXFLAGS |  sed 's/-g//g'`

    dnl
    dnl If debugging is enabled, try to add the "-g" flag
    dnl
    if test "${enable_debug}" = "yes" ; then
	XR_TRY_ADD_CFLAGS("-g")
	XR_TRY_ADD_CXXFLAGS("-g")
    fi

    dnl
    dnl TODO: add the following flags to gcc/g++:
    dnl       -ansi -pedantic -Wformat=2
    dnl
    dnl XXX: Flag -Wtraditional is not recommended for C, because:
    dnl   - On FreeBSD-4.5 macros like IN_CLASSA(i) from netinet/in.h
    dnl     create a warning for gcc 2.95.3
    dnl   - On Linux RedHat 7.2, #elif creates a warning for gcc 2.96
    dnl
    dnl XXX: Flag -Wnon-const-format is not included, because it appears
    dnl to exist only on earlier versions of gcc (e.g., gcc-2.95.x),
    dnl and only on FreeBSD, but not on Linux. In addition, this flag
    dnl appears to be problematic, because if it is enabled we cannot
    dnl use statements like "vfprintf(stderr, fmt, ap);" where "fmt"
    dnl is a variable (e.g., defined as "const char *").
    dnl
    dnl XXX: For extra debugging, the following g++ flag may be enabled
    dnl	and added to CXXFLAGS: -D_GLIBCXX_DEBUG
    dnl
    dnl XXX: Intel compiler, although tries to mimic GCC, has different
    dnl warnings handling:
    dnl   - It doesn't support most of the GCC -W<feature> options.
    dnl     The XR_TRY_ADD_* macros should handle this, but they don't.
    dnl   - Option -Wall has different meaning than in GCC, it really
    dnl     means ALL warnings and remarks the compiler knows about.
    dnl
    dnl XXX: The first flag to check (and eventually use for further checks)
    dnl should be "-Werror". Otherwise warnings about a flag being valid
    dnl for C only for example might not be detected.
    dnl
    if test "${ICC}" = "yes" ; then
	CPARANOIDFLAGS="-Werror"
	CXXPARANOIDFLAGS="-Werror"
    else
	CPARANOIDFLAGS="-Werror -W -Wall -Wwrite-strings -Wbad-function-cast -Wmissing-prototypes -Wcast-qual -Wmissing-declarations -Wpointer-arith -Wcast-align -Wstrict-prototypes -Wnested-externs"
	CXXPARANOIDFLAGS="-Werror -W -Wall -Wwrite-strings -Wcast-qual -Wpointer-arith -Wcast-align -Wstrict-prototypes -Woverloaded-virtual -Wtraditional"
    fi

    XR_TRY_ADD_CFLAGS($CPARANOIDFLAGS)
    XR_TRY_ADD_CXXFLAGS($CXXPARANOIDFLAGS)
    XR_TRY_ADD_CXXFLAGS("-ftemplate-depth-25")

    dnl
    dnl Try to add the -pipe option, which can significantly speed up
    dnl compile runs by avoiding the use of temporary files.
    dnl
    if test "${enable_compiler_pipe}" = "yes" ; then
	XR_TRY_ADD_CFLAGS("-pipe")
	XR_TRY_ADD_CXXFLAGS("-pipe")
    fi

    dnl
    dnl Default compiler flags have optimization turned on which
    dnl can cause helpful debugging info to be optimized out.
    dnl
    if test "${enable_optimize}" != "yes" ; then
	dnl
	dnl Could just append -O0, but two -O args are icky
	dnl We make assumption change is O2 because extended regexps
	dnl are not portable...
	dnl
	changequote(<<, >>)dnl preserve braces in sed expressions
	CFLAGS=`echo $CFLAGS | sed 's/-O2//g'`
	CXXFLAGS=`echo $CXXFLAGS | sed 's/-O2//g'`
	changequote([, ])dnl
    fi
    if test "${enable_profile}" = "yes" ; then
	CFLAGS="${CFLAGS} -pg"
	CXXFLAGS="${CXXFLAGS} -pg"
    fi
    if test "${enable_stl_debug}" = "yes" ; then
	CXXFLAGS="${CXXFLAGS} -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC"
    fi

    dnl
    dnl Conditionally add the user-specified flags that must be after
    dnl all other compiler flags.
    dnl
    dnl Those are specified in the "CFLAGS_END" and "CXXFLAGS_END"
    dnl environmental variables (for the C and C++ compiler respectively).
    dnl
    XR_TRY_ADD_CFLAGS($CFLAGS_END)
    XR_TRY_ADD_CXXFLAGS($CXXFLAGS_END)
fi


dnl ---------------------------------------------------------------------------
dnl Add files to under-go substitution here.
dnl ---------------------------------------------------------------------------

AC_CONFIG_FILES([
    Makefile
    snmpdscripts/Makefile
    tests/Makefile
])

AC_CONFIG_FILES([snmpdscripts/startsnmp], [chmod a+x snmpdscripts/startsnmp])
AC_CONFIG_FILES([tests/test_bgpmib.sh], [chmod a+x tests/test_bgpmib.sh])

dnl -------------------------------------------------------
dnl Perform substitutions.
dnl -------------------------------------------------------

AC_OUTPUT

dnl ------------------------
dnl Print the compiler flags
dnl ------------------------
echo "Compiler C flags = $CFLAGS"
echo "Compiler C++ flags = $CXXFLAGS"

dnl ---------------------------------------------------------------------------
dnl END
dnl ---------------------------------------------------------------------------
