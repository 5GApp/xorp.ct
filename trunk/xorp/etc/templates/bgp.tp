protocols {
  bgp {
    bgp-id: ipv4;
    local-as: uint;
    peer @: text {
      peer-port: uint = 179;
      local-port: uint = 179;
      local-ip: text = "";
      as: uint;
      next-hop: ipv4;
      holdtime: uint=120;
      disable: bool = false;
    }
  }
}
		

protocols {
  bgp {
    %modinfo: provides bgp;
    %modinfo: depends rib;
    %modinfo: path "../bgp/bgp";
    bgp-id {
      %set: xrl "bgp/bgp/0.2/set_bgpid?id:ipv4=$(@)";
      %get: xrl "bgp/bgp/0.2/get_bgpid->id:ipv4";
    }
    local-as {
      %set: xrl "bgp/bgp/0.2/set_local_as?as:u32=$(@)";
      %get: xrl "bgp/bgp/0.2/get_local_as->as:u32";
    }
    peer @ {
      %create: xrl "bgp/bgp/0.2/add_peer?local_ip:txt=$(@.local-ip)&local_port:u32=$(@.local-port)&peer_ip:txt=$(@)&peer_port:u32=$(@.peer-port)&as:u32=$(@.as)&next_hop:ipv4=$(@.next-hop)&holdtime:u32=$(@.holdtime)";
      %delete: xrl "bgp/bgp/0.2/delete_peer?local_ip:txt=$(@.local-ip)&local_port:u32=$(@.local-port)&peer_ip:txt=$(@)&peer_port:u32=$(@.peer-port)";
      %activate: xrl "bgp/bgp/0.2/enable_peer?local_ip:txt=$(@.local-ip)&local_port:u32=$(@.local-port)&peer_ip:txt=$(@)&peer_port:u32=$(@.peer-port)";
      peer-port {
	%set:; /*the no-op set is to indicate that this node can be set, but 	           not changed*/
      }
      local-port {
	%set:;
      }
      local-ip {
	%set:;
      }
      as {
	%set:;
      }
      holdtime {
	%set:;
      }
      next-hop {
	%set:;
      }
      disable {
        %set: xrl "bgp/bgp/0.2/set_peer_state?local_ip:txt=$(peer.@.local-ip)&local_port:u32=$(peer.@.local-port)&peer_ip:txt=$(peer.@)&peer_port:u32=$(peer.@.peer-port)&toggle:bool=`~$(@)`";
      }
    }
  }
}
		
