dnl This is the input file which autoconf uses to construct a
dnl "configure" script for the tecla library. It is a bourne shell
dnl script which autoconf pre-processes with the m4 preprocessor to
dnl expand autoconf-defined m4 macros such as AC_INIT().  The
dnl following line just initializes autoconf. Autoconf interprets the
dnl single argument as the name of an arbitrary file, which it uses to
dnl ensure that it is being run correctly from the directory which
dnl contains the libtecla source code.

AC_INIT([xorp-libtecla], [2.0-WIP], [feedback@xorp.org])
AC_CONFIG_AUX_DIR(../../config)
AC_CONFIG_MACRO_DIR(../../config)
AC_CANONICAL_SYSTEM

dnl configure automake
AM_INIT_AUTOMAKE([foreign])

dnl configure libtool
AC_DISABLE_SHARED
AC_DISABLE_FAST_INSTALL
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL 

dnl Here we set the major version number of the tecla library.
dnl Incrementing this number implies that a change has been made to
dnl the library's public interface, which makes it binary incompatible
dnl with programs that were linked with previous shared versions of
dnl the tecla library.  Incompatible changes of this type should be
dnl avoided at all costs, so it is hoped that the major version number
dnl won't ever have to change. The major version number must be a
dnl small integer number, preferably a single numeric digit.

AC_SUBST(MAJOR_VER)
MAJOR_VER="1"

dnl Set the minor version number of the tecla library. This number
dnl should be incremented by one whenever additional functionality,
dnl such as new functions or modules, are added to the library. The
dnl idea is that a program that was linked with a shared library of
dnl the same major version number, but a lower minor version number,
dnl will continue to function when the run-time loader links it
dnl against the updated version.  The minor version number must be a
dnl small integer number, which should be reset to 0 whenever the
dnl major version number is incremented.

AC_SUBST(MINOR_VER)
MINOR_VER="4"

dnl Set the micro version number of the tecla library. This is
dnl incremented whenever modifications to the library are made which
dnl make no changes to the public interface, but which fix bugs and/or
dnl improve the behind-the-scenes implementation.  The micro version
dnl number should be reset to 0 whenever the minor version number is
dnl incremented.  The micro version number must be a small integer
dnl number.

AC_SUBST(MICRO_VER)
MICRO_VER="0"

dnl The AC_PROG_CC line looks for a C compiler, and if gcc is chosen,
dnl sets the $GCC shell variable to "yes". Make sure that CFLAGS is
dnl set to something first, to prevent AC_PROG_CC from substituting -g
dnl for the optimization level.

CFLAGS="$CFLAGS"
AC_PROG_CC

dnl Apparently not all implementations of the 'make' command define
dnl the MAKE variable. The following directive creates a variable
dnl called SET_MAKE which when expanded in a makefile is either empty
dnl if the local 'make' command was found to define the MAKE variable,
dnl or contains an assignment which will give the MAKE variable the
dnl value 'make'.

AC_PROG_MAKE_SET

dnl The following directive causes autoconf to see if symbolic links
dnl are supported on the current filesystem. If so, it sets the
dnl variable LN_S to "ln -s". Otherwise it sets LN_S to just "ln".
dnl This allows us to create symbolic links where possible, but falls
dnl back to creating hard links where symbolic links aren't available.

AC_PROG_LN_S

dnl The following macro searches for the best implementation of awk
dnl on the host system, and records it in the AWK shell variable.

AC_PROG_AWK

dnl In early versions of Solaris, some libraries are in /usr/ccs/lib,
dnl where gcc doesn't look. The tests below for the curses library
dnl would thus fail without this directory being added to the search
dnl path. We thus add it here before the tests. Note that in the
dnl following, since [ and ] are m4 quotes, and m4 will remove the
dnl outermost quotes when it processes this file, we have to double
dnl them up here to get [0-6] to appear in the output configure
dnl script.

case $target in
*-sun-solaris2.[[0-6]]|*-sun-solaris2.[[0-6]].*)
  LIBS="$LIBS -L/usr/ccs/lib"
  ;;
esac

dnl The following lines look for terminfo functions in the normal
dnl curses library. If not found, they are searched for in the GNU
dnl ncurses library. If the terminfo functions still aren't found,
dnl then termcap functions are searched for in the curses library.  If
dnl either set of functions is found, the corresponding variable
dnl USE_TERMINFO or USE_TERMCAP is arranged to be defined in CFLAGS,
dnl via the exported DEFINES shell variable, and the library in which
dnl they were found is appended to the LIBS shell variable.

AC_CHECK_LIB(curses, tigetstr, [
  AC_DEFINE(USE_TERMINFO)
  LIBS="$LIBS -lcurses"
], [AC_CHECK_LIB(ncurses, tigetstr, [
  AC_DEFINE(USE_TERMINFO)
  LIBS="$LIBS -lncurses"
], [AC_CHECK_LIB(curses, tgetstr, [
  AC_DEFINE(USE_TERMCAP)
  LIBS="$LIBS -lcurses"
  AC_CHECK_HEADER(termcap.h, AC_DEFINE(HAVE_TERMCAP_H))
])])])

dnl
dnl Check for various headers
dnl
AC_CHECK_HEADER(sys/ioctl.h, AC_DEFINE(HAVE_SYS_IOCTL_H))
AC_CHECK_HEADER(unistd.h, AC_DEFINE(HAVE_UNISTD_H))
AC_CHECK_HEADER(termios.h, AC_DEFINE(HAVE_TERMIOS_H))

dnl The following variable lists the targets that will be created if
dnl the user runs make without any arguments. Initially we assume
dnl that we can create both the normal and the reentrant versions
dnl of the library.

AC_SUBST(TARGETS)
TARGETS="normal reentrant"

dnl Check for reentrant functions by attempting to compile and link a
dnl temporary program which calls them, being sure to include the
dnl appropriate headers and define _POSIX_C_SOURCE, just in case any
dnl of the functions are defined as macros. In the following,
dnl AC_CACHE_CHECK outputs the message "checking for reentrant
dnl functions". If this check has been done before, it assigns the
dnl cached yes/no value to tecla_cv_reentrant.  Otherwise it uses
dnl AC_TRY_LINK() to attempt to compile and link the specified dummy
dnl program, and sets tecla_cv_reentrant to yes or no, depending on
dnl whether this succeeds. Finally it caches the value of
dnl tecla_cv_reentrant in the file config.cache, and writes "yes" or
dnl "no" to the terminal.

AC_CACHE_CHECK(for reentrant functions, tecla_cv_reentrant, [
  KEPT_CFLAGS="$CFLAGS"
  CFLAGS="$CFLAGS -D_POSIX_C_SOURCE=200112L"
  AC_TRY_LINK([
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <pwd.h>
  ], [
    (void) readdir_r(NULL, NULL, NULL);
    (void) getpwuid_r(geteuid(), NULL, NULL, 0, NULL);
    (void) getpwnam_r(NULL, NULL, NULL, 0, NULL);
  ], tecla_cv_reentrant=yes, tecla_cv_reentrant=no)
  CFLAGS="$KEPT_CFLAGS"
])

dnl If the necessary reentrant functions weren't found to be
dnl available, default to only compiling the non-reentrant version of
dnl the library.

if test $tecla_cv_reentrant = no; then
  TARGETS="normal"
fi

dnl Check for the select system call with the normal arguments,
dnl by attempting to compile and link a temporary program which
dnl calls it, being sure to include the appropriate headers.
dnl In the following, AC_CACHE_CHECK outputs the message
dnl "checking for select system call". If this check has been done
dnl before, it assigns the cached yes/no value to tecla_cv_select.
dnl Otherwise it uses AC_TRY_LINK() to attempt to compile and link
dnl the specified dummy program, and sets tecla_cv_select to yes
dnl or no, depending on whether this succeeds. Finally it caches
dnl the value of tecla_cv_select in the file config.cache, and
dnl writes "yes" or "no" to the terminal.

AC_CACHE_CHECK(for select system call, tecla_cv_select, [
  AC_TRY_LINK([
#ifdef HAVE_SELECT_H
#include <select.h>
#endif
#include <sys/time.h>
#include <sys/types.h>
#include <unistd.h>
  ], [
    fd_set fds;
    int nready;
    FD_ZERO(&fds);
    FD_SET(1, &fds);
    nready = select(2, &fds, &fds, &fds, NULL);
  ], tecla_cv_select=yes, tecla_cv_select=no)
])

dnl If the select function was available, arrange for HAVE_SELECT to
dnl be defined by CFLAGS.

if test $tecla_cv_select = yes; then
  AC_DEFINE(HAVE_SELECT)
fi

dnl Check if this system supports the system V pseudo terminal interface.

AC_CACHE_CHECK(for SysV pseudo-terminals, tecla_cv_sysv_pty, [
  AC_TRY_LINK([
#include <stdlib.h>
#include <unistd.h>
#include <stropts.h>
  ], [
    char *name = ptsname(0);
    int i1 = grantpt(0);
    int i2 = unlockpt(0);
    int i3 = ioctl(0, I_PUSH, "ptem");
    return 0;
  ], tecla_cv_sysv_pty=yes, tecla_cv_sysv_pty=no)
])

dnl If the system-V pseudo-terminal interface is available, arrange
dnl for HAVE_SYSV_PTY to be defined by CFLAGS.

if test $tecla_cv_sysv_pty = yes; then
  AC_DEFINE(HAVE_SYSV_PTY)
fi

dnl The following bourne shell case statement is where system
dnl dependencies can be added. 

case $target in
*dec-osf*)
  AC_DEFINE(_OSF_SOURCE)
  ;;
esac

dnl The following directive must always be the last line of any
dnl autoconf script. It causes autoconf to create the configure
dnl script, which for each argument of AC_OUTPUT, will look for a
dnl filename formed by appending ".in" to the argument, preprocess
dnl that file, replacing @VAR@ directives with the corresponding value
dnl of the specified shell variable VAR, as set above in this file,
dnl and write the resulting output to the filename given in the
dnl argument. Note that only shell variables that were exported above
dnl with the AC_SUBST() directive will be substituted in @VAR@
dnl directives (some macros like AC_PROG_CC also call AC_SUBST for you
dnl for the variables that they output).

AC_OUTPUT(Makefile)
